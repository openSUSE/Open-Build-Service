# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi hidden-definitions

# typed: autogenerated

class AMQ::BitSet
  ADDRESS_BITS_PER_WORD = ::T.let(nil, ::T.untyped)
  BITS_PER_WORD = ::T.let(nil, ::T.untyped)
  WORD_MASK = ::T.let(nil, ::T.untyped)
end

module AMQ::Endianness
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
end

module AMQ::Endianness
  extend ::T::Sig
end

AMQ::Hacks = AMQ::Pack

module AMQ::Pack
  INT16 = ::T.let(nil, ::T.untyped)
  UINT16_BE = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
end

module AMQ::Pack
  extend ::T::Sig
end

module AMQ::Protocol
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  EMPTY_STRING = ::T.let(nil, ::T.untyped)
  METHODS = ::T.let(nil, ::T.untyped)
  PACK_32BIT_FLOAT = ::T.let(nil, ::T.untyped)
  PACK_64BIT_FLOAT = ::T.let(nil, ::T.untyped)
  PACK_CHAR = ::T.let(nil, ::T.untyped)
  PACK_CHAR_UINT16_UINT32 = ::T.let(nil, ::T.untyped)
  PACK_INT64 = ::T.let(nil, ::T.untyped)
  PACK_INT64_BE = ::T.let(nil, ::T.untyped)
  PACK_INT8 = ::T.let(nil, ::T.untyped)
  PACK_UCHAR_UINT32 = ::T.let(nil, ::T.untyped)
  PACK_UINT16 = ::T.let(nil, ::T.untyped)
  PACK_UINT16_X2 = ::T.let(nil, ::T.untyped)
  PACK_UINT32 = ::T.let(nil, ::T.untyped)
  PACK_UINT32_X2 = ::T.let(nil, ::T.untyped)
  PACK_UINT64_BE = ::T.let(nil, ::T.untyped)
  PREAMBLE = ::T.let(nil, ::T.untyped)
  PROTOCOL_VERSION = ::T.let(nil, ::T.untyped)
  SSL_PORT = ::T.let(nil, ::T.untyped)
  TLS_PORT = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::AccessRefused
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::Basic
  DECODE_PROPERTIES = ::T.let(nil, ::T.untyped)
  DECODE_PROPERTIES_KEYS = ::T.let(nil, ::T.untyped)
  DECODE_PROPERTIES_TYPE = ::T.let(nil, ::T.untyped)
  PROPERTIES = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::ChannelError
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::CommandInvalid
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::ConnectionForced
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::ContentTooLarge
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::EmptyResponseError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::Error
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::Frame
  CHANNEL_RANGE = ::T.let(nil, ::T.untyped)
  CLASSES = ::T.let(nil, ::T.untyped)
  FINAL_OCTET = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
  TYPES_OPTIONS = ::T.let(nil, ::T.untyped)
  TYPES_REVERSE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::FrameError
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::InternalError
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::InvalidPath
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::NoConsumers
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::NoRoute
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::NotAllowed
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::NotFound
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::NotImplemented
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::PreconditionFailed
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::ResourceError
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::ResourceLocked
  VALUE = ::T.let(nil, ::T.untyped)
end

class AMQ::Protocol::SyntaxError
  VALUE = ::T.let(nil, ::T.untyped)
end

module AMQ::Protocol::TypeConstants
  BOOLEAN_FALSE = ::T.let(nil, ::T.untyped)
  BOOLEAN_TRUE = ::T.let(nil, ::T.untyped)
  TEN = ::T.let(nil, ::T.untyped)
  TYPE_32BIT_FLOAT = ::T.let(nil, ::T.untyped)
  TYPE_64BIT_FLOAT = ::T.let(nil, ::T.untyped)
  TYPE_ARRAY = ::T.let(nil, ::T.untyped)
  TYPE_BOOLEAN = ::T.let(nil, ::T.untyped)
  TYPE_BYTE = ::T.let(nil, ::T.untyped)
  TYPE_BYTE_ARRAY = ::T.let(nil, ::T.untyped)
  TYPE_DECIMAL = ::T.let(nil, ::T.untyped)
  TYPE_HASH = ::T.let(nil, ::T.untyped)
  TYPE_INTEGER = ::T.let(nil, ::T.untyped)
  TYPE_SIGNED_16BIT = ::T.let(nil, ::T.untyped)
  TYPE_SIGNED_64BIT = ::T.let(nil, ::T.untyped)
  TYPE_STRING = ::T.let(nil, ::T.untyped)
  TYPE_TIME = ::T.let(nil, ::T.untyped)
  TYPE_VOID = ::T.let(nil, ::T.untyped)
end

module AMQ::Protocol::TypeConstants
  extend ::T::Sig
end

class AMQ::Protocol::UnexpectedFrame
  VALUE = ::T.let(nil, ::T.untyped)
end

module AMQ::Protocol
  extend ::T::Sig
end

module AMQ::Settings
  AMQPS = ::T.let(nil, ::T.untyped)
end

module AMQ::Settings
  extend ::T::Sig
end

class AMQ::URI
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

module AMQ
  extend ::T::Sig
end

module ANSI
  CHART = ::T.let(nil, ::T.untyped)
  SPECIAL_CHART = ::T.let(nil, ::T.untyped)
end

module ANSI::Code
  ENDCODE = ::T.let(nil, ::T.untyped)
  PATTERN = ::T.let(nil, ::T.untyped)
end

module ANSI::Code
  extend ::T::Sig
end

module ANSI::Constants
  BLACK = ::T.let(nil, ::T.untyped)
  BLINK = ::T.let(nil, ::T.untyped)
  BLINK_OFF = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  BOLD_OFF = ::T.let(nil, ::T.untyped)
  BRIGHT = ::T.let(nil, ::T.untyped)
  BRIGHT_OFF = ::T.let(nil, ::T.untyped)
  CLEAN = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  CLEAR_EOL = ::T.let(nil, ::T.untyped)
  CLEAR_LEFT = ::T.let(nil, ::T.untyped)
  CLEAR_LINE = ::T.let(nil, ::T.untyped)
  CLEAR_RIGHT = ::T.let(nil, ::T.untyped)
  CLEAR_SCREEN = ::T.let(nil, ::T.untyped)
  CLR = ::T.let(nil, ::T.untyped)
  CLS = ::T.let(nil, ::T.untyped)
  CONCEAL = ::T.let(nil, ::T.untyped)
  CONCEALED = ::T.let(nil, ::T.untyped)
  CONCEAL_OFF = ::T.let(nil, ::T.untyped)
  CROSSED_OFF = ::T.let(nil, ::T.untyped)
  CROSSED_OUT_OFF = ::T.let(nil, ::T.untyped)
  CURSOR_HIDE = ::T.let(nil, ::T.untyped)
  CURSOR_SHOW = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  DARK = ::T.let(nil, ::T.untyped)
  DEFAULT_FONT = ::T.let(nil, ::T.untyped)
  DOUBLE_UNDERLINE = ::T.let(nil, ::T.untyped)
  ENCIRCLE = ::T.let(nil, ::T.untyped)
  ENCIRCLE_OFF = ::T.let(nil, ::T.untyped)
  FAINT = ::T.let(nil, ::T.untyped)
  FONT0 = ::T.let(nil, ::T.untyped)
  FONT1 = ::T.let(nil, ::T.untyped)
  FONT2 = ::T.let(nil, ::T.untyped)
  FONT3 = ::T.let(nil, ::T.untyped)
  FONT4 = ::T.let(nil, ::T.untyped)
  FONT5 = ::T.let(nil, ::T.untyped)
  FONT6 = ::T.let(nil, ::T.untyped)
  FONT7 = ::T.let(nil, ::T.untyped)
  FONT8 = ::T.let(nil, ::T.untyped)
  FONT9 = ::T.let(nil, ::T.untyped)
  FONT_DEFAULT = ::T.let(nil, ::T.untyped)
  FRAKTUR = ::T.let(nil, ::T.untyped)
  FRAKTUR_OFF = ::T.let(nil, ::T.untyped)
  FRAME = ::T.let(nil, ::T.untyped)
  FRAME_OFF = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  HIDE = ::T.let(nil, ::T.untyped)
  INVERSE = ::T.let(nil, ::T.untyped)
  INVERSE_OFF = ::T.let(nil, ::T.untyped)
  INVERT = ::T.let(nil, ::T.untyped)
  ITALIC = ::T.let(nil, ::T.untyped)
  ITALIC_OFF = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  NEGATIVE = ::T.let(nil, ::T.untyped)
  ON_BLACK = ::T.let(nil, ::T.untyped)
  ON_BLUE = ::T.let(nil, ::T.untyped)
  ON_CYAN = ::T.let(nil, ::T.untyped)
  ON_GREEN = ::T.let(nil, ::T.untyped)
  ON_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_RED = ::T.let(nil, ::T.untyped)
  ON_WHITE = ::T.let(nil, ::T.untyped)
  ON_YELLOW = ::T.let(nil, ::T.untyped)
  OVERLINE = ::T.let(nil, ::T.untyped)
  OVERLINE_OFF = ::T.let(nil, ::T.untyped)
  POSITIVE = ::T.let(nil, ::T.untyped)
  RAPID = ::T.let(nil, ::T.untyped)
  RAPID_BLINK = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  RESET = ::T.let(nil, ::T.untyped)
  RESTORE = ::T.let(nil, ::T.untyped)
  REVEAL = ::T.let(nil, ::T.untyped)
  REVERSE = ::T.let(nil, ::T.untyped)
  SAVE = ::T.let(nil, ::T.untyped)
  SHOW = ::T.let(nil, ::T.untyped)
  SLOW_BLINK = ::T.let(nil, ::T.untyped)
  STRIKE = ::T.let(nil, ::T.untyped)
  SWAP = ::T.let(nil, ::T.untyped)
  UNDERLINE = ::T.let(nil, ::T.untyped)
  UNDERLINE_OFF = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

module ANSI::Constants
  extend ::T::Sig
end

module ANSI
  extend ::T::Sig
end

module APIInstrumentation::ControllerRuntime::ClassMethods
  extend ::T::Sig
end

module APIInstrumentation::ControllerRuntime
  extend ::T::Sig
end

module APIInstrumentation
  extend ::T::Sig
end

module AST::Processor::Mixin
  extend ::T::Sig
end

module AST::Sexp
  extend ::T::Sig
end

module AST
  extend ::T::Sig
end

module AbstractController::AssetPaths
  extend ::T::Sig
end

module AbstractController::Caching::ConfigMethods
  extend ::T::Sig
end

module AbstractController::Caching::Fragments
  extend ::T::Sig
end

module AbstractController::Caching
  extend ::T::Sig
end

module AbstractController::Callbacks
  extend ::T::Sig
end

module AbstractController::Collector
  extend ::T::Sig
end

class AbstractController::DoubleRenderError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
end

module AbstractController::Helpers
  extend ::T::Sig
end

module AbstractController::Logger
  extend ::T::Sig
end

module AbstractController::Railties::RoutesHelpers
  extend ::T::Sig
end

module AbstractController::Railties
  extend ::T::Sig
end

module AbstractController::Rendering
  DEFAULT_PROTECTED_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
end

module AbstractController::Rendering
  extend ::T::Sig
end

module AbstractController::Translation
  extend ::T::Sig
end

module AbstractController::UrlFor
  extend ::T::Sig
end

module AbstractController
  extend ::T::Sig
end

module ActionCable
  INTERNAL = ::T.let(nil, ::T.untyped)
end

module ActionCable::Channel::Broadcasting::ClassMethods
  extend ::T::Sig
end

module ActionCable::Channel::Broadcasting
  extend ::T::Sig
end

module ActionCable::Channel::Callbacks::ClassMethods
  extend ::T::Sig
end

module ActionCable::Channel::Callbacks
  extend ::T::Sig
end

module ActionCable::Channel::Naming::ClassMethods
  extend ::T::Sig
end

module ActionCable::Channel::Naming
  extend ::T::Sig
end

module ActionCable::Channel::PeriodicTimers::ClassMethods
  extend ::T::Sig
end

module ActionCable::Channel::PeriodicTimers
  extend ::T::Sig
end

module ActionCable::Channel::Streams
  extend ::T::Sig
end

module ActionCable::Channel
  extend ::T::Sig
end

module ActionCable::Connection
end

module ActionCable::Connection::Authorization
  def reject_unauthorized_connection(); end
end

class ActionCable::Connection::Authorization::UnauthorizedError
end

class ActionCable::Connection::Authorization::UnauthorizedError
end

module ActionCable::Connection::Authorization
  extend ::T::Sig
end

class ActionCable::Connection::Base
  include ::ActionCable::Connection::Identification
  include ::ActionCable::Connection::InternalChannel
  include ::ActionCable::Connection::Authorization
  def beat(); end

  def close(); end

  def dispatch_websocket_message(websocket_message); end

  def env(); end

  def event_loop(*args, &block); end

  def identifiers(); end

  def identifiers=(val); end

  def identifiers?(); end

  def initialize(server, env, coder: T.unsafe(nil)); end

  def logger(); end

  def message_buffer(); end

  def on_close(reason, code); end

  def on_error(message); end

  def on_message(message); end

  def on_open(); end

  def process(); end

  def protocol(); end

  def pubsub(*args, &block); end

  def receive(websocket_message); end

  def send_async(method, *arguments); end

  def server(); end

  def statistics(); end

  def subscriptions(); end

  def transmit(cable_message); end

  def websocket(); end

  def worker_pool(); end
end

class ActionCable::Connection::Base
  extend ::ActionCable::Connection::Identification::ClassMethods
  def self.identifiers(); end

  def self.identifiers=(val); end

  def self.identifiers?(); end
end

class ActionCable::Connection::ClientSocket
  def alive?(); end

  def client_gone(); end

  def close(code=T.unsafe(nil), reason=T.unsafe(nil)); end

  def env(); end

  def initialize(env, event_target, event_loop, protocols); end

  def parse(data); end

  def protocol(); end

  def rack_response(); end

  def start_driver(); end

  def transmit(message); end

  def url(); end

  def write(data); end
  CLOSED = ::T.let(nil, ::T.untyped)
  CLOSING = ::T.let(nil, ::T.untyped)
  CONNECTING = ::T.let(nil, ::T.untyped)
  OPEN = ::T.let(nil, ::T.untyped)
end

class ActionCable::Connection::ClientSocket
  def self.determine_url(env); end

  def self.secure_request?(env); end
end

module ActionCable::Connection::Identification
  def connection_identifier(); end
end

module ActionCable::Connection::Identification::ClassMethods
  def identified_by(*identifiers); end
end

module ActionCable::Connection::Identification::ClassMethods
  extend ::T::Sig
end

module ActionCable::Connection::Identification
  extend ::ActiveSupport::Concern
  extend ::T::Sig
end

module ActionCable::Connection::InternalChannel
end

module ActionCable::Connection::InternalChannel
  extend ::ActiveSupport::Concern
  extend ::T::Sig
end

class ActionCable::Connection::MessageBuffer
  def append(message); end

  def buffered_messages(); end

  def connection(); end

  def initialize(connection); end

  def process!(); end

  def processing?(); end
end

class ActionCable::Connection::MessageBuffer
end

class ActionCable::Connection::Stream
  def close(); end

  def each(&callback); end

  def flush_write_buffer(); end

  def hijack_rack_socket(); end

  def initialize(event_loop, socket); end

  def receive(data); end

  def shutdown(); end

  def write(data); end
end

class ActionCable::Connection::Stream
end

class ActionCable::Connection::StreamEventLoop
  def attach(io, stream); end

  def detach(io, stream); end

  def post(task=T.unsafe(nil), &block); end

  def stop(); end

  def timer(interval, &block); end

  def writes_pending(io); end
end

class ActionCable::Connection::StreamEventLoop
end

class ActionCable::Connection::Subscriptions
  def add(data); end

  def connection(); end

  def execute_command(data); end

  def identifiers(); end

  def initialize(connection); end

  def logger(*args, &block); end

  def perform_action(data); end

  def remove(data); end

  def remove_subscription(subscription); end

  def subscriptions(); end

  def unsubscribe_from_all(); end
end

class ActionCable::Connection::Subscriptions
end

class ActionCable::Connection::TaggedLoggerProxy
  def add_tags(*tags); end

  def debug(message); end

  def error(message); end

  def fatal(message); end

  def info(message); end

  def initialize(logger, tags:); end

  def tag(logger); end

  def tags(); end

  def unknown(message); end

  def warn(message); end
end

class ActionCable::Connection::TaggedLoggerProxy
end

class ActionCable::Connection::WebSocket
  def alive?(); end

  def close(); end

  def initialize(env, event_target, event_loop, protocols: T.unsafe(nil)); end

  def possible?(); end

  def protocol(); end

  def rack_response(); end

  def transmit(data); end

  def websocket(); end
end

class ActionCable::Connection::WebSocket
end

module ActionCable::Connection
  extend ::ActiveSupport::Autoload
  extend ::T::Sig
end

module ActionCable::Helpers::ActionCableHelper
  extend ::T::Sig
end

module ActionCable::Helpers
  extend ::T::Sig
end

class ActionCable::RemoteConnections
  def initialize(server); end

  def server(); end

  def where(identifier); end
end

class ActionCable::RemoteConnections::RemoteConnection
  include ::ActionCable::Connection::InternalChannel
  include ::ActionCable::Connection::Identification
  def disconnect(); end

  def identifiers(); end

  def identifiers=(val); end

  def identifiers?(); end

  def initialize(server, ids); end

  def server(); end
end

class ActionCable::RemoteConnections::RemoteConnection::InvalidIdentifiersError
end

class ActionCable::RemoteConnections::RemoteConnection::InvalidIdentifiersError
end

class ActionCable::RemoteConnections::RemoteConnection
  extend ::ActionCable::Connection::Identification::ClassMethods
  def self.identifiers(); end

  def self.identifiers=(val); end

  def self.identifiers?(); end
end

class ActionCable::RemoteConnections
end

module ActionCable::Server::Broadcasting
  extend ::T::Sig
end

module ActionCable::Server::Connections
  BEAT_INTERVAL = ::T.let(nil, ::T.untyped)
end

module ActionCable::Server::Connections
  extend ::T::Sig
end

module ActionCable::Server::Worker::ActiveRecordConnectionManagement
  extend ::T::Sig
end

module ActionCable::Server
  extend ::T::Sig
end

module ActionCable::SubscriptionAdapter
end

class ActionCable::SubscriptionAdapter::Base
  def broadcast(channel, payload); end

  def initialize(server); end

  def logger(); end

  def server(); end

  def shutdown(); end

  def subscribe(channel, message_callback, success_callback=T.unsafe(nil)); end

  def unsubscribe(channel, message_callback); end
end

class ActionCable::SubscriptionAdapter::Base
end

module ActionCable::SubscriptionAdapter::ChannelPrefix
  def broadcast(channel, payload); end

  def subscribe(channel, callback, success_callback=T.unsafe(nil)); end

  def unsubscribe(channel, callback); end
end

module ActionCable::SubscriptionAdapter::ChannelPrefix
  extend ::T::Sig
end

class ActionCable::SubscriptionAdapter::SubscriberMap
  def add_channel(channel, on_success); end

  def add_subscriber(channel, subscriber, on_success); end

  def broadcast(channel, message); end

  def invoke_callback(callback, message); end

  def remove_channel(channel); end

  def remove_subscriber(channel, subscriber); end
end

class ActionCable::SubscriptionAdapter::SubscriberMap
end

module ActionCable::SubscriptionAdapter
  extend ::ActiveSupport::Autoload
  extend ::T::Sig
end

module ActionCable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionCable::VERSION
  extend ::T::Sig
end

module ActionCable
  extend ::T::Sig
end

class ActionController::API
  include ::ActionView::ViewPaths
  include ::AbstractController::Rendering
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::ActionController::Redirecting
  include ::ActionController::ApiRendering
  include ::ActionController::Rendering
  include ::ActionController::Renderers
  include ::ActionController::Renderers::All
  include ::ActionController::ConditionalGet
  include ::ActionController::Head
  include ::ActionController::BasicImplicitRender
  include ::ActiveSupport::Rescuable
  include ::ActionController::StrongParameters
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::ActionController::ForceSSL
  include ::ActionController::DataStreaming
  include ::ActionController::Rescue
  include ::ActionController::Instrumentation
  include ::ActionController::ParamsWrapper
  include ::ActionController::RespondWith
  include ::ActionDispatch::Routing::RouteSet::MountedHelpers
  include ::ActiveRecord::Railties::ControllerRuntime
  include ::APIInstrumentation::ControllerRuntime
  include ::Peek::ControllerHelpers
  include ::Rails::Timeago::Helper
  include ::InfluxDB::Rails::AirTrafficController
  include ::InfluxDB::Rails::Instrumentation
  def __callbacks(); end

  def __callbacks?(); end

  def _process_action_callbacks(); end

  def _renderers(); end

  def _renderers=(val); end

  def _renderers?(); end

  def _run_process_action_callbacks(&block); end

  def _view_paths(); end

  def _view_paths=(val); end

  def _view_paths?(); end

  def _wrapper_options(); end

  def _wrapper_options=(val); end

  def _wrapper_options?(); end

  def default_url_options(); end

  def default_url_options=(val); end

  def default_url_options?(); end

  def etaggers(); end

  def etaggers=(val); end

  def etaggers?(); end

  def logger(); end

  def logger=(value); end

  def mimes_for_respond_to(); end

  def mimes_for_respond_to=(val); end

  def mimes_for_respond_to?(); end

  def rescue_handlers(); end

  def rescue_handlers=(val); end

  def rescue_handlers?(); end

  def responder(); end

  def responder=(val); end

  def responder?(); end
  MODULES = ::T.let(nil, ::T.untyped)
end

class ActionController::API
  extend ::ActionController::Railties::Helpers
  extend ::APIInstrumentation::ControllerRuntime::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._process_action_callbacks(); end

  def self._process_action_callbacks=(value); end

  def self._renderers(); end

  def self._renderers=(val); end

  def self._renderers?(); end

  def self._view_paths(); end

  def self._view_paths=(val); end

  def self._view_paths?(); end

  def self._wrapper_options(); end

  def self._wrapper_options=(val); end

  def self._wrapper_options?(); end

  def self.default_url_options(); end

  def self.default_url_options=(val); end

  def self.default_url_options?(); end

  def self.etaggers(); end

  def self.etaggers=(val); end

  def self.etaggers?(); end

  def self.logger(); end

  def self.logger=(value); end

  def self.mimes_for_respond_to(); end

  def self.mimes_for_respond_to=(val); end

  def self.mimes_for_respond_to?(); end

  def self.rescue_handlers(); end

  def self.rescue_handlers=(val); end

  def self.rescue_handlers?(); end

  def self.responder(); end

  def self.responder=(val); end

  def self.responder?(); end

  def self.without_modules(*modules); end
end

module ActionController::ApiRendering
  def render_to_body(options=T.unsafe(nil)); end
end

module ActionController::ApiRendering
  extend ::ActiveSupport::Concern
  extend ::T::Sig
end

class ActionController::Base
  MODULES = ::T.let(nil, ::T.untyped)
  PROTECTED_IVARS = ::T.let(nil, ::T.untyped)
end

module ActionController::BasicImplicitRender
  extend ::T::Sig
end

module ActionController::Caching
  extend ::T::Sig
end

module ActionController::ConditionalGet
  extend ::T::Sig
end

module ActionController::ContentSecurityPolicy
  extend ::T::Sig
end

module ActionController::Cookies
  extend ::T::Sig
end

module ActionController::DataStreaming
  DEFAULT_SEND_FILE_DISPOSITION = ::T.let(nil, ::T.untyped)
  DEFAULT_SEND_FILE_TYPE = ::T.let(nil, ::T.untyped)
end

module ActionController::DataStreaming
  extend ::T::Sig
end

module ActionController::EtagWithFlash
  extend ::T::Sig
end

module ActionController::EtagWithTemplateDigest
  extend ::T::Sig
end

module ActionController::Flash
  extend ::T::Sig
end

module ActionController::ForceSSL
  ACTION_OPTIONS = ::T.let(nil, ::T.untyped)
  REDIRECT_OPTIONS = ::T.let(nil, ::T.untyped)
  URL_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActionController::ForceSSL
  extend ::T::Sig
end

module ActionController::FormBuilder
  extend ::T::Sig
end

module ActionController::Head
  extend ::T::Sig
end

module ActionController::Helpers
  extend ::T::Sig
end

module ActionController::HttpAuthentication::Basic::ControllerMethods
  extend ::T::Sig
end

module ActionController::HttpAuthentication::Basic
  extend ::T::Sig
end

module ActionController::HttpAuthentication::Digest::ControllerMethods
  extend ::T::Sig
end

module ActionController::HttpAuthentication::Digest
  extend ::T::Sig
end

module ActionController::HttpAuthentication::Token
  AUTHN_PAIR_DELIMITERS = ::T.let(nil, ::T.untyped)
  TOKEN_KEY = ::T.let(nil, ::T.untyped)
  TOKEN_REGEX = ::T.let(nil, ::T.untyped)
end

module ActionController::HttpAuthentication::Token::ControllerMethods
  extend ::T::Sig
end

module ActionController::HttpAuthentication::Token
  extend ::T::Sig
end

module ActionController::HttpAuthentication
  extend ::T::Sig
end

module ActionController::ImplicitRender
  extend ::T::Sig
end

module ActionController::Instrumentation
  extend ::T::Sig
end

module ActionController::Live::ClassMethods
  extend ::T::Sig
end

class ActionController::Live::SSE
  WHITELISTED_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActionController::Live
  extend ::T::Sig
end

class ActionController::LogSubscriber
  def exist_fragment?(event); end

  def expire_fragment(event); end

  def expire_page(event); end

  def halted_callback(event); end

  def process_action(event); end

  def read_fragment(event); end

  def redirect_to(event); end

  def send_data(event); end

  def send_file(event); end

  def start_processing(event); end

  def unpermitted_parameters(event); end

  def write_fragment(event); end

  def write_page(event); end
  INTERNAL_PARAMS = ::T.let(nil, ::T.untyped)
end

class ActionController::MiddlewareStack
  EXCLUDE = ::T.let(nil, ::T.untyped)
  INCLUDE = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
end

module ActionController::MimeResponds
  extend ::T::Sig
end

module ActionController::ParameterEncoding
  extend ::T::Sig
end

class ActionController::Parameters
  EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  PERMITTED_SCALAR_TYPES = ::T.let(nil, ::T.untyped)
end

module ActionController::ParamsWrapper
  EXCLUDE_PARAMETERS = ::T.let(nil, ::T.untyped)
end

module ActionController::ParamsWrapper
  extend ::T::Sig
end

module ActionController::Railties::Helpers
  extend ::T::Sig
end

module ActionController::Railties
  extend ::T::Sig
end

module ActionController::Redirecting
  extend ::T::Sig
end

class ActionController::Renderer
  DEFAULTS = ::T.let(nil, ::T.untyped)
  IDENTITY = ::T.let(nil, ::T.untyped)
  RACK_KEY_TRANSLATION = ::T.let(nil, ::T.untyped)
  RACK_VALUE_TRANSLATION = ::T.let(nil, ::T.untyped)
end

module ActionController::Renderers
  RENDERERS = ::T.let(nil, ::T.untyped)
end

module ActionController::Renderers::All
  extend ::T::Sig
end

module ActionController::Renderers
  extend ::T::Sig
end

module ActionController::Rendering
  RENDER_FORMATS_IN_PRIORITY = ::T.let(nil, ::T.untyped)
end

module ActionController::Rendering
  extend ::T::Sig
end

module ActionController::RequestForgeryProtection
  AUTHENTICITY_TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
  NULL_ORIGIN_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActionController::RequestForgeryProtection
  extend ::T::Sig
end

module ActionController::Rescue
  extend ::T::Sig
end

module ActionController::RespondWith
  extend ::T::Sig
end

class ActionController::Responder
  DEFAULT_ACTIONS_FOR_VERBS = ::T.let(nil, ::T.untyped)
end

class ActionController::SessionOverflowError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActionController::Streaming
  extend ::T::Sig
end

module ActionController::StrongParameters
  extend ::T::Sig
end

module ActionController::TemplateAssertions
  extend ::T::Sig
end

class ActionController::TestCase
  include ::Shoulda::Matchers::ActionController
  include ::Shoulda::Matchers::Routing
end

module ActionController::TestCase::Behavior::ClassMethods
  extend ::T::Sig
end

module ActionController::TestCase::Behavior
  extend ::T::Sig
end

class ActionController::TestCase
  extend ::Shoulda::Matchers::ActionController
  extend ::Shoulda::Matchers::Routing
end

class ActionController::TestRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
  ENCODER = ::T.let(nil, ::T.untyped)
end

class ActionController::TestSession
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActionController::Testing::Functional
  extend ::T::Sig
end

module ActionController::Testing
  extend ::T::Sig
end

module ActionController::UrlFor
  extend ::T::Sig
end

module ActionController
  extend ::T::Sig
end

class ActionDispatch::AssertionResponse
  def code(); end

  def code_and_name(); end

  def initialize(code_or_name); end

  def name(); end
  GENERIC_RESPONSE_CODES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::AssertionResponse
end

module ActionDispatch::Assertions::ResponseAssertions
  RESPONSE_PREDICATES = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Assertions::ResponseAssertions
  extend ::T::Sig
end

module ActionDispatch::Assertions::RoutingAssertions
  extend ::T::Sig
end

module ActionDispatch::Assertions
  extend ::T::Sig
end

class ActionDispatch::ContentSecurityPolicy::Middleware
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  POLICY = ::T.let(nil, ::T.untyped)
  POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::ContentSecurityPolicy::Request
  NONCE = ::T.let(nil, ::T.untyped)
  NONCE_GENERATOR = ::T.let(nil, ::T.untyped)
  POLICY = ::T.let(nil, ::T.untyped)
  POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::ContentSecurityPolicy::Request
  extend ::T::Sig
end

class ActionDispatch::Cookies
  AUTHENTICATED_ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  COOKIES_DIGEST = ::T.let(nil, ::T.untyped)
  COOKIES_ROTATIONS = ::T.let(nil, ::T.untyped)
  COOKIES_SERIALIZER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_CIPHER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  ENCRYPTED_SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  GENERATOR_KEY = ::T.let(nil, ::T.untyped)
  HTTP_HEADER = ::T.let(nil, ::T.untyped)
  MAX_COOKIE_SIZE = ::T.let(nil, ::T.untyped)
  SECRET_KEY_BASE = ::T.let(nil, ::T.untyped)
  SECRET_TOKEN = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_DIGEST = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  USE_AUTHENTICATED_COOKIE_ENCRYPTION = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Cookies::ChainedCookieJars
  extend ::T::Sig
end

class ActionDispatch::Cookies::CookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars
  DOMAIN_REGEXP = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Cookies::SerializedCookieJars
  MARSHAL_SIGNATURE = ::T.let(nil, ::T.untyped)
end

ActionDispatch::Cookies::SerializedCookieJars::SERIALIZER = ActiveSupport::MessageEncryptor::NullSerializer

module ActionDispatch::Cookies::SerializedCookieJars
  extend ::T::Sig
end

class ActionDispatch::DebugExceptions
  include ::InfluxDB::Rails::Middleware::HijackRenderException
  RESCUES_TEMPLATE_PATH = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::DebugLocks
  def call(env); end

  def initialize(app, path=T.unsafe(nil)); end
end

class ActionDispatch::DebugLocks
end

class ActionDispatch::Flash
  KEY = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Flash::RequestMethods
  extend ::T::Sig
end

module ActionDispatch::Http::Cache::Request
  HTTP_IF_MODIFIED_SINCE = ::T.let(nil, ::T.untyped)
  HTTP_IF_NONE_MATCH = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::Cache::Request
  extend ::T::Sig
end

module ActionDispatch::Http::Cache::Response
  DATE = ::T.let(nil, ::T.untyped)
  DEFAULT_CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  LAST_MODIFIED = ::T.let(nil, ::T.untyped)
  MUST_REVALIDATE = ::T.let(nil, ::T.untyped)
  NO_CACHE = ::T.let(nil, ::T.untyped)
  PRIVATE = ::T.let(nil, ::T.untyped)
  PUBLIC = ::T.let(nil, ::T.untyped)
  SPECIAL_KEYS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::Cache::Response
  extend ::T::Sig
end

module ActionDispatch::Http::Cache
  extend ::T::Sig
end

module ActionDispatch::Http::FilterParameters
  ENV_MATCH = ::T.let(nil, ::T.untyped)
  KV_RE = ::T.let(nil, ::T.untyped)
  NULL_ENV_FILTER = ::T.let(nil, ::T.untyped)
  NULL_PARAM_FILTER = ::T.let(nil, ::T.untyped)
  PAIR_RE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::FilterParameters
  extend ::T::Sig
end

module ActionDispatch::Http::FilterRedirect
  FILTERED = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::FilterRedirect
  extend ::T::Sig
end

class ActionDispatch::Http::Headers
  CGI_VARIABLES = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  HTTP_HEADER = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::MimeNegotiation
  BROWSER_LIKE_ACCEPTS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::MimeNegotiation
  extend ::T::Sig
end

class ActionDispatch::Http::ParameterFilter
  FILTERED = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::Parameters
  DEFAULT_PARSERS = ::T.let(nil, ::T.untyped)
  PARAMETERS_KEY = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::Parameters
  extend ::T::Sig
end

module ActionDispatch::Http::URL
  HOST_REGEXP = ::T.let(nil, ::T.untyped)
  IP_HOST_REGEXP = ::T.let(nil, ::T.untyped)
  PROTOCOL_REGEXP = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::URL
  extend ::T::Sig
end

module ActionDispatch::Http
  extend ::T::Sig
end

module ActionDispatch::Integration::RequestHelpers
  extend ::T::Sig
end

module ActionDispatch::Integration::Runner
  APP_SESSIONS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Integration::Runner
  extend ::T::Sig
end

class ActionDispatch::Integration::Session
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Integration::RequestHelpers
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Integration
  extend ::T::Sig
end

module ActionDispatch::IntegrationTest::Behavior
  extend ::T::Sig
end

module ActionDispatch::IntegrationTest::UrlOptions
  extend ::T::Sig
end

class ActionDispatch::Journey::Format
  ESCAPE_PATH = ::T.let(nil, ::T.untyped)
  ESCAPE_SEGMENT = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Formatter::RegexCaseComparator
  DEFAULT_INPUT = ::T.let(nil, ::T.untyped)
  DEFAULT_REGEX = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Formatter::RegexCaseComparator
  extend ::T::Sig
end

class ActionDispatch::Journey::GTG::Builder
  DUMMY = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::GTG
  extend ::T::Sig
end

module ActionDispatch::Journey::NFA::Dot
  extend ::T::Sig
end

module ActionDispatch::Journey::NFA
  extend ::T::Sig
end

class ActionDispatch::Journey::Nodes::Symbol
  DEFAULT_EXP = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Nodes
  extend ::T::Sig
end

class ActionDispatch::Journey::Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Path
  extend ::T::Sig
end

module ActionDispatch::Journey::Route::VerbMatchers
  VERBS = ::T.let(nil, ::T.untyped)
  VERB_TO_CLASS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Route::VerbMatchers
  extend ::T::Sig
end

class ActionDispatch::Journey::Router::Utils
  ENCODER = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Router::Utils::UriEncoder
  ALPHA = ::T.let(nil, ::T.untyped)
  DEC2HEX = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODE = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  SEGMENT = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  US_ASCII = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Dot
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Each
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::FunctionalVisitor
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::String
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Visitor
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Visitors
  extend ::T::Sig
end

module ActionDispatch::Journey
  extend ::T::Sig
end

class ActionDispatch::RemoteIp
  TRUSTED_PROXIES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Request
  include ::VoightKampff::Methods
  include ::ActionDispatch::Flash::RequestMethods
  ACTION_DISPATCH_REQUEST_ID = ::T.let(nil, ::T.untyped)
  ENV_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_LOOKUP = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  RFC2518 = ::T.let(nil, ::T.untyped)
  RFC2616 = ::T.let(nil, ::T.untyped)
  RFC3253 = ::T.let(nil, ::T.untyped)
  RFC3648 = ::T.let(nil, ::T.untyped)
  RFC3744 = ::T.let(nil, ::T.untyped)
  RFC4791 = ::T.let(nil, ::T.untyped)
  RFC5323 = ::T.let(nil, ::T.untyped)
  RFC5789 = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::RequestId
  X_REQUEST_ID = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Response
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE_PARSER = ::T.let(nil, ::T.untyped)
  LOCATION = ::T.let(nil, ::T.untyped)
  NO_CONTENT_CODES = ::T.let(nil, ::T.untyped)
  NullContentTypeHeader = ::T.let(nil, ::T.untyped)
  SET_COOKIE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  SEPARATORS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper
  URL_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Base
  extend ::T::Sig
end

module ActionDispatch::Routing::Mapper::Concerns
  extend ::T::Sig
end

class ActionDispatch::Routing::Mapper::Constraints
  CALL = ::T.let(nil, ::T.untyped)
  SERVE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::CustomUrls
  extend ::T::Sig
end

module ActionDispatch::Routing::Mapper::HttpHelpers
  extend ::T::Sig
end

class ActionDispatch::Routing::Mapper::Mapping
  ANCHOR_CHARACTERS_REGEX = ::T.let(nil, ::T.untyped)
  JOINED_SEPARATORS = ::T.let(nil, ::T.untyped)
  OPTIONAL_FORMAT_REGEX = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Resources
  CANONICAL_ACTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_OPTIONS = ::T.let(nil, ::T.untyped)
  VALID_ON_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Resources
  extend ::T::Sig
end

class ActionDispatch::Routing::Mapper::Scope
  NULL = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_METHOD_SCOPES = ::T.let(nil, ::T.untyped)
  RESOURCE_SCOPES = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Scoping
  POISON = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Scoping
  extend ::T::Sig
end

class ActionDispatch::Routing::PathRedirect
  URL_PARTS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::PolymorphicRoutes
  extend ::T::Sig
end

module ActionDispatch::Routing::Redirection
  extend ::T::Sig
end

class ActionDispatch::Routing::RouteSet
  DEFAULT_CONFIG = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  RESERVED_OPTIONS = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteSet::Generator
  PARAMETERIZE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::RouteSet::MountedHelpers
  def _main_app(); end

  def _peek(); end

  def main_app(); end

  def peek(); end
end

module ActionDispatch::Routing::RouteSet::MountedHelpers
  extend ::T::Sig
end

class ActionDispatch::Routing::RouteWrapper
  include ::Sprockets::Rails::RouteWrapper
  def assets_prefix(); end

  def assets_prefix=(val); end

  def assets_prefix?(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteWrapper
  def self.assets_prefix(); end

  def self.assets_prefix=(val); end

  def self.assets_prefix?(); end
end

class ActionDispatch::Routing::RoutesProxy
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _routes(); end

  def default_url_options(); end

  def default_url_options=(val); end

  def default_url_options?(); end

  def initialize(routes, scope, helpers, script_namer=T.unsafe(nil)); end

  def routes(); end

  def routes=(routes); end

  def scope(); end

  def scope=(scope); end
end

class ActionDispatch::Routing::RoutesProxy
  def self.default_url_options(); end

  def self.default_url_options=(val); end

  def self.default_url_options?(); end
end

module ActionDispatch::Routing::UrlFor
  extend ::T::Sig
end

module ActionDispatch::Routing
  extend ::T::Sig
end

class ActionDispatch::SSL
  def call(env); end

  def initialize(app, redirect: T.unsafe(nil), hsts: T.unsafe(nil), secure_cookies: T.unsafe(nil)); end
  HSTS_EXPIRES_IN = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::SSL
  def self.default_hsts_options(); end
end

class ActionDispatch::Session::CacheStore
  def delete_session(env, sid, options); end

  def write_session(env, sid, session, options); end
end

class ActionDispatch::Session::CacheStore
end

module ActionDispatch::Session::Compatibility
  extend ::T::Sig
end

class ActionDispatch::Session::MemCacheStore
  include ::ActionDispatch::Session::Compatibility
  include ::ActionDispatch::Session::StaleSessionCheck
  include ::ActionDispatch::Session::SessionObject
end

class ActionDispatch::Session::MemCacheStore
end

module ActionDispatch::Session::SessionObject
  extend ::T::Sig
end

module ActionDispatch::Session::StaleSessionCheck
  extend ::T::Sig
end

module ActionDispatch::Session
  extend ::T::Sig
end

class ActionDispatch::ShowExceptions
  FAILSAFE_RESPONSE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::SystemTestCase
  include ::Capybara::DSL
  include ::Capybara::Minitest::Assertions
  include ::ActionDispatch::SystemTesting::TestHelpers::SetupAndTeardown
  include ::ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper
  include ::ActionDispatch::SystemTesting::TestHelpers::UndefMethods
end

class ActionDispatch::SystemTestCase
  def self.driven_by(driver, using: T.unsafe(nil), screen_size: T.unsafe(nil), options: T.unsafe(nil)); end

  def self.driver(); end

  def self.driver=(val); end

  def self.driver?(); end

  def self.start_application(); end
end

module ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper
  def take_failed_screenshot(); end

  def take_screenshot(); end
end

module ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper
  extend ::T::Sig
end

module ActionDispatch::SystemTesting::TestHelpers::SetupAndTeardown
  def after_teardown(); end

  def before_setup(); end

  def host!(host); end
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::SystemTesting::TestHelpers::SetupAndTeardown
  extend ::T::Sig
end

module ActionDispatch::SystemTesting::TestHelpers::UndefMethods
  METHODS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::SystemTesting::TestHelpers::UndefMethods
  extend ::ActiveSupport::Concern
  extend ::T::Sig
end

module ActionDispatch::TestProcess::FixtureFile
  extend ::T::Sig
end

module ActionDispatch::TestProcess
  extend ::T::Sig
end

class ActionDispatch::TestRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::TestResponse
  def error?(); end

  def initialize(*_); end

  def missing?(); end

  def parsed_body(); end

  def success?(); end
end

class ActionDispatch::TestResponse
  def self.from_response(response); end
end

module ActionDispatch
  extend ::T::Sig
end

class ActionMailer::Base
  PROTECTED_IVARS = ::T.let(nil, ::T.untyped)
end

class ActionMailer::Base::LateAttachmentsProxy
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ActionMailer::DeliveryMethods::ClassMethods
  extend ::T::Sig
end

module ActionMailer::DeliveryMethods
  extend ::T::Sig
end

class ActionMailer::InlinePreviewInterceptor
  PATTERN = ::T.let(nil, ::T.untyped)
end

class ActionMailer::LogSubscriber
  def deliver(event); end

  def process(event); end

  def receive(event); end
end

module ActionMailer::MailHelper
  extend ::T::Sig
end

class ActionMailer::MessageDelivery
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ActionMailer::Parameterized::ClassMethods
  extend ::T::Sig
end

class ActionMailer::Parameterized::MessageDelivery
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ActionMailer::Parameterized
  extend ::T::Sig
end

module ActionMailer::Previews::ClassMethods
  extend ::T::Sig
end

module ActionMailer::Previews
  extend ::T::Sig
end

module ActionMailer::Rescuable::ClassMethods
  extend ::T::Sig
end

module ActionMailer::Rescuable
  extend ::T::Sig
end

module ActionMailer::TestCase::Behavior::ClassMethods
  extend ::T::Sig
end

module ActionMailer::TestCase::Behavior
  extend ::T::Sig
end

module ActionMailer::TestCase::ClearTestDeliveries
  extend ::T::Sig
end

module ActionMailer::TestHelper
  extend ::T::Sig
end

module ActionMailer::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionMailer::VERSION
  extend ::T::Sig
end

module ActionMailer
  extend ::T::Sig
end

module ActionPack::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionPack::VERSION
  extend ::T::Sig
end

module ActionPack
  extend ::T::Sig
end

module ActionView
  ENCODING_FLAG = ::T.let(nil, ::T.untyped)
end

class ActionView::ActionViewError
end

class ActionView::ActionViewError
end

class ActionView::Base
  include ::ActionView::Context
  include ::ActionView::CompiledTemplates
  include ::ERB::Util
  include ::FontAwesome::Sass::Rails::ViewHelpers
  include ::ActionCable::Helpers::ActionCableHelper
  include ::Cocoon::ViewHelpers
  include ::Rails::Timeago::Helper
  include ::Sprockets::Rails::Helper
  include ::Sprockets::Rails::Utils
  include ::Haml::Helpers::ActionViewMods
  def assets_environment(); end

  def assets_environment=(val); end

  def assets_environment?(); end

  def assets_manifest(); end

  def assets_manifest=(val); end

  def assets_manifest?(); end

  def assets_precompile(); end

  def assets_precompile=(val); end

  def assets_precompile?(); end

  def assets_prefix(); end

  def assets_prefix=(val); end

  def assets_prefix?(); end

  def check_precompiled_asset(); end

  def check_precompiled_asset=(val); end

  def check_precompiled_asset?(); end

  def debug_assets(); end

  def debug_assets=(val); end

  def debug_assets?(); end

  def digest_assets(); end

  def digest_assets=(val); end

  def digest_assets?(); end

  def precompiled_asset_checker(); end

  def precompiled_asset_checker=(val); end

  def precompiled_asset_checker?(); end

  def resolve_assets_with(); end

  def resolve_assets_with=(val); end

  def resolve_assets_with?(); end

  def unknown_asset_fallback(); end

  def unknown_asset_fallback=(val); end

  def unknown_asset_fallback?(); end
end

class ActionView::Base
  def self.assets_environment(); end

  def self.assets_environment=(val); end

  def self.assets_environment?(); end

  def self.assets_manifest(); end

  def self.assets_manifest=(val); end

  def self.assets_manifest?(); end

  def self.assets_precompile(); end

  def self.assets_precompile=(val); end

  def self.assets_precompile?(); end

  def self.assets_prefix(); end

  def self.assets_prefix=(val); end

  def self.assets_prefix?(); end

  def self.check_precompiled_asset(); end

  def self.check_precompiled_asset=(val); end

  def self.check_precompiled_asset?(); end

  def self.debug_assets(); end

  def self.debug_assets=(val); end

  def self.debug_assets?(); end

  def self.digest_assets(); end

  def self.digest_assets=(val); end

  def self.digest_assets?(); end

  def self.precompiled_asset_checker(); end

  def self.precompiled_asset_checker=(val); end

  def self.precompiled_asset_checker?(); end

  def self.resolve_assets_with(); end

  def self.resolve_assets_with=(val); end

  def self.resolve_assets_with?(); end

  def self.unknown_asset_fallback(); end

  def self.unknown_asset_fallback=(val); end

  def self.unknown_asset_fallback?(); end
end

module ActionView::CollectionCaching
  extend ::T::Sig
end

module ActionView::CompiledTemplates
  extend ::T::Sig
end

module ActionView::Context
  extend ::T::Sig
end

class ActionView::DependencyTracker::ERBTracker
  EXPLICIT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  IDENTIFIER = ::T.let(nil, ::T.untyped)
  LAYOUT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  LAYOUT_HASH_KEY = ::T.let(nil, ::T.untyped)
  PARTIAL_HASH_KEY = ::T.let(nil, ::T.untyped)
  RENDER_ARGUMENTS = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  VARIABLE_OR_METHOD_CHAIN = ::T.let(nil, ::T.untyped)
end

module ActionView::Digestor::PerExecutionDigestCacheExpiry
  extend ::T::Sig
end

class ActionView::EncodingError
end

class ActionView::EncodingError
end

module ActionView::Helpers::ActiveModelHelper
  extend ::T::Sig
end

module ActionView::Helpers::AssetTagHelper
  extend ::T::Sig
end

module ActionView::Helpers::AssetUrlHelper
  ASSET_EXTENSIONS = ::T.let(nil, ::T.untyped)
  ASSET_PUBLIC_DIRECTORIES = ::T.let(nil, ::T.untyped)
  URI_REGEXP = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::AssetUrlHelper
  extend ::T::Sig
end

module ActionView::Helpers::AtomFeedHelper
  extend ::T::Sig
end

module ActionView::Helpers::CacheHelper
  extend ::T::Sig
end

module ActionView::Helpers::CaptureHelper
  extend ::T::Sig
end

module ActionView::Helpers::ControllerHelper
  CONTROLLER_DELEGATES = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::ControllerHelper
  extend ::T::Sig
end

module ActionView::Helpers::CspHelper
  extend ::T::Sig
end

module ActionView::Helpers::CsrfHelper
  extend ::T::Sig
end

module ActionView::Helpers::DateHelper
  MINUTES_IN_QUARTER_YEAR = ::T.let(nil, ::T.untyped)
  MINUTES_IN_THREE_QUARTERS_YEAR = ::T.let(nil, ::T.untyped)
  MINUTES_IN_YEAR = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::DateHelper
  extend ::T::Sig
end

module ActionView::Helpers::DebugHelper
  extend ::T::Sig
end

module ActionView::Helpers::FormHelper
  extend ::T::Sig
end

module ActionView::Helpers::FormOptionsHelper
  extend ::T::Sig
end

module ActionView::Helpers::FormTagHelper
  extend ::T::Sig
end

module ActionView::Helpers::JavaScriptHelper
  JS_ESCAPE_MAP = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::JavaScriptHelper
  extend ::T::Sig
end

module ActionView::Helpers::NumberHelper
  extend ::T::Sig
end

module ActionView::Helpers::OutputSafetyHelper
  extend ::T::Sig
end

module ActionView::Helpers::RecordTagHelper
  extend ::T::Sig
end

module ActionView::Helpers::RenderingHelper
  extend ::T::Sig
end

module ActionView::Helpers::SanitizeHelper
  extend ::T::Sig
end

module ActionView::Helpers::TagHelper
  BOOLEAN_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  DEFAULT_PRESERVE_OPTIONS = ::T.let(nil, ::T.untyped)
  PRE_CONTENT_STRINGS = ::T.let(nil, ::T.untyped)
  TAG_PREFIXES = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::TagHelper
  extend ::T::Sig
end

module ActionView::Helpers::TextHelper
  extend ::T::Sig
end

module ActionView::Helpers::TranslationHelper
  extend ::T::Sig
end

module ActionView::Helpers::UrlHelper
  BUTTON_TAG_METHOD_VERBS = ::T.let(nil, ::T.untyped)
  STRINGIFIED_COMMON_METHODS = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::UrlHelper
  extend ::T::Sig
end

module ActionView::Helpers
  extend ::T::Sig
end

module ActionView::Layouts
  extend ::T::Sig
end

class ActionView::LogSubscriber
  include ::Kaminari::ActionViewExtension::LogSubscriberSilencer
  def render_collection(event); end

  def render_template(event); end
  EMPTY = ::T.let(nil, ::T.untyped)
  VIEWS_PATTERN = ::T.let(nil, ::T.untyped)
end

module ActionView::LookupContext::Accessors
  DEFAULT_PROCS = ::T.let(nil, ::T.untyped)
end

module ActionView::LookupContext::Accessors
  extend ::T::Sig
end

module ActionView::LookupContext::DetailsCache
  extend ::T::Sig
end

module ActionView::LookupContext::ViewPaths
  extend ::T::Sig
end

class ActionView::MissingTemplate
  def initialize(paths, path, prefixes, partial, details, *_); end

  def path(); end
end

class ActionView::MissingTemplate
end

module ActionView::ModelNaming
  extend ::T::Sig
end

class ActionView::OutputBuffer
  def append=(value); end

  def initialize(*_); end

  def safe_append=(value); end

  def safe_expr_append=(val); end
end

class ActionView::OutputBuffer
end

class ActionView::OutputFlow
  def append(key, value); end

  def append!(key, value); end

  def content(); end

  def get(key); end

  def set(key, value); end
end

class ActionView::OutputFlow
end

class ActionView::PartialRenderer
  IDENTIFIER_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  OPTION_AS_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  PREFIXED_PARTIAL_NAMES = ::T.let(nil, ::T.untyped)
end

class ActionView::PathResolver
  DEFAULT_PATTERN = ::T.let(nil, ::T.untyped)
  EXTENSIONS = ::T.let(nil, ::T.untyped)
end

module ActionView::RecordIdentifier
  JOIN = ::T.let(nil, ::T.untyped)
  NEW = ::T.let(nil, ::T.untyped)
end

module ActionView::RecordIdentifier
  extend ::T::Sig
end

class ActionView::Renderer
  def cache_hits(); end

  def initialize(lookup_context); end

  def lookup_context(); end

  def lookup_context=(lookup_context); end

  def render(context, options); end

  def render_body(context, options); end

  def render_partial(context, options, &block); end

  def render_template(context, options); end
end

class ActionView::Renderer
end

module ActionView::Rendering
  extend ::T::Sig
end

class ActionView::Resolver::Cache
  KEY_BLOCK = ::T.let(nil, ::T.untyped)
  NAME_BLOCK = ::T.let(nil, ::T.untyped)
  NO_TEMPLATES = ::T.let(nil, ::T.untyped)
  PARTIAL_BLOCK = ::T.let(nil, ::T.untyped)
  PREFIX_BLOCK = ::T.let(nil, ::T.untyped)
end

module ActionView::RoutingUrlFor
  extend ::T::Sig
end

class ActionView::StreamingBuffer
  def <<(value); end

  def append=(value); end

  def concat(value); end

  def html_safe(); end

  def initialize(block); end

  def safe_append=(value); end

  def safe_concat(value); end
end

class ActionView::StreamingBuffer
end

class ActionView::StreamingFlow
  def initialize(view, fiber); end
end

class ActionView::StreamingFlow
end

class ActionView::StreamingTemplateRenderer
end

class ActionView::StreamingTemplateRenderer::Body
  def each(&block); end

  def initialize(&start); end
end

class ActionView::StreamingTemplateRenderer::Body
end

class ActionView::StreamingTemplateRenderer
end

class ActionView::Template
  Finalizer = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Error
  def annoted_source_code(); end

  def file_name(); end

  def initialize(template); end

  def line_number(); end

  def source_extract(indentation=T.unsafe(nil), output=T.unsafe(nil)); end

  def sub_template_message(); end

  def sub_template_of(template_path); end
  SOURCE_CODE_RADIUS = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Error
end

class ActionView::Template::HTML
  def formats(); end

  def identifier(); end

  def initialize(string, type=T.unsafe(nil)); end

  def render(*args); end

  def to_str(); end

  def type(); end

  def type=(type); end
end

class ActionView::Template::HTML
end

class ActionView::Template::Handlers::ERB
  ENCODING_TAG = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Handlers::ERB::Erubi
  BLOCK_EXPR = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Handlers::NokogiriBuilder
  def default_format(); end

  def default_format=(val); end

  def default_format?(); end
end

class ActionView::Template::Handlers::NokogiriBuilder
  def self.default_format(); end

  def self.default_format=(val); end

  def self.default_format?(); end
end

module ActionView::Template::Handlers
  extend ::T::Sig
end

class ActionView::Template::Text
  def formats(); end

  def identifier(); end

  def initialize(string); end

  def render(*args); end

  def to_str(); end

  def type(); end

  def type=(type); end
end

class ActionView::Template::Text
end

class ActionView::Template::Types::Type
  SET = ::T.let(nil, ::T.untyped)
end

ActionView::TemplateError = ActionView::Template::Error

class ActionView::TemplateRenderer
  def render(context, options); end
end

class ActionView::TemplateRenderer
end

class ActionView::TestCase
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::AbstractController::Helpers
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper
  include ::ActionView::Helpers
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RecordTagHelper
  include ::ActionView::Helpers::RenderingHelper
  include ::ActiveSupport::Testing::ConstantLookup
  include ::ActionView::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionController::TemplateAssertions
  include ::ActionView::Context
  include ::ActionView::CompiledTemplates
  include ::ActionView::RecordIdentifier
  include ::ActionView::ModelNaming
  include ::ActionView::RoutingUrlFor
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _helper_methods(); end

  def _helper_methods=(val); end

  def _helper_methods?(); end

  def _helpers(); end

  def _helpers=(val); end

  def _helpers?(); end

  def debug_missing_translation(); end

  def debug_missing_translation=(obj); end
end

module ActionView::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionController::TemplateAssertions
  include ::ActionView::Context
  include ::ActionView::CompiledTemplates
  include ::ActionView::RecordIdentifier
  include ::ActionView::ModelNaming
  include ::ActionView::RoutingUrlFor
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _routes(); end

  def config(); end

  def controller(); end

  def controller=(controller); end

  def lookup_context(*args, &block); end

  def output_buffer(); end

  def output_buffer=(output_buffer); end

  def render(options=T.unsafe(nil), local_assigns=T.unsafe(nil), &block); end

  def rendered(); end

  def rendered=(rendered); end

  def rendered_views(); end

  def setup_with_controller(); end
  INTERNAL_IVARS = ::T.let(nil, ::T.untyped)
end

module ActionView::TestCase::Behavior::ClassMethods
  def determine_default_helper_class(name); end

  def helper_class(); end

  def helper_class=(helper_class); end

  def helper_method(*methods); end

  def new(*_); end

  def tests(helper_class); end
end

module ActionView::TestCase::Behavior::ClassMethods
  extend ::T::Sig
end

module ActionView::TestCase::Behavior::Locals
  def render(options=T.unsafe(nil), local_assigns=T.unsafe(nil)); end

  def rendered_views(); end

  def rendered_views=(rendered_views); end
end

module ActionView::TestCase::Behavior::Locals
  extend ::T::Sig
end

class ActionView::TestCase::Behavior::RenderedViewsCollection
  def add(view, locals); end

  def locals_for(view); end

  def rendered_views(); end

  def view_rendered?(view, expected_locals); end
end

class ActionView::TestCase::Behavior::RenderedViewsCollection
end

module ActionView::TestCase::Behavior
  extend ::ActiveSupport::Concern
  extend ::T::Sig
end

class ActionView::TestCase::TestController
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  def controller_path=(path); end

  def initialize(); end

  def params=(params); end
end

class ActionView::TestCase::TestController
  def self.controller_path=(controller_path); end
end

class ActionView::TestCase
  extend ::ActionView::TestCase::Behavior::ClassMethods
  def self._helper_methods(); end

  def self._helper_methods=(val); end

  def self._helper_methods?(); end

  def self._helpers(); end

  def self._helpers=(val); end

  def self._helpers?(); end

  def self.debug_missing_translation(); end

  def self.debug_missing_translation=(obj); end
end

module ActionView::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionView::VERSION
  extend ::T::Sig
end

module ActionView::ViewPaths
  extend ::T::Sig
end

class ActionView::WrongEncodingError
  def initialize(string, encoding); end
end

class ActionView::WrongEncodingError
end

module ActionView
  extend ::T::Sig
end

module ActiveJob::Arguments
  TYPE_WHITELIST = ::T.let(nil, ::T.untyped)
end

module ActiveJob::Arguments
  extend ::T::Sig
end

module ActiveJob::Callbacks
  extend ::ActiveSupport::Callbacks
  extend ::T::Sig
end

class ActiveJob::ConfiguredJob
  def initialize(job_class, options=T.unsafe(nil)); end

  def perform_later(*args); end

  def perform_now(*args); end
end

class ActiveJob::ConfiguredJob
end

module ActiveJob::Core
  extend ::T::Sig
end

module ActiveJob::Enqueuing
  extend ::T::Sig
end

module ActiveJob::Exceptions
  extend ::T::Sig
end

module ActiveJob::Execution
  extend ::T::Sig
end

module ActiveJob::Logging
  extend ::T::Sig
end

module ActiveJob::QueueAdapter
  extend ::T::Sig
end

class ActiveJob::QueueAdapters::AsyncAdapter::Scheduler
  DEFAULT_EXECUTOR_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveJob::QueueAdapters::InlineAdapter
  def enqueue(job); end

  def enqueue_at(*_); end
end

class ActiveJob::QueueAdapters::InlineAdapter
end

class ActiveJob::QueueAdapters::TestAdapter
  def enqueue(job); end

  def enqueue_at(job, timestamp); end

  def enqueued_jobs(); end

  def enqueued_jobs=(enqueued_jobs); end

  def filter(); end

  def filter=(filter); end

  def perform_enqueued_at_jobs(); end

  def perform_enqueued_at_jobs=(perform_enqueued_at_jobs); end

  def perform_enqueued_jobs(); end

  def perform_enqueued_jobs=(perform_enqueued_jobs); end

  def performed_jobs(); end

  def performed_jobs=(performed_jobs); end

  def reject(); end

  def reject=(reject); end
end

class ActiveJob::QueueAdapters::TestAdapter
end

module ActiveJob::QueueAdapters
  extend ::T::Sig
end

module ActiveJob::QueueName
  extend ::T::Sig
end

module ActiveJob::QueuePriority
  extend ::T::Sig
end

class ActiveJob::TestCase
  include ::ActiveJob::TestHelper
end

class ActiveJob::TestCase
end

module ActiveJob::TestHelper::TestQueueAdapter
  extend ::T::Sig
end

module ActiveJob::TestHelper
  extend ::T::Sig
end

module ActiveJob::Translation
  extend ::T::Sig
end

module ActiveJob::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveJob::VERSION
  extend ::T::Sig
end

module ActiveJob
  extend ::T::Sig
end

module ActiveModel::AttributeAssignment
  extend ::T::Sig
end

module ActiveModel::AttributeMethods
  CALL_COMPILABLE_REGEXP = ::T.let(nil, ::T.untyped)
  NAME_COMPILABLE_REGEXP = ::T.let(nil, ::T.untyped)
end

module ActiveModel::AttributeMethods::AttrNames
end

module ActiveModel::AttributeMethods::AttrNames
  extend ::T::Sig
  def self.set_name_cache(name, value); end
end

module ActiveModel::AttributeMethods::ClassMethods
  extend ::T::Sig
end

module ActiveModel::AttributeMethods
  extend ::T::Sig
end

class ActiveModel::AttributeMutationTracker
  OPTION_NOT_GIVEN = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Attributes
  def attributes(); end

  def initialize(*_); end
end

module ActiveModel::Attributes::ClassMethods
  def attribute(name, type=T.unsafe(nil), **options); end
end

module ActiveModel::Attributes::ClassMethods
  extend ::T::Sig
end

module ActiveModel::Attributes
  extend ::ActiveSupport::Concern
  extend ::T::Sig
end

module ActiveModel::Callbacks
  extend ::T::Sig
end

module ActiveModel::Conversion::ClassMethods
  extend ::T::Sig
end

module ActiveModel::Conversion
  extend ::T::Sig
end

class ActiveModel::Errors
  CALLBACKS_OPTIONS = ::T.let(nil, ::T.untyped)
  MESSAGE_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActiveModel::ForbiddenAttributesProtection
  extend ::T::Sig
end

module ActiveModel::Lint
end

module ActiveModel::Lint::Tests
  def test_errors_aref(); end

  def test_model_naming(); end

  def test_persisted?(); end

  def test_to_key(); end

  def test_to_param(); end

  def test_to_partial_path(); end
end

module ActiveModel::Lint::Tests
  extend ::T::Sig
end

module ActiveModel::Lint
  extend ::T::Sig
end

module ActiveModel::Model
  extend ::T::Sig
end

module ActiveModel::Naming
  extend ::T::Sig
end

module ActiveModel::SecurePassword
  MAX_PASSWORD_LENGTH_ALLOWED = ::T.let(nil, ::T.untyped)
end

module ActiveModel::SecurePassword::ClassMethods
  extend ::T::Sig
end

module ActiveModel::SecurePassword::InstanceMethodsOnActivation
  extend ::T::Sig
end

module ActiveModel::SecurePassword
  extend ::T::Sig
end

module ActiveModel::Serialization
  extend ::T::Sig
end

module ActiveModel::Serializers
  VERSION = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Serializers::JSON
  extend ::T::Sig
end

module ActiveModel::Serializers::Xml
  extend ::T::Sig
end

module ActiveModel::Serializers
  extend ::T::Sig
end

module ActiveModel::Translation
  extend ::T::Sig
end

class ActiveModel::Type::Boolean
  FALSE_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Date
  ISO_DATE = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Decimal
  BIGDECIMAL_PRECISION = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Type::Helpers::Mutable
  extend ::T::Sig
end

module ActiveModel::Type::Helpers::Numeric
  extend ::T::Sig
end

module ActiveModel::Type::Helpers::TimeValue
  ISO_DATETIME = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Type::Helpers::TimeValue
  extend ::T::Sig
end

module ActiveModel::Type::Helpers::Timezone
  extend ::T::Sig
end

module ActiveModel::Type::Helpers
  extend ::T::Sig
end

class ActiveModel::Type::Integer
  DEFAULT_LIMIT = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Type
  extend ::T::Sig
end

module ActiveModel::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveModel::VERSION
  extend ::T::Sig
end

module ActiveModel::Validations::Callbacks::ClassMethods
  extend ::T::Sig
end

module ActiveModel::Validations::Callbacks
  extend ::T::Sig
end

module ActiveModel::Validations::ClassMethods
  VALID_OPTIONS_FOR_VALIDATE = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Validations::ClassMethods
  extend ::T::Sig
end

module ActiveModel::Validations::Clusivity
  ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Validations::Clusivity
  extend ::T::Sig
end

module ActiveModel::Validations::HelperMethods
  extend ::T::Sig
end

class ActiveModel::Validations::LengthValidator
  CHECKS = ::T.let(nil, ::T.untyped)
  MESSAGES = ::T.let(nil, ::T.untyped)
  RESERVED_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Validations::NumericalityValidator
  CHECKS = ::T.let(nil, ::T.untyped)
  INTEGER_REGEX = ::T.let(nil, ::T.untyped)
  RESERVED_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Validations
  extend ::T::Sig
end

module ActiveModel
  extend ::T::Sig
end

module ActiveRecord::Acts::List::AddNewAtMethodDefiner
  extend ::T::Sig
end

module ActiveRecord::Acts::List::AuxMethodDefiner
  extend ::T::Sig
end

module ActiveRecord::Acts::List::CallbackDefiner
  extend ::T::Sig
end

module ActiveRecord::Acts::List::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Acts::List::InstanceMethods
  extend ::T::Sig
end

module ActiveRecord::Acts::List::NoUpdate::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Acts::List::NoUpdate
  extend ::T::Sig
end

module ActiveRecord::Acts::List::PositionColumnMethodDefiner
  extend ::T::Sig
end

module ActiveRecord::Acts::List::ScopeMethodDefiner
  extend ::T::Sig
end

module ActiveRecord::Acts::List::SequentialUpdatesMethodDefiner
  extend ::T::Sig
end

module ActiveRecord::Acts::List::TopOfListMethodDefiner
  extend ::T::Sig
end

module ActiveRecord::Acts::List
  extend ::T::Sig
end

module ActiveRecord::Acts::Tree
  extend ::T::Sig
end

module ActiveRecord::Acts
  extend ::T::Sig
end

module ActiveRecord::Aggregations::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Aggregations
  extend ::T::Sig
end

class ActiveRecord::Associations::AssociationScope
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Associations::AssociationScope::ReflectionProxy
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Associations::BelongsToPolymorphicAssociation
end

class ActiveRecord::Associations::BelongsToPolymorphicAssociation
end

class ActiveRecord::Associations::Builder::Association
  VALID_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Associations::Builder::CollectionAssociation
  CALLBACKS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Associations::Builder
  extend ::T::Sig
end

module ActiveRecord::Associations::ClassMethods
  extend ::T::Sig
end

class ActiveRecord::Associations::CollectionProxy
  include ::ThinkingSphinx::ActiveRecord::AssociationProxy
end

module ActiveRecord::Associations::ForeignAssociation
  extend ::T::Sig
end

class ActiveRecord::Associations::HasOneAssociation
  include ::ActiveRecord::Associations::ForeignAssociation
  def delete(method=T.unsafe(nil)); end

  def handle_dependency(); end

  def replace(record, save=T.unsafe(nil)); end
end

class ActiveRecord::Associations::HasOneAssociation
end

class ActiveRecord::Associations::HasOneThroughAssociation
  include ::ActiveRecord::Associations::ThroughAssociation
end

class ActiveRecord::Associations::HasOneThroughAssociation
end

class ActiveRecord::Associations::Preloader::Association
  def initialize(klass, owners, reflection, preload_scope); end

  def klass(); end

  def model(); end

  def owners(); end

  def preload_scope(); end

  def preloaded_records(); end

  def reflection(); end

  def run(preloader); end
end

class ActiveRecord::Associations::Preloader::Association
end

class ActiveRecord::Associations::Preloader::ThroughAssociation
end

class ActiveRecord::Associations::Preloader::ThroughAssociation
end

module ActiveRecord::Associations::ThroughAssociation
  extend ::T::Sig
end

module ActiveRecord::Associations
  extend ::T::Sig
end

module ActiveRecord::AttributeAssignment
  extend ::T::Sig
end

module ActiveRecord::AttributeDecorators::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::AttributeDecorators
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods
  BLACKLISTED_CLASS_METHODS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::AttributeMethods::AttrNames
  ATTR_07162756e647f59646 = ::T.let(nil, ::T.untyped)
  ATTR_0716373777f62746 = ::T.let(nil, ::T.untyped)
  ATTR_0716373777f62746f5469676563747 = ::T.let(nil, ::T.untyped)
  ATTR_07f637964796f6e6 = ::T.let(nil, ::T.untyped)
  ATTR_160796f55727c6 = ::T.let(nil, ::T.untyped)
  ATTR_1646d696e6e6f64756 = ::T.let(nil, ::T.untyped)
  ATTR_1646d696e6f556d61696c6 = ::T.let(nil, ::T.untyped)
  ATTR_164747279626f547970756f59646 = ::T.let(nil, ::T.untyped)
  ATTR_164747279626f5e616d6563707163656f59646 = ::T.let(nil, ::T.untyped)
  ATTR_16671696c61626c656 = ::T.let(nil, ::T.untyped)
  ATTR_16c6c6f677f557375627f547f6f5362756164756f586f6d656f50727f6a6563647 = ::T.let(nil, ::T.untyped)
  ATTR_16e6f6e697d6f65737 = ::T.let(nil, ::T.untyped)
  ATTR_265776a796c6c616f55727c6 = ::T.let(nil, ::T.untyped)
  ATTR_275616c6e616d656 = ::T.let(nil, ::T.untyped)
  ATTR_2756765687 = ::T.let(nil, ::T.untyped)
  ATTR_27567696374727164796f6e6 = ::T.let(nil, ::T.untyped)
  ATTR_27f6c656f59646 = ::T.let(nil, ::T.untyped)
  ATTR_36275616475646f51647 = ::T.let(nil, ::T.untyped)
  ATTR_368616e67656f50716373777f62746 = ::T.let(nil, ::T.untyped)
  ATTR_36c65616e65707f51666475627f546169737 = ::T.let(nil, ::T.untyped)
  ATTR_36c65616e65707f556d6074797f50727f6a656364737 = ::T.let(nil, ::T.untyped)
  ATTR_3747164756 = ::T.let(nil, ::T.untyped)
  ATTR_3786f677f55727c6 = ::T.let(nil, ::T.untyped)
  ATTR_46560727563616475646f50716373777f62746 = ::T.let(nil, ::T.untyped)
  ATTR_46560727563616475646f50716373777f62746f53716c647 = ::T.let(nil, ::T.untyped)
  ATTR_46560727563616475646f50716373777f62746f586163786f547970756 = ::T.let(nil, ::T.untyped)
  ATTR_465637362796074796f6e6 = ::T.let(nil, ::T.untyped)
  ATTR_4656661657c647f5163636563737f54696371626c65646 = ::T.let(nil, ::T.untyped)
  ATTR_4656661657c647f547271636b65627 = ::T.let(nil, ::T.untyped)
  ATTR_4696371626c656f5075726c6963786f566f627f5262716e636865637 = ::T.let(nil, ::T.untyped)
  ATTR_46963716c6c6f677f57627f65707f5362756164796f6e6 = ::T.let(nil, ::T.untyped)
  ATTR_46f677e6c6f61646f55727c6 = ::T.let(nil, ::T.untyped)
  ATTR_46f677e6c6f61646f5f6e6f54656d616e646 = ::T.let(nil, ::T.untyped)
  ATTR_478656d656 = ::T.let(nil, ::T.untyped)
  ATTR_479647c656 = ::T.let(nil, ::T.untyped)
  ATTR_47970756 = ::T.let(nil, ::T.untyped)
  ATTR_56d61696c6 = ::T.let(nil, ::T.untyped)
  ATTR_56e61626c656f56656473686 = ::T.let(nil, ::T.untyped)
  ATTR_56e666f6273656f50727f6a6563647f5b6569737 = ::T.let(nil, ::T.untyped)
  ATTR_57074616475646f51647 = ::T.let(nil, ::T.untyped)
  ATTR_5727c6 = ::T.let(nil, ::T.untyped)
  ATTR_57375627 = ::T.let(nil, ::T.untyped)
  ATTR_57375627f59646 = ::T.let(nil, ::T.untyped)
  ATTR_57e6c69637475646f50727f6a656364737f56696c6475627 = ::T.let(nil, ::T.untyped)
  ATTR_57e6c69637475646f50727f6a656364737f56696c6475627f5465637362796074796f6e6 = ::T.let(nil, ::T.untyped)
  ATTR_6716c65756 = ::T.let(nil, ::T.untyped)
  ATTR_6716c65756f536f657e647 = ::T.let(nil, ::T.untyped)
  ATTR_7627166716471627 = ::T.let(nil, ::T.untyped)
  ATTR_7627f65707f59646 = ::T.let(nil, ::T.untyped)
  ATTR_76c6f62616c6 = ::T.let(nil, ::T.untyped)
  ATTR_86474707f50727f68797 = ::T.let(nil, ::T.untyped)
  ATTR_86964656f507279667164756f5f6074796f6e637 = ::T.let(nil, ::T.untyped)
  ATTR_963737575637f557074616475646 = ::T.let(nil, ::T.untyped)
  ATTR_9637375756f5c6963747 = ::T.let(nil, ::T.untyped)
  ATTR_9676e6f62756f516574786f53756276796365637 = ::T.let(nil, ::T.untyped)
  ATTR_96e6f526564716 = ::T.let(nil, ::T.untyped)
  ATTR_96e6f527f6c6c6f65747 = ::T.let(nil, ::T.untyped)
  ATTR_97d607f55727c6 = ::T.let(nil, ::T.untyped)
  ATTR_b696e646 = ::T.let(nil, ::T.untyped)
  ATTR_c6162656c6 = ::T.let(nil, ::T.untyped)
  ATTR_c6163747f5c6f676765646f596e6f51647 = ::T.let(nil, ::T.untyped)
  ATTR_c6f67696e6 = ::T.let(nil, ::T.untyped)
  ATTR_c6f67696e6f5661696c6572756f536f657e647 = ::T.let(nil, ::T.untyped)
  ATTR_e616d656 = ::T.let(nil, ::T.untyped)
  ATTR_e6f6f50727f68797 = ::T.let(nil, ::T.untyped)
  ATTR_f62637f55727c6 = ::T.let(nil, ::T.untyped)
  ATTR_f677e65627f59646 = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::AttributeMethods::AttrNames
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods::BeforeTypeCast
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods::ClassMethods
  COLUMN_NAME_ORDER_WHITELIST = ::T.let(nil, ::T.untyped)
  COLUMN_NAME_WHITELIST = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::AttributeMethods::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  ID_ATTRIBUTE_METHODS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods::PrimaryKey
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods::Query
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods::Read::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods::Read
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods::Serialization::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods::Serialization
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  extend ::T::Sig
end

class ActiveRecord::AttributeMethods::TimeZoneConversion::TimeZoneConverter
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::AttributeMethods::TimeZoneConversion
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods::Write::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods::Write
  extend ::T::Sig
end

module ActiveRecord::AttributeMethods
  extend ::T::Sig
end

module ActiveRecord::Attributes::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Attributes
  extend ::T::Sig
end

module ActiveRecord::AutosaveAssociation::AssociationBuilderExtension
  extend ::T::Sig
end

module ActiveRecord::AutosaveAssociation::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::AutosaveAssociation
  extend ::T::Sig
end

class ActiveRecord::Base
  include ::GlobalID::Identification
  include ::Airbrake::Rails::ActiveRecord
  include ::ThinkingSphinx::ActiveRecord::Base
  include ::ActsAsTree
  include ::Bullet::SaveWithBulletSupport
end

module ActiveRecord::Base::DeepCloneable
  extend ::T::Sig
end

module ActiveRecord::Base::GeneratedAssociationMethods
  extend ::T::Sig
end

class ActiveRecord::Base
  extend ::ActsAsTree::ClassMethods
  extend ::ActiveStorage::Attached::Macros
end

module ActiveRecord::Batches
  ORDER_IGNORE_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Batches
  extend ::T::Sig
end

module ActiveRecord::Calculations
  extend ::T::Sig
end

module ActiveRecord::Callbacks
  CALLBACKS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Callbacks
  extend ::T::Sig
end

module ActiveRecord::Coders
  extend ::T::Sig
end

module ActiveRecord::CollectionCacheKey
  extend ::T::Sig
end

class ActiveRecord::ConcurrentMigrationError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
  RELEASE_LOCK_FAILED_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::ConnectionAdapters::DatabaseStatements
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
  SIMPLE_INT = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter
  ER_CANNOT_ADD_FOREIGN = ::T.let(nil, ::T.untyped)
  ER_CANNOT_CREATE_TABLE = ::T.let(nil, ::T.untyped)
  ER_DATA_TOO_LONG = ::T.let(nil, ::T.untyped)
  ER_DO_NOT_HAVE_DEFAULT = ::T.let(nil, ::T.untyped)
  ER_DUP_ENTRY = ::T.let(nil, ::T.untyped)
  ER_LOCK_DEADLOCK = ::T.let(nil, ::T.untyped)
  ER_LOCK_WAIT_TIMEOUT = ::T.let(nil, ::T.untyped)
  ER_NOT_NULL_VIOLATION = ::T.let(nil, ::T.untyped)
  ER_NO_REFERENCED_ROW_2 = ::T.let(nil, ::T.untyped)
  ER_OUT_OF_RANGE = ::T.let(nil, ::T.untyped)
  ER_QUERY_INTERRUPTED = ::T.let(nil, ::T.untyped)
  ER_QUERY_TIMEOUT = ::T.let(nil, ::T.untyped)
  NATIVE_DATABASE_TYPES = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::ConnectionAdapters::ColumnMethods
  extend ::T::Sig
end

module ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue
  extend ::T::Sig
end

module ActiveRecord::ConnectionAdapters::DatabaseLimits
  extend ::T::Sig
end

module ActiveRecord::ConnectionAdapters::DatabaseStatements
  extend ::T::Sig
end

module ActiveRecord::ConnectionAdapters::DetermineIfPreparableVisitor
  extend ::T::Sig
end

module ActiveRecord::ConnectionAdapters::MySQL::ColumnMethods
  extend ::T::Sig
end

module ActiveRecord::ConnectionAdapters::MySQL::DatabaseStatements
  extend ::T::Sig
end

module ActiveRecord::ConnectionAdapters::MySQL::Quoting
  extend ::T::Sig
end

module ActiveRecord::ConnectionAdapters::MySQL::SchemaStatements
  CHARSETS_OF_4BYTES_MAXLEN = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::ConnectionAdapters::MySQL::SchemaStatements
  extend ::T::Sig
end

class ActiveRecord::ConnectionAdapters::MySQL::TypeMetadata
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::ConnectionAdapters::MySQL
  extend ::T::Sig
end

class ActiveRecord::ConnectionAdapters::Mysql2Adapter
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
  extend ::T::Sig
end

module ActiveRecord::ConnectionAdapters::QueryCache
  extend ::T::Sig
end

module ActiveRecord::ConnectionAdapters::Quoting
  extend ::T::Sig
end

module ActiveRecord::ConnectionAdapters::Savepoints
  extend ::T::Sig
end

ActiveRecord::ConnectionAdapters::SchemaCreation = ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation

module ActiveRecord::ConnectionAdapters::SchemaStatements
  extend ::T::Sig
end

class ActiveRecord::ConnectionAdapters::StatementPool
  DEFAULT_STATEMENT_LIMIT = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::TransactionManager
  NULL_TRANSACTION = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::ConnectionAdapters
  extend ::T::Sig
end

module ActiveRecord::ConnectionHandling
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
  RAILS_ENV = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::ConnectionHandling
  extend ::T::Sig
end

module ActiveRecord::Core::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Core
  extend ::T::Sig
end

module ActiveRecord::CounterCache::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::CounterCache
  extend ::T::Sig
end

module ActiveRecord::DefineCallbacks::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::DefineCallbacks
  extend ::T::Sig
end

module ActiveRecord::Delegation::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Delegation::ClassSpecificRelation
  extend ::T::Sig
end

module ActiveRecord::Delegation::DelegateCache
  extend ::T::Sig
end

module ActiveRecord::Delegation
  extend ::T::Sig
end

module ActiveRecord::DynamicMatchers
  extend ::T::Sig
end

module ActiveRecord::Enum
  ENUM_CONFLICT_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Enum
  extend ::T::Sig
end

module ActiveRecord::Explain
  extend ::T::Sig
end

class ActiveRecord::ExplainRegistry
  def self.collect?(*args, &block); end
end

class ActiveRecord::ExplainSubscriber
  EXPLAINED_SQLS = ::T.let(nil, ::T.untyped)
  IGNORED_PAYLOADS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::FinderMethods
  def find_with_associations(); end
  ONE_AS_ONE = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::FinderMethods
  extend ::T::Sig
end

class ActiveRecord::FixtureSet
  MAX_ID = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Inheritance::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Inheritance
  extend ::T::Sig
end

module ActiveRecord::Integration::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Integration
  extend ::T::Sig
end

class ActiveRecord::InternalMetadata
  include ::ActiveRecord::InternalMetadata::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
end

module ActiveRecord::InternalMetadata::GeneratedAssociationMethods
end

module ActiveRecord::InternalMetadata::GeneratedAssociationMethods
  extend ::T::Sig
end

class ActiveRecord::InternalMetadata
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.[](key); end

  def self.[]=(key, value); end

  def self.create_table(); end

  def self.page(num=T.unsafe(nil)); end
end

module ActiveRecord::LegacyYamlAdapter::Rails41
  extend ::T::Sig
end

module ActiveRecord::LegacyYamlAdapter::Rails420
  extend ::T::Sig
end

module ActiveRecord::LegacyYamlAdapter
  extend ::T::Sig
end

class ActiveRecord::Locking::LockingType
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Locking::Optimistic
  extend ::T::Sig
end

module ActiveRecord::Locking::Pessimistic
  extend ::T::Sig
end

module ActiveRecord::Locking
  extend ::T::Sig
end

class ActiveRecord::LogSubscriber
  def sql(event); end
  IGNORE_PAYLOAD_NAMES = ::T.let(nil, ::T.untyped)
  RAILS_GEM_ROOT = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Migration
  MigrationFilenameRegexp = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Migration::CommandRecorder
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::Migration::CommandRecorder::StraightReversions
  def add_belongs_to(*args, &block); end

  def add_column(*args, &block); end

  def add_foreign_key(*args, &block); end

  def add_index(*args, &block); end

  def add_reference(*args, &block); end

  def add_timestamps(*args, &block); end

  def change_column(*args, &block); end

  def change_column_default(*args, &block); end

  def change_column_null(*args, &block); end

  def change_table(table_name, options=T.unsafe(nil)); end

  def commands(); end

  def commands=(commands); end

  def create_join_table(*args, &block); end

  def create_table(*args, &block); end

  def delegate(); end

  def delegate=(delegate); end

  def disable_extension(*args, &block); end

  def drop_join_table(*args, &block); end

  def drop_table(*args, &block); end

  def enable_extension(*args, &block); end

  def execute(*args, &block); end

  def execute_block(*args, &block); end

  def initialize(delegate=T.unsafe(nil)); end

  def inverse_of(command, args, &block); end

  def invert_add_belongs_to(args, &block); end

  def invert_remove_belongs_to(args, &block); end

  def record(*command, &block); end

  def remove_belongs_to(*args, &block); end

  def remove_column(*args, &block); end

  def remove_columns(*args, &block); end

  def remove_foreign_key(*args, &block); end

  def remove_index(*args, &block); end

  def remove_reference(*args, &block); end

  def remove_timestamps(*args, &block); end

  def rename_column(*args, &block); end

  def rename_index(*args, &block); end

  def rename_table(*args, &block); end

  def revert(); end

  def reverting(); end

  def reverting=(reverting); end

  def transaction(*args, &block); end
  ReversibleAndIrreversibleMethods = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Migration::CommandRecorder::StraightReversions
  def invert_add_column(args, &block); end

  def invert_add_reference(args, &block); end

  def invert_add_timestamps(args, &block); end

  def invert_create_join_table(args, &block); end

  def invert_create_table(args, &block); end

  def invert_disable_extension(args, &block); end

  def invert_drop_join_table(args, &block); end

  def invert_drop_table(args, &block); end

  def invert_enable_extension(args, &block); end

  def invert_execute_block(args, &block); end

  def invert_remove_column(args, &block); end

  def invert_remove_reference(args, &block); end

  def invert_remove_timestamps(args, &block); end

  def invert_transaction(args, &block); end
end

module ActiveRecord::Migration::CommandRecorder::StraightReversions
  extend ::T::Sig
end

class ActiveRecord::Migration::CommandRecorder
end

module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
  extend ::T::Sig
end

module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
  extend ::T::Sig
end

module ActiveRecord::Migration::Compatibility
  extend ::T::Sig
end

module ActiveRecord::Migration::JoinTable
  extend ::T::Sig
end

class ActiveRecord::Migrator
  MIGRATOR_SALT = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::ModelSchema::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::ModelSchema
  extend ::T::Sig
end

module ActiveRecord::NestedAttributes
  UNASSIGNABLE_KEYS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::NestedAttributes::ClassMethods
  REJECT_ALL_BLANK_PROC = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::NestedAttributes::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::NestedAttributes
  extend ::T::Sig
end

module ActiveRecord::NoTouching::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::NoTouching
  extend ::T::Sig
end

module ActiveRecord::NullRelation
  def any?(); end

  def calculate(operation, _column_name); end

  def delete(_id_or_array); end

  def delete_all(); end

  def empty?(); end

  def exists?(_conditions=T.unsafe(nil)); end

  def many?(); end

  def none?(); end

  def one?(); end

  def or(other); end

  def pluck(*column_names); end

  def to_sql(); end

  def update_all(_updates); end
end

module ActiveRecord::NullRelation
  extend ::T::Sig
end

module ActiveRecord::Persistence::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Persistence
  extend ::T::Sig
end

module ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate
  extend ::T::Sig
end

module ActiveRecord::QueryCache::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::QueryMethods
  DEFAULT_VALUES = ::T.let(nil, ::T.untyped)
  FROZEN_EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  FROZEN_EMPTY_HASH = ::T.let(nil, ::T.untyped)
  STRUCTURAL_OR_METHODS = ::T.let(nil, ::T.untyped)
  VALID_DIRECTIONS = ::T.let(nil, ::T.untyped)
  VALID_UNSCOPING_VALUES = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::QueryMethods
  extend ::T::Sig
end

module ActiveRecord::Querying
  extend ::T::Sig
end

module ActiveRecord::Railties::ControllerRuntime
  extend ::T::Sig
end

module ActiveRecord::Railties
  extend ::T::Sig
end

module ActiveRecord::ReadonlyAttributes::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::ReadonlyAttributes
  extend ::T::Sig
end

class ActiveRecord::Reflection::AssociationReflection
  INVALID_AUTOMATIC_INVERSE_OPTIONS = ::T.let(nil, ::T.untyped)
  VALID_AUTOMATIC_INVERSE_MACROS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Reflection::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Reflection
  extend ::T::Sig
end

class ActiveRecord::Relation
  include ::ActiveRecord::Delegation
  include ::ActiveRecord::Explain
  include ::ActiveRecord::Batches
  include ::ActiveRecord::QueryMethods
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveRecord::SpawnMethods
  include ::ActiveRecord::Calculations
  CLAUSE_METHODS = ::T.let(nil, ::T.untyped)
  INVALID_METHODS_FOR_DELETE_ALL = ::T.let(nil, ::T.untyped)
  MULTI_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  SINGLE_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  VALUE_METHODS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Relation::Merger
  NORMAL_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Relation::WhereClause
  ARRAY_WITH_EMPTY_STRING = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Sanitization::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Sanitization
  extend ::T::Sig
end

module ActiveRecord::SchemaMigration::GeneratedAssociationMethods
  extend ::T::Sig
end

module ActiveRecord::Scoping::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Scoping::Default
  extend ::T::Sig
end

module ActiveRecord::Scoping::Named
  extend ::T::Sig
end

class ActiveRecord::Scoping::ScopeRegistry
  VALID_SCOPE_TYPES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Scoping::ScopeRegistry
  def self.set_value_for(*args, &block); end

  def self.value_for(*args, &block); end
end

module ActiveRecord::Scoping
  extend ::T::Sig
end

module ActiveRecord::SecureToken::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::SecureToken
  extend ::T::Sig
end

module ActiveRecord::Serialization
  extend ::T::Sig
end

module ActiveRecord::SpawnMethods
  extend ::T::Sig
end

module ActiveRecord::Store::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Store
  extend ::T::Sig
end

module ActiveRecord::Suppressor::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Suppressor
  extend ::T::Sig
end

class ActiveRecord::SuppressorRegistry
  def self.suppressed(*args, &block); end
end

module ActiveRecord::Tasks::DatabaseTasks
  LOCAL_HOSTS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Tasks::DatabaseTasks
  extend ::T::Sig
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
  def charset(); end

  def collation(); end

  def connection(*args, &block); end

  def create(); end

  def drop(); end

  def establish_connection(*args, &block); end

  def initialize(configuration); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  def charset(); end

  def clear_active_connections!(*args, &block); end

  def collation(); end

  def connection(*args, &block); end

  def create(master_established=T.unsafe(nil)); end

  def drop(); end

  def establish_connection(*args, &block); end

  def initialize(configuration); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
  DEFAULT_ENCODING = ::T.let(nil, ::T.untyped)
  ON_ERROR_STOP_1 = ::T.let(nil, ::T.untyped)
  SQL_COMMENT_BEGIN = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  def charset(); end

  def connection(*args, &block); end

  def create(); end

  def drop(); end

  def establish_connection(*args, &block); end

  def initialize(configuration, root=T.unsafe(nil)); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
end

module ActiveRecord::Tasks
  extend ::T::Sig
end

module ActiveRecord::TestFixtures
  extend ::T::Sig
end

module ActiveRecord::Timestamp::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Timestamp
  extend ::T::Sig
end

module ActiveRecord::TouchLater
  extend ::T::Sig
end

module ActiveRecord::Transactions
  ACTIONS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Transactions::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Transactions
  extend ::T::Sig
end

module ActiveRecord::Translation
  extend ::T::Sig
end

ActiveRecord::Type::BigInteger = ActiveModel::Type::BigInteger

ActiveRecord::Type::Binary = ActiveModel::Type::Binary

ActiveRecord::Type::Decimal = ActiveModel::Type::Decimal

ActiveRecord::Type::Float = ActiveModel::Type::Float

ActiveRecord::Type::Helpers = ActiveModel::Type::Helpers

ActiveRecord::Type::Integer = ActiveModel::Type::Integer

module ActiveRecord::Type::Internal::Timezone
  extend ::T::Sig
end

module ActiveRecord::Type::Internal
  extend ::T::Sig
end

class ActiveRecord::Type::Serialized
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

ActiveRecord::Type::String = ActiveModel::Type::String

class ActiveRecord::Type::Time::Value
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Type
  extend ::T::Sig
end

module ActiveRecord::TypeCaster
  extend ::T::Sig
end

module ActiveRecord::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::VERSION
  extend ::T::Sig
end

module ActiveRecord::Validations::ClassMethods
  extend ::T::Sig
end

module ActiveRecord::Validations
  extend ::T::Sig
end

module ActiveRecord
  extend ::T::Sig
end

module ActiveStorage::Attached::Macros
  extend ::T::Sig
end

module ActiveStorage::Downloading
  extend ::T::Sig
end

class ActiveStorage::Service
  def delete(key); end

  def delete_prefixed(prefix); end

  def download(key); end

  def download_chunk(key, range); end

  def exist?(key); end

  def headers_for_direct_upload(key, filename:, content_type:, content_length:, checksum:); end

  def update_metadata(key, **metadata); end

  def upload(key, io, checksum: T.unsafe(nil), **options); end

  def url(key, expires_in:, disposition:, filename:, content_type:); end

  def url_expires_in(); end

  def url_expires_in=(val); end

  def url_expires_in?(); end

  def url_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:); end
end

class ActiveStorage::Service::Configurator
  def build(service_name); end

  def configurations(); end

  def initialize(configurations); end
end

class ActiveStorage::Service::Configurator
  def self.build(service_name, configurations); end
end

class ActiveStorage::Service
  extend ::ActiveSupport::Autoload
  def self.build(configurator:, service: T.unsafe(nil), **service_config); end

  def self.configure(service_name, configurations); end

  def self.url_expires_in(); end

  def self.url_expires_in=(val); end

  def self.url_expires_in?(); end
end

module ActiveStorage::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveStorage::VERSION
  extend ::T::Sig
end

module ActiveStorage
  extend ::T::Sig
end

module ActiveSupport::Autoload
  extend ::T::Sig
end

class ActiveSupport::BacktraceCleaner
  def add_filter(&block); end

  def add_silencer(&block); end

  def clean(backtrace, kind=T.unsafe(nil)); end

  def filter(backtrace, kind=T.unsafe(nil)); end

  def remove_filters!(); end

  def remove_silencers!(); end
end

class ActiveSupport::BacktraceCleaner
end

module ActiveSupport::Benchmarkable
  extend ::T::Sig
end

module ActiveSupport::BigDecimalWithDefaultFormat
  extend ::T::Sig
end

module ActiveSupport::Cache
  UNIVERSAL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::Entry
  DEFAULT_COMPRESS_LIMIT = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::FileStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
  def cache_path(); end

  def initialize(cache_path, options=T.unsafe(nil)); end
  DIR_FORMATTER = ::T.let(nil, ::T.untyped)
  EXCLUDED_DIRS = ::T.let(nil, ::T.untyped)
  FILENAME_MAX_SIZE = ::T.let(nil, ::T.untyped)
  FILEPATH_MAX_SIZE = ::T.let(nil, ::T.untyped)
  GITKEEP_FILES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::FileStore
end

class ActiveSupport::Cache::MemCacheStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
  include ::ActiveSupport::Cache::MemCacheStore::LocalCacheWithRaw
  ESCAPE_KEY_CHARS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache::MemCacheStore::LocalCacheWithRaw
  extend ::T::Sig
end

class ActiveSupport::Cache::MemoryStore
  PER_ENTRY_OVERHEAD = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::NullStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
end

class ActiveSupport::Cache::NullStore
end

module ActiveSupport::Cache::Strategy::LocalCache
  extend ::T::Sig
end

module ActiveSupport::Cache::Strategy
  extend ::T::Sig
end

module ActiveSupport::Cache
  extend ::T::Sig
end

module ActiveSupport::Callbacks
  CALLBACK_FILTER_TYPES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Callbacks
  extend ::T::Sig
end

module ActiveSupport::CompareWithRange
  extend ::T::Sig
end

module ActiveSupport::Concern
  extend ::T::Sig
end

module ActiveSupport::Concurrency
  extend ::T::Sig
end

module ActiveSupport::Configurable
  extend ::T::Sig
end

class ActiveSupport::CurrentAttributes
  include ::ActiveSupport::Callbacks
  def __callbacks(); end

  def __callbacks?(); end

  def _reset_callbacks(); end

  def _run_reset_callbacks(&block); end

  def attributes(); end

  def attributes=(attributes); end

  def reset(); end

  def set(set_attributes); end
end

class ActiveSupport::CurrentAttributes
  extend ::ActiveSupport::DescendantsTracker
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._reset_callbacks(); end

  def self._reset_callbacks=(value); end

  def self.attribute(*names); end

  def self.clear_all(); end

  def self.instance(); end

  def self.reset(*args, &block); end

  def self.reset_all(); end

  def self.resets(&block); end

  def self.set(*args, &block); end
end

module ActiveSupport::Dependencies
  Reference = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Dependencies::Blamable
  extend ::T::Sig
end

module ActiveSupport::Dependencies::Loadable
  extend ::T::Sig
end

module ActiveSupport::Dependencies::ModuleConstMissing
  extend ::T::Sig
end

module ActiveSupport::Dependencies
  extend ::T::Sig
end

class ActiveSupport::Deprecation
  def deprecation_horizon(); end

  def deprecation_horizon=(deprecation_horizon); end

  def initialize(deprecation_horizon=T.unsafe(nil), gem_name=T.unsafe(nil)); end
  DEFAULT_BEHAVIORS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Deprecation::Behavior
  extend ::T::Sig
end

module ActiveSupport::Deprecation::DeprecatedConstantAccessor
  extend ::T::Sig
end

module ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  extend ::T::Sig
end

module ActiveSupport::Deprecation::InstanceDelegator::OverrideDelegators
  extend ::T::Sig
end

module ActiveSupport::Deprecation::InstanceDelegator
  extend ::T::Sig
end

module ActiveSupport::Deprecation::MethodWrapper
  extend ::T::Sig
end

module ActiveSupport::Deprecation::Reporting
  RAILS_GEM_ROOT = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Deprecation::Reporting
  extend ::T::Sig
end

class ActiveSupport::Deprecation
  extend ::ActiveSupport::Deprecation::InstanceDelegator::OverrideDelegators
end

module ActiveSupport::DescendantsTracker
  extend ::T::Sig
end

class ActiveSupport::Digest
end

class ActiveSupport::Digest
  def self.hash_digest_class(); end

  def self.hash_digest_class=(klass); end

  def self.hexdigest(arg); end
end

class ActiveSupport::Duration
  PARTS = ::T.let(nil, ::T.untyped)
  PARTS_IN_SECONDS = ::T.let(nil, ::T.untyped)
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
  SECONDS_PER_HOUR = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MINUTE = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MONTH = ::T.let(nil, ::T.untyped)
  SECONDS_PER_WEEK = ::T.let(nil, ::T.untyped)
  SECONDS_PER_YEAR = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser
  def initialize(string); end

  def mode(); end

  def mode=(mode); end

  def parse!(); end

  def parts(); end

  def scanner(); end

  def sign(); end

  def sign=(sign); end
  COMMA = ::T.let(nil, ::T.untyped)
  DATE_COMPONENT = ::T.let(nil, ::T.untyped)
  DATE_COMPONENTS = ::T.let(nil, ::T.untyped)
  DATE_MARKER = ::T.let(nil, ::T.untyped)
  DATE_TO_PART = ::T.let(nil, ::T.untyped)
  PERIOD = ::T.let(nil, ::T.untyped)
  PERIOD_OR_COMMA = ::T.let(nil, ::T.untyped)
  SIGN_MARKER = ::T.let(nil, ::T.untyped)
  TIME_COMPONENT = ::T.let(nil, ::T.untyped)
  TIME_COMPONENTS = ::T.let(nil, ::T.untyped)
  TIME_MARKER = ::T.let(nil, ::T.untyped)
  TIME_TO_PART = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser
end

class ActiveSupport::Duration::ISO8601Serializer
  def initialize(duration, precision: T.unsafe(nil)); end

  def serialize(); end
end

class ActiveSupport::Duration::ISO8601Serializer
end

module ActiveSupport::EachTimeWithZone
  extend ::T::Sig
end

class ActiveSupport::EncryptedFile
  CIPHER = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::EventedFileUpdateChecker
  def execute(); end

  def execute_if_updated(); end

  def initialize(files, dirs=T.unsafe(nil), &block); end

  def updated?(); end
end

class ActiveSupport::EventedFileUpdateChecker::PathHelper
  def existing_parent(dir); end

  def filter_out_descendants(dirs); end

  def longest_common_subpath(paths); end

  def normalize_extension(ext); end

  def xpath(path); end
end

class ActiveSupport::EventedFileUpdateChecker::PathHelper
end

class ActiveSupport::EventedFileUpdateChecker
end

class ActiveSupport::ExecutionWrapper
  Null = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Gzip
end

class ActiveSupport::Gzip::Stream
end

class ActiveSupport::Gzip::Stream
end

module ActiveSupport::Gzip
  extend ::T::Sig
  def self.compress(source, level=T.unsafe(nil), strategy=T.unsafe(nil)); end

  def self.decompress(source); end
end

module ActiveSupport::IncludeTimeWithZone
  extend ::T::Sig
end

module ActiveSupport::Inflector
  extend ::T::Sig
end

module ActiveSupport::JSON
  DATETIME_REGEX = ::T.let(nil, ::T.untyped)
  DATE_REGEX = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::JSON::Encoding
  extend ::T::Sig
end

module ActiveSupport::JSON
  extend ::T::Sig
end

module ActiveSupport::LazyLoadHooks
  extend ::T::Sig
end

class ActiveSupport::LegacyKeyGenerator
  SECRET_MIN_LENGTH = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::LogSubscriber
  def colorize_logging(); end

  def colorize_logging=(obj); end

  def debug(progname=T.unsafe(nil), &block); end

  def error(progname=T.unsafe(nil), &block); end

  def fatal(progname=T.unsafe(nil), &block); end

  def info(progname=T.unsafe(nil), &block); end

  def logger(); end

  def unknown(progname=T.unsafe(nil), &block); end

  def warn(progname=T.unsafe(nil), &block); end
  BLACK = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::LoggerThreadSafeLevel
  extend ::T::Sig
end

module ActiveSupport::MarshalWithAutoloading
  extend ::T::Sig
end

class ActiveSupport::MessageEncryptor
  include ::ActiveSupport::Messages::Rotator::Encryptor
  include ::ActiveSupport::Messages::Rotator
end

module ActiveSupport::MessageEncryptor::NullSerializer
  extend ::T::Sig
end

module ActiveSupport::MessageEncryptor::NullVerifier
  extend ::T::Sig
end

ActiveSupport::MessageEncryptor::OpenSSLCipherError = OpenSSL::Cipher::CipherError

class ActiveSupport::MessageVerifier
  include ::ActiveSupport::Messages::Rotator::Verifier
  include ::ActiveSupport::Messages::Rotator
end

module ActiveSupport::Messages::Rotator::Encryptor
  extend ::T::Sig
end

module ActiveSupport::Messages::Rotator::Verifier
  extend ::T::Sig
end

module ActiveSupport::Messages::Rotator
  extend ::T::Sig
end

module ActiveSupport::Messages
  extend ::T::Sig
end

module ActiveSupport::Multibyte::Unicode
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SLAST = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  NORMALIZATION_FORMS = ::T.let(nil, ::T.untyped)
  UNICODE_VERSION = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Multibyte::Unicode::UnicodeDatabase
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Multibyte::Unicode
  extend ::T::Sig
end

module ActiveSupport::Multibyte
  extend ::T::Sig
end

module ActiveSupport::Notifications::Fanout::Subscribers
  extend ::T::Sig
end

module ActiveSupport::Notifications
  extend ::T::Sig
end

class ActiveSupport::NumberHelper::NumberConverter
  def execute(); end

  def initialize(number, options); end

  def namespace(); end

  def namespace=(val); end

  def namespace?(); end

  def number(); end

  def opts(); end

  def validate_float(); end

  def validate_float=(val); end

  def validate_float?(); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberConverter
  def self.convert(number, options); end

  def self.namespace(); end

  def self.namespace=(val); end

  def self.namespace?(); end

  def self.validate_float(); end

  def self.validate_float=(val); end

  def self.validate_float?(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
  def convert(); end
  DEFAULT_DELIMITER_REGEX = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
  def convert(); end
  DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
  INVERTED_DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
  def convert(); end
  STORAGE_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
end

class ActiveSupport::NumberHelper::RoundingHelper
  def digit_count(number); end

  def initialize(options); end

  def options(); end

  def round(number); end
end

class ActiveSupport::NumberHelper::RoundingHelper
end

module ActiveSupport::NumberHelper
  extend ::T::Sig
end

module ActiveSupport::NumericWithFormat
  extend ::T::Sig
end

module ActiveSupport::PerThreadRegistry
  extend ::T::Sig
end

module ActiveSupport::RangeWithFormat
  RANGE_FORMATS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::RangeWithFormat
  extend ::T::Sig
end

module ActiveSupport::Rescuable
  extend ::T::Sig
end

class ActiveSupport::SafeBuffer
  UNSAFE_STRING_METHODS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::SecurityUtils
  extend ::T::Sig
end

class ActiveSupport::Subscriber
  def finish(name, id, payload); end

  def patterns(); end

  def start(name, id, payload); end
end

module ActiveSupport::TaggedLogging::Formatter
  extend ::T::Sig
end

module ActiveSupport::TaggedLogging
  extend ::T::Sig
end

class ActiveSupport::TestCase
  include ::Shoulda::Matchers::ActiveModel
  include ::Shoulda::Matchers::ActiveRecord
  include ::ActiveSupport::Testing::SetupAndTeardown
end

class ActiveSupport::TestCase
  extend ::Shoulda::Matchers::ActiveModel
  extend ::Shoulda::Matchers::ActiveRecord
end

module ActiveSupport::Testing::Assertions
  UNTRACKED = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Testing::Assertions
  extend ::T::Sig
end

module ActiveSupport::Testing::ConstantLookup
  extend ::T::Sig
end

module ActiveSupport::Testing::Declarative
  extend ::T::Sig
end

module ActiveSupport::Testing::Deprecation
  extend ::T::Sig
end

module ActiveSupport::Testing::FileFixtures
  extend ::T::Sig
end

module ActiveSupport::Testing::Isolation::Forking
  extend ::T::Sig
end

module ActiveSupport::Testing::Isolation::Subprocess
  ORIG_ARGV = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Testing::Isolation::Subprocess
  extend ::T::Sig
end

module ActiveSupport::Testing::Isolation
  extend ::T::Sig
end

module ActiveSupport::Testing::SetupAndTeardown
  extend ::T::Sig
end

module ActiveSupport::Testing::Stream
  extend ::T::Sig
end

module ActiveSupport::Testing::TaggedLogging
  extend ::T::Sig
end

module ActiveSupport::Testing::TimeHelpers
  extend ::T::Sig
end

module ActiveSupport::Testing
  extend ::T::Sig
end

class ActiveSupport::TimeWithZone
  include ::DateAndTime::Compatibility
  PRECISIONS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TimeZone
  MAPPING = ::T.let(nil, ::T.untyped)
  UTC_OFFSET_WITHOUT_COLON = ::T.let(nil, ::T.untyped)
  UTC_OFFSET_WITH_COLON = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::ToJsonWithActiveSupportEncoder
  extend ::T::Sig
end

module ActiveSupport::Tryable
  extend ::T::Sig
end

module ActiveSupport::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::VERSION
  extend ::T::Sig
end

class ActiveSupport::XMLConverter
  DISALLOWED_TYPES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini
  DEFAULT_ENCODINGS = ::T.let(nil, ::T.untyped)
  FORMATTING = ::T.let(nil, ::T.untyped)
  PARSING = ::T.let(nil, ::T.untyped)
  TYPE_NAMES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini::FileLike
  extend ::T::Sig
end

module ActiveSupport::XmlMini
  extend ::T::Sig
end

module ActiveSupport::XmlMini_REXML
  CONTENT_KEY = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini_REXML
  extend ::T::Sig
end

module ActiveSupport
  extend ::T::Sig
end

module ActsAsTree
  VERSION = ::T.let(nil, ::T.untyped)
end

module ActsAsTree::ClassMethods
  extend ::T::Sig
end

module ActsAsTree::InstanceMethods
  extend ::T::Sig
end

module ActsAsTree::TreeView
  extend ::T::Sig
end

module ActsAsTree::TreeWalker
  extend ::T::Sig
end

module ActsAsTree
  extend ::T::Sig
end

class AddObsBranchSkipRepositoriesAttribute::AttribTypeModifiableBy
  include ::AddObsBranchSkipRepositoriesAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
end

module AddObsBranchSkipRepositoriesAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
end

module AddObsBranchSkipRepositoriesAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
  extend ::T::Sig
end

class AddTypeToProject::TmpDbProjectType
  include ::AddTypeToProject::TmpDbProjectType::GeneratedAssociationMethods
end

module AddTypeToProject::TmpDbProjectType::GeneratedAssociationMethods
end

module AddTypeToProject::TmpDbProjectType::GeneratedAssociationMethods
  extend ::T::Sig
end

class AddTypeToProject::TmpProject
  include ::AddTypeToProject::TmpProject::GeneratedAssociationMethods
end

module AddTypeToProject::TmpProject::GeneratedAssociationMethods
end

module AddTypeToProject::TmpProject::GeneratedAssociationMethods
  extend ::T::Sig
end

class AddWhenAttributeToBsRequest::TempBsRequest
  include ::AddWhenAttributeToBsRequest::TempBsRequest::GeneratedAssociationMethods
end

module AddWhenAttributeToBsRequest::TempBsRequest::GeneratedAssociationMethods
end

module AddWhenAttributeToBsRequest::TempBsRequest::GeneratedAssociationMethods
  extend ::T::Sig
end

module Addressable::IDNA
  ACE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  ACE_PREFIX = ::T.let(nil, ::T.untyped)
  COMPOSITION_TABLE = ::T.let(nil, ::T.untyped)
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  PUNYCODE_BASE = ::T.let(nil, ::T.untyped)
  PUNYCODE_DAMP = ::T.let(nil, ::T.untyped)
  PUNYCODE_DELIMITER = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_BIAS = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_N = ::T.let(nil, ::T.untyped)
  PUNYCODE_MAXINT = ::T.let(nil, ::T.untyped)
  PUNYCODE_PRINT_ASCII = ::T.let(nil, ::T.untyped)
  PUNYCODE_SKEW = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMAX = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMIN = ::T.let(nil, ::T.untyped)
  UNICODE_DATA = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_CANONICAL = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMBINING_CLASS = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMPATIBILITY = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_EXCLUSION = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_LOWERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_TITLECASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_UPPERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  UNICODE_TABLE = ::T.let(nil, ::T.untyped)
  UTF8_REGEX = ::T.let(nil, ::T.untyped)
  UTF8_REGEX_MULTIBYTE = ::T.let(nil, ::T.untyped)
end

module Addressable::IDNA
  extend ::T::Sig
end

class Addressable::Template
  EXPRESSION = ::T.let(nil, ::T.untyped)
  JOINERS = ::T.let(nil, ::T.untyped)
  LEADERS = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  VARIABLE_LIST = ::T.let(nil, ::T.untyped)
  VARNAME = ::T.let(nil, ::T.untyped)
  VARSPEC = ::T.let(nil, ::T.untyped)
end

class Addressable::URI
  EMPTY_STR = ::T.let(nil, ::T.untyped)
  NORMPATH = ::T.let(nil, ::T.untyped)
  PARENT = ::T.let(nil, ::T.untyped)
  PORT_MAPPING = ::T.let(nil, ::T.untyped)
  RULE_2A = ::T.let(nil, ::T.untyped)
  RULE_2B_2C = ::T.let(nil, ::T.untyped)
  RULE_2D = ::T.let(nil, ::T.untyped)
  RULE_PREFIXED_PARENT = ::T.let(nil, ::T.untyped)
  SELF_REF = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
  URIREGEX = ::T.let(nil, ::T.untyped)
end

module Addressable::URI::CharacterClasses
  ALPHA = ::T.let(nil, ::T.untyped)
  AUTHORITY = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  GEN_DELIMS = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  PCHAR = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
end

module Addressable::URI::CharacterClasses
  extend ::T::Sig
end

module Addressable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module Addressable::VERSION
  extend ::T::Sig
end

module Addressable
  extend ::T::Sig
end

class Addrinfo
  extend ::T::Sig
end

module Airbrake
  AIRBRAKE_RUBY_VERSION = ::T.let(nil, ::T.untyped)
  AIRBRAKE_VERSION = ::T.let(nil, ::T.untyped)
  JRUBY = ::T.let(nil, ::T.untyped)
  LOG_LABEL = ::T.let(nil, ::T.untyped)
end

class Airbrake::AirbrakeLogger
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Airbrake::Backtrace
  CODE_FRAME_LIMIT = ::T.let(nil, ::T.untyped)
end

module Airbrake::Backtrace::Patterns
  EXECJS = ::T.let(nil, ::T.untyped)
  GENERIC = ::T.let(nil, ::T.untyped)
  JAVA = ::T.let(nil, ::T.untyped)
  OCI = ::T.let(nil, ::T.untyped)
  RUBY = ::T.let(nil, ::T.untyped)
end

module Airbrake::Backtrace::Patterns
  extend ::T::Sig
end

module Airbrake::Backtrace
  extend ::T::Sig
end

class Airbrake::CodeHunk
  MAX_LINE_LEN = ::T.let(nil, ::T.untyped)
  NLINES = ::T.let(nil, ::T.untyped)
end

class Airbrake::Config::Validator
  REQUIRED_ID_MSG = ::T.let(nil, ::T.untyped)
  REQUIRED_KEY_MSG = ::T.let(nil, ::T.untyped)
  VALID_ENV_TYPES = ::T.let(nil, ::T.untyped)
  WRONG_ENV_TYPE_MSG = ::T.let(nil, ::T.untyped)
end

module Airbrake::FileCache
  MAX_SIZE = ::T.let(nil, ::T.untyped)
  MUTEX = ::T.let(nil, ::T.untyped)
end

module Airbrake::FileCache
  extend ::T::Sig
end

class Airbrake::FilterChain
  DEFAULT_FILTERS = ::T.let(nil, ::T.untyped)
  DEFAULT_WEIGHT = ::T.let(nil, ::T.untyped)
end

class Airbrake::Filters::GemRootFilter
  GEM_ROOT_LABEL = ::T.let(nil, ::T.untyped)
end

class Airbrake::Filters::GitLastCheckoutFilter
  MIN_HEAD_COLS = ::T.let(nil, ::T.untyped)
end

class Airbrake::Filters::GitRevisionFilter
  PREFIX = ::T.let(nil, ::T.untyped)
end

module Airbrake::Filters::KeysFilter
  FILTERABLE_CONTEXT_KEYS = ::T.let(nil, ::T.untyped)
  FILTERABLE_KEYS = ::T.let(nil, ::T.untyped)
  FILTERED = ::T.let(nil, ::T.untyped)
  VALID_PATTERN_CLASSES = ::T.let(nil, ::T.untyped)
end

module Airbrake::Filters::KeysFilter
  extend ::T::Sig
end

class Airbrake::Filters::RootDirectoryFilter
  PROJECT_ROOT_LABEL = ::T.let(nil, ::T.untyped)
end

class Airbrake::Filters::SystemExitFilter
  SYSTEM_EXIT_TYPE = ::T.let(nil, ::T.untyped)
end

class Airbrake::Filters::ThreadFilter
  IGNORE_PREFIX = ::T.let(nil, ::T.untyped)
  SAFE_CLASSES = ::T.let(nil, ::T.untyped)
end

module Airbrake::Filters
  extend ::T::Sig
end

class Airbrake::NestedException
  MAX_NESTED_EXCEPTIONS = ::T.let(nil, ::T.untyped)
end

class Airbrake::Notice
  CONTEXT = ::T.let(nil, ::T.untyped)
  DEFAULT_SEVERITY = ::T.let(nil, ::T.untyped)
  HOSTNAME = ::T.let(nil, ::T.untyped)
  JSON_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  MAX_NOTICE_SIZE = ::T.let(nil, ::T.untyped)
  NOTIFIER = ::T.let(nil, ::T.untyped)
  PAYLOAD_MAX_SIZE = ::T.let(nil, ::T.untyped)
  TRUNCATABLE_KEYS = ::T.let(nil, ::T.untyped)
  WRITABLE_KEYS = ::T.let(nil, ::T.untyped)
end

class Airbrake::Notifier
  INSPECT_TEMPLATE = ::T.let(nil, ::T.untyped)
  LOG_LABEL = ::T.let(nil, ::T.untyped)
end

class Airbrake::Rack::HttpHeadersFilter
  HTTP_HEADER_PREFIXES = ::T.let(nil, ::T.untyped)
end

class Airbrake::Rack::Middleware
  RACK_FILTERS = ::T.let(nil, ::T.untyped)
end

module Airbrake::Rack
  extend ::T::Sig
end

module Airbrake::Rails::ActionController
  extend ::T::Sig
end

module Airbrake::Rails::ActiveJob
  ADAPTERS = ::T.let(nil, ::T.untyped)
end

module Airbrake::Rails::ActiveJob
  extend ::T::Sig
end

module Airbrake::Rails::ActiveRecord
  extend ::T::Sig
end

module Airbrake::Rails
  extend ::T::Sig
end

module Airbrake::Response
  TOO_MANY_REQUESTS = ::T.let(nil, ::T.untyped)
  TRUNCATE_LIMIT = ::T.let(nil, ::T.untyped)
end

module Airbrake::Response
  extend ::T::Sig
end

module Airbrake::RouteSender::TDigestBigEndianness
  extend ::T::Sig
end

class Airbrake::SyncSender
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
end

class Airbrake::Truncator
  CIRCULAR = ::T.let(nil, ::T.untyped)
  CIRCULAR_TYPES = ::T.let(nil, ::T.untyped)
  ENCODING_OPTIONS = ::T.let(nil, ::T.untyped)
  TEMP_ENCODING = ::T.let(nil, ::T.untyped)
  TRUNCATED = ::T.let(nil, ::T.untyped)
end

module Airbrake
  extend ::T::Sig
end

module AjaxDatatablesRails
  VERSION = ::T.let(nil, ::T.untyped)
end

class AjaxDatatablesRails::Base
  GLOBAL_SEARCH_DELIMITER = ::T.let(nil, ::T.untyped)
end

class AjaxDatatablesRails::Datatable::Column
  DB_ADAPTER_TYPE_CAST = ::T.let(nil, ::T.untyped)
  TYPE_CAST_DEFAULT = ::T.let(nil, ::T.untyped)
  TYPE_CAST_MYSQL = ::T.let(nil, ::T.untyped)
  TYPE_CAST_ORACLE = ::T.let(nil, ::T.untyped)
  TYPE_CAST_SQLITE = ::T.let(nil, ::T.untyped)
end

module AjaxDatatablesRails::Datatable::Column::DateFilter
  RANGE_DELIMITER = ::T.let(nil, ::T.untyped)
end

module AjaxDatatablesRails::Datatable::Column::DateFilter
  extend ::T::Sig
end

module AjaxDatatablesRails::Datatable::Column::Order
  extend ::T::Sig
end

module AjaxDatatablesRails::Datatable::Column::Search
  EMPTY_VALUE = ::T.let(nil, ::T.untyped)
  LARGEST_PQ_INTEGER = ::T.let(nil, ::T.untyped)
  NOT_NULL_VALUE = ::T.let(nil, ::T.untyped)
  SMALLEST_PQ_INTEGER = ::T.let(nil, ::T.untyped)
end

module AjaxDatatablesRails::Datatable::Column::Search
  extend ::T::Sig
end

class AjaxDatatablesRails::Datatable::SimpleOrder
  DIRECTIONS = ::T.let(nil, ::T.untyped)
  DIRECTION_ASC = ::T.let(nil, ::T.untyped)
  DIRECTION_DESC = ::T.let(nil, ::T.untyped)
end

class AjaxDatatablesRails::Datatable::SimpleSearch
  TRUE_VALUE = ::T.let(nil, ::T.untyped)
end

module AjaxDatatablesRails::Datatable
  extend ::T::Sig
end

module AjaxDatatablesRails::ORM::ActiveRecord
  extend ::T::Sig
end

module AjaxDatatablesRails::ORM
  extend ::T::Sig
end

module AjaxDatatablesRails
  extend ::T::Sig
end

class Announcement
  include ::Announcement::GeneratedAssociationMethods
  def after_add_for_announcements_users(); end

  def after_add_for_announcements_users=(val); end

  def after_add_for_announcements_users?(); end

  def after_add_for_users(); end

  def after_add_for_users=(val); end

  def after_add_for_users?(); end

  def after_remove_for_announcements_users(); end

  def after_remove_for_announcements_users=(val); end

  def after_remove_for_announcements_users?(); end

  def after_remove_for_users(); end

  def after_remove_for_users=(val); end

  def after_remove_for_users?(); end

  def autosave_associated_records_for_announcements_users(*args); end

  def autosave_associated_records_for_users(*args); end

  def before_add_for_announcements_users(); end

  def before_add_for_announcements_users=(val); end

  def before_add_for_announcements_users?(); end

  def before_add_for_users(); end

  def before_add_for_users=(val); end

  def before_add_for_users?(); end

  def before_remove_for_announcements_users(); end

  def before_remove_for_announcements_users=(val); end

  def before_remove_for_announcements_users?(); end

  def before_remove_for_users(); end

  def before_remove_for_users=(val); end

  def before_remove_for_users?(); end

  def validate_associated_records_for_announcements_users(*args); end

  def validate_associated_records_for_users(*args); end
end

module Announcement::GeneratedAssociationMethods
  def user_ids(); end

  def user_ids=(ids); end

  def users(); end

  def users=(value); end
end

module Announcement::GeneratedAssociationMethods
  extend ::T::Sig
end

class Announcement
  def self.after_add_for_announcements_users(); end

  def self.after_add_for_announcements_users=(val); end

  def self.after_add_for_announcements_users?(); end

  def self.after_add_for_users(); end

  def self.after_add_for_users=(val); end

  def self.after_add_for_users?(); end

  def self.after_remove_for_announcements_users(); end

  def self.after_remove_for_announcements_users=(val); end

  def self.after_remove_for_announcements_users?(); end

  def self.after_remove_for_users(); end

  def self.after_remove_for_users=(val); end

  def self.after_remove_for_users?(); end

  def self.before_add_for_announcements_users(); end

  def self.before_add_for_announcements_users=(val); end

  def self.before_add_for_announcements_users?(); end

  def self.before_add_for_users(); end

  def self.before_add_for_users=(val); end

  def self.before_add_for_users?(); end

  def self.before_remove_for_announcements_users(); end

  def self.before_remove_for_announcements_users=(val); end

  def self.before_remove_for_announcements_users?(); end

  def self.before_remove_for_users(); end

  def self.before_remove_for_users=(val); end

  def self.before_remove_for_users?(); end
end

module ApplicationHelper
  extend ::T::Sig
end

class ApplicationRecord
  include ::ApplicationRecord::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
end

module ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAssociationMethods
  extend ::T::Sig
end

class ApplicationRecord
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

class Architecture
  include ::Architecture::GeneratedAssociationMethods
  def after_add_for_flags(); end

  def after_add_for_flags=(val); end

  def after_add_for_flags?(); end

  def after_add_for_repositories(); end

  def after_add_for_repositories=(val); end

  def after_add_for_repositories?(); end

  def after_add_for_repository_architectures(); end

  def after_add_for_repository_architectures=(val); end

  def after_add_for_repository_architectures?(); end

  def after_remove_for_flags(); end

  def after_remove_for_flags=(val); end

  def after_remove_for_flags?(); end

  def after_remove_for_repositories(); end

  def after_remove_for_repositories=(val); end

  def after_remove_for_repositories?(); end

  def after_remove_for_repository_architectures(); end

  def after_remove_for_repository_architectures=(val); end

  def after_remove_for_repository_architectures?(); end

  def autosave_associated_records_for_flags(*args); end

  def autosave_associated_records_for_repositories(*args); end

  def autosave_associated_records_for_repository_architectures(*args); end

  def before_add_for_flags(); end

  def before_add_for_flags=(val); end

  def before_add_for_flags?(); end

  def before_add_for_repositories(); end

  def before_add_for_repositories=(val); end

  def before_add_for_repositories?(); end

  def before_add_for_repository_architectures(); end

  def before_add_for_repository_architectures=(val); end

  def before_add_for_repository_architectures?(); end

  def before_remove_for_flags(); end

  def before_remove_for_flags=(val); end

  def before_remove_for_flags?(); end

  def before_remove_for_repositories(); end

  def before_remove_for_repositories=(val); end

  def before_remove_for_repositories?(); end

  def before_remove_for_repository_architectures(); end

  def before_remove_for_repository_architectures=(val); end

  def before_remove_for_repository_architectures?(); end

  def validate_associated_records_for_flags(*args); end

  def validate_associated_records_for_repositories(*args); end

  def validate_associated_records_for_repository_architectures(*args); end
end

module Architecture::GeneratedAssociationMethods
  def flag_ids(); end

  def flag_ids=(ids); end

  def flags(); end

  def flags=(value); end

  def repositories(); end

  def repositories=(value); end

  def repository_architecture_ids(); end

  def repository_architecture_ids=(ids); end

  def repository_architectures(); end

  def repository_architectures=(value); end

  def repository_ids(); end

  def repository_ids=(ids); end
end

module Architecture::GeneratedAssociationMethods
  extend ::T::Sig
end

class Architecture
  def self.after_add_for_flags(); end

  def self.after_add_for_flags=(val); end

  def self.after_add_for_flags?(); end

  def self.after_add_for_repositories(); end

  def self.after_add_for_repositories=(val); end

  def self.after_add_for_repositories?(); end

  def self.after_add_for_repository_architectures(); end

  def self.after_add_for_repository_architectures=(val); end

  def self.after_add_for_repository_architectures?(); end

  def self.after_remove_for_flags(); end

  def self.after_remove_for_flags=(val); end

  def self.after_remove_for_flags?(); end

  def self.after_remove_for_repositories(); end

  def self.after_remove_for_repositories=(val); end

  def self.after_remove_for_repositories?(); end

  def self.after_remove_for_repository_architectures(); end

  def self.after_remove_for_repository_architectures=(val); end

  def self.after_remove_for_repository_architectures?(); end

  def self.available(*args); end

  def self.before_add_for_flags(); end

  def self.before_add_for_flags=(val); end

  def self.before_add_for_flags?(); end

  def self.before_add_for_repositories(); end

  def self.before_add_for_repositories=(val); end

  def self.before_add_for_repositories?(); end

  def self.before_add_for_repository_architectures(); end

  def self.before_add_for_repository_architectures=(val); end

  def self.before_add_for_repository_architectures?(); end

  def self.before_remove_for_flags(); end

  def self.before_remove_for_flags=(val); end

  def self.before_remove_for_flags?(); end

  def self.before_remove_for_repositories(); end

  def self.before_remove_for_repositories=(val); end

  def self.before_remove_for_repositories?(); end

  def self.before_remove_for_repository_architectures(); end

  def self.before_remove_for_repository_architectures=(val); end

  def self.before_remove_for_repository_architectures?(); end

  def self.find_by_name(_name); end
end

module ArchitecturesControllerService
  extend ::T::Sig
end

module Arel
  VERSION = ::T.let(nil, ::T.untyped)
end

module Arel::AliasPredication
  extend ::T::Sig
end

Arel::Attribute = Arel::Attributes::Attribute

module Arel::Attributes
  extend ::T::Sig
end

module Arel::Collectors
  extend ::T::Sig
end

module Arel::Compatibility::Wheres::Value
  extend ::T::Sig
end

module Arel::Compatibility
  extend ::T::Sig
end

module Arel::Crud
  extend ::T::Sig
end

module Arel::Expressions
  extend ::T::Sig
end

module Arel::FactoryMethods
  extend ::T::Sig
end

module Arel::Math
  extend ::T::Sig
end

Arel::Node = Arel::Nodes::Node

module Arel::Nodes
  extend ::T::Sig
end

module Arel::OrderPredications
  extend ::T::Sig
end

module Arel::Predications
  extend ::T::Sig
end

class Arel::SelectManager
  STRING_OR_SYMBOL_CLASS = ::T.let(nil, ::T.untyped)
end

class Arel::Visitors::DepthFirst
  DISPATCH = ::T.let(nil, ::T.untyped)
end

class Arel::Visitors::PostgreSQL
  CUBE = ::T.let(nil, ::T.untyped)
  GROUPING_SET = ::T.let(nil, ::T.untyped)
  ROLLUP = ::T.let(nil, ::T.untyped)
end

class Arel::Visitors::ToSql
  AND = ::T.let(nil, ::T.untyped)
  COMMA = ::T.let(nil, ::T.untyped)
  DISTINCT = ::T.let(nil, ::T.untyped)
  GROUP_BY = ::T.let(nil, ::T.untyped)
  ORDER_BY = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  WHERE = ::T.let(nil, ::T.untyped)
  WINDOW = ::T.let(nil, ::T.untyped)
end

module Arel::Visitors
  extend ::T::Sig
end

module Arel::WindowPredications
  extend ::T::Sig
end

module Arel
  extend ::T::Sig
end

class ArgumentError
  extend ::T::Sig
end

class Array
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::JSON::Ext::Generator::GeneratorMethods::Array
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def abbrev(pattern=T.unsafe(nil)); end

  def append(*_); end

  def bsearch(); end

  def bsearch_index(); end

  def collect!(); end

  def dig(*_); end

  def flatten!(*_); end

  def pack(*_); end

  def prepend(*_); end

  def replace(_); end

  def shelljoin(); end

  def to_csv(**options); end

  def to_h(); end

end

class Array
  extend ::T::Sig
  def self.wrap(object); end
end

class Attrib
  include ::Attrib::GeneratedAssociationMethods
  def after_add_for_attrib_issues(); end

  def after_add_for_attrib_issues=(val); end

  def after_add_for_attrib_issues?(); end

  def after_add_for_issues(); end

  def after_add_for_issues=(val); end

  def after_add_for_issues?(); end

  def after_add_for_values(); end

  def after_add_for_values=(val); end

  def after_add_for_values?(); end

  def after_remove_for_attrib_issues(); end

  def after_remove_for_attrib_issues=(val); end

  def after_remove_for_attrib_issues?(); end

  def after_remove_for_issues(); end

  def after_remove_for_issues=(val); end

  def after_remove_for_issues?(); end

  def after_remove_for_values(); end

  def after_remove_for_values=(val); end

  def after_remove_for_values?(); end

  def autosave_associated_records_for_attrib_issues(*args); end

  def autosave_associated_records_for_attrib_type(*args); end

  def autosave_associated_records_for_issues(*args); end

  def autosave_associated_records_for_package(*args); end

  def autosave_associated_records_for_project(*args); end

  def autosave_associated_records_for_values(*args); end

  def before_add_for_attrib_issues(); end

  def before_add_for_attrib_issues=(val); end

  def before_add_for_attrib_issues?(); end

  def before_add_for_issues(); end

  def before_add_for_issues=(val); end

  def before_add_for_issues?(); end

  def before_add_for_values(); end

  def before_add_for_values=(val); end

  def before_add_for_values?(); end

  def before_remove_for_attrib_issues(); end

  def before_remove_for_attrib_issues=(val); end

  def before_remove_for_attrib_issues?(); end

  def before_remove_for_issues(); end

  def before_remove_for_issues=(val); end

  def before_remove_for_issues?(); end

  def before_remove_for_values(); end

  def before_remove_for_values=(val); end

  def before_remove_for_values?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_attrib_issues(*args); end

  def validate_associated_records_for_issues(*args); end

  def validate_associated_records_for_values(*args); end
end

module Attrib::GeneratedAssociationMethods
  def attrib_issue_ids(); end

  def attrib_issue_ids=(ids); end

  def attrib_issues(); end

  def attrib_issues=(value); end

  def attrib_type(); end

  def attrib_type=(value); end

  def build_attrib_type(*args, &block); end

  def build_package(*args, &block); end

  def build_project(*args, &block); end

  def create_attrib_type(*args, &block); end

  def create_attrib_type!(*args, &block); end

  def create_package(*args, &block); end

  def create_package!(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def issue_ids(); end

  def issue_ids=(ids); end

  def issues(); end

  def issues=(value); end

  def issues_attributes=(attributes); end

  def package(); end

  def package=(value); end

  def project(); end

  def project=(value); end

  def reload_attrib_type(); end

  def reload_package(); end

  def reload_project(); end

  def value_ids(); end

  def value_ids=(ids); end

  def values(); end

  def values=(value); end

  def values_attributes=(attributes); end
end

module Attrib::GeneratedAssociationMethods
  extend ::T::Sig
end

class Attrib
  def self.after_add_for_attrib_issues(); end

  def self.after_add_for_attrib_issues=(val); end

  def self.after_add_for_attrib_issues?(); end

  def self.after_add_for_issues(); end

  def self.after_add_for_issues=(val); end

  def self.after_add_for_issues?(); end

  def self.after_add_for_values(); end

  def self.after_add_for_values=(val); end

  def self.after_add_for_values?(); end

  def self.after_remove_for_attrib_issues(); end

  def self.after_remove_for_attrib_issues=(val); end

  def self.after_remove_for_attrib_issues?(); end

  def self.after_remove_for_issues(); end

  def self.after_remove_for_issues=(val); end

  def self.after_remove_for_issues?(); end

  def self.after_remove_for_values(); end

  def self.after_remove_for_values=(val); end

  def self.after_remove_for_values?(); end

  def self.before_add_for_attrib_issues(); end

  def self.before_add_for_attrib_issues=(val); end

  def self.before_add_for_attrib_issues?(); end

  def self.before_add_for_issues(); end

  def self.before_add_for_issues=(val); end

  def self.before_add_for_issues?(); end

  def self.before_add_for_values(); end

  def self.before_add_for_values=(val); end

  def self.before_add_for_values?(); end

  def self.before_remove_for_attrib_issues(); end

  def self.before_remove_for_attrib_issues=(val); end

  def self.before_remove_for_attrib_issues?(); end

  def self.before_remove_for_issues(); end

  def self.before_remove_for_issues=(val); end

  def self.before_remove_for_issues?(); end

  def self.before_remove_for_values(); end

  def self.before_remove_for_values=(val); end

  def self.before_remove_for_values?(); end
end

class AttribAllowedValue
  include ::AttribAllowedValue::GeneratedAssociationMethods
  def autosave_associated_records_for_attrib_type(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module AttribAllowedValue::GeneratedAssociationMethods
  def attrib_type(); end

  def attrib_type=(value); end

  def build_attrib_type(*args, &block); end

  def create_attrib_type(*args, &block); end

  def create_attrib_type!(*args, &block); end

  def reload_attrib_type(); end
end

module AttribAllowedValue::GeneratedAssociationMethods
  extend ::T::Sig
end

class AttribDefaultValue
  include ::AttribDefaultValue::GeneratedAssociationMethods
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def autosave_associated_records_for_attrib_type(*args); end

  def belongs_to_counter_cache_after_update(reflection); end

  def connection(*args, &block); end

  def destroyed_via_scope?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end
end

module AttribDefaultValue::GeneratedAssociationMethods
  def attrib_type(); end

  def attrib_type=(value); end

  def build_attrib_type(*args, &block); end

  def create_attrib_type(*args, &block); end

  def create_attrib_type!(*args, &block); end

  def reload_attrib_type(); end
end

module AttribDefaultValue::GeneratedAssociationMethods
  extend ::T::Sig
end

class AttribDefaultValue
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self.acts_as_list_top(); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.update_all_with_touch(updates); end
end

class AttribIssue
  include ::AttribIssue::GeneratedAssociationMethods
  def autosave_associated_records_for_attrib(*args); end

  def autosave_associated_records_for_issue(*args); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_issue(*args); end
end

module AttribIssue::GeneratedAssociationMethods
  def attrib(); end

  def attrib=(value); end

  def build_attrib(*args, &block); end

  def build_issue(*args, &block); end

  def create_attrib(*args, &block); end

  def create_attrib!(*args, &block); end

  def create_issue(*args, &block); end

  def create_issue!(*args, &block); end

  def issue(); end

  def issue=(value); end

  def issue_attributes=(attributes); end

  def reload_attrib(); end

  def reload_issue(); end
end

module AttribIssue::GeneratedAssociationMethods
  extend ::T::Sig
end

class AttribNamespace
  include ::AttribNamespace::GeneratedAssociationMethods
  def after_add_for_attrib_namespace_modifiable_bies(); end

  def after_add_for_attrib_namespace_modifiable_bies=(val); end

  def after_add_for_attrib_namespace_modifiable_bies?(); end

  def after_add_for_attrib_types(); end

  def after_add_for_attrib_types=(val); end

  def after_add_for_attrib_types?(); end

  def after_remove_for_attrib_namespace_modifiable_bies(); end

  def after_remove_for_attrib_namespace_modifiable_bies=(val); end

  def after_remove_for_attrib_namespace_modifiable_bies?(); end

  def after_remove_for_attrib_types(); end

  def after_remove_for_attrib_types=(val); end

  def after_remove_for_attrib_types?(); end

  def autosave_associated_records_for_attrib_namespace_modifiable_bies(*args); end

  def autosave_associated_records_for_attrib_types(*args); end

  def before_add_for_attrib_namespace_modifiable_bies(); end

  def before_add_for_attrib_namespace_modifiable_bies=(val); end

  def before_add_for_attrib_namespace_modifiable_bies?(); end

  def before_add_for_attrib_types(); end

  def before_add_for_attrib_types=(val); end

  def before_add_for_attrib_types?(); end

  def before_remove_for_attrib_namespace_modifiable_bies(); end

  def before_remove_for_attrib_namespace_modifiable_bies=(val); end

  def before_remove_for_attrib_namespace_modifiable_bies?(); end

  def before_remove_for_attrib_types(); end

  def before_remove_for_attrib_types=(val); end

  def before_remove_for_attrib_types?(); end

  def validate_associated_records_for_attrib_namespace_modifiable_bies(*args); end

  def validate_associated_records_for_attrib_types(*args); end
end

module AttribNamespace::GeneratedAssociationMethods
  def attrib_namespace_modifiable_bies(); end

  def attrib_namespace_modifiable_bies=(value); end

  def attrib_namespace_modifiable_by_ids(); end

  def attrib_namespace_modifiable_by_ids=(ids); end

  def attrib_type_ids(); end

  def attrib_type_ids=(ids); end

  def attrib_types(); end

  def attrib_types=(value); end
end

module AttribNamespace::GeneratedAssociationMethods
  extend ::T::Sig
end

class AttribNamespace
  def self.after_add_for_attrib_namespace_modifiable_bies(); end

  def self.after_add_for_attrib_namespace_modifiable_bies=(val); end

  def self.after_add_for_attrib_namespace_modifiable_bies?(); end

  def self.after_add_for_attrib_types(); end

  def self.after_add_for_attrib_types=(val); end

  def self.after_add_for_attrib_types?(); end

  def self.after_remove_for_attrib_namespace_modifiable_bies(); end

  def self.after_remove_for_attrib_namespace_modifiable_bies=(val); end

  def self.after_remove_for_attrib_namespace_modifiable_bies?(); end

  def self.after_remove_for_attrib_types(); end

  def self.after_remove_for_attrib_types=(val); end

  def self.after_remove_for_attrib_types?(); end

  def self.before_add_for_attrib_namespace_modifiable_bies(); end

  def self.before_add_for_attrib_namespace_modifiable_bies=(val); end

  def self.before_add_for_attrib_namespace_modifiable_bies?(); end

  def self.before_add_for_attrib_types(); end

  def self.before_add_for_attrib_types=(val); end

  def self.before_add_for_attrib_types?(); end

  def self.before_remove_for_attrib_namespace_modifiable_bies(); end

  def self.before_remove_for_attrib_namespace_modifiable_bies=(val); end

  def self.before_remove_for_attrib_namespace_modifiable_bies?(); end

  def self.before_remove_for_attrib_types(); end

  def self.before_remove_for_attrib_types=(val); end

  def self.before_remove_for_attrib_types?(); end

  def self.find_by_name(_name); end
end

class AttribNamespaceModifiableBy
  include ::AttribNamespaceModifiableBy::GeneratedAssociationMethods
  def autosave_associated_records_for_attrib_namespaces(*args); end

  def autosave_associated_records_for_group(*args); end

  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module AttribNamespaceModifiableBy::GeneratedAssociationMethods
  def attrib_namespaces(); end

  def attrib_namespaces=(value); end

  def build_attrib_namespaces(*args, &block); end

  def build_group(*args, &block); end

  def build_user(*args, &block); end

  def create_attrib_namespaces(*args, &block); end

  def create_attrib_namespaces!(*args, &block); end

  def create_group(*args, &block); end

  def create_group!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def group(); end

  def group=(value); end

  def reload_attrib_namespaces(); end

  def reload_group(); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module AttribNamespaceModifiableBy::GeneratedAssociationMethods
  extend ::T::Sig
end

class AttribPolicyTest
  def test_admin_can_crud_attrib(); end

  def test_group_can_crud_attrib_namespace(); end

  def test_group_can_crud_attrib_type(); end

  def test_role_can_crud_attrib_type(); end

  def test_user_can_crud_attrib_namespace(); end

  def test_user_can_crud_attrib_type(); end
end

class AttribTest
  def test_can_have_any_number_of_values(); end

  def test_find_by_container_and_fullname(); end

  def test_sets_values_from_default_values(); end

  def test_sets_values_from_default_values_and_validates_allowed_values_and_value_count(); end

  def test_should_have_an_attrib_type(); end

  def test_should_have_no_issues(); end

  def test_should_have_no_values(); end

  def test_should_have_one_object(); end

  def test_should_have_one_value(); end

  def test_should_return_container(); end

  def test_should_show_full_name(); end

  def test_validates_allowed_values(); end

  def test_values_editable(); end

  def test_values_removeable_values_addable(); end
end

class AttribType
  include ::AttribType::GeneratedAssociationMethods
  def after_add_for_allowed_values(); end

  def after_add_for_allowed_values=(val); end

  def after_add_for_allowed_values?(); end

  def after_add_for_attrib_type_modifiable_bies(); end

  def after_add_for_attrib_type_modifiable_bies=(val); end

  def after_add_for_attrib_type_modifiable_bies?(); end

  def after_add_for_attribs(); end

  def after_add_for_attribs=(val); end

  def after_add_for_attribs?(); end

  def after_add_for_default_values(); end

  def after_add_for_default_values=(val); end

  def after_add_for_default_values?(); end

  def after_remove_for_allowed_values(); end

  def after_remove_for_allowed_values=(val); end

  def after_remove_for_allowed_values?(); end

  def after_remove_for_attrib_type_modifiable_bies(); end

  def after_remove_for_attrib_type_modifiable_bies=(val); end

  def after_remove_for_attrib_type_modifiable_bies?(); end

  def after_remove_for_attribs(); end

  def after_remove_for_attribs=(val); end

  def after_remove_for_attribs?(); end

  def after_remove_for_default_values(); end

  def after_remove_for_default_values=(val); end

  def after_remove_for_default_values?(); end

  def autosave_associated_records_for_allowed_values(*args); end

  def autosave_associated_records_for_attrib_namespace(*args); end

  def autosave_associated_records_for_attrib_type_modifiable_bies(*args); end

  def autosave_associated_records_for_attribs(*args); end

  def autosave_associated_records_for_default_values(*args); end

  def before_add_for_allowed_values(); end

  def before_add_for_allowed_values=(val); end

  def before_add_for_allowed_values?(); end

  def before_add_for_attrib_type_modifiable_bies(); end

  def before_add_for_attrib_type_modifiable_bies=(val); end

  def before_add_for_attrib_type_modifiable_bies?(); end

  def before_add_for_attribs(); end

  def before_add_for_attribs=(val); end

  def before_add_for_attribs?(); end

  def before_add_for_default_values(); end

  def before_add_for_default_values=(val); end

  def before_add_for_default_values?(); end

  def before_remove_for_allowed_values(); end

  def before_remove_for_allowed_values=(val); end

  def before_remove_for_allowed_values?(); end

  def before_remove_for_attrib_type_modifiable_bies(); end

  def before_remove_for_attrib_type_modifiable_bies=(val); end

  def before_remove_for_attrib_type_modifiable_bies?(); end

  def before_remove_for_attribs(); end

  def before_remove_for_attribs=(val); end

  def before_remove_for_attribs?(); end

  def before_remove_for_default_values(); end

  def before_remove_for_default_values=(val); end

  def before_remove_for_default_values?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_allowed_values(*args); end

  def validate_associated_records_for_attrib_type_modifiable_bies(*args); end

  def validate_associated_records_for_attribs(*args); end

  def validate_associated_records_for_default_values(*args); end
end

module AttribType::GeneratedAssociationMethods
  def allowed_value_ids(); end

  def allowed_value_ids=(ids); end

  def allowed_values(); end

  def allowed_values=(value); end

  def attrib_ids(); end

  def attrib_ids=(ids); end

  def attrib_namespace(); end

  def attrib_namespace=(value); end

  def attrib_type_modifiable_bies(); end

  def attrib_type_modifiable_bies=(value); end

  def attrib_type_modifiable_by_ids(); end

  def attrib_type_modifiable_by_ids=(ids); end

  def attribs(); end

  def attribs=(value); end

  def build_attrib_namespace(*args, &block); end

  def create_attrib_namespace(*args, &block); end

  def create_attrib_namespace!(*args, &block); end

  def default_value_ids(); end

  def default_value_ids=(ids); end

  def default_values(); end

  def default_values=(value); end

  def reload_attrib_namespace(); end
end

module AttribType::GeneratedAssociationMethods
  extend ::T::Sig
end

class AttribType
  def self.after_add_for_allowed_values(); end

  def self.after_add_for_allowed_values=(val); end

  def self.after_add_for_allowed_values?(); end

  def self.after_add_for_attrib_type_modifiable_bies(); end

  def self.after_add_for_attrib_type_modifiable_bies=(val); end

  def self.after_add_for_attrib_type_modifiable_bies?(); end

  def self.after_add_for_attribs(); end

  def self.after_add_for_attribs=(val); end

  def self.after_add_for_attribs?(); end

  def self.after_add_for_default_values(); end

  def self.after_add_for_default_values=(val); end

  def self.after_add_for_default_values?(); end

  def self.after_remove_for_allowed_values(); end

  def self.after_remove_for_allowed_values=(val); end

  def self.after_remove_for_allowed_values?(); end

  def self.after_remove_for_attrib_type_modifiable_bies(); end

  def self.after_remove_for_attrib_type_modifiable_bies=(val); end

  def self.after_remove_for_attrib_type_modifiable_bies?(); end

  def self.after_remove_for_attribs(); end

  def self.after_remove_for_attribs=(val); end

  def self.after_remove_for_attribs?(); end

  def self.after_remove_for_default_values(); end

  def self.after_remove_for_default_values=(val); end

  def self.after_remove_for_default_values?(); end

  def self.before_add_for_allowed_values(); end

  def self.before_add_for_allowed_values=(val); end

  def self.before_add_for_allowed_values?(); end

  def self.before_add_for_attrib_type_modifiable_bies(); end

  def self.before_add_for_attrib_type_modifiable_bies=(val); end

  def self.before_add_for_attrib_type_modifiable_bies?(); end

  def self.before_add_for_attribs(); end

  def self.before_add_for_attribs=(val); end

  def self.before_add_for_attribs?(); end

  def self.before_add_for_default_values(); end

  def self.before_add_for_default_values=(val); end

  def self.before_add_for_default_values?(); end

  def self.before_remove_for_allowed_values(); end

  def self.before_remove_for_allowed_values=(val); end

  def self.before_remove_for_allowed_values?(); end

  def self.before_remove_for_attrib_type_modifiable_bies(); end

  def self.before_remove_for_attrib_type_modifiable_bies=(val); end

  def self.before_remove_for_attrib_type_modifiable_bies?(); end

  def self.before_remove_for_attribs(); end

  def self.before_remove_for_attribs=(val); end

  def self.before_remove_for_attribs?(); end

  def self.before_remove_for_default_values(); end

  def self.before_remove_for_default_values=(val); end

  def self.before_remove_for_default_values?(); end
end

class AttribTypeModifiableBy
  include ::AttribTypeModifiableBy::GeneratedAssociationMethods
  def autosave_associated_records_for_attrib_type(*args); end

  def autosave_associated_records_for_group(*args); end

  def autosave_associated_records_for_role(*args); end

  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module AttribTypeModifiableBy::GeneratedAssociationMethods
  def attrib_type(); end

  def attrib_type=(value); end

  def build_attrib_type(*args, &block); end

  def build_group(*args, &block); end

  def build_role(*args, &block); end

  def build_user(*args, &block); end

  def create_attrib_type(*args, &block); end

  def create_attrib_type!(*args, &block); end

  def create_group(*args, &block); end

  def create_group!(*args, &block); end

  def create_role(*args, &block); end

  def create_role!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def group(); end

  def group=(value); end

  def reload_attrib_type(); end

  def reload_group(); end

  def reload_role(); end

  def reload_user(); end

  def role(); end

  def role=(value); end

  def user(); end

  def user=(value); end
end

module AttribTypeModifiableBy::GeneratedAssociationMethods
  extend ::T::Sig
end

class AttribValue
  include ::AttribValue::GeneratedAssociationMethods
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def autosave_associated_records_for_attrib(*args); end

  def belongs_to_counter_cache_after_update(reflection); end

  def connection(*args, &block); end

  def destroyed_via_scope?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end
end

module AttribValue::GeneratedAssociationMethods
  def attrib(); end

  def attrib=(value); end

  def build_attrib(*args, &block); end

  def create_attrib(*args, &block); end

  def create_attrib!(*args, &block); end

  def reload_attrib(); end
end

module AttribValue::GeneratedAssociationMethods
  extend ::T::Sig
end

class AttribValue
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self.acts_as_list_top(); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.update_all_with_touch(updates); end
end

module AutoprefixedRails
  extend ::T::Sig
end

module AutoprefixerRails
  VERSION = ::T.let(nil, ::T.untyped)
end

module AutoprefixerRails
  extend ::T::Sig
end

class BCrypt::Engine
  DEFAULT_COST = ::T.let(nil, ::T.untyped)
  MAX_SALT_LENGTH = ::T.let(nil, ::T.untyped)
  MIN_COST = ::T.let(nil, ::T.untyped)
end

module BCrypt::Errors
  extend ::T::Sig
end

module BCrypt
  extend ::T::Sig
end

module Backend::Api::Build
  extend ::T::Sig
end

module Backend::Api::BuildResults
  extend ::T::Sig
end

module Backend::Api::Cloud
  extend ::T::Sig
end

module Backend::Api::Sources::Package
  extend ::T::Sig
end

module Backend::Api::Sources
  extend ::T::Sig
end

module Backend::Api
  extend ::T::Sig
end

class Backend::Connection
  def self.host(); end

  def self.host=(obj); end

  def self.port(); end

  def self.port=(obj); end
end

module Backend::ConnectionHelper
  extend ::T::Sig
end

class Backend::File
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Backend::File
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

module Backend::RememberLocation
  extend ::T::Sig
end

module Backend::Test::Tasks
  extend ::T::Sig
end

module Backend
  extend ::T::Sig
end

class BackendInfo
  include ::BackendInfo::GeneratedAssociationMethods
end

module BackendInfo::GeneratedAssociationMethods
end

module BackendInfo::GeneratedAssociationMethods
  extend ::T::Sig
end

class BackendInfoTest
  def test_basics(); end
end

class BackendPackage
  include ::BackendPackage::GeneratedAssociationMethods
  def autosave_associated_records_for_links_to(*args); end

  def autosave_associated_records_for_package(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module BackendPackage::GeneratedAssociationMethods
  def build_links_to(*args, &block); end

  def build_package(*args, &block); end

  def create_links_to(*args, &block); end

  def create_links_to!(*args, &block); end

  def create_package(*args, &block); end

  def create_package!(*args, &block); end

  def links_to(); end

  def links_to=(value); end

  def package(); end

  def package=(value); end

  def reload_links_to(); end

  def reload_package(); end
end

module BackendPackage::GeneratedAssociationMethods
  extend ::T::Sig
end

class BackendPackage
  def self.links(*args); end

  def self.not_links(*args); end
end

module Base64
  extend ::T::Sig
end

class BaseDecorator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

BasicObject::BasicObject = BasicObject

class BasicObject
  extend ::T::Sig
  extend ::Mocha::ClassMethods
end

class BasicSocket
  def read_nonblock(len, str=T.unsafe(nil), exception: T.unsafe(nil)); end
end

class BasicSocket
  extend ::T::Sig
end

class Benchmark::Job
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def initialize(width); end

  def item(label=T.unsafe(nil), &blk); end

  def list(); end

  def report(label=T.unsafe(nil), &blk); end

  def width(); end
end

class Benchmark::Job
  extend ::T::Sig
end

class Benchmark::Report
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def initialize(width=T.unsafe(nil), format=T.unsafe(nil)); end

  def item(label=T.unsafe(nil), *format, &blk); end

  def list(); end

  def report(label=T.unsafe(nil), *format, &blk); end
end

class Benchmark::Report
  extend ::T::Sig
end

class Benchmark::Tms
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def *(x); end

  def +(other); end

  def -(other); end

  def /(x); end

  def add(&blk); end

  def add!(&blk); end

  def cstime(); end

  def cutime(); end

  def format(format=T.unsafe(nil), *args); end

  def initialize(utime=T.unsafe(nil), stime=T.unsafe(nil), cutime=T.unsafe(nil), cstime=T.unsafe(nil), real=T.unsafe(nil), label=T.unsafe(nil)); end

  def label(); end

  def memberwise(op, x); end

  def real(); end

  def stime(); end

  def to_a(); end

  def total(); end

  def utime(); end
end

class Benchmark::Tms
  extend ::T::Sig
end

module Benchmark
  extend ::T::Sig
end

class BigDecimal
  include ::ActiveSupport::NumericWithFormat
  include ::ActiveSupport::BigDecimalWithDefaultFormat
  def clone(); end

  def to_d(); end

  def to_digits(); end
  EXCEPTION_NaN = ::T.let(nil, ::T.untyped)
  SIGN_NaN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class BigDecimal
  extend ::T::Sig
  def self.ver(); end
end

module BigMath
  extend ::T::Sig
end

class BinaryRelease
  include ::BinaryRelease::GeneratedAssociationMethods
  def autosave_associated_records_for_on_medium(*args); end

  def autosave_associated_records_for_release_package(*args); end

  def autosave_associated_records_for_repository(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module BinaryRelease::GeneratedAssociationMethods
  def build_on_medium(*args, &block); end

  def build_release_package(*args, &block); end

  def build_repository(*args, &block); end

  def create_on_medium(*args, &block); end

  def create_on_medium!(*args, &block); end

  def create_release_package(*args, &block); end

  def create_release_package!(*args, &block); end

  def create_repository(*args, &block); end

  def create_repository!(*args, &block); end

  def on_medium(); end

  def on_medium=(value); end

  def release_package(); end

  def release_package=(value); end

  def reload_on_medium(); end

  def reload_release_package(); end

  def reload_repository(); end

  def repository(); end

  def repository=(value); end
end

module BinaryRelease::GeneratedAssociationMethods
  extend ::T::Sig
end

class Binding
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def clone(); end

  def irb(); end

  def local_variable_defined?(_); end

  def local_variable_get(_); end

  def local_variable_set(_, _1); end

  def receiver(); end
end

class Binding
  extend ::T::Sig
end

module Bootstrap
  BOOTSTRAP_SHA = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Bootstrap::Rails
  extend ::T::Sig
end

module Bootstrap
  extend ::T::Sig
end

class BsRequest
  include ::BsRequest::GeneratedAssociationMethods
  def after_add_for_bs_request_actions(); end

  def after_add_for_bs_request_actions=(val); end

  def after_add_for_bs_request_actions?(); end

  def after_add_for_comments(); end

  def after_add_for_comments=(val); end

  def after_add_for_comments?(); end

  def after_add_for_request_history_elements(); end

  def after_add_for_request_history_elements=(val); end

  def after_add_for_request_history_elements?(); end

  def after_add_for_review_history_elements(); end

  def after_add_for_review_history_elements=(val); end

  def after_add_for_review_history_elements?(); end

  def after_add_for_reviews(); end

  def after_add_for_reviews=(val); end

  def after_add_for_reviews?(); end

  def after_add_for_status_reports(); end

  def after_add_for_status_reports=(val); end

  def after_add_for_status_reports?(); end

  def after_add_for_target_project_objects(); end

  def after_add_for_target_project_objects=(val); end

  def after_add_for_target_project_objects?(); end

  def after_remove_for_bs_request_actions(); end

  def after_remove_for_bs_request_actions=(val); end

  def after_remove_for_bs_request_actions?(); end

  def after_remove_for_comments(); end

  def after_remove_for_comments=(val); end

  def after_remove_for_comments?(); end

  def after_remove_for_request_history_elements(); end

  def after_remove_for_request_history_elements=(val); end

  def after_remove_for_request_history_elements?(); end

  def after_remove_for_review_history_elements(); end

  def after_remove_for_review_history_elements=(val); end

  def after_remove_for_review_history_elements?(); end

  def after_remove_for_reviews(); end

  def after_remove_for_reviews=(val); end

  def after_remove_for_reviews?(); end

  def after_remove_for_status_reports(); end

  def after_remove_for_status_reports=(val); end

  def after_remove_for_status_reports?(); end

  def after_remove_for_target_project_objects(); end

  def after_remove_for_target_project_objects=(val); end

  def after_remove_for_target_project_objects?(); end

  def autosave_associated_records_for_bs_request_actions(*args); end

  def autosave_associated_records_for_comments(*args); end

  def autosave_associated_records_for_request_exclusion(); end

  def autosave_associated_records_for_request_history_elements(*args); end

  def autosave_associated_records_for_review_history_elements(*args); end

  def autosave_associated_records_for_reviews(*args); end

  def autosave_associated_records_for_staging_project(*args); end

  def autosave_associated_records_for_status_reports(*args); end

  def autosave_associated_records_for_target_project_objects(*args); end

  def before_add_for_bs_request_actions(); end

  def before_add_for_bs_request_actions=(val); end

  def before_add_for_bs_request_actions?(); end

  def before_add_for_comments(); end

  def before_add_for_comments=(val); end

  def before_add_for_comments?(); end

  def before_add_for_request_history_elements(); end

  def before_add_for_request_history_elements=(val); end

  def before_add_for_request_history_elements?(); end

  def before_add_for_review_history_elements(); end

  def before_add_for_review_history_elements=(val); end

  def before_add_for_review_history_elements?(); end

  def before_add_for_reviews(); end

  def before_add_for_reviews=(val); end

  def before_add_for_reviews?(); end

  def before_add_for_status_reports(); end

  def before_add_for_status_reports=(val); end

  def before_add_for_status_reports?(); end

  def before_add_for_target_project_objects(); end

  def before_add_for_target_project_objects=(val); end

  def before_add_for_target_project_objects?(); end

  def before_remove_for_bs_request_actions(); end

  def before_remove_for_bs_request_actions=(val); end

  def before_remove_for_bs_request_actions?(); end

  def before_remove_for_comments(); end

  def before_remove_for_comments=(val); end

  def before_remove_for_comments?(); end

  def before_remove_for_request_history_elements(); end

  def before_remove_for_request_history_elements=(val); end

  def before_remove_for_request_history_elements?(); end

  def before_remove_for_review_history_elements(); end

  def before_remove_for_review_history_elements=(val); end

  def before_remove_for_review_history_elements?(); end

  def before_remove_for_reviews(); end

  def before_remove_for_reviews=(val); end

  def before_remove_for_reviews?(); end

  def before_remove_for_status_reports(); end

  def before_remove_for_status_reports=(val); end

  def before_remove_for_status_reports?(); end

  def before_remove_for_target_project_objects(); end

  def before_remove_for_target_project_objects=(val); end

  def before_remove_for_target_project_objects?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_bs_request_actions(*args); end

  def validate_associated_records_for_comments(*args); end

  def validate_associated_records_for_request_history_elements(*args); end

  def validate_associated_records_for_review_history_elements(*args); end

  def validate_associated_records_for_reviews(*args); end

  def validate_associated_records_for_status_reports(*args); end

  def validate_associated_records_for_target_project_objects(*args); end
end

module BsRequest::DataTable
  extend ::T::Sig
end

module BsRequest::FindFor::UserGroupMixin
  extend ::T::Sig
end

module BsRequest::FindFor
  extend ::T::Sig
end

module BsRequest::GeneratedAssociationMethods
  def bs_request_action_ids(); end

  def bs_request_action_ids=(ids); end

  def bs_request_actions(); end

  def bs_request_actions=(value); end

  def build_request_exclusion(*args, &block); end

  def build_staging_project(*args, &block); end

  def comment_ids(); end

  def comment_ids=(ids); end

  def comments(); end

  def comments=(value); end

  def create_request_exclusion(*args, &block); end

  def create_request_exclusion!(*args, &block); end

  def create_staging_project(*args, &block); end

  def create_staging_project!(*args, &block); end

  def reload_request_exclusion(); end

  def reload_staging_project(); end

  def request_exclusion(); end

  def request_exclusion=(value); end

  def request_history_element_ids(); end

  def request_history_element_ids=(ids); end

  def request_history_elements(); end

  def request_history_elements=(value); end

  def review_history_element_ids(); end

  def review_history_element_ids=(ids); end

  def review_history_elements(); end

  def review_history_elements=(value); end

  def review_ids(); end

  def review_ids=(ids); end

  def reviews(); end

  def reviews=(value); end

  def staging_project(); end

  def staging_project=(value); end

  def status_report_ids(); end

  def status_report_ids=(ids); end

  def status_reports(); end

  def status_reports=(value); end

  def target_project_object_ids(); end

  def target_project_object_ids=(ids); end

  def target_project_objects(); end

  def target_project_objects=(value); end
end

module BsRequest::GeneratedAssociationMethods
  extend ::T::Sig
end

class BsRequest
  def self.after_add_for_bs_request_actions(); end

  def self.after_add_for_bs_request_actions=(val); end

  def self.after_add_for_bs_request_actions?(); end

  def self.after_add_for_comments(); end

  def self.after_add_for_comments=(val); end

  def self.after_add_for_comments?(); end

  def self.after_add_for_request_history_elements(); end

  def self.after_add_for_request_history_elements=(val); end

  def self.after_add_for_request_history_elements?(); end

  def self.after_add_for_review_history_elements(); end

  def self.after_add_for_review_history_elements=(val); end

  def self.after_add_for_review_history_elements?(); end

  def self.after_add_for_reviews(); end

  def self.after_add_for_reviews=(val); end

  def self.after_add_for_reviews?(); end

  def self.after_add_for_status_reports(); end

  def self.after_add_for_status_reports=(val); end

  def self.after_add_for_status_reports?(); end

  def self.after_add_for_target_project_objects(); end

  def self.after_add_for_target_project_objects=(val); end

  def self.after_add_for_target_project_objects?(); end

  def self.after_remove_for_bs_request_actions(); end

  def self.after_remove_for_bs_request_actions=(val); end

  def self.after_remove_for_bs_request_actions?(); end

  def self.after_remove_for_comments(); end

  def self.after_remove_for_comments=(val); end

  def self.after_remove_for_comments?(); end

  def self.after_remove_for_request_history_elements(); end

  def self.after_remove_for_request_history_elements=(val); end

  def self.after_remove_for_request_history_elements?(); end

  def self.after_remove_for_review_history_elements(); end

  def self.after_remove_for_review_history_elements=(val); end

  def self.after_remove_for_review_history_elements?(); end

  def self.after_remove_for_reviews(); end

  def self.after_remove_for_reviews=(val); end

  def self.after_remove_for_reviews?(); end

  def self.after_remove_for_status_reports(); end

  def self.after_remove_for_status_reports=(val); end

  def self.after_remove_for_status_reports?(); end

  def self.after_remove_for_target_project_objects(); end

  def self.after_remove_for_target_project_objects=(val); end

  def self.after_remove_for_target_project_objects?(); end

  def self.before_add_for_bs_request_actions(); end

  def self.before_add_for_bs_request_actions=(val); end

  def self.before_add_for_bs_request_actions?(); end

  def self.before_add_for_comments(); end

  def self.before_add_for_comments=(val); end

  def self.before_add_for_comments?(); end

  def self.before_add_for_request_history_elements(); end

  def self.before_add_for_request_history_elements=(val); end

  def self.before_add_for_request_history_elements?(); end

  def self.before_add_for_review_history_elements(); end

  def self.before_add_for_review_history_elements=(val); end

  def self.before_add_for_review_history_elements?(); end

  def self.before_add_for_reviews(); end

  def self.before_add_for_reviews=(val); end

  def self.before_add_for_reviews?(); end

  def self.before_add_for_status_reports(); end

  def self.before_add_for_status_reports=(val); end

  def self.before_add_for_status_reports?(); end

  def self.before_add_for_target_project_objects(); end

  def self.before_add_for_target_project_objects=(val); end

  def self.before_add_for_target_project_objects?(); end

  def self.before_remove_for_bs_request_actions(); end

  def self.before_remove_for_bs_request_actions=(val); end

  def self.before_remove_for_bs_request_actions?(); end

  def self.before_remove_for_comments(); end

  def self.before_remove_for_comments=(val); end

  def self.before_remove_for_comments?(); end

  def self.before_remove_for_request_history_elements(); end

  def self.before_remove_for_request_history_elements=(val); end

  def self.before_remove_for_request_history_elements?(); end

  def self.before_remove_for_review_history_elements(); end

  def self.before_remove_for_review_history_elements=(val); end

  def self.before_remove_for_review_history_elements?(); end

  def self.before_remove_for_reviews(); end

  def self.before_remove_for_reviews=(val); end

  def self.before_remove_for_reviews?(); end

  def self.before_remove_for_status_reports(); end

  def self.before_remove_for_status_reports=(val); end

  def self.before_remove_for_status_reports?(); end

  def self.before_remove_for_target_project_objects(); end

  def self.before_remove_for_target_project_objects=(val); end

  def self.before_remove_for_target_project_objects?(); end

  def self.by_group_reviews(*args); end

  def self.by_package_reviews(*args); end

  def self.by_project_reviews(*args); end

  def self.by_user_reviews(*args); end

  def self.do_search(*args); end

  def self.find_for(*args); end

  def self.for_group(*args); end

  def self.for_project(*args); end

  def self.for_user(*args); end

  def self.from_source_project(*args); end

  def self.in_ids(*args); end

  def self.in_states(*args); end

  def self.new_with_reviews_for(*args); end

  def self.not_creator(*args); end

  def self.obsolete(*args); end

  def self.to_accept_by_time(*args); end

  def self.with_actions(*args); end

  def self.with_actions_and_reviews(*args); end

  def self.with_involved_packages(*args); end

  def self.with_involved_projects(*args); end

  def self.with_open_reviews_for(*args); end

  def self.with_source_subprojects(*args); end

  def self.with_submit_requests(*args); end

  def self.with_target_project(*args); end

  def self.with_target_subprojects(*args); end

  def self.with_types(*args); end
end

class BsRequestAction
  include ::BsRequestAction::GeneratedAssociationMethods
  def autosave_associated_records_for_bs_request(*args); end

  def autosave_associated_records_for_bs_request_action_accept_info(); end

  def autosave_associated_records_for_target_package_object(*args); end

  def autosave_associated_records_for_target_project_object(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

class BsRequestAction::Differ::ForSource
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class BsRequestAction::Differ::ForSource
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class BsRequestAction::Differ::QueryBuilder
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class BsRequestAction::Differ::QueryBuilder
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class BsRequestAction::Differ::QueryBuilderForAccepted
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class BsRequestAction::Differ::QueryBuilderForAccepted
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class BsRequestAction::Differ::QueryBuilderForSuperseded
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class BsRequestAction::Differ::QueryBuilderForSuperseded
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class BsRequestAction::Differ::SourcePackageFinder
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class BsRequestAction::Differ::SourcePackageFinder
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

module BsRequestAction::Differ
  extend ::T::Sig
end

module BsRequestAction::Errors
  extend ::T::Sig
end

module BsRequestAction::GeneratedAssociationMethods
  def bs_request(); end

  def bs_request=(value); end

  def bs_request_action_accept_info(); end

  def bs_request_action_accept_info=(value); end

  def build_bs_request(*args, &block); end

  def build_bs_request_action_accept_info(*args, &block); end

  def build_target_package_object(*args, &block); end

  def build_target_project_object(*args, &block); end

  def create_bs_request(*args, &block); end

  def create_bs_request!(*args, &block); end

  def create_bs_request_action_accept_info(*args, &block); end

  def create_bs_request_action_accept_info!(*args, &block); end

  def create_target_package_object(*args, &block); end

  def create_target_package_object!(*args, &block); end

  def create_target_project_object(*args, &block); end

  def create_target_project_object!(*args, &block); end

  def reload_bs_request(); end

  def reload_bs_request_action_accept_info(); end

  def reload_target_package_object(); end

  def reload_target_project_object(); end

  def target_package_object(); end

  def target_package_object=(value); end

  def target_project_object(); end

  def target_project_object=(value); end
end

module BsRequestAction::GeneratedAssociationMethods
  extend ::T::Sig
end

class BsRequestAction
  def self.bs_request_ids_by_source_projects(*args); end

  def self.bs_request_ids_of_involved_packages(*args); end

  def self.bs_request_ids_of_involved_projects(*args); end

  def self.with_target_package(*args); end

  def self.with_target_project(*args); end
end

class BsRequestActionAcceptInfo
  include ::BsRequestActionAcceptInfo::GeneratedAssociationMethods
  def autosave_associated_records_for_bs_request_action(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module BsRequestActionAcceptInfo::GeneratedAssociationMethods
  def bs_request_action(); end

  def bs_request_action=(value); end

  def build_bs_request_action(*args, &block); end

  def create_bs_request_action(*args, &block); end

  def create_bs_request_action!(*args, &block); end

  def reload_bs_request_action(); end
end

module BsRequestActionAcceptInfo::GeneratedAssociationMethods
  extend ::T::Sig
end

class BsRequestActionAddRole
  include ::BsRequestActionAddRole::GeneratedAssociationMethods
end

module BsRequestActionAddRole::GeneratedAssociationMethods
end

module BsRequestActionAddRole::GeneratedAssociationMethods
  extend ::T::Sig
end

class BsRequestActionChangeDevel
  include ::BsRequestActionChangeDevel::GeneratedAssociationMethods
end

module BsRequestActionChangeDevel::GeneratedAssociationMethods
end

module BsRequestActionChangeDevel::GeneratedAssociationMethods
  extend ::T::Sig
end

class BsRequestActionDelete
  include ::BsRequestActionDelete::GeneratedAssociationMethods
end

module BsRequestActionDelete::GeneratedAssociationMethods
end

module BsRequestActionDelete::GeneratedAssociationMethods
  extend ::T::Sig
end

class BsRequestActionMaintenanceIncident
  include ::BsRequestActionMaintenanceIncident::GeneratedAssociationMethods
end

module BsRequestActionMaintenanceIncident::GeneratedAssociationMethods
end

module BsRequestActionMaintenanceIncident::GeneratedAssociationMethods
  extend ::T::Sig
end

class BsRequestActionMaintenanceRelease
  include ::BsRequestActionMaintenanceRelease::GeneratedAssociationMethods
end

module BsRequestActionMaintenanceRelease::Errors
  extend ::T::Sig
end

module BsRequestActionMaintenanceRelease::GeneratedAssociationMethods
end

module BsRequestActionMaintenanceRelease::GeneratedAssociationMethods
  extend ::T::Sig
end

class BsRequestActionSetBugowner
  include ::BsRequestActionSetBugowner::GeneratedAssociationMethods
end

module BsRequestActionSetBugowner::GeneratedAssociationMethods
end

module BsRequestActionSetBugowner::GeneratedAssociationMethods
  extend ::T::Sig
end

class BsRequestActionSubmit
  include ::BsRequestActionSubmit::GeneratedAssociationMethods
end

module BsRequestActionSubmit::GeneratedAssociationMethods
end

module BsRequestActionSubmit::GeneratedAssociationMethods
  extend ::T::Sig
end

class BsRequestCounter
  include ::BsRequestCounter::GeneratedAssociationMethods
end

module BsRequestCounter::GeneratedAssociationMethods
end

module BsRequestCounter::GeneratedAssociationMethods
  extend ::T::Sig
end

class BsRequestTest
  def test_if_create_works(); end

  def test_request_ownership(); end
end

module Build
  extend ::T::Sig
end

module BuildLogSupport
  extend ::T::Sig
end

Builder::BlankSlate = BasicObject

module Builder::XChar
  CP1252 = ::T.let(nil, ::T.untyped)
  CP1252_DIFFERENCES = ::T.let(nil, ::T.untyped)
  ENCODING_BINARY = ::T.let(nil, ::T.untyped)
  ENCODING_ISO1 = ::T.let(nil, ::T.untyped)
  ENCODING_UTF8 = ::T.let(nil, ::T.untyped)
  INVALID_XML_CHAR = ::T.let(nil, ::T.untyped)
  PREDEFINED = ::T.let(nil, ::T.untyped)
  REPLACEMENT_CHAR = ::T.let(nil, ::T.untyped)
  UNICODE_EQUIVALENT = ::T.let(nil, ::T.untyped)
  VALID = ::T.let(nil, ::T.untyped)
  XML_PREDEFINED = ::T.let(nil, ::T.untyped)
end

module Builder::XChar
  extend ::T::Sig
end

module Builder
  extend ::T::Sig
end

module Bullet
  BULLET_DEBUG = ::T.let(nil, ::T.untyped)
  TRUE = ::T.let(nil, ::T.untyped)
end

module Bullet::ActiveJob
end

module Bullet::ActiveJob
  extend ::T::Sig
  def self.included(base); end
end

module Bullet::ActiveRecord
  extend ::T::Sig
end

module Bullet::Dependency
  extend ::T::Sig
end

module Bullet::Detector
  extend ::T::Sig
end

module Bullet::Notification
end

class Bullet::Notification::Base
  def associations(); end

  def associations_str(); end

  def base_class(); end

  def body(); end

  def body_with_caller(); end

  def call_stack_messages(); end

  def eql?(other); end

  def initialize(base_class, association_or_associations, path=T.unsafe(nil)); end

  def klazz_associations_str(); end

  def notification_data(); end

  def notifier(); end

  def notifier=(notifier); end

  def notify_inline(); end

  def notify_out_of_channel(); end

  def path(); end

  def short_notice(); end

  def title(); end

  def url(); end

  def url=(url); end

  def whoami(); end
end

class Bullet::Notification::Base
end

class Bullet::Notification::CounterCache
end

class Bullet::Notification::CounterCache
end

class Bullet::Notification::NPlusOneQuery
  def initialize(callers, base_class, associations, path=T.unsafe(nil)); end
end

class Bullet::Notification::NPlusOneQuery
end

class Bullet::Notification::UnoptimizedQueryError
end

class Bullet::Notification::UnoptimizedQueryError
end

class Bullet::Notification::UnusedEagerLoading
  def initialize(callers, base_class, associations, path=T.unsafe(nil)); end
end

class Bullet::Notification::UnusedEagerLoading
end

module Bullet::Notification
  extend ::T::Sig
end

class Bullet::NotificationCollector
  def add(value); end

  def collection(); end

  def notifications_present?(); end

  def reset(); end
end

class Bullet::NotificationCollector
end

module Bullet::Registry
end

class Bullet::Registry::Association
  def merge(base, associations); end

  def similarly_associated(base, associations); end
end

class Bullet::Registry::Association
end

class Bullet::Registry::Base
  def [](key); end

  def add(key, value); end

  def delete(base); end

  def each(&block); end

  def include?(key, value); end

  def registry(); end

  def select(*args, &block); end
end

class Bullet::Registry::Base
end

class Bullet::Registry::Object
  def add(bullet_key); end

  def include?(bullet_key); end
end

class Bullet::Registry::Object
end

module Bullet::Registry
  extend ::T::Sig
end

module Bullet::SaveWithBulletSupport
  extend ::T::Sig
end

module Bullet::StackTraceFilter
  VENDOR_PATH = ::T.let(nil, ::T.untyped)
end

module Bullet::StackTraceFilter
  extend ::T::Sig
end

module Bullet
  extend ::T::Sig
end

module Bundler::BuildMetadata
  extend ::T::Sig
end

Bundler::Deprecate = Gem::Deprecate

class Bundler::Env
end

class Bundler::Env
  def self.environment(); end

  def self.report(options=T.unsafe(nil)); end

  def self.write(io); end
end

class Bundler::Fetcher
  def fetch_spec(spec); end

  def fetchers(); end

  def http_proxy(); end

  def initialize(remote); end

  def specs(gem_names, source); end

  def specs_with_retry(gem_names, source); end

  def uri(); end

  def use_api(); end

  def user_agent(); end
  FAIL_ERRORS = ::T.let(nil, ::T.untyped)
  FETCHERS = ::T.let(nil, ::T.untyped)
  HTTP_ERRORS = ::T.let(nil, ::T.untyped)
  NET_ERRORS = ::T.let(nil, ::T.untyped)
end

class Bundler::Fetcher::AuthenticationRequiredError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::AuthenticationRequiredError
end

class Bundler::Fetcher::BadAuthenticationError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::BadAuthenticationError
end

class Bundler::Fetcher::Base
  def api_fetcher?(); end

  def available?(); end

  def display_uri(); end

  def downloader(); end

  def fetch_uri(); end

  def initialize(downloader, remote, display_uri); end

  def remote(); end

  def remote_uri(); end
end

class Bundler::Fetcher::Base
end

class Bundler::Fetcher::CertificateFailureError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::CertificateFailureError
end

class Bundler::Fetcher::CompactIndex
  def available?(*args, &blk); end

  def fetch_spec(*args, &blk); end

  def specs(*args, &blk); end

  def specs_for_names(gem_names); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def call(path, headers); end

  def fetcher(); end

  def fetcher=(_); end

  def ui(); end

  def ui=(_); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def self.[](*_); end

  def self.members(); end
end

class Bundler::Fetcher::CompactIndex
  def self.compact_index_request(method_name); end
end

class Bundler::Fetcher::Dependency
  def dependency_api_uri(gem_names=T.unsafe(nil)); end

  def dependency_specs(gem_names); end

  def get_formatted_specs_and_deps(gem_list); end

  def specs(gem_names, full_dependency_list=T.unsafe(nil), last_spec_list=T.unsafe(nil)); end

  def unmarshalled_dep_gems(gem_names); end
end

class Bundler::Fetcher::Dependency
end

class Bundler::Fetcher::Downloader
  def connection(); end

  def fetch(uri, headers=T.unsafe(nil), counter=T.unsafe(nil)); end

  def initialize(connection, redirect_limit); end

  def redirect_limit(); end

  def request(uri, headers); end
end

class Bundler::Fetcher::Downloader
end

class Bundler::Fetcher::FallbackError
end

class Bundler::Fetcher::FallbackError
end

class Bundler::Fetcher::Index
  def fetch_spec(spec); end

  def specs(_gem_names); end
end

class Bundler::Fetcher::Index
end

class Bundler::Fetcher::NetworkDownError
end

class Bundler::Fetcher::NetworkDownError
end

class Bundler::Fetcher::SSLError
  def initialize(msg=T.unsafe(nil)); end
end

class Bundler::Fetcher::SSLError
end

class Bundler::Fetcher
  def self.api_timeout(); end

  def self.api_timeout=(api_timeout); end

  def self.disable_endpoint(); end

  def self.disable_endpoint=(disable_endpoint); end

  def self.max_retries(); end

  def self.max_retries=(max_retries); end

  def self.redirect_limit(); end

  def self.redirect_limit=(redirect_limit); end
end

module Bundler::FileUtils::DryRun
  extend ::T::Sig
end

module Bundler::FileUtils::LowMethods
  extend ::T::Sig
end

module Bundler::FileUtils::NoWrite
  extend ::T::Sig
end

module Bundler::FileUtils::StreamUtils_
  extend ::T::Sig
end

module Bundler::FileUtils::Verbose
  extend ::T::Sig
end

module Bundler::FileUtils
  extend ::T::Sig
end

class Bundler::GemHelper
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  def allowed_push_host(); end

  def already_tagged?(); end

  def base(); end

  def build_gem(); end

  def built_gem_path(); end

  def clean?(); end

  def committed?(); end

  def gem_key(); end

  def gem_push?(); end

  def gem_push_host(); end

  def gemspec(); end

  def git_push(remote=T.unsafe(nil)); end

  def guard_clean(); end

  def initialize(base=T.unsafe(nil), name=T.unsafe(nil)); end

  def install(); end

  def install_gem(built_gem_path=T.unsafe(nil), local=T.unsafe(nil)); end

  def name(); end

  def perform_git_push(options=T.unsafe(nil)); end

  def rubygem_push(path); end

  def sh(cmd, &block); end

  def sh_with_code(cmd, &block); end

  def spec_path(); end

  def tag_version(); end

  def version(); end

  def version_tag(); end
end

class Bundler::GemHelper
  def self.gemspec(&block); end

  def self.install_tasks(opts=T.unsafe(nil)); end

  def self.instance(); end

  def self.instance=(instance); end
end

module Bundler::GemHelpers
  extend ::T::Sig
end

class Bundler::GemRemoteFetcher
end

class Bundler::GemRemoteFetcher
end

class Bundler::GemVersionPromoter
  def initialize(locked_specs=T.unsafe(nil), unlock_gems=T.unsafe(nil)); end

  def level(); end

  def level=(value); end

  def locked_specs(); end

  def major?(); end

  def minor?(); end

  def prerelease_specified(); end

  def prerelease_specified=(prerelease_specified); end

  def sort_versions(dep, spec_groups); end

  def strict(); end

  def strict=(strict); end

  def unlock_gems(); end
  DEBUG = ::T.let(nil, ::T.untyped)
end

class Bundler::GemVersionPromoter
end

class Bundler::Graph
  def edge_options(); end

  def groups(); end

  def initialize(env, output_file, show_version=T.unsafe(nil), show_requirements=T.unsafe(nil), output_format=T.unsafe(nil), without=T.unsafe(nil)); end

  def node_options(); end

  def output_file(); end

  def output_format(); end

  def relations(); end

  def viz(); end
  GRAPH_NAME = ::T.let(nil, ::T.untyped)
end

class Bundler::Graph::GraphVizClient
  def g(); end

  def initialize(graph_instance); end

  def run(); end
end

class Bundler::Graph::GraphVizClient
end

class Bundler::Graph
end

class Bundler::Index
  include ::Enumerable
end

class Bundler::Injector
  def initialize(deps, options=T.unsafe(nil)); end

  def inject(gemfile_path, lockfile_path); end

  def remove(gemfile_path, lockfile_path); end
  INJECTED_GEMS = ::T.let(nil, ::T.untyped)
end

class Bundler::Injector
  def self.inject(new_deps, options=T.unsafe(nil)); end

  def self.remove(gems, options=T.unsafe(nil)); end
end

class Bundler::Installer
  def generate_bundler_executable_stubs(spec, options=T.unsafe(nil)); end

  def generate_standalone_bundler_executable_stubs(spec); end

  def initialize(root, definition); end

  def post_install_messages(); end

  def run(options); end
end

class Bundler::Installer
  def self.ambiguous_gems(); end

  def self.ambiguous_gems=(ambiguous_gems); end

  def self.install(root, definition, options=T.unsafe(nil)); end
end

module Bundler::MatchPlatform
  extend ::T::Sig
end

module Bundler::Molinillo::Compatibility
  extend ::T::Sig
end

module Bundler::Molinillo::Delegates::ResolutionState
  extend ::T::Sig
end

module Bundler::Molinillo::Delegates::SpecificationProvider
  extend ::T::Sig
end

module Bundler::Molinillo::Delegates
  extend ::T::Sig
end

class Bundler::Molinillo::DependencyGraph
  include ::Enumerable
end

class Bundler::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

module Bundler::Molinillo::SpecificationProvider
  extend ::T::Sig
end

module Bundler::Molinillo::UI
  extend ::T::Sig
end

module Bundler::Molinillo
  extend ::T::Sig
end

module Bundler::Plugin::API::Source
  def ==(other); end

  def app_cache_dirname(); end

  def app_cache_path(custom_path=T.unsafe(nil)); end

  def bundler_plugin_api_source?(); end

  def cache(spec, custom_path=T.unsafe(nil)); end

  def cached!(); end

  def can_lock?(spec); end

  def dependency_names(); end

  def dependency_names=(dependency_names); end

  def double_check_for(*_); end

  def eql?(other); end

  def fetch_gemspec_files(); end

  def gem_install_dir(); end

  def hash(); end

  def include?(other); end

  def initialize(opts); end

  def install(spec, opts); end

  def install_path(); end

  def installed?(); end

  def name(); end

  def options(); end

  def options_to_lock(); end

  def post_install(spec, disable_exts=T.unsafe(nil)); end

  def remote!(); end

  def root(); end

  def specs(); end

  def to_lock(); end

  def to_s(); end

  def unlock!(); end

  def unmet_deps(); end

  def uri(); end

  def uri_hash(); end
end

module Bundler::Plugin::API::Source
  extend ::T::Sig
end

class Bundler::Plugin::DSL
  def _gem(name, *args); end

  def inferred_plugins(); end

  def plugin(name, *args); end
end

class Bundler::Plugin::DSL::PluginGemfileError
end

class Bundler::Plugin::DSL::PluginGemfileError
end

class Bundler::Plugin::DSL
end

module Bundler::Plugin::Events
  GEM_AFTER_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_AFTER_INSTALL_ALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL_ALL = ::T.let(nil, ::T.untyped)
end

module Bundler::Plugin::Events
  extend ::T::Sig
  def self.defined_event?(event); end
end

class Bundler::Plugin::Index
  def command_plugin(command); end

  def commands(); end

  def global_index_file(); end

  def hook_plugins(event); end

  def index_file(); end

  def installed?(name); end

  def load_paths(name); end

  def local_index_file(); end

  def plugin_path(name); end

  def register_plugin(name, path, load_paths, commands, sources, hooks); end

  def source?(source); end

  def source_plugin(name); end
end

class Bundler::Plugin::Index::CommandConflict
  def initialize(plugin, commands); end
end

class Bundler::Plugin::Index::CommandConflict
end

class Bundler::Plugin::Index::SourceConflict
  def initialize(plugin, sources); end
end

class Bundler::Plugin::Index::SourceConflict
end

class Bundler::Plugin::Index
end

class Bundler::Plugin::Installer
  def install(names, options); end

  def install_definition(definition); end
end

class Bundler::Plugin::Installer::Git
  def generate_bin(spec, disable_extensions=T.unsafe(nil)); end
end

class Bundler::Plugin::Installer::Git
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer
end

class Bundler::Plugin::SourceList
end

class Bundler::Plugin::SourceList
end

module Bundler::Plugin
  extend ::T::Sig
end

class Bundler::ProcessLock
end

class Bundler::ProcessLock
  def self.lock(bundle_path=T.unsafe(nil)); end
end

class Bundler::Retry
  def attempt(&block); end

  def attempts(&block); end

  def current_run(); end

  def current_run=(current_run); end

  def initialize(name, exceptions=T.unsafe(nil), retries=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def total_runs(); end

  def total_runs=(total_runs); end
end

class Bundler::Retry
  def self.attempts(); end

  def self.default_attempts(); end

  def self.default_retries(); end
end

module Bundler::RubyDsl
  extend ::T::Sig
end

class Bundler::RubyGemsGemInstaller
end

class Bundler::RubyGemsGemInstaller
end

class Bundler::Settings::Mirror
  def ==(other); end

  def fallback_timeout(); end

  def fallback_timeout=(timeout); end

  def initialize(uri=T.unsafe(nil), fallback_timeout=T.unsafe(nil)); end

  def uri(); end

  def uri=(uri); end

  def valid?(); end

  def validate!(probe=T.unsafe(nil)); end
  DEFAULT_FALLBACK_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Bundler::Settings::Mirror
end

class Bundler::Settings::Mirrors
  def each(&blk); end

  def for(uri); end

  def initialize(prober=T.unsafe(nil)); end

  def parse(key, value); end
end

class Bundler::Settings::Mirrors
end

class Bundler::Settings::Validator
end

class Bundler::Settings::Validator::Rule
  def description(); end

  def fail!(key, value, *reasons); end

  def initialize(keys, description, &validate); end

  def k(key); end

  def set(settings, key, value, *reasons); end

  def validate!(key, value, settings); end
end

class Bundler::Settings::Validator::Rule
end

class Bundler::Settings::Validator
  def self.validate!(key, value, settings); end
end

module Bundler::SharedHelpers
  extend ::T::Sig
end

class Bundler::SpecSet
  include ::Enumerable
end

class Bundler::UI::RGProxy
end

class Bundler::UI::Shell
  def add_color(string, *color); end

  def ask(msg); end

  def confirm(msg, newline=T.unsafe(nil)); end

  def debug(msg, newline=T.unsafe(nil)); end

  def debug?(); end

  def error(msg, newline=T.unsafe(nil)); end

  def info(msg, newline=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil)); end

  def level(name=T.unsafe(nil)); end

  def level=(level); end

  def no?(); end

  def quiet?(); end

  def shell=(shell); end

  def silence(&blk); end

  def trace(e, newline=T.unsafe(nil), force=T.unsafe(nil)); end

  def unprinted_warnings(); end

  def warn(msg, newline=T.unsafe(nil)); end

  def yes?(msg); end
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Bundler::UI::Shell
end

module Bundler::UI
  extend ::T::Sig
end

module Bundler::URICredentialsFilter
  extend ::T::Sig
end

module Bundler::VersionRanges
end

class Bundler::VersionRanges::NEq
  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::NEq
  def self.[](*_); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def cover?(v); end

  def empty?(); end

  def left(); end

  def left=(_); end

  def right(); end

  def right=(_); end

  def single?(); end
  INFINITY = ::T.let(nil, ::T.untyped)
  UNIVERSAL = ::T.let(nil, ::T.untyped)
  ZERO = ::T.let(nil, ::T.untyped)
end

class Bundler::VersionRanges::ReqR::Endpoint
  def inclusive(); end

  def inclusive=(_); end

  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::ReqR::Endpoint
  def self.[](*_); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def self.[](*_); end

  def self.members(); end
end

module Bundler::VersionRanges
  extend ::T::Sig
  def self.empty?(ranges, neqs); end

  def self.for(requirement); end

  def self.for_many(requirements); end
end

module Bundler
  extend ::T::Sig
end

module Bunny
  PROTOCOL_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Bunny::Authentication
  extend ::T::Sig
end

class Bunny::Channel
  DEFAULT_CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  MAX_PREFETCH_COUNT = ::T.let(nil, ::T.untyped)
  SHORTSTR_LIMIT = ::T.let(nil, ::T.untyped)
end

Bunny::Client = Bunny::Session

module Bunny::Concurrent
  extend ::T::Sig
end

Bunny::ConnectionError = Bunny::TCPConnectionFailed

module Bunny::Framing
  DATA_SLICE = ::T.let(nil, ::T.untyped)
  ENCODINGS_SUPPORTED = ::T.let(nil, ::T.untyped)
  HEADER_SLICE = ::T.let(nil, ::T.untyped)
  PAYLOAD_SLICE = ::T.let(nil, ::T.untyped)
end

module Bunny::Framing::IO
  extend ::T::Sig
end

module Bunny::Framing::String
  extend ::T::Sig
end

module Bunny::Framing
  extend ::T::Sig
end

class Bunny::SSLSocket
  READ_RETRY_EXCEPTION_CLASSES = ::T.let(nil, ::T.untyped)
  WRITE_RETRY_EXCEPTION_CLASSES = ::T.let(nil, ::T.untyped)
end

Bunny::SSLSocketImpl = Bunny::SSLSocket

Bunny::ServerDownError = Bunny::TCPConnectionFailed

class Bunny::Session
  CHANNEL_MAX_LIMIT = ::T.let(nil, ::T.untyped)
  CONNECT_TIMEOUT = ::T.let(nil, ::T.untyped)
  DEFAULT_CHANNEL_MAX = ::T.let(nil, ::T.untyped)
  DEFAULT_CLIENT_PROPERTIES = ::T.let(nil, ::T.untyped)
  DEFAULT_CONTINUATION_TIMEOUT = ::T.let(nil, ::T.untyped)
  DEFAULT_FRAME_MAX = ::T.let(nil, ::T.untyped)
  DEFAULT_HEARTBEAT = ::T.let(nil, ::T.untyped)
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
  DEFAULT_LOCALE = ::T.let(nil, ::T.untyped)
  DEFAULT_NETWORK_RECOVERY_INTERVAL = ::T.let(nil, ::T.untyped)
  DEFAULT_PASSWORD = ::T.let(nil, ::T.untyped)
  DEFAULT_USER = ::T.let(nil, ::T.untyped)
  DEFAULT_VHOST = ::T.let(nil, ::T.untyped)
end

module Bunny::Socket
  READ_RETRY_EXCEPTION_CLASSES = ::T.let(nil, ::T.untyped)
  WRITE_RETRY_EXCEPTION_CLASSES = ::T.let(nil, ::T.untyped)
end

module Bunny::Socket
  extend ::T::Sig
end

Bunny::SocketImpl = Bunny::Socket

Bunny::Timeout = Timeout

Bunny::Timer = Timeout

class Bunny::Transport
  DEFAULT_CONNECTION_TIMEOUT = ::T.let(nil, ::T.untyped)
  DEFAULT_READ_TIMEOUT = ::T.let(nil, ::T.untyped)
  DEFAULT_WRITE_TIMEOUT = ::T.let(nil, ::T.untyped)
end

module Bunny
  extend ::T::Sig
end

module BunnyMock
  PROTOCOL_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class BunnyMock::Exchanges::Header
  ALL = ::T.let(nil, ::T.untyped)
  ANY = ::T.let(nil, ::T.untyped)
end

class BunnyMock::Exchanges::Topic
  MULTI_WILDCARD = ::T.let(nil, ::T.untyped)
  SINGLE_WILDCARD = ::T.let(nil, ::T.untyped)
end

module BunnyMock::Exchanges
  extend ::T::Sig
end

module BunnyMock
  extend ::T::Sig
end

module Byebug
  PORT = ::T.let(nil, ::T.untyped)
end

class Byebug::AutoirbSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::AutolistSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::AutoprySetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::AutosaveSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::CallstyleSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::Command
  extend ::Byebug::Helpers::StringHelper
end

class Byebug::Context
  extend ::Byebug::Helpers::PathHelper
end

class Byebug::FullpathSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module Byebug::Helpers::BinHelper
  extend ::T::Sig
end

module Byebug::Helpers::EvalHelper
  extend ::T::Sig
end

module Byebug::Helpers::FileHelper
  extend ::T::Sig
end

module Byebug::Helpers::FrameHelper
  extend ::T::Sig
end

module Byebug::Helpers::ParseHelper
  extend ::T::Sig
end

module Byebug::Helpers::PathHelper
  extend ::T::Sig
end

module Byebug::Helpers::ReflectionHelper
  extend ::T::Sig
end

module Byebug::Helpers::StringHelper
  extend ::T::Sig
end

module Byebug::Helpers::ThreadHelper
  extend ::T::Sig
end

module Byebug::Helpers::ToggleHelper
  extend ::T::Sig
end

module Byebug::Helpers::VarHelper
  extend ::T::Sig
end

module Byebug::Helpers
  extend ::T::Sig
end

class Byebug::HistfileSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::HistsizeSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::ListsizeSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::LocalInterface
  EOF_ALIAS = ::T.let(nil, ::T.untyped)
end

class Byebug::Printers::Base
  SEPARATOR = ::T.let(nil, ::T.untyped)
end

module Byebug::Printers
  extend ::T::Sig
end

module Byebug::Remote
  extend ::T::Sig
end

class Byebug::SavefileSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::Setting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module Byebug::Subcommands::ClassMethods
  extend ::T::Sig
end

module Byebug::Subcommands
  extend ::T::Sig
end

class Byebug::ThreadsTable
end

class Byebug::ThreadsTable
end

class Byebug::WidthSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module Byebug
  extend ::T::Sig
end

class CGI
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class CGI::Cookie
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class CGI::Cookie
  extend ::T::Sig
end

module CGI::Escape
  extend ::T::Sig
end

module CGI::HtmlExtension
  def a(href=T.unsafe(nil)); end

  def base(href=T.unsafe(nil)); end

  def blockquote(cite=T.unsafe(nil)); end

  def caption(align=T.unsafe(nil)); end

  def checkbox(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def checkbox_group(name=T.unsafe(nil), *values); end

  def file_field(name=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def form(method=T.unsafe(nil), action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def hidden(name=T.unsafe(nil), value=T.unsafe(nil)); end

  def html(attributes=T.unsafe(nil)); end

  def image_button(src=T.unsafe(nil), name=T.unsafe(nil), alt=T.unsafe(nil)); end

  def img(src=T.unsafe(nil), alt=T.unsafe(nil), width=T.unsafe(nil), height=T.unsafe(nil)); end

  def multipart_form(action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def password_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def popup_menu(name=T.unsafe(nil), *values); end

  def radio_button(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def radio_group(name=T.unsafe(nil), *values); end

  def reset(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def scrolling_list(name=T.unsafe(nil), *values); end

  def submit(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def text_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def textarea(name=T.unsafe(nil), cols=T.unsafe(nil), rows=T.unsafe(nil)); end
end

module CGI::HtmlExtension
  extend ::T::Sig
end

class CGI::InvalidEncoding
  extend ::T::Sig
end

module CGI::QueryExtension
  extend ::T::Sig
end

module CGI::Util
  extend ::T::Sig
end

class CGI
  extend ::T::Sig
end

module CSSMin
  extend ::T::Sig
end

module CanRenderModel
  extend ::T::Sig
end

module Capybara
  VERSION = ::T.let(nil, ::T.untyped)
end

class Capybara::Config
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module Capybara::DSL
  extend ::T::Sig
end

module Capybara::Driver
  extend ::T::Sig
end

module Capybara::Helpers
  extend ::T::Sig
end

module Capybara::Minitest
end

module Capybara::Minitest::Assertions
  def assert_all_of_selectors(*args, &optional_filter_block); end

  def assert_ancestor(*args, &optional_filter_block); end

  def assert_any_of_selectors(*args, &optional_filter_block); end

  def assert_button(*args, &optional_filter_block); end

  def assert_checked_field(*args, &optional_filter_block); end

  def assert_content(*args); end

  def assert_css(*args, &optional_filter_block); end

  def assert_current_path(*args); end

  def assert_field(*args, &optional_filter_block); end

  def assert_link(*args, &optional_filter_block); end

  def assert_matches_css(*args, &optional_filter_block); end

  def assert_matches_selector(*args, &optional_filter_block); end

  def assert_matches_style(*args, &optional_filter_block); end

  def assert_matches_xpath(*args, &optional_filter_block); end

  def assert_no_ancestor(*args, &optional_filter_block); end

  def assert_no_button(*args, &optional_filter_block); end

  def assert_no_checked_field(*args, &optional_filter_block); end

  def assert_no_content(*args); end

  def assert_no_css(*args, &optional_filter_block); end

  def assert_no_current_path(*args); end

  def assert_no_field(*args, &optional_filter_block); end

  def assert_no_link(*args, &optional_filter_block); end

  def assert_no_select(*args, &optional_filter_block); end

  def assert_no_selector(*args, &optional_filter_block); end

  def assert_no_sibling(*args, &optional_filter_block); end

  def assert_no_table(*args, &optional_filter_block); end

  def assert_no_text(*args); end

  def assert_no_title(*args); end

  def assert_no_unchecked_field(*args, &optional_filter_block); end

  def assert_no_xpath(*args, &optional_filter_block); end

  def assert_none_of_selectors(*args, &optional_filter_block); end

  def assert_not_matches_css(*args, &optional_filter_block); end

  def assert_not_matches_selector(*args, &optional_filter_block); end

  def assert_not_matches_xpath(*args, &optional_filter_block); end

  def assert_select(*args, &optional_filter_block); end

  def assert_selector(*args, &optional_filter_block); end

  def assert_sibling(*args, &optional_filter_block); end

  def assert_table(*args, &optional_filter_block); end

  def assert_text(*args); end

  def assert_title(*args); end

  def assert_unchecked_field(*args, &optional_filter_block); end

  def assert_xpath(*args, &optional_filter_block); end

  def refute_ancestor(*args, &optional_filter_block); end

  def refute_button(*args, &optional_filter_block); end

  def refute_checked_field(*args, &optional_filter_block); end

  def refute_content(*args); end

  def refute_css(*args, &optional_filter_block); end

  def refute_current_path(*args); end

  def refute_field(*args, &optional_filter_block); end

  def refute_link(*args, &optional_filter_block); end

  def refute_matches_css(*args, &optional_filter_block); end

  def refute_matches_selector(*args, &optional_filter_block); end

  def refute_matches_xpath(*args, &optional_filter_block); end

  def refute_select(*args, &optional_filter_block); end

  def refute_selector(*args, &optional_filter_block); end

  def refute_sibling(*args, &optional_filter_block); end

  def refute_table(*args, &optional_filter_block); end

  def refute_text(*args); end

  def refute_title(*args); end

  def refute_unchecked_field(*args, &optional_filter_block); end

  def refute_xpath(*args, &optional_filter_block); end
end

module Capybara::Minitest::Assertions
  extend ::T::Sig
end

module Capybara::Minitest
  extend ::T::Sig
end

module Capybara::Node::Actions
  CAPTURE_FILE_ELEMENT_SCRIPT = ::T.let(nil, ::T.untyped)
  DATALIST_OPTIONS_SCRIPT = ::T.let(nil, ::T.untyped)
  RESET_STYLE_SCRIPT = ::T.let(nil, ::T.untyped)
  UPDATE_STYLE_SCRIPT = ::T.let(nil, ::T.untyped)
end

module Capybara::Node::Actions
  extend ::T::Sig
end

module Capybara::Node::DocumentMatchers
  extend ::T::Sig
end

class Capybara::Node::Element
  STYLE_SCRIPT = ::T.let(nil, ::T.untyped)
end

module Capybara::Node::Finders
  extend ::T::Sig
end

module Capybara::Node::Matchers
  extend ::T::Sig
end

class Capybara::Node::Simple
  VISIBILITY_XPATH = ::T.let(nil, ::T.untyped)
end

module Capybara::Node
  extend ::T::Sig
end

class Capybara::Queries::BaseQuery
  COUNT_KEYS = ::T.let(nil, ::T.untyped)
end

class Capybara::Queries::SelectorQuery
  VALID_KEYS = ::T.let(nil, ::T.untyped)
  VALID_MATCH = ::T.let(nil, ::T.untyped)
end

module Capybara::Queries
  extend ::T::Sig
end

module Capybara::RSpecMatchers::CountSugar
  extend ::T::Sig
end

module Capybara::RSpecMatchers::Matchers
  extend ::T::Sig
end

module Capybara::RSpecMatchers
  extend ::T::Sig
end

class Capybara::RackTest::Driver
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module Capybara::RackTest::Errors
  extend ::T::Sig
end

class Capybara::RackTest::Node
  BLOCK_ELEMENTS = ::T.let(nil, ::T.untyped)
  DISABLED_BY_FIELDSET_XPATH = ::T.let(nil, ::T.untyped)
  OPTION_OWNER_XPATH = ::T.let(nil, ::T.untyped)
end

module Capybara::RackTest
  extend ::T::Sig
end

class Capybara::ReadOnlySessionConfig
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Capybara::Selector
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Capybara::Selector::CSS
  ESCAPE = ::T.let(nil, ::T.untyped)
  H = ::T.let(nil, ::T.untyped)
  NMSTART = ::T.let(nil, ::T.untyped)
  NONASCII = ::T.let(nil, ::T.untyped)
  S = ::T.let(nil, ::T.untyped)
  UNICODE = ::T.let(nil, ::T.untyped)
end

module Capybara::Selector::Filters
  extend ::T::Sig
end

module Capybara::Selenium::ChromeLogs
  COMMANDS = ::T.let(nil, ::T.untyped)
  LOG_MSG = ::T.let(nil, ::T.untyped)
end

module Capybara::Selenium::ChromeLogs
  extend ::T::Sig
end

class Capybara::Selenium::Driver
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  SPECIAL_OPTIONS = ::T.let(nil, ::T.untyped)
end

module Capybara::Selenium::Driver::ChromeDriver
  extend ::T::Sig
end

module Capybara::Selenium::Driver::EdgeDriver
  extend ::T::Sig
end

module Capybara::Selenium::Driver::FirefoxDriver
  extend ::T::Sig
end

module Capybara::Selenium::Driver::InternetExplorerDriver
  extend ::T::Sig
end

module Capybara::Selenium::Driver::SafariDriver
  extend ::T::Sig
end

module Capybara::Selenium::Driver::W3CFirefoxDriver
  extend ::T::Sig
end

module Capybara::Selenium::Find
  extend ::T::Sig
end

class Capybara::Selenium::Node
  GET_XPATH_SCRIPT = ::T.let(nil, ::T.untyped)
  OBSCURED_OR_OFFSET_SCRIPT = ::T.let(nil, ::T.untyped)
end

module Capybara::Selenium::Node::Html5Drag
  ATTACH_FILE = ::T.let(nil, ::T.untyped)
  DROP_FILE = ::T.let(nil, ::T.untyped)
  DROP_STRING = ::T.let(nil, ::T.untyped)
  HTML5_DRAG_DROP_SCRIPT = ::T.let(nil, ::T.untyped)
  LEGACY_DRAG_CHECK = ::T.let(nil, ::T.untyped)
  MOUSEDOWN_TRACKER = ::T.let(nil, ::T.untyped)
end

module Capybara::Selenium::Node::Html5Drag
  extend ::T::Sig
end

class Capybara::Selenium::SafariNode
  MODIFIER_KEYS = ::T.let(nil, ::T.untyped)
end

module Capybara::Selenium::Scroll
  extend ::T::Sig
end

module Capybara::Selenium
  extend ::T::Sig
end

class Capybara::Server::AnimationDisabler
  DISABLE_MARKUP_TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Capybara::Server::Checker
  TRY_HTTPS_ERRORS = ::T.let(nil, ::T.untyped)
end

class Capybara::Session
  DOCUMENT_METHODS = ::T.let(nil, ::T.untyped)
  DSL_METHODS = ::T.let(nil, ::T.untyped)
  MODAL_METHODS = ::T.let(nil, ::T.untyped)
  NODE_METHODS = ::T.let(nil, ::T.untyped)
  SESSION_METHODS = ::T.let(nil, ::T.untyped)
end

class Capybara::SessionConfig
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module Capybara::SessionMatchers
  extend ::T::Sig
end

module Capybara
  extend ::T::Sig
end

module CapybaraMiniTestSpec
  VERSION = ::T.let(nil, ::T.untyped)
end

module CapybaraMiniTestSpec
  extend ::T::Sig
end

module CassetteReporter
  extend ::T::Sig
end

class Channel
  include ::Channel::GeneratedAssociationMethods
  def after_add_for_channel_binary_lists(); end

  def after_add_for_channel_binary_lists=(val); end

  def after_add_for_channel_binary_lists?(); end

  def after_add_for_channel_targets(); end

  def after_add_for_channel_targets=(val); end

  def after_add_for_channel_targets?(); end

  def after_remove_for_channel_binary_lists(); end

  def after_remove_for_channel_binary_lists=(val); end

  def after_remove_for_channel_binary_lists?(); end

  def after_remove_for_channel_targets(); end

  def after_remove_for_channel_targets=(val); end

  def after_remove_for_channel_targets?(); end

  def autosave_associated_records_for_channel_binary_lists(*args); end

  def autosave_associated_records_for_channel_targets(*args); end

  def autosave_associated_records_for_package(*args); end

  def before_add_for_channel_binary_lists(); end

  def before_add_for_channel_binary_lists=(val); end

  def before_add_for_channel_binary_lists?(); end

  def before_add_for_channel_targets(); end

  def before_add_for_channel_targets=(val); end

  def before_add_for_channel_targets?(); end

  def before_remove_for_channel_binary_lists(); end

  def before_remove_for_channel_binary_lists=(val); end

  def before_remove_for_channel_binary_lists?(); end

  def before_remove_for_channel_targets(); end

  def before_remove_for_channel_targets=(val); end

  def before_remove_for_channel_targets?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_channel_binary_lists(*args); end

  def validate_associated_records_for_channel_targets(*args); end
end

module Channel::GeneratedAssociationMethods
  def build_package(*args, &block); end

  def channel_binary_list_ids(); end

  def channel_binary_list_ids=(ids); end

  def channel_binary_lists(); end

  def channel_binary_lists=(value); end

  def channel_target_ids(); end

  def channel_target_ids=(ids); end

  def channel_targets(); end

  def channel_targets=(value); end

  def create_package(*args, &block); end

  def create_package!(*args, &block); end

  def package(); end

  def package=(value); end

  def reload_package(); end
end

module Channel::GeneratedAssociationMethods
  extend ::T::Sig
end

class Channel
  def self.after_add_for_channel_binary_lists(); end

  def self.after_add_for_channel_binary_lists=(val); end

  def self.after_add_for_channel_binary_lists?(); end

  def self.after_add_for_channel_targets(); end

  def self.after_add_for_channel_targets=(val); end

  def self.after_add_for_channel_targets?(); end

  def self.after_remove_for_channel_binary_lists(); end

  def self.after_remove_for_channel_binary_lists=(val); end

  def self.after_remove_for_channel_binary_lists?(); end

  def self.after_remove_for_channel_targets(); end

  def self.after_remove_for_channel_targets=(val); end

  def self.after_remove_for_channel_targets?(); end

  def self.before_add_for_channel_binary_lists(); end

  def self.before_add_for_channel_binary_lists=(val); end

  def self.before_add_for_channel_binary_lists?(); end

  def self.before_add_for_channel_targets(); end

  def self.before_add_for_channel_targets=(val); end

  def self.before_add_for_channel_targets?(); end

  def self.before_remove_for_channel_binary_lists(); end

  def self.before_remove_for_channel_binary_lists=(val); end

  def self.before_remove_for_channel_binary_lists?(); end

  def self.before_remove_for_channel_targets(); end

  def self.before_remove_for_channel_targets=(val); end

  def self.before_remove_for_channel_targets?(); end
end

class ChannelBinary
  include ::ChannelBinary::GeneratedAssociationMethods
  def autosave_associated_records_for_architecture(*args); end

  def autosave_associated_records_for_channel_binary_list(*args); end

  def autosave_associated_records_for_project(*args); end

  def autosave_associated_records_for_repository(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module ChannelBinary::GeneratedAssociationMethods
  def architecture(); end

  def architecture=(value); end

  def build_architecture(*args, &block); end

  def build_channel_binary_list(*args, &block); end

  def build_project(*args, &block); end

  def build_repository(*args, &block); end

  def channel_binary_list(); end

  def channel_binary_list=(value); end

  def create_architecture(*args, &block); end

  def create_architecture!(*args, &block); end

  def create_channel_binary_list(*args, &block); end

  def create_channel_binary_list!(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def create_repository(*args, &block); end

  def create_repository!(*args, &block); end

  def project(); end

  def project=(value); end

  def reload_architecture(); end

  def reload_channel_binary_list(); end

  def reload_project(); end

  def reload_repository(); end

  def repository(); end

  def repository=(value); end
end

module ChannelBinary::GeneratedAssociationMethods
  extend ::T::Sig
end

class ChannelBinaryList
  include ::ChannelBinaryList::GeneratedAssociationMethods
  def after_add_for_channel_binaries(); end

  def after_add_for_channel_binaries=(val); end

  def after_add_for_channel_binaries?(); end

  def after_remove_for_channel_binaries(); end

  def after_remove_for_channel_binaries=(val); end

  def after_remove_for_channel_binaries?(); end

  def autosave_associated_records_for_architecture(*args); end

  def autosave_associated_records_for_channel(*args); end

  def autosave_associated_records_for_channel_binaries(*args); end

  def autosave_associated_records_for_project(*args); end

  def autosave_associated_records_for_repository(*args); end

  def before_add_for_channel_binaries(); end

  def before_add_for_channel_binaries=(val); end

  def before_add_for_channel_binaries?(); end

  def before_remove_for_channel_binaries(); end

  def before_remove_for_channel_binaries=(val); end

  def before_remove_for_channel_binaries?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_channel_binaries(*args); end
end

module ChannelBinaryList::GeneratedAssociationMethods
  def architecture(); end

  def architecture=(value); end

  def build_architecture(*args, &block); end

  def build_channel(*args, &block); end

  def build_project(*args, &block); end

  def build_repository(*args, &block); end

  def channel(); end

  def channel=(value); end

  def channel_binaries(); end

  def channel_binaries=(value); end

  def channel_binary_ids(); end

  def channel_binary_ids=(ids); end

  def create_architecture(*args, &block); end

  def create_architecture!(*args, &block); end

  def create_channel(*args, &block); end

  def create_channel!(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def create_repository(*args, &block); end

  def create_repository!(*args, &block); end

  def project(); end

  def project=(value); end

  def reload_architecture(); end

  def reload_channel(); end

  def reload_project(); end

  def reload_repository(); end

  def repository(); end

  def repository=(value); end
end

module ChannelBinaryList::GeneratedAssociationMethods
  extend ::T::Sig
end

class ChannelBinaryList
  def self.after_add_for_channel_binaries(); end

  def self.after_add_for_channel_binaries=(val); end

  def self.after_add_for_channel_binaries?(); end

  def self.after_remove_for_channel_binaries(); end

  def self.after_remove_for_channel_binaries=(val); end

  def self.after_remove_for_channel_binaries?(); end

  def self.before_add_for_channel_binaries(); end

  def self.before_add_for_channel_binaries=(val); end

  def self.before_add_for_channel_binaries?(); end

  def self.before_remove_for_channel_binaries(); end

  def self.before_remove_for_channel_binaries=(val); end

  def self.before_remove_for_channel_binaries?(); end
end

class ChannelTarget
  include ::ChannelTarget::GeneratedAssociationMethods
  def autosave_associated_records_for_channel(*args); end

  def autosave_associated_records_for_project(); end

  def autosave_associated_records_for_repository(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module ChannelTarget::GeneratedAssociationMethods
  def build_channel(*args, &block); end

  def build_repository(*args, &block); end

  def channel(); end

  def channel=(value); end

  def create_channel(*args, &block); end

  def create_channel!(*args, &block); end

  def create_repository(*args, &block); end

  def create_repository!(*args, &block); end

  def project(); end

  def project=(value); end

  def reload_channel(); end

  def reload_project(); end

  def reload_repository(); end

  def repository(); end

  def repository=(value); end
end

module ChannelTarget::GeneratedAssociationMethods
  extend ::T::Sig
end

module ChildProcess
  VERSION = ::T.let(nil, ::T.untyped)
end

class ChildProcess::AbstractProcess
  POLL_INTERVAL = ::T.let(nil, ::T.untyped)
end

module ChildProcess::Unix
  extend ::T::Sig
end

module ChildProcess
  extend ::T::Sig
end

module ChunkyPNG
  COLOR_GRAYSCALE = ::T.let(nil, ::T.untyped)
  COLOR_GRAYSCALE_ALPHA = ::T.let(nil, ::T.untyped)
  COLOR_INDEXED = ::T.let(nil, ::T.untyped)
  COLOR_TRUECOLOR = ::T.let(nil, ::T.untyped)
  COLOR_TRUECOLOR_ALPHA = ::T.let(nil, ::T.untyped)
  COMPRESSED_CONTENT = ::T.let(nil, ::T.untyped)
  COMPRESSION_DEFAULT = ::T.let(nil, ::T.untyped)
  EMPTY_BYTEARRAY = ::T.let(nil, ::T.untyped)
  EXTRA_BYTE = ::T.let(nil, ::T.untyped)
  FILTERING_DEFAULT = ::T.let(nil, ::T.untyped)
  FILTER_AVERAGE = ::T.let(nil, ::T.untyped)
  FILTER_NONE = ::T.let(nil, ::T.untyped)
  FILTER_PAETH = ::T.let(nil, ::T.untyped)
  FILTER_SUB = ::T.let(nil, ::T.untyped)
  FILTER_UP = ::T.let(nil, ::T.untyped)
  INTERLACING_ADAM7 = ::T.let(nil, ::T.untyped)
  INTERLACING_NONE = ::T.let(nil, ::T.untyped)
  UNCOMPRESSED_CONTENT = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module ChunkyPNG::Canvas::Adam7Interlacing
  extend ::T::Sig
end

module ChunkyPNG::Canvas::DataUrlExporting
  extend ::T::Sig
end

module ChunkyPNG::Canvas::DataUrlImporting
  extend ::T::Sig
end

module ChunkyPNG::Canvas::Drawing
  extend ::T::Sig
end

module ChunkyPNG::Canvas::Masking
  extend ::T::Sig
end

module ChunkyPNG::Canvas::Operations
  extend ::T::Sig
end

module ChunkyPNG::Canvas::PNGDecoding
  extend ::T::Sig
end

module ChunkyPNG::Canvas::PNGEncoding
  extend ::T::Sig
end

module ChunkyPNG::Canvas::Resampling
  extend ::T::Sig
end

module ChunkyPNG::Canvas::StreamExporting
  extend ::T::Sig
end

module ChunkyPNG::Canvas::StreamImporting
  extend ::T::Sig
end

module ChunkyPNG::Chunk
  CHUNK_TYPES = ::T.let(nil, ::T.untyped)
end

class ChunkyPNG::Chunk::Physical
  INCHES_PER_METER = ::T.let(nil, ::T.untyped)
end

module ChunkyPNG::Chunk
  extend ::T::Sig
end

module ChunkyPNG::Color
  BLACK = ::T.let(nil, ::T.untyped)
  HEX3_COLOR_REGEXP = ::T.let(nil, ::T.untyped)
  HEX6_COLOR_REGEXP = ::T.let(nil, ::T.untyped)
  HTML_COLOR_REGEXP = ::T.let(nil, ::T.untyped)
  MAX = ::T.let(nil, ::T.untyped)
  MAX_EUCLIDEAN_DISTANCE_RGBA = ::T.let(nil, ::T.untyped)
  PREDEFINED_COLORS = ::T.let(nil, ::T.untyped)
  TRANSPARENT = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
end

module ChunkyPNG::Color
  extend ::T::Sig
end

class ChunkyPNG::Datastream
  SIGNATURE = ::T.let(nil, ::T.untyped)
end

class ChunkyPNG::Dimension
  DIMENSION_REGEXP = ::T.let(nil, ::T.untyped)
end

class ChunkyPNG::Image
  METADATA_COMPRESSION_TRESHOLD = ::T.let(nil, ::T.untyped)
end

class ChunkyPNG::Point
  POINT_REGEXP = ::T.let(nil, ::T.untyped)
end

module ChunkyPNG
  extend ::T::Sig
end

class Class
  def json_creatable?(); end
end

class Class
  extend ::T::Sig
end

class Clockwork::At
  NOT_SPECIFIED = ::T.let(nil, ::T.untyped)
  WDAYS = ::T.let(nil, ::T.untyped)
end

module Clockwork::Methods
  extend ::T::Sig
end

module Clockwork
  extend ::T::Sig
end

class ClosedQueueError
  extend ::T::Sig
end

class Cloud::Azure::Configuration
  include ::Cloud::Azure::Configuration::GeneratedAssociationMethods
  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module Cloud::Azure::Configuration::GeneratedAssociationMethods
  def build_user(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module Cloud::Azure::Configuration::GeneratedAssociationMethods
  extend ::T::Sig
end

class Cloud::Azure::Params
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Cloud::Azure::Params
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

module Cloud::Azure
  extend ::T::Sig
end

class Cloud::Backend::UploadJob
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def arch(*args, &block); end

  def details(*args, &block); end

  def filename(*args, &block); end

  def model_name(*args, &block); end

  def name(*args, &block); end

  def package(*args, &block); end

  def project(*args, &block); end

  def repository(*args, &block); end

  def size(*args, &block); end

  def state(*args, &block); end

  def target(*args, &block); end

  def user(*args, &block); end

  def validation_context(); end
end

class Cloud::Backend::UploadJob
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

module Cloud::Backend
  extend ::T::Sig
end

class Cloud::Ec2::Configuration
  include ::Cloud::Ec2::Configuration::GeneratedAssociationMethods
  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end

  def regenerate_external_id(); end
end

module Cloud::Ec2::Configuration::GeneratedAssociationMethods
  def build_user(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module Cloud::Ec2::Configuration::GeneratedAssociationMethods
  extend ::T::Sig
end

class Cloud::Ec2::Params
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Cloud::Ec2::Params
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

module Cloud::Ec2
  extend ::T::Sig
end

class Cloud::UploadJob
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def id(*args, &block); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Cloud::UploadJob
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class Cloud::User::UploadJob
  include ::Cloud::User::UploadJob::GeneratedAssociationMethods
  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module Cloud::User::UploadJob::GeneratedAssociationMethods
  def build_user(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module Cloud::User::UploadJob::GeneratedAssociationMethods
  extend ::T::Sig
end

module Cloud::User
  extend ::T::Sig
end

module Cloud
  extend ::T::Sig
end

module Cocoon::ViewHelpers
  extend ::T::Sig
end

module Cocoon
  extend ::T::Sig
end

module CodeMirrorHelpers
  extend ::T::Sig
end

module CodeRay
  CODERAY_PATH = ::T.let(nil, ::T.untyped)
  TokenKinds = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class CodeRay::Duo
  def call(code, options=T.unsafe(nil)); end

  def encode(code, options=T.unsafe(nil)); end

  def encoder(); end

  def format(); end

  def format=(format); end

  def highlight(code, options=T.unsafe(nil)); end

  def initialize(lang=T.unsafe(nil), format=T.unsafe(nil), options=T.unsafe(nil)); end

  def lang(); end

  def lang=(lang); end

  def options(); end

  def options=(options); end

  def scanner(); end
end

class CodeRay::Duo
  def self.[](*_); end
end

class CodeRay::Encoders::Encoder
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

CodeRay::Encoders::Encoder::PLUGIN_HOST = CodeRay::Encoders

class CodeRay::Encoders::Terminal
  TOKEN_COLORS = ::T.let(nil, ::T.untyped)
end

module CodeRay::Encoders
  extend ::T::Sig
end

module CodeRay::FileType
  TypeFromExt = ::T.let(nil, ::T.untyped)
  TypeFromName = ::T.let(nil, ::T.untyped)
  TypeFromShebang = ::T.let(nil, ::T.untyped)
end

class CodeRay::FileType::UnknownFileType
end

class CodeRay::FileType::UnknownFileType
end

module CodeRay::FileType
  extend ::T::Sig
  def self.[](filename, read_shebang=T.unsafe(nil)); end

  def self.fetch(filename, default=T.unsafe(nil), read_shebang=T.unsafe(nil)); end

  def self.type_from_shebang(filename); end
end

module CodeRay::Plugin
  extend ::T::Sig
end

module CodeRay::PluginHost
  PLUGIN_HOSTS = ::T.let(nil, ::T.untyped)
  PLUGIN_HOSTS_BY_ID = ::T.let(nil, ::T.untyped)
end

module CodeRay::PluginHost
  extend ::T::Sig
end

module CodeRay::Scanners
end

class CodeRay::Scanners::Scanner
  include ::Enumerable
  def binary_string(); end

  def column(pos=T.unsafe(nil)); end

  def each(&block); end

  def file_extension(); end

  def initialize(code=T.unsafe(nil), options=T.unsafe(nil)); end

  def lang(); end

  def line(pos=T.unsafe(nil)); end

  def raise_inspect(message, tokens, state=T.unsafe(nil), ambit=T.unsafe(nil), backtrace=T.unsafe(nil)); end

  def raise_inspect_arguments(message, tokens, state, ambit); end

  def reset_instance(); end

  def scan_rest(); end

  def scan_tokens(tokens, options); end

  def scanner_state_info(state); end

  def set_string_from_source(source); end

  def set_tokens_from_options(options); end

  def setup(); end

  def state(); end

  def state=(state); end

  def string=(code); end

  def tokenize(source=T.unsafe(nil), options=T.unsafe(nil)); end

  def tokens(); end

  def tokens_last(tokens, n); end

  def tokens_size(tokens); end
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  KINDS_NOT_LOC = ::T.let(nil, ::T.untyped)
  SCANNER_STATE_INFO = ::T.let(nil, ::T.untyped)
  SCAN_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
end

CodeRay::Scanners::Scanner::PLUGIN_HOST = CodeRay::Scanners

class CodeRay::Scanners::Scanner::ScanError
end

class CodeRay::Scanners::Scanner::ScanError
end

class CodeRay::Scanners::Scanner
  extend ::CodeRay::Plugin
  def self.encode_with_encoding(code, target_encoding); end

  def self.encoding(name=T.unsafe(nil)); end

  def self.file_extension(extension=T.unsafe(nil)); end

  def self.guess_encoding(s); end

  def self.lang(); end

  def self.normalize(code); end

  def self.to_unix(code); end
end

module CodeRay::Scanners
  extend ::CodeRay::PluginHost
  extend ::T::Sig
end

module CodeRay::Styles
end

class CodeRay::Styles::Style
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

CodeRay::Styles::Style::PLUGIN_HOST = CodeRay::Styles

class CodeRay::Styles::Style
  extend ::CodeRay::Plugin
end

module CodeRay::Styles
  extend ::CodeRay::PluginHost
  extend ::T::Sig
end

class CodeRay::Tokens
  def begin_group(kind); end

  def begin_line(kind); end

  def count(); end

  def encode(encoder, options=T.unsafe(nil)); end

  def end_group(kind); end

  def end_line(kind); end

  def method_missing(meth, options=T.unsafe(nil)); end

  def scanner(); end

  def scanner=(scanner); end

  def split_into_parts(*sizes); end

  def text_token(*_); end

  def to_s(); end

  def tokens(*_); end
end

class CodeRay::Tokens
end

class CodeRay::TokensProxy
  def block(); end

  def block=(block); end

  def each(*args, &blk); end

  def encode(encoder, options=T.unsafe(nil)); end

  def initialize(input, lang, options=T.unsafe(nil), block=T.unsafe(nil)); end

  def input(); end

  def input=(input); end

  def lang(); end

  def lang=(lang); end

  def method_missing(method, *args, &blk); end

  def options(); end

  def options=(options); end

  def scanner(); end

  def tokens(); end
end

class CodeRay::TokensProxy
end

module CodeRay
  extend ::T::Sig
end

module Codemirror::Rails
  CODEMIRROR_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Codemirror::Rails
  extend ::T::Sig
end

module Codemirror
  extend ::T::Sig
end

module Coffee::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

module Coffee::Rails::JsHook
  extend ::T::Sig
end

module Coffee::Rails
  extend ::T::Sig
end

module Coffee
  extend ::T::Sig
end

CoffeeScript::CompilationError = ExecJS::ProgramError

CoffeeScript::EngineError = ExecJS::RuntimeError

CoffeeScript::Error = ExecJS::Error

module CoffeeScript::Source
  COMPILE_FUNCTION_SOURCE = ::T.let(nil, ::T.untyped)
end

module CoffeeScript::Source
  extend ::T::Sig
end

module CoffeeScript
  extend ::T::Sig
end

module Colorize::ClassMethods
  extend ::T::Sig
end

module Colorize::InstanceMethods
  extend ::T::Sig
end

module Colorize
  extend ::T::Sig
end

class Comment
  include ::Comment::GeneratedAssociationMethods
  include ::ActsAsTree::InstanceMethods
  def after_add_for_children(); end

  def after_add_for_children=(val); end

  def after_add_for_children?(); end

  def after_remove_for_children(); end

  def after_remove_for_children=(val); end

  def after_remove_for_children?(); end

  def autosave_associated_records_for_children(*args); end

  def autosave_associated_records_for_commentable(*args); end

  def autosave_associated_records_for_parent(*args); end

  def autosave_associated_records_for_user(*args); end

  def before_add_for_children(); end

  def before_add_for_children=(val); end

  def before_add_for_children?(); end

  def before_remove_for_children(); end

  def before_remove_for_children=(val); end

  def before_remove_for_children?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_children(*args); end

  def walk_tree(options=T.unsafe(nil), &block); end
end

module Comment::GeneratedAssociationMethods
  def build_parent(*args, &block); end

  def build_user(*args, &block); end

  def child_ids(); end

  def child_ids=(ids); end

  def children(); end

  def children=(value); end

  def commentable(); end

  def commentable=(value); end

  def create_parent(*args, &block); end

  def create_parent!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def parent(); end

  def parent=(value); end

  def reload_commentable(); end

  def reload_parent(); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module Comment::GeneratedAssociationMethods
  extend ::T::Sig
end

class Comment
  def self.after_add_for_children(); end

  def self.after_add_for_children=(val); end

  def self.after_add_for_children?(); end

  def self.after_remove_for_children(); end

  def self.after_remove_for_children=(val); end

  def self.after_remove_for_children?(); end

  def self.before_add_for_children(); end

  def self.before_add_for_children=(val); end

  def self.before_add_for_children?(); end

  def self.before_remove_for_children(); end

  def self.before_remove_for_children=(val); end

  def self.before_remove_for_children?(); end

  def self.default_tree_order(); end

  def self.generations(); end

  def self.leaves(); end

  def self.root(); end

  def self.roots(); end

  def self.without_parent(*args); end
end

class CommentTest
  def test_validations(); end
end

module CommentsControllerPresenters
  extend ::T::Sig
end

class CommitActivity
  include ::CommitActivity::GeneratedAssociationMethods
  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module CommitActivity::GeneratedAssociationMethods
  def build_user(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module CommitActivity::GeneratedAssociationMethods
  extend ::T::Sig
end

module Comparable
  extend ::T::Sig
end

class Complex
  extend ::T::Sig
  def self.polar(*_); end

  def self.rect(*_); end

  def self.rectangular(*_); end
end

module Concurrent
  AtExit = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
  NULL_LOGGER = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Concurrent::AbstractExecutorService
  FALLBACK_POLICIES = ::T.let(nil, ::T.untyped)
end

module Concurrent::Async
  extend ::T::Sig
end

module Concurrent::AtomicDirectUpdate
  extend ::T::Sig
end

module Concurrent::AtomicNumericCompareAndSetWrapper
  extend ::T::Sig
end

class Concurrent::CAtomicFixnum
  MAX_VALUE = ::T.let(nil, ::T.untyped)
  MIN_VALUE = ::T.let(nil, ::T.untyped)
end

Concurrent::Collection::MapImplementation = Concurrent::Collection::MriMapBackend

module Concurrent::Collection
  extend ::T::Sig
end

module Concurrent::Concern::Dereferenceable
  extend ::T::Sig
end

module Concurrent::Concern::Logging
  extend ::T::Sig
end

module Concurrent::Concern::Obligation
  extend ::T::Sig
end

module Concurrent::Concern::Observable
  extend ::T::Sig
end

module Concurrent::Concern
  extend ::T::Sig
end

class Concurrent::ConcurrentUpdateError
  CONC_UP_ERR_BACKTRACE = ::T.let(nil, ::T.untyped)
end

module Concurrent::ExecutorService
  extend ::T::Sig
end

module Concurrent::ImmutableStruct
  extend ::T::Sig
end

class Concurrent::LockFreeStack
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Concurrent::MVar
  EMPTY = ::T.let(nil, ::T.untyped)
  TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Concurrent::Maybe
  NONE = ::T.let(nil, ::T.untyped)
end

module Concurrent::MutableStruct
  extend ::T::Sig
end

module Concurrent::Options
  extend ::T::Sig
end

module Concurrent::Promises::FactoryMethods::Configuration
  extend ::T::Sig
end

module Concurrent::Promises::FactoryMethods
  extend ::T::Sig
end

module Concurrent::Promises::InternalStates
  PENDING = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  RESOLVED = ::T.let(nil, ::T.untyped)
end

module Concurrent::Promises::InternalStates
  extend ::T::Sig
end

module Concurrent::Promises::Resolvable
  extend ::T::Sig
end

module Concurrent::Promises
  extend ::T::Sig
end

module Concurrent::ReInclude
  extend ::T::Sig
end

class Concurrent::ReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReentrantReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  READER_BITS = ::T.let(nil, ::T.untyped)
  READ_LOCK_MASK = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
  WRITER_BITS = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_HELD = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_MASK = ::T.let(nil, ::T.untyped)
end

class Concurrent::RubyThreadPoolExecutor
  DEFAULT_MAX_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_QUEUE_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MIN_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_THREAD_IDLETIMEOUT = ::T.let(nil, ::T.untyped)
end

module Concurrent::SerialExecutorService
  extend ::T::Sig
end

class Concurrent::SerializedExecutionDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Concurrent::SettableStruct
  extend ::T::Sig
end

module Concurrent::Synchronization::AbstractStruct
  extend ::T::Sig
end

module Concurrent::Synchronization::ConditionSignalling
  extend ::T::Sig
end

module Concurrent::Synchronization::MriAttrVolatile
  extend ::T::Sig
end

module Concurrent::Synchronization::RbxAttrVolatile::ClassMethods
  extend ::T::Sig
end

module Concurrent::Synchronization::RbxAttrVolatile
  extend ::T::Sig
end

module Concurrent::Synchronization::TruffleRubyAttrVolatile::ClassMethods
  extend ::T::Sig
end

module Concurrent::Synchronization::TruffleRubyAttrVolatile
  extend ::T::Sig
end

Concurrent::Synchronization::Volatile = Concurrent::Synchronization::MriAttrVolatile

module Concurrent::Synchronization
  extend ::T::Sig
end

class Concurrent::SynchronizedDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Concurrent::ThreadSafe::Util
  CPU_COUNT = ::T.let(nil, ::T.untyped)
  FIXNUM_BIT_SIZE = ::T.let(nil, ::T.untyped)
  MAX_INT = ::T.let(nil, ::T.untyped)
end

module Concurrent::ThreadSafe::Util
  extend ::T::Sig
end

module Concurrent::ThreadSafe
  extend ::T::Sig
end

class Concurrent::TimerTask
  EXECUTION_INTERVAL = ::T.let(nil, ::T.untyped)
  TIMEOUT_INTERVAL = ::T.let(nil, ::T.untyped)
end

class Concurrent::Transaction
  ABORTED = ::T.let(nil, ::T.untyped)
end

module Concurrent::Utility::EngineDetector
  extend ::T::Sig
end

module Concurrent::Utility::NativeExtensionLoader
  extend ::T::Sig
end

module Concurrent::Utility::NativeInteger
  MAX_VALUE = ::T.let(nil, ::T.untyped)
  MIN_VALUE = ::T.let(nil, ::T.untyped)
end

module Concurrent::Utility::NativeInteger
  extend ::T::Sig
end

module Concurrent::Utility
  extend ::T::Sig
end

module Concurrent
  extend ::T::Sig
end

ConditionVariable = Thread::ConditionVariable

class Configuration
  include ::Configuration::GeneratedAssociationMethods
end

module Configuration::GeneratedAssociationMethods
end

module Configuration::GeneratedAssociationMethods
  extend ::T::Sig
end

module ControllersAuthentication
  extend ::T::Sig
end

class ConvertRequestHistory::OldHistory
  include ::ConvertRequestHistory::OldHistory::GeneratedAssociationMethods
  def autosave_associated_records_for_bs_request(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module ConvertRequestHistory::OldHistory::GeneratedAssociationMethods
  def bs_request(); end

  def bs_request=(value); end

  def build_bs_request(*args, &block); end

  def create_bs_request(*args, &block); end

  def create_bs_request!(*args, &block); end

  def reload_bs_request(); end
end

module ConvertRequestHistory::OldHistory::GeneratedAssociationMethods
  extend ::T::Sig
end

module Coverage
  extend ::T::Sig
  def self.peek_result(); end

  def self.running?(); end

end

module Coveralls
  VERSION = ::T.let(nil, ::T.untyped)
end

class Coveralls::API
  API_BASE = ::T.let(nil, ::T.untyped)
  API_DOMAIN = ::T.let(nil, ::T.untyped)
  API_HOST = ::T.let(nil, ::T.untyped)
  API_PROTOCOL = ::T.let(nil, ::T.untyped)
end

module Coveralls::Configuration
  extend ::T::Sig
end

module Coveralls::Output
  extend ::T::Sig
end

module Coveralls::SimpleCov
  extend ::T::Sig
end

module Coveralls
  extend ::T::Sig
end

module Crack
  extend ::T::Sig
end

class Crass::Parser
  BLOCK_END_TOKENS = ::T.let(nil, ::T.untyped)
end

class Crass::Tokenizer
  RE_COMMENT_CLOSE = ::T.let(nil, ::T.untyped)
  RE_DIGIT = ::T.let(nil, ::T.untyped)
  RE_ESCAPE = ::T.let(nil, ::T.untyped)
  RE_HEX = ::T.let(nil, ::T.untyped)
  RE_NAME = ::T.let(nil, ::T.untyped)
  RE_NAME_START = ::T.let(nil, ::T.untyped)
  RE_NON_PRINTABLE = ::T.let(nil, ::T.untyped)
  RE_NUMBER_DECIMAL = ::T.let(nil, ::T.untyped)
  RE_NUMBER_EXPONENT = ::T.let(nil, ::T.untyped)
  RE_NUMBER_SIGN = ::T.let(nil, ::T.untyped)
  RE_NUMBER_STR = ::T.let(nil, ::T.untyped)
  RE_QUOTED_URL_START = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_END = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_START = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE_ANCHORED = ::T.let(nil, ::T.untyped)
end

module Crass
  extend ::T::Sig
end

module DB
  extend ::T::Sig
end

module Daemonize
  extend ::T::Sig
end

module Daemons
  VERSION = ::T.let(nil, ::T.untyped)
end

class Daemons::Application
  SIGNAL = ::T.let(nil, ::T.untyped)
end

class Daemons::Controller
  COMMANDS = ::T.let(nil, ::T.untyped)
end

class Daemons::PidFile
  DEFAULT_PID_DELIMITER = ::T.let(nil, ::T.untyped)
end

module Daemons
  extend ::T::Sig
end

module Dalli
  VERSION = ::T.let(nil, ::T.untyped)
end

class Dalli::Client
  CACHE_NILS = ::T.let(nil, ::T.untyped)
end

class Dalli::Ring
  POINTS_PER_SERVER = ::T.let(nil, ::T.untyped)
end

class Dalli::Server
  CAS_HEADER = ::T.let(nil, ::T.untyped)
  DEFAULTS = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DEFAULT_WEIGHT = ::T.let(nil, ::T.untyped)
  FLAG_COMPRESSED = ::T.let(nil, ::T.untyped)
  FLAG_SERIALIZED = ::T.let(nil, ::T.untyped)
  FORMAT = ::T.let(nil, ::T.untyped)
  HEADER = ::T.let(nil, ::T.untyped)
  KV_HEADER = ::T.let(nil, ::T.untyped)
  MAX_ACCEPTABLE_EXPIRATION_INTERVAL = ::T.let(nil, ::T.untyped)
  NORMAL_HEADER = ::T.let(nil, ::T.untyped)
  NOT_FOUND = ::T.let(nil, ::T.untyped)
  OPCODES = ::T.let(nil, ::T.untyped)
  OP_FORMAT = ::T.let(nil, ::T.untyped)
  REQUEST = ::T.let(nil, ::T.untyped)
  RESPONSE = ::T.let(nil, ::T.untyped)
  RESPONSE_CODES = ::T.let(nil, ::T.untyped)
end

module Dalli::Server::KSocket::InstanceMethods
  extend ::T::Sig
end

module Dalli::Server::KSocket
  extend ::T::Sig
end

module Dalli::Server::TCPSocketOptions
  extend ::T::Sig
end

module Dalli::Threadsafe
  extend ::T::Sig
end

module Dalli
  extend ::T::Sig
end

class Data
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Data
  extend ::T::Sig
end

module DataMigrate::DataSchemaMigration::GeneratedAssociationMethods
  extend ::T::Sig
end

module DataMigrate::Tasks::DataMigrateTasks
  extend ::T::Sig
end

module DataMigrate::Tasks
  extend ::T::Sig
end

module DataMigrate
  extend ::T::Sig
end

class DatabaseCleaner::Safeguard
  CHECKS = ::T.let(nil, ::T.untyped)
end

class DatabaseCleaner::Safeguard::Production
  KEYS = ::T.let(nil, ::T.untyped)
end

class DatabaseCleaner::Safeguard::RemoteDatabaseUrl
  LOCAL = ::T.let(nil, ::T.untyped)
end

module DatabaseCleaner
  extend ::T::Sig
end

class Date
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  DATE_FORMATS = ::T.let(nil, ::T.untyped)
end

class Date::Infinity
  def initialize(d=T.unsafe(nil)); end
end

class Date::Infinity
  extend ::T::Sig
end

class Date
  extend ::T::Sig
end

module DateAndTime::Calculations
  DAYS_INTO_WEEK = ::T.let(nil, ::T.untyped)
  WEEKEND_DAYS = ::T.let(nil, ::T.untyped)
end

module DateAndTime::Calculations
  extend ::T::Sig
end

module DateAndTime::Compatibility
  extend ::T::Sig
end

module DateAndTime::Zones
  extend ::T::Sig
end

module DateAndTime
  extend ::T::Sig
end

class DateTime
  extend ::T::Sig
end

module Delayed::Backend::ActiveRecord::Job::GeneratedAssociationMethods
  extend ::T::Sig
end

module Delayed::Backend::ActiveRecord
  extend ::T::Sig
end

module Delayed::Backend::Base
  ParseObjectFromYaml = ::T.let(nil, ::T.untyped)
end

module Delayed::Backend::Base::ClassMethods
  extend ::T::Sig
end

module Delayed::Backend::Base
  extend ::T::Sig
end

module Delayed::Backend
  extend ::T::Sig
end

module Delayed::Compatibility
  extend ::T::Sig
end

module Delayed::DelayMail
  extend ::T::Sig
end

Delayed::Job = Delayed::Backend::ActiveRecord::Job

class Delayed::Lifecycle
  EVENTS = ::T.let(nil, ::T.untyped)
end

module Delayed::MessageSending
  extend ::T::Sig
end

module Delayed::MessageSendingClassMethods
  extend ::T::Sig
end

module Delayed::Plugins
  extend ::T::Sig
end

class Delayed::PsychExt::ToRuby
end

module Delayed::PsychExt
  extend ::T::Sig
end

class Delayed::Worker
  DEFAULT_DEFAULT_PRIORITY = ::T.let(nil, ::T.untyped)
  DEFAULT_DELAY_JOBS = ::T.let(nil, ::T.untyped)
  DEFAULT_LOG_LEVEL = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_ATTEMPTS = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_RUN_TIME = ::T.let(nil, ::T.untyped)
  DEFAULT_QUEUES = ::T.let(nil, ::T.untyped)
  DEFAULT_QUEUE_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  DEFAULT_READ_AHEAD = ::T.let(nil, ::T.untyped)
  DEFAULT_SLEEP_DELAY = ::T.let(nil, ::T.untyped)
end

module Delayed
  extend ::T::Sig
end

class Delegator
  def !=(obj); end

  def ==(obj); end

  def __getobj__(); end

  def __setobj__(obj); end

  def eql?(obj); end

  def initialize(obj); end

  def marshal_dump(); end

  def marshal_load(data); end

  def method_missing(m, *args, &block); end

  def methods(all=T.unsafe(nil)); end

  def protected_methods(all=T.unsafe(nil)); end

  def public_methods(all=T.unsafe(nil)); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Delegator
  extend ::T::Sig
  def self.const_missing(n); end

  def self.delegating_block(mid); end

  def self.public_api(); end
end

class DidYouMean::ClassNameChecker
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def class_name(); end

  def class_names(); end

  def corrections(); end

  def initialize(exception); end

  def scopes(); end
end

class DidYouMean::ClassNameChecker
  extend ::T::Sig
end

module DidYouMean::Correctable
  def corrections(); end

  def original_message(); end

  def spell_checker(); end

  def to_s(); end
end

module DidYouMean::Correctable
  extend ::T::Sig
end

class DidYouMean::DeprecatedIgnoredCallers
  def +(*_); end

  def <<(*_); end
end

class DidYouMean::DeprecatedIgnoredCallers
end

module DidYouMean::Jaro
  extend ::T::Sig
  def self.distance(str1, str2); end
end

module DidYouMean::JaroWinkler
  extend ::T::Sig
  def self.distance(str1, str2); end
end

class DidYouMean::KeyErrorChecker
  def corrections(); end

  def initialize(key_error); end
end

class DidYouMean::KeyErrorChecker
end

module DidYouMean::Levenshtein
  extend ::T::Sig
  def self.distance(str1, str2); end

  def self.min3(a, b, c); end
end

class DidYouMean::MethodNameChecker
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def corrections(); end

  def initialize(exception); end

  def method_name(); end

  def method_names(); end

  def receiver(); end
end

class DidYouMean::MethodNameChecker
  extend ::T::Sig
end

class DidYouMean::NullChecker
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def corrections(); end

  def initialize(*_); end
end

class DidYouMean::NullChecker
  extend ::T::Sig
end

class DidYouMean::PlainFormatter
  def message_for(corrections); end
end

class DidYouMean::PlainFormatter
end

class DidYouMean::SpellChecker
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def correct(input); end

  def initialize(dictionary:); end
end

class DidYouMean::SpellChecker
  extend ::T::Sig
end

class DidYouMean::VariableNameChecker
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def corrections(); end

  def cvar_names(); end

  def initialize(exception); end

  def ivar_names(); end

  def lvar_names(); end

  def method_names(); end

  def name(); end
  RB_PREDEFINED_OBJECTS = ::T.let(nil, ::T.untyped)
end

class DidYouMean::VariableNameChecker
  extend ::T::Sig
end

module DidYouMean
  extend ::T::Sig
  def self.formatter(); end

  def self.formatter=(formatter); end
end

class Digest::Base
  extend ::T::Sig
end

class Digest::Class
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Digest::Class
  extend ::T::Sig
end

module Digest::Instance
  extend ::T::Sig
end

class Digest::MD5
  extend ::T::Sig
end

class Digest::SHA1
  extend ::T::Sig
end

class Digest::SHA2
  extend ::T::Sig
end

class Digest::SHA256
  extend ::T::Sig
end

class Digest::SHA384
  extend ::T::Sig
end

class Digest::SHA512
  extend ::T::Sig
end

module Digest::UUID
  DNS_NAMESPACE = ::T.let(nil, ::T.untyped)
  OID_NAMESPACE = ::T.let(nil, ::T.untyped)
  URL_NAMESPACE = ::T.let(nil, ::T.untyped)
  X500_NAMESPACE = ::T.let(nil, ::T.untyped)
end

module Digest::UUID
  extend ::T::Sig
end

module Digest
  extend ::T::Sig
end

class Dir
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module Dir::Tmpname
  extend ::T::Sig
end

class Dir
  extend ::T::Sig
  def self.children(*_); end

  def self.each_child(*_); end

  def self.empty?(_); end

  def self.exists?(_); end

end

class Distribution
  include ::Distribution::GeneratedAssociationMethods
  def after_add_for_architectures(); end

  def after_add_for_architectures=(val); end

  def after_add_for_architectures?(); end

  def after_add_for_distributions_architectures(); end

  def after_add_for_distributions_architectures=(val); end

  def after_add_for_distributions_architectures?(); end

  def after_add_for_distributions_icons(); end

  def after_add_for_distributions_icons=(val); end

  def after_add_for_distributions_icons?(); end

  def after_add_for_icons(); end

  def after_add_for_icons=(val); end

  def after_add_for_icons?(); end

  def after_remove_for_architectures(); end

  def after_remove_for_architectures=(val); end

  def after_remove_for_architectures?(); end

  def after_remove_for_distributions_architectures(); end

  def after_remove_for_distributions_architectures=(val); end

  def after_remove_for_distributions_architectures?(); end

  def after_remove_for_distributions_icons(); end

  def after_remove_for_distributions_icons=(val); end

  def after_remove_for_distributions_icons?(); end

  def after_remove_for_icons(); end

  def after_remove_for_icons=(val); end

  def after_remove_for_icons?(); end

  def autosave_associated_records_for_architectures(*args); end

  def autosave_associated_records_for_distributions_architectures(*args); end

  def autosave_associated_records_for_distributions_icons(*args); end

  def autosave_associated_records_for_icons(*args); end

  def before_add_for_architectures(); end

  def before_add_for_architectures=(val); end

  def before_add_for_architectures?(); end

  def before_add_for_distributions_architectures(); end

  def before_add_for_distributions_architectures=(val); end

  def before_add_for_distributions_architectures?(); end

  def before_add_for_distributions_icons(); end

  def before_add_for_distributions_icons=(val); end

  def before_add_for_distributions_icons?(); end

  def before_add_for_icons(); end

  def before_add_for_icons=(val); end

  def before_add_for_icons?(); end

  def before_remove_for_architectures(); end

  def before_remove_for_architectures=(val); end

  def before_remove_for_architectures?(); end

  def before_remove_for_distributions_architectures(); end

  def before_remove_for_distributions_architectures=(val); end

  def before_remove_for_distributions_architectures?(); end

  def before_remove_for_distributions_icons(); end

  def before_remove_for_distributions_icons=(val); end

  def before_remove_for_distributions_icons?(); end

  def before_remove_for_icons(); end

  def before_remove_for_icons=(val); end

  def before_remove_for_icons?(); end

  def validate_associated_records_for_architectures(*args); end

  def validate_associated_records_for_distributions_architectures(*args); end

  def validate_associated_records_for_distributions_icons(*args); end

  def validate_associated_records_for_icons(*args); end
end

module Distribution::GeneratedAssociationMethods
  def architecture_ids(); end

  def architecture_ids=(ids); end

  def architectures(); end

  def architectures=(value); end

  def icon_ids(); end

  def icon_ids=(ids); end

  def icons(); end

  def icons=(value); end
end

module Distribution::GeneratedAssociationMethods
  extend ::T::Sig
end

class Distribution
  def self.after_add_for_architectures(); end

  def self.after_add_for_architectures=(val); end

  def self.after_add_for_architectures?(); end

  def self.after_add_for_distributions_architectures(); end

  def self.after_add_for_distributions_architectures=(val); end

  def self.after_add_for_distributions_architectures?(); end

  def self.after_add_for_distributions_icons(); end

  def self.after_add_for_distributions_icons=(val); end

  def self.after_add_for_distributions_icons?(); end

  def self.after_add_for_icons(); end

  def self.after_add_for_icons=(val); end

  def self.after_add_for_icons?(); end

  def self.after_remove_for_architectures(); end

  def self.after_remove_for_architectures=(val); end

  def self.after_remove_for_architectures?(); end

  def self.after_remove_for_distributions_architectures(); end

  def self.after_remove_for_distributions_architectures=(val); end

  def self.after_remove_for_distributions_architectures?(); end

  def self.after_remove_for_distributions_icons(); end

  def self.after_remove_for_distributions_icons=(val); end

  def self.after_remove_for_distributions_icons?(); end

  def self.after_remove_for_icons(); end

  def self.after_remove_for_icons=(val); end

  def self.after_remove_for_icons?(); end

  def self.before_add_for_architectures(); end

  def self.before_add_for_architectures=(val); end

  def self.before_add_for_architectures?(); end

  def self.before_add_for_distributions_architectures(); end

  def self.before_add_for_distributions_architectures=(val); end

  def self.before_add_for_distributions_architectures?(); end

  def self.before_add_for_distributions_icons(); end

  def self.before_add_for_distributions_icons=(val); end

  def self.before_add_for_distributions_icons?(); end

  def self.before_add_for_icons(); end

  def self.before_add_for_icons=(val); end

  def self.before_add_for_icons?(); end

  def self.before_remove_for_architectures(); end

  def self.before_remove_for_architectures=(val); end

  def self.before_remove_for_architectures?(); end

  def self.before_remove_for_distributions_architectures(); end

  def self.before_remove_for_distributions_architectures=(val); end

  def self.before_remove_for_distributions_architectures?(); end

  def self.before_remove_for_distributions_icons(); end

  def self.before_remove_for_distributions_icons=(val); end

  def self.before_remove_for_distributions_icons?(); end

  def self.before_remove_for_icons(); end

  def self.before_remove_for_icons=(val); end

  def self.before_remove_for_icons?(); end
end

class DistributionIcon
  include ::DistributionIcon::GeneratedAssociationMethods
  def after_add_for_distributionicons_distributions(); end

  def after_add_for_distributionicons_distributions=(val); end

  def after_add_for_distributionicons_distributions?(); end

  def after_add_for_distributions(); end

  def after_add_for_distributions=(val); end

  def after_add_for_distributions?(); end

  def after_remove_for_distributionicons_distributions(); end

  def after_remove_for_distributionicons_distributions=(val); end

  def after_remove_for_distributionicons_distributions?(); end

  def after_remove_for_distributions(); end

  def after_remove_for_distributions=(val); end

  def after_remove_for_distributions?(); end

  def autosave_associated_records_for_distributionicons_distributions(*args); end

  def autosave_associated_records_for_distributions(*args); end

  def before_add_for_distributionicons_distributions(); end

  def before_add_for_distributionicons_distributions=(val); end

  def before_add_for_distributionicons_distributions?(); end

  def before_add_for_distributions(); end

  def before_add_for_distributions=(val); end

  def before_add_for_distributions?(); end

  def before_remove_for_distributionicons_distributions(); end

  def before_remove_for_distributionicons_distributions=(val); end

  def before_remove_for_distributionicons_distributions?(); end

  def before_remove_for_distributions(); end

  def before_remove_for_distributions=(val); end

  def before_remove_for_distributions?(); end

  def validate_associated_records_for_distributionicons_distributions(*args); end

  def validate_associated_records_for_distributions(*args); end
end

module DistributionIcon::GeneratedAssociationMethods
  def distribution_ids(); end

  def distribution_ids=(ids); end

  def distributions(); end

  def distributions=(value); end
end

module DistributionIcon::GeneratedAssociationMethods
  extend ::T::Sig
end

class DistributionIcon
  def self.after_add_for_distributionicons_distributions(); end

  def self.after_add_for_distributionicons_distributions=(val); end

  def self.after_add_for_distributionicons_distributions?(); end

  def self.after_add_for_distributions(); end

  def self.after_add_for_distributions=(val); end

  def self.after_add_for_distributions?(); end

  def self.after_remove_for_distributionicons_distributions(); end

  def self.after_remove_for_distributionicons_distributions=(val); end

  def self.after_remove_for_distributionicons_distributions?(); end

  def self.after_remove_for_distributions(); end

  def self.after_remove_for_distributions=(val); end

  def self.after_remove_for_distributions?(); end

  def self.before_add_for_distributionicons_distributions(); end

  def self.before_add_for_distributionicons_distributions=(val); end

  def self.before_add_for_distributionicons_distributions?(); end

  def self.before_add_for_distributions(); end

  def self.before_add_for_distributions=(val); end

  def self.before_add_for_distributions?(); end

  def self.before_remove_for_distributionicons_distributions(); end

  def self.before_remove_for_distributionicons_distributions=(val); end

  def self.before_remove_for_distributionicons_distributions?(); end

  def self.before_remove_for_distributions(); end

  def self.before_remove_for_distributions=(val); end

  def self.before_remove_for_distributions?(); end
end

module Docile
  VERSION = ::T.let(nil, ::T.untyped)
end

module Docile::Execution
  extend ::T::Sig
end

class Docile::FallbackContextProxy
  NON_FALLBACK_METHODS = ::T.let(nil, ::T.untyped)
  NON_PROXIED_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
  NON_PROXIED_METHODS = ::T.let(nil, ::T.untyped)
end

module Docile
  extend ::T::Sig
end

class DownloadRepository
  include ::DownloadRepository::GeneratedAssociationMethods
  def autosave_associated_records_for_repository(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module DownloadRepository::GeneratedAssociationMethods
  def build_repository(*args, &block); end

  def create_repository(*args, &block); end

  def create_repository!(*args, &block); end

  def reload_repository(); end

  def repository(); end

  def repository=(value); end
end

module DownloadRepository::GeneratedAssociationMethods
  extend ::T::Sig
end

class EOFError
  extend ::T::Sig
end

class ERB
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def def_method(mod, methodname, fname=T.unsafe(nil)); end

  def def_module(methodname=T.unsafe(nil)); end

  def result_with_hash(hash); end
end

class ERB::Compiler
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class ERB::Compiler::Buffer
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class ERB::Compiler::Buffer
  extend ::T::Sig
end

class ERB::Compiler::ExplicitScanner
  extend ::T::Sig
end

class ERB::Compiler::PercentLine
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class ERB::Compiler::PercentLine
  extend ::T::Sig
end

class ERB::Compiler::Scanner
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  DEFAULT_ETAGS = ::T.let(nil, ::T.untyped)
  DEFAULT_STAGS = ::T.let(nil, ::T.untyped)
end

class ERB::Compiler::Scanner
  extend ::T::Sig
end

class ERB::Compiler::SimpleScanner
  extend ::T::Sig
end

class ERB::Compiler::TrimScanner
  extend ::T::Sig
end

class ERB::Compiler
  extend ::T::Sig
end

module ERB::DefMethod
  extend ::T::Sig
end

module ERB::Util
  HTML_ESCAPE = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_ONCE_REGEXP = ::T.let(nil, ::T.untyped)
  JSON_ESCAPE = ::T.let(nil, ::T.untyped)
  JSON_ESCAPE_REGEXP = ::T.let(nil, ::T.untyped)
end

module ERB::Util
  extend ::T::Sig
end

class ERB
  extend ::T::Sig
end

class EmbargoAttribute::AttribTypeModifiableBy
  include ::EmbargoAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
end

module EmbargoAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
end

module EmbargoAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
  extend ::T::Sig
end

Emitter = Psych::Stream::Emitter

class Encoding
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def _dump(*_); end
end

class Encoding::CompatibilityError
  extend ::T::Sig
end

class Encoding::Converter
  def convert(_); end

  def convpath(); end

  def destination_encoding(); end

  def finish(); end

  def initialize(*_); end

  def insert_output(_); end

  def last_error(); end

  def primitive_convert(*_); end

  def primitive_errinfo(); end

  def putback(*_); end

  def replacement(); end

  def replacement=(replacement); end

  def source_encoding(); end
end

class Encoding::Converter
  extend ::T::Sig
  def self.asciicompat_encoding(_); end

  def self.search_convpath(*_); end
end

class Encoding::ConverterNotFoundError
  extend ::T::Sig
end

class Encoding::InvalidByteSequenceError
  def destination_encoding(); end

  def destination_encoding_name(); end

  def error_bytes(); end

  def incomplete_input?(); end

  def readagain_bytes(); end

  def source_encoding(); end

  def source_encoding_name(); end
end

class Encoding::InvalidByteSequenceError
  extend ::T::Sig
end

class Encoding::UndefinedConversionError
  def destination_encoding(); end

  def destination_encoding_name(); end

  def error_char(); end

  def source_encoding(); end

  def source_encoding_name(); end
end

class Encoding::UndefinedConversionError
  extend ::T::Sig
end

class Encoding
  extend ::T::Sig
  def self._load(_); end

  def self.locale_charmap(); end
end

class EncodingError
  extend ::T::Sig
end

module Enumerable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def chunk(); end

  def chunk_while(); end

  def each_entry(*_); end

  def grep_v(_); end

  def slice_after(*_); end

  def slice_before(*_); end

  def slice_when(); end

  def sum(identity=T.unsafe(nil), &block); end

  def to_set(klass=T.unsafe(nil), *args, &block); end

  def uniq(); end

  def zip(*_); end
end

module Enumerable
  extend ::T::Sig
end

class Enumerator
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def each_with_index(); end

end

class Enumerator::Generator
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def each(*_, &blk); end

  def initialize(*_); end
end

class Enumerator::Generator
  extend ::T::Sig
end

class Enumerator::Lazy
  def chunk(*_); end

  def chunk_while(*_); end

  def force(*_); end

  def slice_when(*_); end
end

class Enumerator::Lazy
  extend ::T::Sig
end

class Enumerator::Yielder
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Enumerator::Yielder
  extend ::T::Sig
end

class Enumerator
  extend ::T::Sig
end

class Errno::E2BIG
  extend ::T::Sig
end

class Errno::EACCES
  extend ::T::Sig
end

class Errno::EADDRINUSE
  extend ::T::Sig
end

class Errno::EADDRNOTAVAIL
  extend ::T::Sig
end

class Errno::EADV
  extend ::T::Sig
end

class Errno::EAFNOSUPPORT
  extend ::T::Sig
end

class Errno::EAGAIN
  extend ::T::Sig
end

class Errno::EALREADY
  extend ::T::Sig
end

Errno::EAUTH = Errno::NOERROR

class Errno::EBADE
  extend ::T::Sig
end

class Errno::EBADF
  extend ::T::Sig
end

class Errno::EBADFD
  extend ::T::Sig
end

class Errno::EBADMSG
  extend ::T::Sig
end

class Errno::EBADR
  extend ::T::Sig
end

Errno::EBADRPC = Errno::NOERROR

class Errno::EBADRQC
  extend ::T::Sig
end

class Errno::EBADSLT
  extend ::T::Sig
end

class Errno::EBFONT
  extend ::T::Sig
end

class Errno::EBUSY
  extend ::T::Sig
end

class Errno::ECANCELED
  extend ::T::Sig
end

Errno::ECAPMODE = Errno::NOERROR

class Errno::ECHILD
  extend ::T::Sig
end

class Errno::ECHRNG
  extend ::T::Sig
end

class Errno::ECOMM
  extend ::T::Sig
end

class Errno::ECONNABORTED
  extend ::T::Sig
end

class Errno::ECONNREFUSED
  extend ::T::Sig
end

class Errno::ECONNRESET
  extend ::T::Sig
end

class Errno::EDEADLK
  extend ::T::Sig
end

Errno::EDEADLOCK = Errno::EDEADLK

class Errno::EDESTADDRREQ
  extend ::T::Sig
end

class Errno::EDOM
  extend ::T::Sig
end

Errno::EDOOFUS = Errno::NOERROR

class Errno::EDOTDOT
  extend ::T::Sig
end

class Errno::EDQUOT
  extend ::T::Sig
end

class Errno::EEXIST
  extend ::T::Sig
end

class Errno::EFAULT
  extend ::T::Sig
end

class Errno::EFBIG
  extend ::T::Sig
end

Errno::EFTYPE = Errno::NOERROR

class Errno::EHOSTDOWN
  extend ::T::Sig
end

class Errno::EHOSTUNREACH
  extend ::T::Sig
end

class Errno::EHWPOISON
  extend ::T::Sig
end

class Errno::EIDRM
  extend ::T::Sig
end

class Errno::EILSEQ
  extend ::T::Sig
end

class Errno::EINPROGRESS
  extend ::T::Sig
end

class Errno::EINTR
  extend ::T::Sig
end

class Errno::EINVAL
  extend ::T::Sig
end

class Errno::EIO
  extend ::T::Sig
end

Errno::EIPSEC = Errno::NOERROR

class Errno::EISCONN
  extend ::T::Sig
end

class Errno::EISDIR
  extend ::T::Sig
end

class Errno::EISNAM
  extend ::T::Sig
end

class Errno::EKEYEXPIRED
  extend ::T::Sig
end

class Errno::EKEYREJECTED
  extend ::T::Sig
end

class Errno::EKEYREVOKED
  extend ::T::Sig
end

class Errno::EL2HLT
  extend ::T::Sig
end

class Errno::EL2NSYNC
  extend ::T::Sig
end

class Errno::EL3HLT
  extend ::T::Sig
end

class Errno::EL3RST
  extend ::T::Sig
end

class Errno::ELIBACC
  extend ::T::Sig
end

class Errno::ELIBBAD
  extend ::T::Sig
end

class Errno::ELIBEXEC
  extend ::T::Sig
end

class Errno::ELIBMAX
  extend ::T::Sig
end

class Errno::ELIBSCN
  extend ::T::Sig
end

class Errno::ELNRNG
  extend ::T::Sig
end

class Errno::ELOOP
  extend ::T::Sig
end

class Errno::EMEDIUMTYPE
  extend ::T::Sig
end

class Errno::EMFILE
  extend ::T::Sig
end

class Errno::EMLINK
  extend ::T::Sig
end

class Errno::EMSGSIZE
  extend ::T::Sig
end

class Errno::EMULTIHOP
  extend ::T::Sig
end

class Errno::ENAMETOOLONG
  extend ::T::Sig
end

class Errno::ENAVAIL
  extend ::T::Sig
end

Errno::ENEEDAUTH = Errno::NOERROR

class Errno::ENETDOWN
  extend ::T::Sig
end

class Errno::ENETRESET
  extend ::T::Sig
end

class Errno::ENETUNREACH
  extend ::T::Sig
end

class Errno::ENFILE
  extend ::T::Sig
end

class Errno::ENOANO
  extend ::T::Sig
end

Errno::ENOATTR = Errno::NOERROR

class Errno::ENOBUFS
  extend ::T::Sig
end

class Errno::ENOCSI
  extend ::T::Sig
end

class Errno::ENODATA
  extend ::T::Sig
end

class Errno::ENODEV
  extend ::T::Sig
end

class Errno::ENOENT
  extend ::T::Sig
end

class Errno::ENOEXEC
  extend ::T::Sig
end

class Errno::ENOKEY
  extend ::T::Sig
end

class Errno::ENOLCK
  extend ::T::Sig
end

class Errno::ENOLINK
  extend ::T::Sig
end

class Errno::ENOMEDIUM
  extend ::T::Sig
end

class Errno::ENOMEM
  extend ::T::Sig
end

class Errno::ENOMSG
  extend ::T::Sig
end

class Errno::ENONET
  extend ::T::Sig
end

class Errno::ENOPKG
  extend ::T::Sig
end

class Errno::ENOPROTOOPT
  extend ::T::Sig
end

class Errno::ENOSPC
  extend ::T::Sig
end

class Errno::ENOSR
  extend ::T::Sig
end

class Errno::ENOSTR
  extend ::T::Sig
end

class Errno::ENOSYS
  extend ::T::Sig
end

class Errno::ENOTBLK
  extend ::T::Sig
end

Errno::ENOTCAPABLE = Errno::NOERROR

class Errno::ENOTCONN
  extend ::T::Sig
end

class Errno::ENOTDIR
  extend ::T::Sig
end

class Errno::ENOTEMPTY
  extend ::T::Sig
end

class Errno::ENOTNAM
  extend ::T::Sig
end

class Errno::ENOTRECOVERABLE
  extend ::T::Sig
end

class Errno::ENOTSOCK
  extend ::T::Sig
end

Errno::ENOTSUP = Errno::EOPNOTSUPP

class Errno::ENOTTY
  extend ::T::Sig
end

class Errno::ENOTUNIQ
  extend ::T::Sig
end

class Errno::ENXIO
  extend ::T::Sig
end

class Errno::EOPNOTSUPP
  extend ::T::Sig
end

class Errno::EOVERFLOW
  extend ::T::Sig
end

class Errno::EOWNERDEAD
  extend ::T::Sig
end

class Errno::EPERM
  extend ::T::Sig
end

class Errno::EPFNOSUPPORT
  extend ::T::Sig
end

class Errno::EPIPE
  extend ::T::Sig
end

Errno::EPROCLIM = Errno::NOERROR

Errno::EPROCUNAVAIL = Errno::NOERROR

Errno::EPROGMISMATCH = Errno::NOERROR

Errno::EPROGUNAVAIL = Errno::NOERROR

class Errno::EPROTO
  extend ::T::Sig
end

class Errno::EPROTONOSUPPORT
  extend ::T::Sig
end

class Errno::EPROTOTYPE
  extend ::T::Sig
end

class Errno::ERANGE
  extend ::T::Sig
end

class Errno::EREMCHG
  extend ::T::Sig
end

class Errno::EREMOTE
  extend ::T::Sig
end

class Errno::EREMOTEIO
  extend ::T::Sig
end

class Errno::ERESTART
  extend ::T::Sig
end

class Errno::ERFKILL
  extend ::T::Sig
end

class Errno::EROFS
  extend ::T::Sig
end

Errno::ERPCMISMATCH = Errno::NOERROR

class Errno::ESHUTDOWN
  extend ::T::Sig
end

class Errno::ESOCKTNOSUPPORT
  extend ::T::Sig
end

class Errno::ESPIPE
  extend ::T::Sig
end

class Errno::ESRCH
  extend ::T::Sig
end

class Errno::ESRMNT
  extend ::T::Sig
end

class Errno::ESTALE
  extend ::T::Sig
end

class Errno::ESTRPIPE
  extend ::T::Sig
end

class Errno::ETIME
  extend ::T::Sig
end

class Errno::ETIMEDOUT
  extend ::T::Sig
end

class Errno::ETOOMANYREFS
  extend ::T::Sig
end

class Errno::ETXTBSY
  extend ::T::Sig
end

class Errno::EUCLEAN
  extend ::T::Sig
end

class Errno::EUNATCH
  extend ::T::Sig
end

class Errno::EUSERS
  extend ::T::Sig
end

class Errno::EXDEV
  extend ::T::Sig
end

class Errno::EXFULL
  extend ::T::Sig
end

class Errno::NOERROR
  extend ::T::Sig
end

module Errno
  extend ::T::Sig
end

module Erubi
  RANGE_ALL = ::T.let(nil, ::T.untyped)
  RANGE_FIRST = ::T.let(nil, ::T.untyped)
  RANGE_LAST = ::T.let(nil, ::T.untyped)
  TEXT_END = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Erubi
  extend ::T::Sig
end

module Erubis
  EMPTY_BINDING = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Erubis::PI::TinyEruby
  EMBEDDED_PATTERN = ::T.let(nil, ::T.untyped)
end

module Erubis::PI
  extend ::T::Sig
end

class Erubis::TinyEruby
  EMBEDDED_PATTERN = ::T.let(nil, ::T.untyped)
end

module Erubis
  extend ::T::Sig
end

module EscapeUtils
  VERSION = ::T.let(nil, ::T.untyped)
end

module EscapeUtils::HtmlSafety
  def _escape_html(s); end
end

module EscapeUtils::HtmlSafety
  extend ::T::Sig
end

module EscapeUtils
  extend ::T::Sig
end

class Etc::Group
  def gid(); end

  def gid=(_); end

  def mem(); end

  def mem=(_); end

  def name(); end

  def name=(_); end

  def passwd(); end

  def passwd=(_); end
end

class Etc::Group
  extend ::T::Sig
  extend ::Enumerable
  def self.[](*_); end

  def self.each(&blk); end

  def self.members(); end
end

class Etc::Passwd
  def dir(); end

  def dir=(_); end

  def gecos(); end

  def gecos=(_); end

  def gid(); end

  def gid=(_); end

  def name(); end

  def name=(_); end

  def passwd(); end

  def passwd=(_); end

  def shell(); end

  def shell=(_); end

  def uid(); end

  def uid=(_); end
end

class Etc::Passwd
  extend ::T::Sig
  extend ::Enumerable
  def self.[](*_); end

  def self.each(&blk); end

  def self.members(); end
end

module Etc
  extend ::T::Sig
  def self.confstr(_); end

  def self.endgrent(); end

  def self.endpwent(); end

  def self.getgrent(); end

  def self.getgrgid(*_); end

  def self.getgrnam(_); end

  def self.getlogin(); end

  def self.getpwent(); end

  def self.getpwnam(_); end

  def self.getpwuid(*_); end

  def self.group(); end

  def self.nprocessors(); end

  def self.passwd(); end

  def self.setgrent(); end

  def self.setpwent(); end

  def self.sysconf(_); end

  def self.sysconfdir(); end

  def self.systmpdir(); end

  def self.uname(); end
end

class Event::Base
  include ::Event::Base::GeneratedAssociationMethods
end

module Event::Base::GeneratedAssociationMethods
end

module Event::Base::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::BranchCommand
  include ::Event::BranchCommand::GeneratedAssociationMethods
end

module Event::BranchCommand::GeneratedAssociationMethods
end

module Event::BranchCommand::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::Build
  include ::Event::Build::GeneratedAssociationMethods
end

module Event::Build::GeneratedAssociationMethods
end

module Event::Build::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::BuildFail
  include ::Event::BuildFail::GeneratedAssociationMethods
end

module Event::BuildFail::GeneratedAssociationMethods
end

module Event::BuildFail::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::BuildSuccess
  include ::Event::BuildSuccess::GeneratedAssociationMethods
end

module Event::BuildSuccess::GeneratedAssociationMethods
end

module Event::BuildSuccess::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::BuildUnchanged
  include ::Event::BuildUnchanged::GeneratedAssociationMethods
end

module Event::BuildUnchanged::GeneratedAssociationMethods
end

module Event::BuildUnchanged::GeneratedAssociationMethods
  extend ::T::Sig
end

module Event::CommentEvent
  extend ::T::Sig
end

class Event::CommentForPackage
  include ::Event::CommentForPackage::GeneratedAssociationMethods
end

module Event::CommentForPackage::GeneratedAssociationMethods
end

module Event::CommentForPackage::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::CommentForProject
  include ::Event::CommentForProject::GeneratedAssociationMethods
end

module Event::CommentForProject::GeneratedAssociationMethods
end

module Event::CommentForProject::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::CommentForRequest
  include ::Event::CommentForRequest::GeneratedAssociationMethods
end

module Event::CommentForRequest::GeneratedAssociationMethods
end

module Event::CommentForRequest::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::Commit
  include ::Event::Commit::GeneratedAssociationMethods
end

module Event::Commit::GeneratedAssociationMethods
end

module Event::Commit::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::CreatePackage
  include ::Event::CreatePackage::GeneratedAssociationMethods
end

module Event::CreatePackage::GeneratedAssociationMethods
end

module Event::CreatePackage::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::CreateProject
  include ::Event::CreateProject::GeneratedAssociationMethods
end

module Event::CreateProject::GeneratedAssociationMethods
end

module Event::CreateProject::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::DeletePackage
  include ::Event::DeletePackage::GeneratedAssociationMethods
end

module Event::DeletePackage::GeneratedAssociationMethods
end

module Event::DeletePackage::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::DeleteProject
  include ::Event::DeleteProject::GeneratedAssociationMethods
end

module Event::DeleteProject::GeneratedAssociationMethods
end

module Event::DeleteProject::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::Packtrack
  include ::Event::Packtrack::GeneratedAssociationMethods
end

module Event::Packtrack::GeneratedAssociationMethods
end

module Event::Packtrack::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::RepoBuildFinished
  include ::Event::RepoBuildFinished::GeneratedAssociationMethods
end

module Event::RepoBuildFinished::GeneratedAssociationMethods
end

module Event::RepoBuildFinished::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::RepoBuildStarted
  include ::Event::RepoBuildStarted::GeneratedAssociationMethods
end

module Event::RepoBuildStarted::GeneratedAssociationMethods
end

module Event::RepoBuildStarted::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::RepoPublishState
  include ::Event::RepoPublishState::GeneratedAssociationMethods
end

module Event::RepoPublishState::GeneratedAssociationMethods
end

module Event::RepoPublishState::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::RepoPublished
  include ::Event::RepoPublished::GeneratedAssociationMethods
end

module Event::RepoPublished::GeneratedAssociationMethods
end

module Event::RepoPublished::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::Request
  include ::Event::Request::GeneratedAssociationMethods
end

module Event::Request::GeneratedAssociationMethods
end

module Event::Request::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::RequestChange
  include ::Event::RequestChange::GeneratedAssociationMethods
end

module Event::RequestChange::GeneratedAssociationMethods
end

module Event::RequestChange::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::RequestCreate
  include ::Event::RequestCreate::GeneratedAssociationMethods
end

module Event::RequestCreate::GeneratedAssociationMethods
end

module Event::RequestCreate::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::RequestDelete
  include ::Event::RequestDelete::GeneratedAssociationMethods
end

module Event::RequestDelete::GeneratedAssociationMethods
end

module Event::RequestDelete::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::RequestReviewsDone
  include ::Event::RequestReviewsDone::GeneratedAssociationMethods
end

module Event::RequestReviewsDone::GeneratedAssociationMethods
end

module Event::RequestReviewsDone::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::RequestStatechange
  include ::Event::RequestStatechange::GeneratedAssociationMethods
end

module Event::RequestStatechange::GeneratedAssociationMethods
end

module Event::RequestStatechange::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::ReviewChanged
  include ::Event::ReviewChanged::GeneratedAssociationMethods
end

module Event::ReviewChanged::GeneratedAssociationMethods
end

module Event::ReviewChanged::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::ReviewWanted
  include ::Event::ReviewWanted::GeneratedAssociationMethods
end

module Event::ReviewWanted::GeneratedAssociationMethods
end

module Event::ReviewWanted::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::ServiceFail
  include ::Event::ServiceFail::GeneratedAssociationMethods
end

module Event::ServiceFail::GeneratedAssociationMethods
end

module Event::ServiceFail::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::ServiceSuccess
  include ::Event::ServiceSuccess::GeneratedAssociationMethods
end

module Event::ServiceSuccess::GeneratedAssociationMethods
end

module Event::ServiceSuccess::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::StatusCheck
  include ::Event::StatusCheck::GeneratedAssociationMethods
end

module Event::StatusCheck::GeneratedAssociationMethods
end

module Event::StatusCheck::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::StatusCheckForBuild
  include ::Event::StatusCheckForBuild::GeneratedAssociationMethods
end

module Event::StatusCheckForBuild::GeneratedAssociationMethods
end

module Event::StatusCheckForBuild::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::StatusCheckForPublished
  include ::Event::StatusCheckForPublished::GeneratedAssociationMethods
end

module Event::StatusCheckForPublished::GeneratedAssociationMethods
end

module Event::StatusCheckForPublished::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::StatusCheckForRequest
  include ::Event::StatusCheckForRequest::GeneratedAssociationMethods
end

module Event::StatusCheckForRequest::GeneratedAssociationMethods
end

module Event::StatusCheckForRequest::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::UndeletePackage
  include ::Event::UndeletePackage::GeneratedAssociationMethods
end

module Event::UndeletePackage::GeneratedAssociationMethods
end

module Event::UndeletePackage::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::UndeleteProject
  include ::Event::UndeleteProject::GeneratedAssociationMethods
end

module Event::UndeleteProject::GeneratedAssociationMethods
end

module Event::UndeleteProject::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::UpdatePackage
  include ::Event::UpdatePackage::GeneratedAssociationMethods
end

module Event::UpdatePackage::GeneratedAssociationMethods
end

module Event::UpdatePackage::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::UpdateProject
  include ::Event::UpdateProject::GeneratedAssociationMethods
end

module Event::UpdateProject::GeneratedAssociationMethods
end

module Event::UpdateProject::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::UpdateProjectConfig
  include ::Event::UpdateProjectConfig::GeneratedAssociationMethods
end

module Event::UpdateProjectConfig::GeneratedAssociationMethods
end

module Event::UpdateProjectConfig::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::Upload
  include ::Event::Upload::GeneratedAssociationMethods
end

module Event::Upload::GeneratedAssociationMethods
end

module Event::Upload::GeneratedAssociationMethods
  extend ::T::Sig
end

class Event::VersionChange
  include ::Event::VersionChange::GeneratedAssociationMethods
end

module Event::VersionChange::GeneratedAssociationMethods
end

module Event::VersionChange::GeneratedAssociationMethods
  extend ::T::Sig
end

module Event
  extend ::T::Sig
end

module EventMailerHelper
  extend ::T::Sig
end

class EventMailerTest
  def test_commit_event(); end

  def test_group_emails(); end

  def test_group_emails_to_users_disabled(); end

  def test_maintainer_mails_for_build_failure(); end

  def test_reader_mails_for_build_failure(); end
end

class EventSubscription
  include ::EventSubscription::GeneratedAssociationMethods
  def autosave_associated_records_for_group(*args); end

  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module EventSubscription::GeneratedAssociationMethods
  def build_group(*args, &block); end

  def build_user(*args, &block); end

  def create_group(*args, &block); end

  def create_group!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def group(); end

  def group=(value); end

  def reload_group(); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module EventSubscription::GeneratedAssociationMethods
  extend ::T::Sig
end

class EventSubscription
  def self.channels(); end

  def self.defaults(*args); end

  def self.disabled(*args); end

  def self.for_eventtype(*args); end

  def self.for_subscriber(*args); end

  def self.instant_email(*args); end
end

class Exception
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def full_message(*_); end

end

class Exception
  extend ::T::Sig
  def self.exception(*_); end

  def self.to_tty?(); end
end

module Exception2MessageMapper
  def bind(cl); end
end

Exception2MessageMapper::E2MM = Exception2MessageMapper

class Exception2MessageMapper::ErrNotRegisteredException
end

class Exception2MessageMapper::ErrNotRegisteredException
end

module Exception2MessageMapper
  extend ::T::Sig
  def self.Fail(klass=T.unsafe(nil), err=T.unsafe(nil), *rest); end

  def self.Raise(klass=T.unsafe(nil), err=T.unsafe(nil), *rest); end

  def self.def_e2message(k, c, m); end

  def self.def_exception(k, n, m, s=T.unsafe(nil)); end

  def self.e2mm_message(klass, exp); end

  def self.extend_object(cl); end

  def self.message(klass, exp); end
end

class ExcludedRequestDatatable
  def content_tag(*args, &block); end

  def link_to(*args, &block); end

  def request_show_path(*args, &block); end

  def staging_workflow_excluded_request_path(*args, &block); end
end

module ExecJS
  VERSION = ::T.let(nil, ::T.untyped)
end

module ExecJS::Encoding
  extend ::T::Sig
end

module ExecJS::Runtimes
  Disabled = ::T.let(nil, ::T.untyped)
  Duktape = ::T.let(nil, ::T.untyped)
  JScript = ::T.let(nil, ::T.untyped)
  JavaScriptCore = ::T.let(nil, ::T.untyped)
  MiniRacer = ::T.let(nil, ::T.untyped)
  Node = ::T.let(nil, ::T.untyped)
  RubyRacer = ::T.let(nil, ::T.untyped)
  RubyRhino = ::T.let(nil, ::T.untyped)
  SpiderMonkey = ::T.let(nil, ::T.untyped)
  Spidermonkey = ::T.let(nil, ::T.untyped)
  V8 = ::T.let(nil, ::T.untyped)
end

module ExecJS::Runtimes
  extend ::T::Sig
end

module ExecJS
  extend ::T::Sig
end

class ExitCalledError
end

class ExitCalledError
end

module FFI
  CURRENT_PROCESS = ::T.let(nil, ::T.untyped)
  SizeTypes = ::T.let(nil, ::T.untyped)
  TYPE_BOOL = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_IN = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_OUT = ::T.let(nil, ::T.untyped)
  TYPE_FLOAT32 = ::T.let(nil, ::T.untyped)
  TYPE_FLOAT64 = ::T.let(nil, ::T.untyped)
  TYPE_INT16 = ::T.let(nil, ::T.untyped)
  TYPE_INT32 = ::T.let(nil, ::T.untyped)
  TYPE_INT64 = ::T.let(nil, ::T.untyped)
  TYPE_INT8 = ::T.let(nil, ::T.untyped)
  TYPE_LONG = ::T.let(nil, ::T.untyped)
  TYPE_LONGDOUBLE = ::T.let(nil, ::T.untyped)
  TYPE_POINTER = ::T.let(nil, ::T.untyped)
  TYPE_STRING = ::T.let(nil, ::T.untyped)
  TYPE_UINT16 = ::T.let(nil, ::T.untyped)
  TYPE_UINT32 = ::T.let(nil, ::T.untyped)
  TYPE_UINT64 = ::T.let(nil, ::T.untyped)
  TYPE_UINT8 = ::T.let(nil, ::T.untyped)
  TYPE_ULONG = ::T.let(nil, ::T.untyped)
  TYPE_VARARGS = ::T.let(nil, ::T.untyped)
  TYPE_VOID = ::T.let(nil, ::T.untyped)
  TypeDefs = ::T.let(nil, ::T.untyped)
  USE_THIS_PROCESS_AS_LIBRARY = ::T.let(nil, ::T.untyped)
end

FFI::CallbackInfo = FFI::FunctionType

module FFI::DataConverter
  extend ::T::Sig
end

class FFI::DynamicLibrary
  RTLD_ALL_MASK = ::T.let(nil, ::T.untyped)
  RTLD_BINDING_MASK = ::T.let(nil, ::T.untyped)
  RTLD_DEEPBIND = ::T.let(nil, ::T.untyped)
  RTLD_FIRST = ::T.let(nil, ::T.untyped)
  RTLD_GLOBAL = ::T.let(nil, ::T.untyped)
  RTLD_LAZY = ::T.let(nil, ::T.untyped)
  RTLD_LOCAL = ::T.let(nil, ::T.untyped)
  RTLD_LOCATION_MASK = ::T.let(nil, ::T.untyped)
  RTLD_MEMBER = ::T.let(nil, ::T.untyped)
  RTLD_NODELETE = ::T.let(nil, ::T.untyped)
  RTLD_NOLOAD = ::T.let(nil, ::T.untyped)
  RTLD_NOW = ::T.let(nil, ::T.untyped)
end

FFI::FunctionInfo = FFI::FunctionType

module FFI::IO
  extend ::T::Sig
end

module FFI::LastError
  extend ::T::Sig
end

module FFI::Library
  CURRENT_PROCESS = ::T.let(nil, ::T.untyped)
  FlagsMap = ::T.let(nil, ::T.untyped)
  LIBC = ::T.let(nil, ::T.untyped)
end

module FFI::Library
  extend ::T::Sig
end

FFI::NativeLibrary = FFI::DynamicLibrary

module FFI::NativeType
  BOOL = ::T.let(nil, ::T.untyped)
  BUFFER_IN = ::T.let(nil, ::T.untyped)
  BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  BUFFER_OUT = ::T.let(nil, ::T.untyped)
  FLOAT32 = ::T.let(nil, ::T.untyped)
  FLOAT64 = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INT8 = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  LONGDOUBLE = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UINT8 = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
  VARARGS = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
end

module FFI::NativeType
  extend ::T::Sig
end

class FFI::NullPointerError
end

class FFI::NullPointerError
end

module FFI::Platform
  ADDRESS_ALIGN = ::T.let(nil, ::T.untyped)
  ADDRESS_SIZE = ::T.let(nil, ::T.untyped)
  ARCH = ::T.let(nil, ::T.untyped)
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
  BYTE_ORDER = ::T.let(nil, ::T.untyped)
  CONF_DIR = ::T.let(nil, ::T.untyped)
  CPU = ::T.let(nil, ::T.untyped)
  DOUBLE_ALIGN = ::T.let(nil, ::T.untyped)
  DOUBLE_SIZE = ::T.let(nil, ::T.untyped)
  FLOAT_ALIGN = ::T.let(nil, ::T.untyped)
  FLOAT_SIZE = ::T.let(nil, ::T.untyped)
  GNU_LIBC = ::T.let(nil, ::T.untyped)
  INT16_ALIGN = ::T.let(nil, ::T.untyped)
  INT16_SIZE = ::T.let(nil, ::T.untyped)
  INT32_ALIGN = ::T.let(nil, ::T.untyped)
  INT32_SIZE = ::T.let(nil, ::T.untyped)
  INT64_ALIGN = ::T.let(nil, ::T.untyped)
  INT64_SIZE = ::T.let(nil, ::T.untyped)
  INT8_ALIGN = ::T.let(nil, ::T.untyped)
  INT8_SIZE = ::T.let(nil, ::T.untyped)
  IS_BSD = ::T.let(nil, ::T.untyped)
  IS_FREEBSD = ::T.let(nil, ::T.untyped)
  IS_GNU = ::T.let(nil, ::T.untyped)
  IS_LINUX = ::T.let(nil, ::T.untyped)
  IS_MAC = ::T.let(nil, ::T.untyped)
  IS_NETBSD = ::T.let(nil, ::T.untyped)
  IS_OPENBSD = ::T.let(nil, ::T.untyped)
  IS_SOLARIS = ::T.let(nil, ::T.untyped)
  IS_WINDOWS = ::T.let(nil, ::T.untyped)
  LIBC = ::T.let(nil, ::T.untyped)
  LIBPREFIX = ::T.let(nil, ::T.untyped)
  LIBSUFFIX = ::T.let(nil, ::T.untyped)
  LITTLE_ENDIAN = ::T.let(nil, ::T.untyped)
  LONG_ALIGN = ::T.let(nil, ::T.untyped)
  LONG_SIZE = ::T.let(nil, ::T.untyped)
  NAME = ::T.let(nil, ::T.untyped)
  OS = ::T.let(nil, ::T.untyped)
  OSVERSION = ::T.let(nil, ::T.untyped)
end

module FFI::Platform
  extend ::T::Sig
end

class FFI::Pointer
  NULL = ::T.let(nil, ::T.untyped)
  SIZE = ::T.let(nil, ::T.untyped)
end

class FFI::Struct::InlineArray
  include ::Enumerable
end

class FFI::StructLayout::Number
end

class FFI::StructLayout::Number
end

class FFI::StructLayout::Pointer
end

class FFI::StructLayout::Pointer
end

class FFI::StructLayout::String
end

class FFI::StructLayout::String
end

class FFI::StructLayoutBuilder
  NUMBER_TYPES = ::T.let(nil, ::T.untyped)
end

class FFI::Type
  BOOL = ::T.let(nil, ::T.untyped)
  BUFFER_IN = ::T.let(nil, ::T.untyped)
  BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  BUFFER_OUT = ::T.let(nil, ::T.untyped)
  CHAR = ::T.let(nil, ::T.untyped)
  DOUBLE = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  FLOAT32 = ::T.let(nil, ::T.untyped)
  FLOAT64 = ::T.let(nil, ::T.untyped)
  INT = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INT8 = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  LONGDOUBLE = ::T.let(nil, ::T.untyped)
  LONG_LONG = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  SCHAR = ::T.let(nil, ::T.untyped)
  SHORT = ::T.let(nil, ::T.untyped)
  SINT = ::T.let(nil, ::T.untyped)
  SLONG = ::T.let(nil, ::T.untyped)
  SLONG_LONG = ::T.let(nil, ::T.untyped)
  SSHORT = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  UCHAR = ::T.let(nil, ::T.untyped)
  UINT = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UINT8 = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
  ULONG_LONG = ::T.let(nil, ::T.untyped)
  USHORT = ::T.let(nil, ::T.untyped)
  VARARGS = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
end

FFI::Type::Array = FFI::ArrayType

FFI::Type::Function = FFI::FunctionType

FFI::Type::Struct = FFI::StructByValue

module FFI
  extend ::T::Sig
end

module FactoryBot
  DEPRECATOR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class FactoryBot::DefinitionProxy
  UNPROXIED_METHODS = ::T.let(nil, ::T.untyped)
end

class FactoryBot::Evaluation
  include ::Observable
end

module FactoryBot::Internal
  extend ::T::Sig
end

class FactoryBot::Strategy::Stub
  DISABLED_PERSISTENCE_METHODS = ::T.let(nil, ::T.untyped)
end

module FactoryBot::Strategy
  extend ::T::Sig
end

module FactoryBot::Syntax::Default
  extend ::T::Sig
end

module FactoryBot::Syntax::Methods
  extend ::T::Sig
end

module FactoryBot::Syntax
  extend ::T::Sig
end

module FactoryBot
  extend ::T::Sig
end

module FactoryBotRails::Generators
  extend ::T::Sig
end

module FactoryBotRails
  extend ::T::Sig
end

module Faker
  VERSION = ::T.let(nil, ::T.untyped)
end

class Faker::Base
  Letters = ::T.let(nil, ::T.untyped)
  Numbers = ::T.let(nil, ::T.untyped)
  ULetters = ::T.let(nil, ::T.untyped)
end

module Faker::Base58
  extend ::T::Sig
end

module Faker::Char
  extend ::T::Sig
end

module Faker::Creature
  extend ::T::Sig
end

class Faker::DrivingLicence
  GB_PADDING = ::T.let(nil, ::T.untyped)
  NI_CHANCE = ::T.let(nil, ::T.untyped)
end

class Faker::Finance
  CREDIT_CARD_TYPES = ::T.let(nil, ::T.untyped)
end

module Faker::Games
  extend ::T::Sig
end

class Faker::IDNumber
  CHECKS = ::T.let(nil, ::T.untyped)
  INVALID_SSN = ::T.let(nil, ::T.untyped)
  ZA_CITIZENSHIP_DIGITS = ::T.let(nil, ::T.untyped)
  ZA_RACE_DIGIT = ::T.let(nil, ::T.untyped)
end

module Faker::JapaneseMedia
  extend ::T::Sig
end

module Faker::Movies
  extend ::T::Sig
end

class Faker::Time
  TIME_RANGES = ::T.let(nil, ::T.untyped)
end

module Faker::TvShows
  extend ::T::Sig
end

class Faker::Types
  CHARACTERS = ::T.let(nil, ::T.untyped)
  COMPLEX_TYPES = ::T.let(nil, ::T.untyped)
  SIMPLE_TYPES = ::T.let(nil, ::T.untyped)
end

class Faker::Vehicle
  MILEAGE_MAX = ::T.let(nil, ::T.untyped)
  MILEAGE_MIN = ::T.let(nil, ::T.untyped)
  SG_CHECKSUM_CHARS = ::T.let(nil, ::T.untyped)
  SG_CHECKSUM_WEIGHTS = ::T.let(nil, ::T.untyped)
  VIN_LETTERS = ::T.let(nil, ::T.untyped)
  VIN_MAP = ::T.let(nil, ::T.untyped)
  VIN_REGEX = ::T.let(nil, ::T.untyped)
  VIN_WEIGHTS = ::T.let(nil, ::T.untyped)
end

module Faker
  extend ::T::Sig
end

class FalseClass
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::JSON::Ext::Generator::GeneratorMethods::FalseClass
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class FalseClass
  extend ::T::Sig
end

module Fcntl
  FD_CLOEXEC = ::T.let(nil, ::T.untyped)
  F_DUPFD = ::T.let(nil, ::T.untyped)
  F_GETFD = ::T.let(nil, ::T.untyped)
  F_GETFL = ::T.let(nil, ::T.untyped)
  F_GETLK = ::T.let(nil, ::T.untyped)
  F_RDLCK = ::T.let(nil, ::T.untyped)
  F_SETFD = ::T.let(nil, ::T.untyped)
  F_SETFL = ::T.let(nil, ::T.untyped)
  F_SETLK = ::T.let(nil, ::T.untyped)
  F_SETLKW = ::T.let(nil, ::T.untyped)
  F_UNLCK = ::T.let(nil, ::T.untyped)
  F_WRLCK = ::T.let(nil, ::T.untyped)
  O_ACCMODE = ::T.let(nil, ::T.untyped)
  O_APPEND = ::T.let(nil, ::T.untyped)
  O_CREAT = ::T.let(nil, ::T.untyped)
  O_EXCL = ::T.let(nil, ::T.untyped)
  O_NDELAY = ::T.let(nil, ::T.untyped)
  O_NOCTTY = ::T.let(nil, ::T.untyped)
  O_NONBLOCK = ::T.let(nil, ::T.untyped)
  O_RDONLY = ::T.let(nil, ::T.untyped)
  O_RDWR = ::T.let(nil, ::T.untyped)
  O_TRUNC = ::T.let(nil, ::T.untyped)
  O_WRONLY = ::T.let(nil, ::T.untyped)
end

module Fcntl
  extend ::T::Sig
end

module FeaturesAttribute
  extend ::T::Sig
end

module FeaturesAuthentication
  extend ::T::Sig
end

module FeaturesBootstrap
  extend ::T::Sig
end

class Fiber
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def resume(*_); end

  def transfer(*_); end
end

class Fiber
  extend ::T::Sig
  def self.current(); end

  def self.yield(*_); end
end

class FiberError
  extend ::T::Sig
end

class File
  Separator = ::T.let(nil, ::T.untyped)
end

module File::Constants
  extend ::T::Sig
end

class File::Stat
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def size?(); end
end

class File::Stat
  extend ::T::Sig
end

class File
  extend ::T::Sig
  def self.exists?(_); end

  def self.lutime(*_); end

  def self.mkfifo(*_); end

  def self.probe_stat_in(dir); end

end

FileList = Rake::FileList

module FileTest
  extend ::T::Sig
  def self.blockdev?(_); end

  def self.chardev?(_); end

  def self.directory?(_); end

  def self.empty?(_); end

  def self.executable?(_); end

  def self.executable_real?(_); end

  def self.exist?(_); end

  def self.exists?(_); end

  def self.file?(_); end

  def self.grpowned?(_); end

  def self.identical?(_, _1); end

  def self.owned?(_); end

  def self.pipe?(_); end

  def self.readable?(_); end

  def self.readable_real?(_); end

  def self.setgid?(_); end

  def self.setuid?(_); end

  def self.size(_); end

  def self.size?(_); end

  def self.socket?(_); end

  def self.sticky?(_); end

  def self.symlink?(_); end

  def self.world_readable?(_); end

  def self.world_writable?(_); end

  def self.writable?(_); end

  def self.writable_real?(_); end

  def self.zero?(_); end
end

module FileUtils
  include ::FileUtils::StreamUtils_
  LN_SUPPORTED = ::T.let(nil, ::T.untyped)
  RUBY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module FileUtils::DryRun
  include ::FileUtils::LowMethods
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::DryRun
  extend ::T::Sig
  extend ::FileUtils::DryRun
  extend ::FileUtils::LowMethods
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
end

class FileUtils::Entry_
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def blockdev?(); end

  def chardev?(); end

  def chmod(mode); end

  def chown(uid, gid); end

  def copy(dest); end

  def copy_file(dest); end

  def copy_metadata(path); end

  def dereference?(); end

  def directory?(); end

  def door?(); end

  def entries(); end

  def exist?(); end

  def file?(); end

  def initialize(a, b=T.unsafe(nil), deref=T.unsafe(nil)); end

  def lstat(); end

  def lstat!(); end

  def path(); end

  def pipe?(); end

  def platform_support(); end

  def postorder_traverse(); end

  def prefix(); end

  def preorder_traverse(); end

  def rel(); end

  def remove(); end

  def remove_dir1(); end

  def remove_file(); end

  def socket?(); end

  def stat(); end

  def stat!(); end

  def symlink?(); end

  def traverse(); end

  def wrap_traverse(pre, post); end
end

class FileUtils::Entry_
  extend ::T::Sig
end

module FileUtils::LowMethods
  extend ::T::Sig
end

module FileUtils::NoWrite
  include ::FileUtils::LowMethods
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::NoWrite
  extend ::T::Sig
  extend ::FileUtils::NoWrite
  extend ::FileUtils::LowMethods
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
end

module FileUtils::StreamUtils_
  extend ::T::Sig
end

module FileUtils::Verbose
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::Verbose
  extend ::T::Sig
  extend ::FileUtils::Verbose
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
end

module FileUtils
  extend ::T::Sig
  extend ::FileUtils::StreamUtils_
  def self.cd(dir, verbose: T.unsafe(nil), &block); end

  def self.chdir(dir, verbose: T.unsafe(nil), &block); end

  def self.chmod(mode, list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.chmod_R(mode, list, noop: T.unsafe(nil), verbose: T.unsafe(nil), force: T.unsafe(nil)); end

  def self.chown(user, group, list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.chown_R(user, group, list, noop: T.unsafe(nil), verbose: T.unsafe(nil), force: T.unsafe(nil)); end

  def self.cmp(a, b); end

  def self.collect_method(opt); end

  def self.commands(); end

  def self.compare_file(a, b); end

  def self.compare_stream(a, b); end

  def self.copy(src, dest, preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.copy_entry(src, dest, preserve=T.unsafe(nil), dereference_root=T.unsafe(nil), remove_destination=T.unsafe(nil)); end

  def self.copy_file(src, dest, preserve=T.unsafe(nil), dereference=T.unsafe(nil)); end

  def self.copy_stream(src, dest); end

  def self.cp(src, dest, preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.getwd(); end

  def self.have_option?(mid, opt); end

  def self.identical?(a, b); end

  def self.install(src, dest, mode: T.unsafe(nil), owner: T.unsafe(nil), group: T.unsafe(nil), preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.link(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.ln(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.ln_s(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.ln_sf(src, dest, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.makedirs(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.mkdir(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.mkpath(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.move(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  def self.mv(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  def self.options(); end

  def self.options_of(mid); end

  def self.private_module_function(name); end

  def self.pwd(); end

  def self.remove(list, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.remove_dir(path, force=T.unsafe(nil)); end

  def self.remove_entry(path, force=T.unsafe(nil)); end

  def self.remove_entry_secure(path, force=T.unsafe(nil)); end

  def self.remove_file(path, force=T.unsafe(nil)); end

  def self.rm(list, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.rm_f(list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.rm_rf(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  def self.rmdir(list, parents: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.rmtree(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  def self.safe_unlink(list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.symlink(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  def self.uptodate?(new, old_list); end
end

module Find
end

module Find
  extend ::T::Sig
  def self.find(*paths, ignore_error: T.unsafe(nil)); end

  def self.prune(); end
end

class FixBsRequestCounter::TempBsRequest
  include ::FixBsRequestCounter::TempBsRequest::GeneratedAssociationMethods
end

module FixBsRequestCounter::TempBsRequest::GeneratedAssociationMethods
end

module FixBsRequestCounter::TempBsRequest::GeneratedAssociationMethods
  extend ::T::Sig
end

class FixBsRequestCounter::TempBsRequestCounter
  include ::FixBsRequestCounter::TempBsRequestCounter::GeneratedAssociationMethods
end

module FixBsRequestCounter::TempBsRequestCounter::GeneratedAssociationMethods
end

module FixBsRequestCounter::TempBsRequestCounter::GeneratedAssociationMethods
  extend ::T::Sig
end

class Flag
  include ::Flag::GeneratedAssociationMethods
  def autosave_associated_records_for_architecture(*args); end

  def autosave_associated_records_for_package(*args); end

  def autosave_associated_records_for_project(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module Flag::GeneratedAssociationMethods
  def architecture(); end

  def architecture=(value); end

  def build_architecture(*args, &block); end

  def build_package(*args, &block); end

  def build_project(*args, &block); end

  def create_architecture(*args, &block); end

  def create_architecture!(*args, &block); end

  def create_package(*args, &block); end

  def create_package!(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def package(); end

  def package=(value); end

  def project(); end

  def project=(value); end

  def reload_architecture(); end

  def reload_package(); end

  def reload_project(); end
end

module Flag::GeneratedAssociationMethods
  extend ::T::Sig
end

module Flag::Validations
  extend ::T::Sig
end

class Flag
  def self.of_type(*args); end
end

module FlagHelper
  extend ::T::Sig
end

module Flipper
  InstrumentationNamespace = ::T.let(nil, ::T.untyped)
end

module Flipper::Adapter::ClassMethods
  extend ::T::Sig
end

module Flipper::Adapter
  extend ::T::Sig
end

module Flipper::Adapters::ActiveRecord::Feature::GeneratedAssociationMethods
  extend ::T::Sig
end

module Flipper::Adapters::ActiveRecord::Gate::GeneratedAssociationMethods
  extend ::T::Sig
end

class Flipper::Adapters::Instrumented
  InstrumentationName = ::T.let(nil, ::T.untyped)
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Flipper::Adapters::Memoizable
  FeaturesKey = ::T.let(nil, ::T.untyped)
  GetAllKey = ::T.let(nil, ::T.untyped)
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Flipper::Adapters::Memory
  FeaturesKey = ::T.let(nil, ::T.untyped)
end

module Flipper::Adapters
  extend ::T::Sig
end

class Flipper::Feature
  InstrumentationName = ::T.let(nil, ::T.untyped)
end

class Flipper::GateValues
  LegitIvars = ::T.let(nil, ::T.untyped)
end

module Flipper::Gates
  extend ::T::Sig
end

module Flipper::Instrumenters
  extend ::T::Sig
end

module Flipper::Middleware
  extend ::T::Sig
end

module Flipper::Typecast
  TruthMap = ::T.let(nil, ::T.untyped)
end

module Flipper::Typecast
  extend ::T::Sig
end

module Flipper::Types
  extend ::T::Sig
end

module Flipper
  extend ::T::Sig
end

module FlipperFeature
  extend ::T::Sig
end

class Float
  include ::ActiveSupport::NumericWithFormat
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::JSON::Ext::Generator::GeneratorMethods::Float
  def to_d(precision=T.unsafe(nil)); end
end

class Float
  extend ::T::Sig
end

class FloatDomainError
  extend ::T::Sig
end

module Flot::Rails
  FLOT_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Flot::Rails
  extend ::T::Sig
end

module Flot
  extend ::T::Sig
end

module FontAwesome::Sass::Rails::ViewHelpers
  extend ::T::Sig
end

module FontAwesome::Sass::Rails
  extend ::T::Sig
end

module FontAwesome::Sass
  extend ::T::Sig
end

module FontAwesome
  extend ::T::Sig
end

module Forwardable
  def def_delegator(accessor, method, ali=T.unsafe(nil)); end

  def def_delegators(accessor, *methods); end

  def def_instance_delegator(accessor, method, ali=T.unsafe(nil)); end

  def def_instance_delegators(accessor, *methods); end

  def delegate(hash); end

  def instance_delegate(hash); end
end

module Forwardable
  extend ::T::Sig
  def self._compile_method(src, file, line); end

  def self._delegator_method(obj, accessor, method, ali); end

  def self._valid_method?(method); end

  def self.debug(); end

  def self.debug=(debug); end
end

class FrozenError
end

class FrozenError
end

class FullTextSearch
  def include_root_in_json(); end

  def include_root_in_json?(); end

  def model_name(*args, &block); end
end

class FullTextSearch
  extend ::ActiveModel::Naming
  def self.include_root_in_json(); end

  def self.include_root_in_json=(val); end

  def self.include_root_in_json?(); end
end

class FullTextSearchTest
  def test_search_for_basedistro(); end

  def test_search_for_kdelibs(); end

  def test_searching_by_attrib(); end

  def test_searching_by_issue(); end

  def test_searching_by_non_existent_issue(); end

  def test_searching_for_a_hidden_package(); end

  def test_searching_for_a_hidden_project(); end

  def test_using_two_words_to_search_for_kdelibs_devel(); end

  def test_using_underscore_to_search_for_kdelibs_devel(); end
end

module GC
  def garbage_collect(*_); end
end

module GC::Profiler
  extend ::T::Sig
end

module GC
  extend ::T::Sig
  def self.latest_gc_info(*_); end

  def self.stress=(stress); end

  def self.verify_internal_consistency(); end
end

module Gem
  ConfigMap = ::T.let(nil, ::T.untyped)
  RbConfigPriorities = ::T.let(nil, ::T.untyped)
  RubyGemsPackageVersion = ::T.let(nil, ::T.untyped)
  RubyGemsVersion = ::T.let(nil, ::T.untyped)
  USE_BUNDLER_FOR_GEMDEPS = ::T.let(nil, ::T.untyped)
end

class Gem::AvailableSet
  include ::Enumerable
  def <<(o); end

  def add(spec, source); end

  def all_specs(); end

  def each(&blk); end

  def each_spec(); end

  def empty?(); end

  def find_all(req); end

  def inject_into_list(dep_list); end

  def match_platform!(); end

  def pick_best!(); end

  def prefetch(reqs); end

  def remote(); end

  def remote=(remote); end

  def remove_installed!(dep); end

  def set(); end

  def size(); end

  def sorted(); end

  def source_for(spec); end

  def to_request_set(development=T.unsafe(nil)); end
end

class Gem::AvailableSet::Tuple
  def source(); end

  def source=(_); end

  def spec(); end

  def spec=(_); end
end

class Gem::AvailableSet::Tuple
  def self.[](*_); end

  def self.members(); end
end

class Gem::AvailableSet
end

class Gem::BasicSpecification
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def activated?(); end

  def base_dir(); end

  def base_dir=(base_dir); end

  def contains_requirable_file?(file); end

  def datadir(); end

  def default_gem?(); end

  def extension_dir(); end

  def extension_dir=(extension_dir); end

  def extensions_dir(); end

  def full_gem_path(); end

  def full_gem_path=(full_gem_path); end

  def full_name(); end

  def full_require_paths(); end

  def gem_build_complete_path(); end

  def gem_dir(); end

  def gems_dir(); end

  def ignored=(ignored); end

  def internal_init(); end

  def lib_dirs_glob(); end

  def loaded_from(); end

  def loaded_from=(loaded_from); end

  def matches_for_glob(glob); end

  def name(); end

  def platform(); end

  def raw_require_paths(); end

  def require_paths(); end

  def source_paths(); end

  def stubbed?(); end

  def this(); end

  def to_fullpath(path); end

  def to_spec(); end

  def version(); end
end

class Gem::BasicSpecification
  extend ::T::Sig
  def self.default_specifications_dir(); end
end

module Gem::BundlerVersionFinder
end

module Gem::BundlerVersionFinder
  extend ::T::Sig
  def self.bundler_version(); end

  def self.bundler_version_with_reason(); end

  def self.compatible?(spec); end

  def self.filter!(specs); end

  def self.missing_version_message(); end
end

class Gem::Command
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def add_extra_args(args); end

  def add_option(*opts, &handler); end

  def arguments(); end

  def begins?(long, short); end

  def command(); end

  def defaults(); end

  def defaults=(defaults); end

  def defaults_str(); end

  def description(); end

  def execute(); end

  def get_all_gem_names(); end

  def get_all_gem_names_and_versions(); end

  def get_one_gem_name(); end

  def get_one_optional_argument(); end

  def handle_options(args); end

  def handles?(args); end

  def initialize(command, summary=T.unsafe(nil), defaults=T.unsafe(nil)); end

  def invoke(*args); end

  def invoke_with_build_args(args, build_args); end

  def merge_options(new_options); end

  def options(); end

  def program_name(); end

  def program_name=(program_name); end

  def remove_option(name); end

  def show_help(); end

  def show_lookup_failure(gem_name, version, errors, domain); end

  def summary(); end

  def summary=(summary); end

  def usage(); end

  def when_invoked(&block); end
  HELP = ::T.let(nil, ::T.untyped)
end

class Gem::Command
  def self.add_common_option(*args, &handler); end

  def self.add_specific_extra_args(cmd, args); end

  def self.build_args(); end

  def self.build_args=(value); end

  def self.common_options(); end

  def self.extra_args(); end

  def self.extra_args=(value); end

  def self.specific_extra_args(cmd); end

  def self.specific_extra_args_hash(); end
end

class Gem::CommandLineError
  extend ::T::Sig
end

module Gem::Commands
end

module Gem::Commands
  extend ::T::Sig
end

class Gem::ConfigFile
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def ==(other); end

  def [](key); end

  def []=(key, value); end

  def api_keys(); end

  def args(); end

  def backtrace(); end

  def backtrace=(backtrace); end

  def bulk_threshold(); end

  def bulk_threshold=(bulk_threshold); end

  def check_credentials_permissions(); end

  def config_file_name(); end

  def credentials_path(); end

  def disable_default_gem_server(); end

  def disable_default_gem_server=(disable_default_gem_server); end

  def each(&block); end

  def handle_arguments(arg_list); end

  def home(); end

  def home=(home); end

  def initialize(args); end

  def load_api_keys(); end

  def load_file(filename); end

  def path(); end

  def path=(path); end

  def really_verbose(); end

  def rubygems_api_key(); end

  def rubygems_api_key=(api_key); end

  def set_api_key(host, api_key); end

  def sources(); end

  def sources=(sources); end

  def ssl_ca_cert(); end

  def ssl_ca_cert=(ssl_ca_cert); end

  def ssl_client_cert(); end

  def ssl_verify_mode(); end

  def to_yaml(); end

  def unset_api_key!(); end

  def update_sources(); end

  def update_sources=(update_sources); end

  def verbose(); end

  def verbose=(verbose); end

  def write(); end
  DEFAULT_BACKTRACE = ::T.let(nil, ::T.untyped)
  DEFAULT_BULK_THRESHOLD = ::T.let(nil, ::T.untyped)
  DEFAULT_UPDATE_SOURCES = ::T.let(nil, ::T.untyped)
  DEFAULT_VERBOSITY = ::T.let(nil, ::T.untyped)
  OPERATING_SYSTEM_DEFAULTS = ::T.let(nil, ::T.untyped)
  PLATFORM_DEFAULTS = ::T.let(nil, ::T.untyped)
  SYSTEM_CONFIG_PATH = ::T.let(nil, ::T.untyped)
  SYSTEM_WIDE_CONFIG_FILE = ::T.let(nil, ::T.untyped)
end

class Gem::ConfigFile
end

class Gem::ConflictError
  def conflicts(); end

  def initialize(target, conflicts); end

  def target(); end
end

class Gem::ConflictError
  extend ::T::Sig
end

class Gem::ConsoleUI
  def initialize(); end
end

class Gem::ConsoleUI
end

module Gem::DefaultUserInteraction
  include ::Gem::Text
  def ui(); end

  def ui=(new_ui); end

  def use_ui(new_ui, &block); end
end

module Gem::DefaultUserInteraction
  extend ::T::Sig
  def self.ui(); end

  def self.ui=(new_ui); end

  def self.use_ui(new_ui); end
end

class Gem::Dependency
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def ==(other); end

  def ===(other); end

  def =~(other); end

  def all_sources(); end

  def all_sources=(all_sources); end

  def encode_with(coder); end

  def eql?(other); end

  def groups(); end

  def groups=(groups); end

  def initialize(name, *requirements); end

  def latest_version?(); end

  def match?(obj, version=T.unsafe(nil), allow_prerelease=T.unsafe(nil)); end

  def matches_spec?(spec); end

  def matching_specs(platform_only=T.unsafe(nil)); end

  def merge(other); end

  def name(); end

  def name=(name); end

  def prerelease=(prerelease); end

  def prerelease?(); end

  def requirement(); end

  def requirements_list(); end

  def runtime?(); end

  def source(); end

  def source=(source); end

  def specific?(); end

  def to_lock(); end

  def to_spec(); end

  def to_specs(); end

  def to_yaml_properties(); end

  def type(); end
end

class Gem::Dependency
  extend ::T::Sig
end

class Gem::DependencyError
  extend ::T::Sig
end

class Gem::DependencyInstaller
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def _deprecated_gems_to_install(); end

  def add_found_dependencies(to_do, dependency_list); end

  def available_set_for(dep_or_name, version); end

  def consider_local?(); end

  def consider_remote?(); end

  def document(); end

  def errors(); end

  def find_gems_with_sources(dep, best_only=T.unsafe(nil)); end

  def find_spec_by_name_and_version(gem_name, version=T.unsafe(nil), prerelease=T.unsafe(nil)); end

  def gather_dependencies(); end

  def gems_to_install(*args, &block); end

  def in_background(what); end

  def initialize(options=T.unsafe(nil)); end

  def install(dep_or_name, version=T.unsafe(nil)); end

  def install_development_deps(); end

  def installed_gems(); end

  def resolve_dependencies(dep_or_name, version); end
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Gem::DependencyInstaller
  extend ::Gem::Deprecate
end

class Gem::DependencyList
  include ::Enumerable
  include ::TSort
  def add(*gemspecs); end

  def clear(); end

  def dependency_order(); end

  def development(); end

  def development=(development); end

  def each(&block); end

  def find_name(full_name); end

  def initialize(development=T.unsafe(nil)); end

  def ok?(); end

  def ok_to_remove?(full_name, check_dev=T.unsafe(nil)); end

  def remove_by_name(full_name); end

  def remove_specs_unsatisfied_by(dependencies); end

  def spec_predecessors(); end

  def specs(); end

  def tsort_each_node(&block); end

  def why_not_ok?(quick=T.unsafe(nil)); end
end

class Gem::DependencyList
  def self.from_specs(); end
end

class Gem::DependencyRemovalException
  extend ::T::Sig
end

class Gem::DependencyResolutionError
  def conflict(); end

  def conflicting_dependencies(); end

  def initialize(conflict); end
end

class Gem::DependencyResolutionError
  extend ::T::Sig
end

class Gem::Resolver
end

Gem::DependencyResolver::Conflict = Gem::Resolver::Conflict

Gem::DependencyResolver::DependencyConflict = Gem::Resolver::Conflict

module Gem::Resolver::Molinillo
end

Gem::DependencyResolver::Molinillo::SpecificationProvider = Gem::Resolver::Molinillo::SpecificationProvider

Gem::DependencyResolver::Molinillo::UI = Gem::Resolver::Molinillo::UI

module Gem::Resolver::Molinillo
end

class Gem::Resolver
end

module Gem::Deprecate
  extend ::T::Sig
  def self.deprecate(name, repl, year, month); end

  def self.skip(); end

  def self.skip=(v); end

  def self.skip_during(); end
end

class Gem::DocumentError
  extend ::T::Sig
end

class Gem::EndOfYAMLException
  extend ::T::Sig
end

class Gem::ErrorReason
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Gem::ErrorReason
  extend ::T::Sig
end

class Gem::Exception
  def source_exception(); end

  def source_exception=(source_exception); end
end

class Gem::Exception
  extend ::T::Sig
end

module Gem::Ext
end

class Gem::Ext::BuildError
end

class Gem::Ext::BuildError
end

class Gem::Ext::Builder
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def build_args(); end

  def build_args=(build_args); end

  def build_error(build_dir, output, backtrace=T.unsafe(nil)); end

  def build_extension(extension, dest_path); end

  def build_extensions(); end

  def builder_for(extension); end

  def initialize(spec, build_args=T.unsafe(nil)); end

  def write_gem_make_out(output); end
  CHDIR_MONITOR = ::T.let(nil, ::T.untyped)
  CHDIR_MUTEX = ::T.let(nil, ::T.untyped)
end

class Gem::Ext::Builder
  def self.class_name(); end

  def self.make(dest_path, results); end

  def self.redirector(); end

  def self.run(command, results, command_name=T.unsafe(nil)); end
end

class Gem::Ext::CmakeBuilder
end

class Gem::Ext::CmakeBuilder
  def self.build(extension, directory, dest_path, results, args=T.unsafe(nil), lib_dir=T.unsafe(nil)); end
end

class Gem::Ext::ConfigureBuilder
end

class Gem::Ext::ConfigureBuilder
  def self.build(extension, directory, dest_path, results, args=T.unsafe(nil), lib_dir=T.unsafe(nil)); end
end

class Gem::Ext::ExtConfBuilder
end

Gem::Ext::ExtConfBuilder::FileEntry = FileUtils::Entry_

class Gem::Ext::ExtConfBuilder
  def self.build(extension, directory, dest_path, results, args=T.unsafe(nil), lib_dir=T.unsafe(nil)); end

  def self.get_relative_path(path); end
end

class Gem::Ext::RakeBuilder
end

class Gem::Ext::RakeBuilder
  def self.build(extension, directory, dest_path, results, args=T.unsafe(nil), lib_dir=T.unsafe(nil)); end
end

module Gem::Ext
  extend ::T::Sig
end

class Gem::FilePermissionError
  def directory(); end

  def initialize(directory); end
end

class Gem::FilePermissionError
  extend ::T::Sig
end

class Gem::FormatException
  def file_path(); end

  def file_path=(file_path); end
end

class Gem::FormatException
  extend ::T::Sig
end

class Gem::GemNotFoundException
  extend ::T::Sig
end

class Gem::GemNotInHomeException
  def spec(); end

  def spec=(spec); end
end

class Gem::GemNotInHomeException
  extend ::T::Sig
end

class Gem::ImpossibleDependenciesError
  def build_message(); end

  def conflicts(); end

  def dependency(); end

  def initialize(request, conflicts); end

  def request(); end
end

class Gem::ImpossibleDependenciesError
  extend ::T::Sig
end

class Gem::InstallError
  extend ::T::Sig
end

class Gem::Installer
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def app_script_text(bin_file_name); end

  def bin_dir(); end

  def build_extensions(); end

  def build_root(); end

  def check_executable_overwrite(filename); end

  def check_that_user_bin_dir_is_in_path(); end

  def default_spec_file(); end

  def dir(); end

  def ensure_dependencies_met(); end

  def ensure_dependency(spec, dependency); end

  def ensure_loadable_spec(); end

  def ensure_required_ruby_version_met(); end

  def ensure_required_rubygems_version_met(); end

  def extension_build_error(build_dir, output, backtrace=T.unsafe(nil)); end

  def extract_bin(); end

  def extract_files(); end

  def formatted_program_filename(filename); end

  def gem(); end

  def gem_dir(); end

  def gem_home(); end

  def generate_bin(); end

  def generate_bin_script(filename, bindir); end

  def generate_bin_symlink(filename, bindir); end

  def generate_windows_script(filename, bindir); end

  def initialize(package, options=T.unsafe(nil)); end

  def install(); end

  def installation_satisfies_dependency?(dependency); end

  def installed_specs(); end

  def options(); end

  def pre_install_checks(); end

  def process_options(); end

  def run_post_build_hooks(); end

  def run_post_install_hooks(); end

  def run_pre_install_hooks(); end

  def shebang(bin_file_name); end

  def spec(); end

  def spec_file(); end

  def unpack(directory); end

  def verify_gem_home(unpack=T.unsafe(nil)); end

  def verify_spec(); end

  def windows_stub_script(bindir, bin_file_name); end

  def write_build_info_file(); end

  def write_cache_file(); end

  def write_default_spec(); end

  def write_spec(); end
  ENV_PATHS = ::T.let(nil, ::T.untyped)
end

class Gem::Installer
  def self.at(path, options=T.unsafe(nil)); end

  def self.exec_format(); end

  def self.exec_format=(exec_format); end

  def self.for_spec(spec, options=T.unsafe(nil)); end

  def self.install_lock(); end

  def self.path_warning(); end

  def self.path_warning=(path_warning); end
end

class Gem::InvalidSpecificationException
  extend ::T::Sig
end

class Gem::Licenses
  IDENTIFIERS = ::T.let(nil, ::T.untyped)
  NONSTANDARD = ::T.let(nil, ::T.untyped)
  REGEXP = ::T.let(nil, ::T.untyped)
end

class Gem::Licenses
  extend ::Gem::Text
  def self.match?(license); end

  def self.suggestions(license); end
end

class Gem::List
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def each(&blk); end

  def initialize(value=T.unsafe(nil), tail=T.unsafe(nil)); end

  def prepend(value); end

  def tail(); end

  def tail=(tail); end

  def to_a(); end

  def value(); end

  def value=(value); end
end

class Gem::List
  extend ::T::Sig
  def self.prepend(list, value); end
end

class Gem::LoadError
  def name(); end

  def name=(name); end

  def requirement(); end

  def requirement=(requirement); end
end

class Gem::LoadError
  extend ::T::Sig
end

class Gem::MissingSpecError
  def initialize(name, requirement); end
end

class Gem::MissingSpecError
  extend ::T::Sig
end

class Gem::MissingSpecVersionError
  def initialize(name, requirement, specs); end

  def specs(); end
end

class Gem::MissingSpecVersionError
  extend ::T::Sig
end

class Gem::NameTuple
  include ::Comparable
  def ==(other); end

  def eql?(other); end

  def full_name(); end

  def initialize(name, version, platform=T.unsafe(nil)); end

  def match_platform?(); end

  def name(); end

  def platform(); end

  def prerelease?(); end

  def spec_name(); end

  def to_a(); end

  def version(); end
end

class Gem::NameTuple
  def self.from_list(list); end

  def self.null(); end

  def self.to_basic(list); end
end

class Gem::OperationNotSupportedError
  extend ::T::Sig
end

class Gem::Package
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def add_checksums(tar); end

  def add_contents(tar); end

  def add_files(tar); end

  def add_metadata(tar); end

  def build(skip_validation=T.unsafe(nil)); end

  def build_time(); end

  def build_time=(build_time); end

  def checksums(); end

  def contents(); end

  def copy_to(path); end

  def digest(entry); end

  def extract_files(destination_dir, pattern=T.unsafe(nil)); end

  def extract_tar_gz(io, destination_dir, pattern=T.unsafe(nil)); end

  def files(); end

  def gzip_to(io); end

  def initialize(gem, security_policy); end

  def install_location(filename, destination_dir); end

  def load_spec(entry); end

  def mkdir_p_safe(mkdir, mkdir_options, destination_dir, file_name); end

  def open_tar_gz(io); end

  def read_checksums(gem); end

  def realpath(file); end

  def security_policy(); end

  def security_policy=(security_policy); end

  def setup_signer(); end

  def spec(); end

  def spec=(spec); end

  def verify(); end

  def verify_checksums(digests, checksums); end

  def verify_entry(entry); end

  def verify_files(gem); end

  def verify_gz(entry); end
end

class Gem::Package::DigestIO
  def digests(); end

  def initialize(io, digests); end

  def write(data); end
end

class Gem::Package::DigestIO
  def self.wrap(io, digests); end
end

class Gem::Package::Error
end

class Gem::Package::Error
end

class Gem::Package::FileSource
  def initialize(path); end

  def path(); end

  def start(); end

  def with_read_io(&block); end

  def with_write_io(&block); end
end

class Gem::Package::FileSource
end

class Gem::Package::FormatError
  def initialize(message, source=T.unsafe(nil)); end

  def path(); end
end

class Gem::Package::FormatError
end

class Gem::Package::IOSource
  def initialize(io); end

  def io(); end

  def path(); end

  def start(); end

  def with_read_io(); end

  def with_write_io(); end
end

class Gem::Package::IOSource
end

class Gem::Package::NonSeekableIO
end

class Gem::Package::NonSeekableIO
end

class Gem::Package::Old
  def extract_files(destination_dir); end

  def file_list(io); end

  def read_until_dashes(io); end

  def skip_ruby(io); end
end

class Gem::Package::Old
end

class Gem::Package::PathError
  def initialize(destination, destination_dir); end
end

class Gem::Package::PathError
end

class Gem::Package::Source
end

class Gem::Package::Source
end

class Gem::Package::TarHeader
  def ==(other); end

  def checksum(); end

  def devmajor(); end

  def devminor(); end

  def empty?(); end

  def gid(); end

  def gname(); end

  def initialize(vals); end

  def linkname(); end

  def magic(); end

  def mode(); end

  def mtime(); end

  def name(); end

  def prefix(); end

  def size(); end

  def typeflag(); end

  def uid(); end

  def uname(); end

  def update_checksum(); end

  def version(); end
  FIELDS = ::T.let(nil, ::T.untyped)
  PACK_FORMAT = ::T.let(nil, ::T.untyped)
  UNPACK_FORMAT = ::T.let(nil, ::T.untyped)
end

class Gem::Package::TarHeader
  def self.from(stream); end

  def self.strict_oct(str); end
end

class Gem::Package::TarInvalidError
end

class Gem::Package::TarInvalidError
end

class Gem::Package::TarReader
  include ::Enumerable
  def close(); end

  def each(&blk); end

  def each_entry(); end

  def initialize(io); end

  def rewind(); end

  def seek(name); end
end

class Gem::Package::TarReader::Entry
  def bytes_read(); end

  def check_closed(); end

  def close(); end

  def closed?(); end

  def directory?(); end

  def eof?(); end

  def file?(); end

  def full_name(); end

  def getc(); end

  def header(); end

  def initialize(header, io); end

  def pos(); end

  def read(len=T.unsafe(nil)); end

  def readpartial(len=T.unsafe(nil)); end

  def rewind(); end

  def symlink?(); end
end

class Gem::Package::TarReader::Entry
end

class Gem::Package::TarReader::UnexpectedEOF
end

class Gem::Package::TarReader::UnexpectedEOF
end

class Gem::Package::TarReader
  def self.new(io); end
end

class Gem::Package::TarWriter
  def add_file(name, mode); end

  def add_file_digest(name, mode, digest_algorithms); end

  def add_file_signed(name, mode, signer); end

  def add_file_simple(name, mode, size); end

  def add_symlink(name, target, mode); end

  def check_closed(); end

  def close(); end

  def closed?(); end

  def flush(); end

  def initialize(io); end

  def mkdir(name, mode); end

  def mtime(); end

  def mtime=(mtime); end

  def split_name(name); end
end

class Gem::Package::TarWriter::BoundedStream
  def initialize(io, limit); end

  def limit(); end

  def write(data); end

  def written(); end
end

class Gem::Package::TarWriter::BoundedStream
end

class Gem::Package::TarWriter::FileOverflow
end

class Gem::Package::TarWriter::FileOverflow
end

class Gem::Package::TarWriter::RestrictedStream
  def initialize(io); end

  def write(data); end
end

class Gem::Package::TarWriter::RestrictedStream
end

class Gem::Package::TarWriter
  def self.new(io); end
end

class Gem::Package::TooLongFileName
end

class Gem::Package::TooLongFileName
end

class Gem::Package
  def self.build(spec, skip_validation=T.unsafe(nil)); end

  def self.new(gem, security_policy=T.unsafe(nil)); end
end

class Gem::PathSupport
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def home(); end

  def initialize(env); end

  def path(); end

  def spec_cache_dir(); end
end

class Gem::PathSupport
  extend ::T::Sig
end

class Gem::Platform
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def ==(other); end

  def ===(other); end

  def =~(other); end

  def cpu(); end

  def cpu=(cpu); end

  def eql?(other); end

  def initialize(arch); end

  def os(); end

  def os=(os); end

  def to_a(); end

  def version(); end

  def version=(version); end
  JAVA = ::T.let(nil, ::T.untyped)
  MINGW = ::T.let(nil, ::T.untyped)
  MSWIN = ::T.let(nil, ::T.untyped)
  MSWIN64 = ::T.let(nil, ::T.untyped)
  X64_MINGW = ::T.let(nil, ::T.untyped)
end

class Gem::Platform
  extend ::T::Sig
  def self.installable?(spec); end

  def self.local(); end

  def self.match(platform); end

  def self.new(arch); end
end

class Gem::PlatformMismatch
  def add_platform(platform); end

  def initialize(name, version); end

  def name(); end

  def platforms(); end

  def version(); end

  def wordy(); end
end

class Gem::PlatformMismatch
  extend ::T::Sig
end

class Gem::RemoteError
  extend ::T::Sig
end

class Gem::RemoteFetcher
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def api_endpoint(uri); end

  def cache_update_path(uri, path=T.unsafe(nil), update=T.unsafe(nil)); end

  def close_all(); end

  def correct_for_windows_path(path); end

  def download(spec, source_uri, install_dir=T.unsafe(nil)); end

  def download_to_cache(dependency); end

  def fetch_file(uri, *_); end

  def fetch_http(uri, last_modified=T.unsafe(nil), head=T.unsafe(nil), depth=T.unsafe(nil)); end

  def fetch_https(uri, last_modified=T.unsafe(nil), head=T.unsafe(nil), depth=T.unsafe(nil)); end

  def fetch_path(uri, mtime=T.unsafe(nil), head=T.unsafe(nil)); end

  def fetch_s3(uri, mtime=T.unsafe(nil), head=T.unsafe(nil)); end

  def fetch_size(uri); end

  def headers(); end

  def headers=(headers); end

  def https?(uri); end

  def initialize(proxy=T.unsafe(nil), dns=T.unsafe(nil), headers=T.unsafe(nil)); end

  def request(uri, request_class, last_modified=T.unsafe(nil)); end

  def s3_expiration(); end

  def sign_s3_url(uri, expiration=T.unsafe(nil)); end
  BASE64_URI_TRANSLATE = ::T.let(nil, ::T.untyped)
end

class Gem::RemoteFetcher
  def self.fetcher(); end
end

class Gem::RemoteInstallationCancelled
  extend ::T::Sig
end

class Gem::RemoteInstallationSkipped
  extend ::T::Sig
end

class Gem::RemoteSourceException
  extend ::T::Sig
end

class Gem::Request
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def cert_files(); end

  def connection_for(uri); end

  def fetch(); end

  def initialize(uri, request_class, last_modified, pool); end

  def perform_request(request); end

  def proxy_uri(); end

  def reset(connection); end

  def user_agent(); end
end

class Gem::Request::ConnectionPools
  def close_all(); end

  def initialize(proxy_uri, cert_files); end

  def pool_for(uri); end
end

class Gem::Request::ConnectionPools
  def self.client(); end

  def self.client=(client); end
end

class Gem::Request::HTTPPool
  def cert_files(); end

  def checkin(connection); end

  def checkout(); end

  def close_all(); end

  def initialize(http_args, cert_files, proxy_uri); end

  def proxy_uri(); end
end

class Gem::Request::HTTPPool
end

class Gem::Request::HTTPSPool
end

class Gem::Request::HTTPSPool
end

class Gem::Request
  extend ::Gem::UserInteraction
  extend ::Gem::DefaultUserInteraction
  extend ::Gem::Text
  def self.configure_connection_for_https(connection, cert_files); end

  def self.create_with_proxy(uri, request_class, last_modified, proxy); end

  def self.get_cert_files(); end

  def self.get_proxy_from_env(scheme=T.unsafe(nil)); end

  def self.proxy_uri(proxy); end

  def self.verify_certificate(store_context); end

  def self.verify_certificate_message(error_number, cert); end
end

class Gem::RequestSet
  include ::TSort
  def always_install(); end

  def always_install=(always_install); end

  def dependencies(); end

  def development(); end

  def development=(development); end

  def development_shallow(); end

  def development_shallow=(development_shallow); end

  def errors(); end

  def gem(name, *reqs); end

  def git_set(); end

  def ignore_dependencies(); end

  def ignore_dependencies=(ignore_dependencies); end

  def import(deps); end

  def initialize(*deps); end

  def install(options, &block); end

  def install_dir(); end

  def install_from_gemdeps(options, &block); end

  def install_into(dir, force=T.unsafe(nil), options=T.unsafe(nil)); end

  def load_gemdeps(path, without_groups=T.unsafe(nil), installing=T.unsafe(nil)); end

  def prerelease(); end

  def prerelease=(prerelease); end

  def remote(); end

  def remote=(remote); end

  def resolve(set=T.unsafe(nil)); end

  def resolve_current(); end

  def resolver(); end

  def sets(); end

  def soft_missing(); end

  def soft_missing=(soft_missing); end

  def sorted_requests(); end

  def source_set(); end

  def specs(); end

  def specs_in(dir); end

  def tsort_each_node(&block); end

  def vendor_set(); end
end

Gem::RequestSet::GemDepedencyAPI = Gem::RequestSet::GemDependencyAPI

class Gem::RequestSet::GemDependencyAPI
  def dependencies(); end

  def find_gemspec(name, path); end

  def gem(name, *requirements); end

  def gem_deps_file(); end

  def gem_git_reference(options); end

  def gemspec(options=T.unsafe(nil)); end

  def git(repository); end

  def git_set(); end

  def git_source(name, &callback); end

  def group(*groups); end

  def initialize(set, path); end

  def installing=(installing); end

  def load(); end

  def platform(*platforms); end

  def platforms(*platforms); end

  def requires(); end

  def ruby(version, options=T.unsafe(nil)); end

  def source(url); end

  def vendor_set(); end

  def without_groups(); end

  def without_groups=(without_groups); end
  ENGINE_MAP = ::T.let(nil, ::T.untyped)
  PLATFORM_MAP = ::T.let(nil, ::T.untyped)
  VERSION_MAP = ::T.let(nil, ::T.untyped)
  WINDOWS = ::T.let(nil, ::T.untyped)
end

class Gem::RequestSet::GemDependencyAPI
end

class Gem::RequestSet::Lockfile
  def add_DEPENDENCIES(out); end

  def add_GEM(out, spec_groups); end

  def add_GIT(out, git_requests); end

  def add_PATH(out, path_requests); end

  def add_PLATFORMS(out); end

  def initialize(request_set, gem_deps_file, dependencies); end

  def platforms(); end

  def relative_path_from(dest, base); end

  def spec_groups(); end

  def write(); end
end

class Gem::RequestSet::Lockfile::ParseError
  def column(); end

  def initialize(message, column, line, path); end

  def line(); end

  def path(); end
end

class Gem::RequestSet::Lockfile::ParseError
end

class Gem::RequestSet::Lockfile::Parser
  def get(expected_types=T.unsafe(nil), expected_value=T.unsafe(nil)); end

  def initialize(tokenizer, set, platforms, filename=T.unsafe(nil)); end

  def parse(); end

  def parse_DEPENDENCIES(); end

  def parse_GEM(); end

  def parse_GIT(); end

  def parse_PATH(); end

  def parse_PLATFORMS(); end

  def parse_dependency(name, op); end
end

class Gem::RequestSet::Lockfile::Parser
end

class Gem::RequestSet::Lockfile::Tokenizer
  def empty?(); end

  def initialize(input, filename=T.unsafe(nil), line=T.unsafe(nil), pos=T.unsafe(nil)); end

  def make_parser(set, platforms); end

  def next_token(); end

  def peek(); end

  def shift(); end

  def skip(type); end

  def to_a(); end

  def token_pos(byte_offset); end

  def unshift(token); end
  EOF = ::T.let(nil, ::T.untyped)
end

class Gem::RequestSet::Lockfile::Tokenizer::Token
  def column(); end

  def column=(_); end

  def line(); end

  def line=(_); end

  def type(); end

  def type=(_); end

  def value(); end

  def value=(_); end
end

class Gem::RequestSet::Lockfile::Tokenizer::Token
  def self.[](*_); end

  def self.members(); end
end

class Gem::RequestSet::Lockfile::Tokenizer
  def self.from_file(file); end
end

class Gem::RequestSet::Lockfile
  def self.build(request_set, gem_deps_file, dependencies=T.unsafe(nil)); end

  def self.requests_to_deps(requests); end
end

class Gem::RequestSet
end

class Gem::Requirement
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def ==(other); end

  def ===(version); end

  def =~(version); end

  def as_list(); end

  def concat(new); end

  def encode_with(coder); end

  def exact?(); end

  def for_lockfile(); end

  def init_with(coder); end

  def initialize(*requirements); end

  def marshal_dump(); end

  def marshal_load(array); end

  def none?(); end

  def prerelease?(); end

  def requirements(); end

  def satisfied_by?(version); end

  def specific?(); end

  def to_yaml_properties(); end

  def yaml_initialize(tag, vals); end
  DefaultRequirement = ::T.let(nil, ::T.untyped)
end

class Gem::Requirement::BadRequirementError
  extend ::T::Sig
end

class Gem::Requirement
  extend ::T::Sig
  def self.create(*inputs); end

  def self.default(); end

  def self.parse(obj); end

  def self.source_set(); end
end

class Gem::Resolver
  include ::Gem::Resolver::Molinillo::UI
  include ::Gem::Resolver::Molinillo::SpecificationProvider
  def activation_request(dep, possible); end

  def development(); end

  def development=(development); end

  def development_shallow(); end

  def development_shallow=(development_shallow); end

  def explain(stage, *data); end

  def explain_list(stage); end

  def find_possible(dependency); end

  def ignore_dependencies(); end

  def ignore_dependencies=(ignore_dependencies); end

  def initialize(needed, set=T.unsafe(nil)); end

  def missing(); end

  def requests(s, act, reqs=T.unsafe(nil)); end

  def resolve(); end

  def select_local_platforms(specs); end

  def skip_gems(); end

  def skip_gems=(skip_gems); end

  def soft_missing(); end

  def soft_missing=(soft_missing); end

  def stats(); end
  DEBUG_RESOLVER = ::T.let(nil, ::T.untyped)
end

class Gem::Resolver::APISet
  def dep_uri(); end

  def initialize(dep_uri=T.unsafe(nil)); end

  def prefetch_now(); end

  def source(); end

  def uri(); end

  def versions(name); end
end

class Gem::Resolver::APISet
end

class Gem::Resolver::APISpecification
  def ==(other); end

  def initialize(set, api_data); end
end

class Gem::Resolver::APISpecification
end

class Gem::Resolver::ActivationRequest
  def ==(other); end

  def development?(); end

  def download(path); end

  def full_name(); end

  def full_spec(); end

  def initialize(spec, request, others_possible=T.unsafe(nil)); end

  def installed?(); end

  def name(); end

  def others_possible?(); end

  def parent(); end

  def request(); end

  def spec(); end

  def version(); end
end

class Gem::Resolver::ActivationRequest
end

class Gem::Resolver::BestSet
  def initialize(sources=T.unsafe(nil)); end

  def pick_sets(); end

  def replace_failed_api_set(error); end
end

class Gem::Resolver::BestSet
end

class Gem::Resolver::ComposedSet
  def initialize(*sets); end

  def prerelease=(allow_prerelease); end

  def remote=(remote); end

  def sets(); end
end

class Gem::Resolver::ComposedSet
end

class Gem::Resolver::Conflict
  def ==(other); end

  def activated(); end

  def conflicting_dependencies(); end

  def dependency(); end

  def explain(); end

  def explanation(); end

  def failed_dep(); end

  def for_spec?(spec); end

  def initialize(dependency, activated, failed_dep=T.unsafe(nil)); end

  def request_path(current); end

  def requester(); end
end

class Gem::Resolver::Conflict
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::DependencyRequest
  def ==(other); end

  def dependency(); end

  def development?(); end

  def explicit?(); end

  def implicit?(); end

  def initialize(dependency, requester); end

  def match?(spec, allow_prerelease=T.unsafe(nil)); end

  def matches_spec?(spec); end

  def name(); end

  def request_context(); end

  def requester(); end

  def requirement(); end

  def type(); end
end

class Gem::Resolver::DependencyRequest
end

class Gem::Resolver::GitSet
  def add_git_gem(name, repository, reference, submodules); end

  def add_git_spec(name, version, repository, reference, submodules); end

  def need_submodules(); end

  def repositories(); end

  def root_dir(); end

  def root_dir=(root_dir); end

  def specs(); end
end

class Gem::Resolver::GitSet
end

class Gem::Resolver::GitSpecification
  def ==(other); end

  def add_dependency(dependency); end
end

class Gem::Resolver::GitSpecification
end

class Gem::Resolver::IndexSet
  def initialize(source=T.unsafe(nil)); end
end

class Gem::Resolver::IndexSet
end

class Gem::Resolver::IndexSpecification
  def initialize(set, name, version, source, platform); end
end

class Gem::Resolver::IndexSpecification
end

class Gem::Resolver::InstalledSpecification
  def ==(other); end
end

class Gem::Resolver::InstalledSpecification
end

class Gem::Resolver::InstallerSet
  def add_always_install(dependency); end

  def add_local(dep_name, spec, source); end

  def always_install(); end

  def consider_local?(); end

  def consider_remote?(); end

  def ignore_dependencies(); end

  def ignore_dependencies=(ignore_dependencies); end

  def ignore_installed(); end

  def ignore_installed=(ignore_installed); end

  def initialize(domain); end

  def load_spec(name, ver, platform, source); end

  def local?(dep_name); end

  def prerelease=(allow_prerelease); end

  def remote=(remote); end

  def remote_set(); end
end

class Gem::Resolver::InstallerSet
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::LockSet
  def add(name, version, platform); end

  def initialize(sources); end

  def load_spec(name, version, platform, source); end

  def specs(); end
end

class Gem::Resolver::LockSet
end

class Gem::Resolver::LockSpecification
  def add_dependency(dependency); end

  def initialize(set, name, version, sources, platform); end

  def sources(); end
end

class Gem::Resolver::LockSpecification
end

module Gem::Resolver::Molinillo
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::Resolver::Molinillo::CircularDependencyError
  def dependencies(); end

  def initialize(nodes); end
end

class Gem::Resolver::Molinillo::CircularDependencyError
end

module Gem::Resolver::Molinillo::Delegates
end

module Gem::Resolver::Molinillo::Delegates::ResolutionState
  def activated(); end

  def conflicts(); end

  def depth(); end

  def name(); end

  def possibilities(); end

  def requirement(); end

  def requirements(); end
end

module Gem::Resolver::Molinillo::Delegates::ResolutionState
  extend ::T::Sig
end

module Gem::Resolver::Molinillo::Delegates::SpecificationProvider
  def allow_missing?(dependency); end

  def dependencies_for(specification); end

  def name_for(dependency); end

  def name_for_explicit_dependency_source(); end

  def name_for_locking_dependency_source(); end

  def requirement_satisfied_by?(requirement, activated, spec); end

  def search_for(dependency); end

  def sort_dependencies(dependencies, activated, conflicts); end
end

module Gem::Resolver::Molinillo::Delegates::SpecificationProvider
  extend ::T::Sig
end

module Gem::Resolver::Molinillo::Delegates
  extend ::T::Sig
end

class Gem::Resolver::Molinillo::DependencyGraph
  include ::Enumerable
  include ::TSort
  def ==(other); end

  def add_child_vertex(name, payload, parent_names, requirement); end

  def add_edge(origin, destination, requirement); end

  def add_vertex(name, payload, root=T.unsafe(nil)); end

  def delete_edge(edge); end

  def detach_vertex_named(name); end

  def each(&blk); end

  def log(); end

  def rewind_to(tag); end

  def root_vertex_named(name); end

  def set_payload(name, payload); end

  def tag(tag); end

  def to_dot(options=T.unsafe(nil)); end

  def tsort_each_child(vertex, &block); end

  def vertex_named(name); end

  def vertices(); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Action
  def down(graph); end

  def next(); end

  def next=(_); end

  def previous(); end

  def previous=(previous); end

  def up(graph); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Action
  def self.action_name(); end
end

class Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular
  def destination(); end

  def initialize(origin, destination, requirement); end

  def make_edge(graph); end

  def origin(); end

  def requirement(); end
end

class Gem::Resolver::Molinillo::DependencyGraph::AddEdgeNoCircular
end

class Gem::Resolver::Molinillo::DependencyGraph::AddVertex
  def initialize(name, payload, root); end

  def name(); end

  def payload(); end

  def root(); end
end

class Gem::Resolver::Molinillo::DependencyGraph::AddVertex
end

class Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge
  def destination_name(); end

  def initialize(origin_name, destination_name, requirement); end

  def make_edge(graph); end

  def origin_name(); end

  def requirement(); end
end

class Gem::Resolver::Molinillo::DependencyGraph::DeleteEdge
end

class Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed
  def initialize(name); end

  def name(); end
end

class Gem::Resolver::Molinillo::DependencyGraph::DetachVertexNamed
end

class Gem::Resolver::Molinillo::DependencyGraph::Edge
  def destination(); end

  def destination=(_); end

  def origin(); end

  def origin=(_); end

  def requirement(); end

  def requirement=(_); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Edge
  def self.[](*_); end

  def self.members(); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  def add_edge_no_circular(graph, origin, destination, requirement); end

  def add_vertex(graph, name, payload, root); end

  def delete_edge(graph, origin_name, destination_name, requirement); end

  def detach_vertex_named(graph, name); end

  def each(&blk); end

  def pop!(graph); end

  def reverse_each(); end

  def rewind_to(graph, tag); end

  def set_payload(graph, name, payload); end

  def tag(graph, tag); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

class Gem::Resolver::Molinillo::DependencyGraph::SetPayload
  def initialize(name, payload); end

  def name(); end

  def payload(); end
end

class Gem::Resolver::Molinillo::DependencyGraph::SetPayload
end

class Gem::Resolver::Molinillo::DependencyGraph::Tag
  def down(_graph); end

  def initialize(tag); end

  def tag(); end

  def up(_graph); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Tag
end

class Gem::Resolver::Molinillo::DependencyGraph::Vertex
  def ==(other); end

  def ancestor?(other); end

  def descendent?(other); end

  def eql?(other); end

  def explicit_requirements(); end

  def incoming_edges(); end

  def incoming_edges=(incoming_edges); end

  def initialize(name, payload); end

  def is_reachable_from?(other); end

  def name(); end

  def name=(name); end

  def outgoing_edges(); end

  def outgoing_edges=(outgoing_edges); end

  def path_to?(other); end

  def payload(); end

  def payload=(payload); end

  def predecessors(); end

  def recursive_predecessors(); end

  def recursive_successors(); end

  def requirements(); end

  def root(); end

  def root=(root); end

  def root?(); end

  def shallow_eql?(other); end

  def successors(); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Vertex
end

class Gem::Resolver::Molinillo::DependencyGraph
  def self.tsort(vertices); end
end

class Gem::Resolver::Molinillo::DependencyState
  def pop_possibility_state(); end
end

class Gem::Resolver::Molinillo::DependencyState
end

class Gem::Resolver::Molinillo::NoSuchDependencyError
  def dependency(); end

  def dependency=(dependency); end

  def initialize(dependency, required_by=T.unsafe(nil)); end

  def required_by(); end

  def required_by=(required_by); end
end

class Gem::Resolver::Molinillo::NoSuchDependencyError
end

class Gem::Resolver::Molinillo::PossibilityState
end

class Gem::Resolver::Molinillo::PossibilityState
end

class Gem::Resolver::Molinillo::ResolutionState
  def activated(); end

  def activated=(_); end

  def conflicts(); end

  def conflicts=(_); end

  def depth(); end

  def depth=(_); end

  def name(); end

  def name=(_); end

  def possibilities(); end

  def possibilities=(_); end

  def requirement(); end

  def requirement=(_); end

  def requirements(); end

  def requirements=(_); end
end

class Gem::Resolver::Molinillo::ResolutionState
  def self.[](*_); end

  def self.empty(); end

  def self.members(); end
end

class Gem::Resolver::Molinillo::Resolver
  def initialize(specification_provider, resolver_ui); end

  def resolve(requested, base=T.unsafe(nil)); end

  def resolver_ui(); end

  def specification_provider(); end
end

class Gem::Resolver::Molinillo::Resolver::Resolution
  include ::Gem::Resolver::Molinillo::Delegates::ResolutionState
  include ::Gem::Resolver::Molinillo::Delegates::SpecificationProvider
  def base(); end

  def initialize(specification_provider, resolver_ui, requested, base); end

  def iteration_rate=(iteration_rate); end

  def original_requested(); end

  def resolve(); end

  def resolver_ui(); end

  def specification_provider(); end

  def started_at=(started_at); end

  def states=(states); end
end

class Gem::Resolver::Molinillo::Resolver::Resolution::Conflict
  def activated_by_name(); end

  def activated_by_name=(_); end

  def existing(); end

  def existing=(_); end

  def locked_requirement(); end

  def locked_requirement=(_); end

  def possibility(); end

  def possibility=(_); end

  def requirement(); end

  def requirement=(_); end

  def requirement_trees(); end

  def requirement_trees=(_); end

  def requirements(); end

  def requirements=(_); end
end

class Gem::Resolver::Molinillo::Resolver::Resolution::Conflict
  def self.[](*_); end

  def self.members(); end
end

class Gem::Resolver::Molinillo::Resolver::Resolution
end

class Gem::Resolver::Molinillo::Resolver
end

class Gem::Resolver::Molinillo::ResolverError
end

class Gem::Resolver::Molinillo::ResolverError
end

module Gem::Resolver::Molinillo::SpecificationProvider
  def allow_missing?(dependency); end

  def dependencies_for(specification); end

  def name_for(dependency); end

  def name_for_explicit_dependency_source(); end

  def name_for_locking_dependency_source(); end

  def requirement_satisfied_by?(requirement, activated, spec); end

  def search_for(dependency); end

  def sort_dependencies(dependencies, activated, conflicts); end
end

module Gem::Resolver::Molinillo::SpecificationProvider
  extend ::T::Sig
end

module Gem::Resolver::Molinillo::UI
  def after_resolution(); end

  def before_resolution(); end

  def debug(depth=T.unsafe(nil)); end

  def debug?(); end

  def indicate_progress(); end

  def output(); end

  def progress_rate(); end
end

module Gem::Resolver::Molinillo::UI
  extend ::T::Sig
end

class Gem::Resolver::Molinillo::VersionConflict
  def conflicts(); end

  def initialize(conflicts); end
end

class Gem::Resolver::Molinillo::VersionConflict
end

module Gem::Resolver::Molinillo
  extend ::T::Sig
end

class Gem::Resolver::RequirementList
  include ::Enumerable
  def add(req); end

  def each(&blk); end

  def empty?(); end

  def next5(); end

  def remove(); end

  def size(); end
end

class Gem::Resolver::RequirementList
end

class Gem::Resolver::Set
  def errors(); end

  def errors=(errors); end

  def find_all(req); end

  def prefetch(reqs); end

  def prerelease(); end

  def prerelease=(prerelease); end

  def remote(); end

  def remote=(remote); end

  def remote?(); end
end

class Gem::Resolver::Set
end

class Gem::Resolver::SourceSet
  def add_source_gem(name, source); end
end

class Gem::Resolver::SourceSet
end

class Gem::Resolver::SpecSpecification
  def initialize(set, spec, source=T.unsafe(nil)); end
end

class Gem::Resolver::SpecSpecification
end

class Gem::Resolver::Specification
  def dependencies(); end

  def fetch_development_dependencies(); end

  def full_name(); end

  def install(options=T.unsafe(nil)); end

  def installable_platform?(); end

  def local?(); end

  def name(); end

  def platform(); end

  def set(); end

  def source(); end

  def spec(); end

  def version(); end
end

class Gem::Resolver::Specification
end

class Gem::Resolver::Stats
  def backtracking!(); end

  def display(); end

  def iteration!(); end

  def record_depth(stack); end

  def record_requirements(reqs); end

  def requirement!(); end
  PATTERN = ::T.let(nil, ::T.untyped)
end

class Gem::Resolver::Stats
end

class Gem::Resolver::VendorSet
  def add_vendor_gem(name, directory); end

  def load_spec(name, version, platform, source); end

  def specs(); end
end

class Gem::Resolver::VendorSet
end

class Gem::Resolver::VendorSpecification
  def ==(other); end
end

class Gem::Resolver::VendorSpecification
end

class Gem::Resolver
  def self.compose_sets(*sets); end

  def self.for_current_gems(needed); end
end

class Gem::RubyVersionMismatch
  extend ::T::Sig
end

class Gem::RuntimeRequirementNotMetError
  def suggestion(); end

  def suggestion=(suggestion); end
end

class Gem::RuntimeRequirementNotMetError
end

module Gem::Security
  AlmostNoSecurity = ::T.let(nil, ::T.untyped)
  DIGEST_NAME = ::T.let(nil, ::T.untyped)
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  HighSecurity = ::T.let(nil, ::T.untyped)
  KEY_CIPHER = ::T.let(nil, ::T.untyped)
  KEY_LENGTH = ::T.let(nil, ::T.untyped)
  LowSecurity = ::T.let(nil, ::T.untyped)
  MediumSecurity = ::T.let(nil, ::T.untyped)
  NoSecurity = ::T.let(nil, ::T.untyped)
  ONE_DAY = ::T.let(nil, ::T.untyped)
  ONE_YEAR = ::T.let(nil, ::T.untyped)
  Policies = ::T.let(nil, ::T.untyped)
  SigningPolicy = ::T.let(nil, ::T.untyped)
end

class Gem::Security::DIGEST_ALGORITHM
  def initialize(data=T.unsafe(nil)); end
end

class Gem::Security::DIGEST_ALGORITHM
  def self.digest(data); end

  def self.hexdigest(data); end
end

class Gem::Security::Exception
end

class Gem::Security::Exception
end

Gem::Security::KEY_ALGORITHM = OpenSSL::PKey::RSA

class Gem::Security::Policy
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def check_cert(signer, issuer, time); end

  def check_chain(chain, time); end

  def check_data(public_key, digest, signature, data); end

  def check_key(signer, key); end

  def check_root(chain, time); end

  def check_trust(chain, digester, trust_dir); end

  def initialize(name, policy=T.unsafe(nil), opt=T.unsafe(nil)); end

  def name(); end

  def only_signed(); end

  def only_signed=(only_signed); end

  def only_trusted(); end

  def only_trusted=(only_trusted); end

  def subject(certificate); end

  def verify(chain, key=T.unsafe(nil), digests=T.unsafe(nil), signatures=T.unsafe(nil), full_name=T.unsafe(nil)); end

  def verify_chain(); end

  def verify_chain=(verify_chain); end

  def verify_data(); end

  def verify_data=(verify_data); end

  def verify_root(); end

  def verify_root=(verify_root); end

  def verify_signatures(spec, digests, signatures); end

  def verify_signer(); end

  def verify_signer=(verify_signer); end
end

class Gem::Security::Policy
end

class Gem::Security::Signer
  def cert_chain(); end

  def cert_chain=(cert_chain); end

  def digest_algorithm(); end

  def digest_name(); end

  def extract_name(cert); end

  def initialize(key, cert_chain, passphrase=T.unsafe(nil)); end

  def key(); end

  def key=(key); end

  def load_cert_chain(); end

  def re_sign_key(); end

  def sign(data); end
end

class Gem::Security::Signer
end

class Gem::Security::TrustDir
  def cert_path(certificate); end

  def dir(); end

  def each_certificate(); end

  def initialize(dir, permissions=T.unsafe(nil)); end

  def issuer_of(certificate); end

  def load_certificate(certificate_file); end

  def name_path(name); end

  def trust_cert(certificate); end

  def verify(); end
  DEFAULT_PERMISSIONS = ::T.let(nil, ::T.untyped)
end

class Gem::Security::TrustDir
end

module Gem::Security
  extend ::T::Sig
  def self.alt_name_or_x509_entry(certificate, x509_entry); end

  def self.create_cert(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_cert_email(email, key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.create_cert_self_signed(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_key(length=T.unsafe(nil), algorithm=T.unsafe(nil)); end

  def self.email_to_name(email_address); end

  def self.re_sign(expired_certificate, private_key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.reset(); end

  def self.sign(certificate, signing_key, signing_cert, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.trust_dir(); end

  def self.trusted_certificates(&block); end

  def self.write(pemmable, path, permissions=T.unsafe(nil), passphrase=T.unsafe(nil), cipher=T.unsafe(nil)); end
end

class Gem::SilentUI
  def initialize(); end
end

class Gem::SilentUI
end

class Gem::Source
  include ::Comparable
  def ==(other); end

  def api_uri(); end

  def cache_dir(uri); end

  def dependency_resolver_set(); end

  def download(spec, dir=T.unsafe(nil)); end

  def eql?(other); end

  def fetch_spec(name_tuple); end

  def initialize(uri); end

  def load_specs(type); end

  def update_cache?(); end

  def uri(); end
  FILES = ::T.let(nil, ::T.untyped)
end

class Gem::Source::Git
  def base_dir(); end

  def cache(); end

  def checkout(); end

  def dir_shortref(); end

  def download(full_spec, path); end

  def initialize(name, repository, reference, submodules=T.unsafe(nil)); end

  def install_dir(); end

  def name(); end

  def need_submodules(); end

  def reference(); end

  def remote(); end

  def remote=(remote); end

  def repo_cache_dir(); end

  def repository(); end

  def rev_parse(); end

  def root_dir(); end

  def root_dir=(root_dir); end

  def specs(); end

  def uri_hash(); end
end

class Gem::Source::Git
end

class Gem::Source::Installed
  def download(spec, path); end

  def initialize(); end
end

class Gem::Source::Installed
end

class Gem::Source::Local
  def download(spec, cache_dir=T.unsafe(nil)); end

  def fetch_spec(name); end

  def find_gem(gem_name, version=T.unsafe(nil), prerelease=T.unsafe(nil)); end

  def initialize(); end
end

class Gem::Source::Local
end

class Gem::Source::Lock
  def initialize(source); end

  def wrapped(); end
end

class Gem::Source::Lock
end

class Gem::Source::SpecificFile
  def fetch_spec(name); end

  def initialize(file); end

  def load_specs(*a); end

  def path(); end

  def spec(); end
end

class Gem::Source::SpecificFile
end

class Gem::Source::Vendor
  def initialize(path); end
end

class Gem::Source::Vendor
end

class Gem::Source
end

class Gem::SourceFetchProblem
  def error(); end

  def exception(); end

  def initialize(source, error); end

  def source(); end

  def wordy(); end
end

class Gem::SourceFetchProblem
  extend ::T::Sig
end

class Gem::SourceList
  include ::Enumerable
  def <<(obj); end

  def ==(other); end

  def clear(); end

  def delete(source); end

  def each(&blk); end

  def each_source(&b); end

  def empty?(); end

  def first(); end

  def include?(other); end

  def replace(other); end

  def sources(); end

  def to_a(); end

  def to_ary(); end
end

class Gem::SourceList
  def self.from(ary); end
end

class Gem::SpecFetcher
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def available_specs(type); end

  def detect(type=T.unsafe(nil)); end

  def initialize(sources=T.unsafe(nil)); end

  def latest_specs(); end

  def prerelease_specs(); end

  def search_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def sources(); end

  def spec_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def specs(); end

  def suggest_gems_from_name(gem_name, type=T.unsafe(nil)); end

  def tuples_for(source, type, gracefully_ignore=T.unsafe(nil)); end
end

class Gem::SpecFetcher
  def self.fetcher(); end

  def self.fetcher=(fetcher); end
end

class Gem::SpecificGemNotFoundException
  def errors(); end

  def initialize(name, version, errors=T.unsafe(nil)); end

  def name(); end

  def version(); end
end

class Gem::SpecificGemNotFoundException
  extend ::T::Sig
end

class Gem::Specification
  include ::Bundler::MatchPlatform
  include ::Bundler::GemHelpers
  def ==(other); end

  def _dump(limit); end

  def abbreviate(); end

  def activate(); end

  def activate_dependencies(); end

  def activated(); end

  def activated=(activated); end

  def add_bindir(executables); end

  def add_dependency(gem, *requirements); end

  def add_development_dependency(gem, *requirements); end

  def add_runtime_dependency(gem, *requirements); end

  def add_self_to_load_path(); end

  def author(); end

  def author=(o); end

  def authors(); end

  def authors=(value); end

  def autorequire(); end

  def autorequire=(autorequire); end

  def bin_dir(); end

  def bin_file(name); end

  def bindir(); end

  def bindir=(bindir); end

  def build_args(); end

  def build_extensions(); end

  def build_info_dir(); end

  def build_info_file(); end

  def bundled_gem_in_old_ruby?(); end

  def cache_dir(); end

  def cache_file(); end

  def cert_chain(); end

  def cert_chain=(cert_chain); end

  def conficts_when_loaded_with?(list_of_specs); end

  def conflicts(); end

  def date(); end

  def date=(date); end

  def default_executable(); end

  def default_executable=(default_executable); end

  def default_value(name); end

  def dependencies(); end

  def dependent_gems(); end

  def dependent_specs(); end

  def description(); end

  def description=(str); end

  def development_dependencies(); end

  def doc_dir(type=T.unsafe(nil)); end

  def email(); end

  def email=(email); end

  def encode_with(coder); end

  def eql?(other); end

  def executable(); end

  def executable=(o); end

  def executables(); end

  def executables=(value); end

  def extensions(); end

  def extensions=(extensions); end

  def extra_rdoc_files(); end

  def extra_rdoc_files=(files); end

  def file_name(); end

  def files(); end

  def files=(files); end

  def for_cache(); end

  def git_version(); end

  def groups(); end

  def has_conflicts?(); end

  def has_rdoc(); end

  def has_rdoc=(ignored); end

  def has_rdoc?(); end

  def has_test_suite?(); end

  def has_unit_tests?(); end

  def homepage(); end

  def homepage=(homepage); end

  def init_with(coder); end

  def initialize(name=T.unsafe(nil), version=T.unsafe(nil)); end

  def installed_by_version(); end

  def installed_by_version=(version); end

  def lib_files(); end

  def license(); end

  def license=(o); end

  def licenses(); end

  def licenses=(licenses); end

  def load_paths(); end

  def location(); end

  def location=(location); end

  def mark_version(); end

  def metadata(); end

  def metadata=(metadata); end

  def method_missing(sym, *a, &b); end

  def missing_extensions?(); end

  def name=(name); end

  def name_tuple(); end

  def nondevelopment_dependencies(); end

  def normalize(); end

  def original_name(); end

  def original_platform(); end

  def original_platform=(original_platform); end

  def platform=(platform); end

  def post_install_message(); end

  def post_install_message=(post_install_message); end

  def raise_if_conflicts(); end

  def rdoc_options(); end

  def rdoc_options=(options); end

  def relative_loaded_from(); end

  def relative_loaded_from=(relative_loaded_from); end

  def remote(); end

  def remote=(remote); end

  def require_path(); end

  def require_path=(path); end

  def require_paths=(val); end

  def required_ruby_version(); end

  def required_ruby_version=(req); end

  def required_rubygems_version(); end

  def required_rubygems_version=(req); end

  def requirements(); end

  def requirements=(req); end

  def reset_nil_attributes_to_default(); end

  def rg_extension_dir(); end

  def rg_full_gem_path(); end

  def rg_loaded_from(); end

  def ri_dir(); end

  def rubyforge_project(); end

  def rubyforge_project=(rubyforge_project); end

  def rubygems_version(); end

  def rubygems_version=(rubygems_version); end

  def runtime_dependencies(); end

  def sanitize(); end

  def sanitize_string(string); end

  def satisfies_requirement?(dependency); end

  def signing_key(); end

  def signing_key=(signing_key); end

  def sort_obj(); end

  def source(); end

  def source=(source); end

  def spec_dir(); end

  def spec_file(); end

  def spec_name(); end

  def specification_version(); end

  def specification_version=(specification_version); end

  def summary(); end

  def summary=(str); end

  def test_file(); end

  def test_file=(file); end

  def test_files(); end

  def test_files=(files); end

  def to_gemfile(path=T.unsafe(nil)); end

  def to_ruby(); end

  def to_ruby_for_cache(); end

  def to_yaml(opts=T.unsafe(nil)); end

  def traverse(trail=T.unsafe(nil), visited=T.unsafe(nil), &block); end

  def validate(packaging=T.unsafe(nil)); end

  def validate_dependencies(); end

  def validate_metadata(); end

  def validate_permissions(); end

  def version=(version); end

  def warning(statement); end

  def yaml_initialize(tag, vals); end
  DateLike = ::T.let(nil, ::T.untyped)
  DateTimeFormat = ::T.let(nil, ::T.untyped)
  INITIALIZE_CODE_FOR_DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Gem::Specification
  extend ::T::Sig
  extend ::Gem::Deprecate
  extend ::Enumerable
  def self._all(); end

  def self._clear_load_cache(); end

  def self._latest_specs(specs, prerelease=T.unsafe(nil)); end

  def self._load(str); end

  def self._resort!(specs); end

  def self.add_spec(spec); end

  def self.add_specs(*specs); end

  def self.all(); end

  def self.all=(specs); end

  def self.all_names(); end

  def self.array_attributes(); end

  def self.attribute_names(); end

  def self.dirs(); end

  def self.dirs=(dirs); end

  def self.each(&blk); end

  def self.each_gemspec(dirs); end

  def self.each_spec(dirs); end

  def self.find_active_stub_by_path(path); end

  def self.find_all_by_full_name(full_name); end

  def self.find_all_by_name(name, *requirements); end

  def self.find_by_name(name, *requirements); end

  def self.find_by_path(path); end

  def self.find_in_unresolved(path); end

  def self.find_in_unresolved_tree(path); end

  def self.find_inactive_by_path(path); end

  def self.from_yaml(input); end

  def self.latest_specs(prerelease=T.unsafe(nil)); end

  def self.load(file); end

  def self.load_defaults(); end

  def self.non_nil_attributes(); end

  def self.normalize_yaml_input(input); end

  def self.outdated(); end

  def self.outdated_and_latest_version(); end

  def self.remove_spec(spec); end

  def self.required_attribute?(name); end

  def self.required_attributes(); end

  def self.reset(); end

  def self.stubs(); end

  def self.stubs_for(name); end

  def self.unresolved_deps(); end
end

class Gem::StreamUI
  def _gets_noecho(); end

  def alert(statement, question=T.unsafe(nil)); end

  def alert_error(statement, question=T.unsafe(nil)); end

  def alert_warning(statement, question=T.unsafe(nil)); end

  def ask(question); end

  def ask_for_password(question); end

  def ask_yes_no(question, default=T.unsafe(nil)); end

  def backtrace(exception); end

  def choose_from_list(question, list); end

  def close(); end

  def debug(statement); end

  def download_reporter(*args); end

  def errs(); end

  def initialize(in_stream, out_stream, err_stream=T.unsafe(nil), usetty=T.unsafe(nil)); end

  def ins(); end

  def outs(); end

  def progress_reporter(*args); end

  def require_io_console(); end

  def say(statement=T.unsafe(nil)); end

  def terminate_interaction(status=T.unsafe(nil)); end

  def tty?(); end
end

class Gem::StreamUI
end

class Gem::StubSpecification
  def build_extensions(); end

  def extensions(); end

  def initialize(filename, base_dir, gems_dir, default_gem); end

  def missing_extensions?(); end

  def valid?(); end
end

class Gem::StubSpecification::StubLine
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def extensions(); end

  def full_name(); end

  def initialize(data, extensions); end

  def name(); end

  def platform(); end

  def require_paths(); end

  def version(); end
end

class Gem::StubSpecification::StubLine
  extend ::T::Sig
end

class Gem::StubSpecification
  extend ::T::Sig
  def self.default_gemspec_stub(filename, base_dir, gems_dir); end

  def self.gemspec_stub(filename, base_dir, gems_dir); end
end

class Gem::SystemExitException
  def exit_code(); end

  def exit_code=(exit_code); end

  def initialize(exit_code); end
end

class Gem::SystemExitException
  extend ::T::Sig
end

module Gem::Text
  def clean_text(text); end

  def format_text(text, wrap, indent=T.unsafe(nil)); end

  def levenshtein_distance(str1, str2); end

  def min3(a, b, c); end

  def truncate_text(text, description, max_length=T.unsafe(nil)); end
end

module Gem::Text
  extend ::T::Sig
end

Gem::UnsatisfiableDepedencyError = Gem::UnsatisfiableDependencyError

class Gem::UnsatisfiableDependencyError
  def dependency(); end

  def errors(); end

  def errors=(errors); end

  def initialize(dep, platform_mismatch=T.unsafe(nil)); end

  def name(); end

  def version(); end
end

class Gem::UnsatisfiableDependencyError
  extend ::T::Sig
end

class Gem::UriFormatter
  def escape(); end

  def initialize(uri); end

  def normalize(); end

  def unescape(); end

  def uri(); end
end

class Gem::UriFormatter
end

module Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def alert(statement, question=T.unsafe(nil)); end

  def alert_error(statement, question=T.unsafe(nil)); end

  def alert_warning(statement, question=T.unsafe(nil)); end

  def ask(question); end

  def ask_for_password(prompt); end

  def ask_yes_no(question, default=T.unsafe(nil)); end

  def choose_from_list(question, list); end

  def say(statement=T.unsafe(nil)); end

  def terminate_interaction(exit_code=T.unsafe(nil)); end

  def verbose(msg=T.unsafe(nil)); end
end

module Gem::UserInteraction
  extend ::T::Sig
end

module Gem::Util
  NULL_DEVICE = ::T.let(nil, ::T.untyped)
end

module Gem::Util
  extend ::T::Sig
  def self.gunzip(data); end

  def self.gzip(data); end

  def self.inflate(data); end

  def self.popen(*command); end

  def self.silent_system(*command); end

  def self.traverse_parents(directory, &block); end
end

class Gem::VerificationError
  extend ::T::Sig
end

class Gem::Version
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def _segments(); end

  def _split_segments(); end

  def _version(); end

  def approximate_recommendation(); end

  def bump(); end

  def canonical_segments(); end

  def encode_with(coder); end

  def eql?(other); end

  def init_with(coder); end

  def marshal_dump(); end

  def marshal_load(array); end

  def prerelease?(); end

  def release(); end

  def segments(); end

  def to_yaml_properties(); end

  def version(); end

  def yaml_initialize(tag, map); end
end

Gem::Version::Requirement = Gem::Requirement

class Gem::Version
  extend ::T::Sig
  def self.correct?(version); end

  def self.create(input); end

  def self.new(version); end
end

module Gem
  extend ::T::Sig
  def self._deprecated_datadir(gem_name); end

  def self.activate_bin_path(name, *args); end

  def self.default_ext_dir_for(base_dir); end

  def self.default_gems_use_full_paths?(); end

  def self.default_spec_cache_dir(); end

  def self.deflate(data); end

  def self.detect_gemdeps(path=T.unsafe(nil)); end

  def self.dir(); end

  def self.done_installing(&hook); end

  def self.done_installing_hooks(); end

  def self.ensure_default_gem_subdirectories(dir=T.unsafe(nil), mode=T.unsafe(nil)); end

  def self.ensure_gem_subdirectories(dir=T.unsafe(nil), mode=T.unsafe(nil)); end

  def self.ensure_subdirectories(dir, mode, subdirs); end

  def self.env_requirement(gem_name); end

  def self.extension_api_version(); end

  def self.find_files(glob, check_load_path=T.unsafe(nil)); end

  def self.find_files_from_load_path(glob); end

  def self.find_latest_files(glob, check_load_path=T.unsafe(nil)); end

  def self.find_unresolved_default_spec(path); end

  def self.finish_resolve(*_); end

  def self.gemdeps(); end

  def self.gunzip(data); end

  def self.gzip(data); end

  def self.host(); end

  def self.host=(host); end

  def self.inflate(data); end

  def self.install(name, version=T.unsafe(nil), *options); end

  def self.install_extension_in_lib(); end

  def self.latest_rubygems_version(); end

  def self.latest_spec_for(name); end

  def self.latest_version_for(name); end

  def self.load_env_plugins(); end

  def self.load_path_insert_index(); end

  def self.load_plugin_files(plugins); end

  def self.load_plugins(); end

  def self.load_yaml(); end

  def self.loaded_specs(); end

  def self.location_of_caller(depth=T.unsafe(nil)); end

  def self.marshal_version(); end

  def self.needs(); end

  def self.path(); end

  def self.path_separator(); end

  def self.paths(); end

  def self.paths=(env); end

  def self.platform_defaults(); end

  def self.platforms(); end

  def self.platforms=(platforms); end

  def self.post_build(&hook); end

  def self.post_build_hooks(); end

  def self.post_install(&hook); end

  def self.post_install_hooks(); end

  def self.post_reset(&hook); end

  def self.post_reset_hooks(); end

  def self.post_uninstall(&hook); end

  def self.post_uninstall_hooks(); end

  def self.pre_install(&hook); end

  def self.pre_install_hooks(); end

  def self.pre_reset(&hook); end

  def self.pre_reset_hooks(); end

  def self.pre_uninstall(&hook); end

  def self.pre_uninstall_hooks(); end

  def self.prefix(); end

  def self.read_binary(path); end

  def self.refresh(); end

  def self.register_default_spec(spec); end

  def self.remove_unresolved_default_spec(spec); end

  def self.ruby(); end

  def self.ruby_api_version(); end

  def self.ruby_engine(); end

  def self.ruby_version(); end

  def self.rubygems_version(); end

  def self.sources(); end

  def self.sources=(new_sources); end

  def self.spec_cache_dir(); end

  def self.suffix_pattern(); end

  def self.suffixes(); end

  def self.time(msg, width=T.unsafe(nil), display=T.unsafe(nil)); end

  def self.try_activate(path); end

  def self.ui(); end

  def self.use_gemdeps(path=T.unsafe(nil)); end

  def self.use_paths(home, *paths); end

  def self.user_dir(); end

  def self.user_home(); end

  def self.vendor_dir(); end

  def self.win_platform?(); end

  def self.write_binary(path, data); end
end

module GetFlags
  extend ::T::Sig
end

module Git
  extend ::T::Sig
end

module GlobalID::Identification
  extend ::T::Sig
end

module GlobalID::Locator
  DEFAULT_LOCATOR = ::T.let(nil, ::T.untyped)
end

class GlobalID::Locator::BaseLocator
  def locate(gid); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BaseLocator
end

class GlobalID::Locator::BlockLocator
  def initialize(block); end

  def locate(gid); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BlockLocator
end

class GlobalID::Locator::UnscopedLocator
end

class GlobalID::Locator::UnscopedLocator
end

module GlobalID::Locator
  extend ::T::Sig
  def self.locate(gid, options=T.unsafe(nil)); end

  def self.locate_many(gids, options=T.unsafe(nil)); end

  def self.locate_many_signed(sgids, options=T.unsafe(nil)); end

  def self.locate_signed(sgid, options=T.unsafe(nil)); end

  def self.use(app, locator=T.unsafe(nil), &locator_block); end
end

class Group
  include ::Group::GeneratedAssociationMethods
  def after_add_for_event_subscriptions(); end

  def after_add_for_event_subscriptions=(val); end

  def after_add_for_event_subscriptions?(); end

  def after_add_for_group_maintainers(); end

  def after_add_for_group_maintainers=(val); end

  def after_add_for_group_maintainers?(); end

  def after_add_for_groups_roles(); end

  def after_add_for_groups_roles=(val); end

  def after_add_for_groups_roles?(); end

  def after_add_for_groups_users(); end

  def after_add_for_groups_users=(val); end

  def after_add_for_groups_users?(); end

  def after_add_for_relationships(); end

  def after_add_for_relationships=(val); end

  def after_add_for_relationships?(); end

  def after_add_for_reviews(); end

  def after_add_for_reviews=(val); end

  def after_add_for_reviews?(); end

  def after_add_for_roles(); end

  def after_add_for_roles=(val); end

  def after_add_for_roles?(); end

  def after_add_for_rss_feed_items(); end

  def after_add_for_rss_feed_items=(val); end

  def after_add_for_rss_feed_items?(); end

  def after_add_for_users(); end

  def after_add_for_users=(val); end

  def after_add_for_users?(); end

  def after_remove_for_event_subscriptions(); end

  def after_remove_for_event_subscriptions=(val); end

  def after_remove_for_event_subscriptions?(); end

  def after_remove_for_group_maintainers(); end

  def after_remove_for_group_maintainers=(val); end

  def after_remove_for_group_maintainers?(); end

  def after_remove_for_groups_roles(); end

  def after_remove_for_groups_roles=(val); end

  def after_remove_for_groups_roles?(); end

  def after_remove_for_groups_users(); end

  def after_remove_for_groups_users=(val); end

  def after_remove_for_groups_users?(); end

  def after_remove_for_relationships(); end

  def after_remove_for_relationships=(val); end

  def after_remove_for_relationships?(); end

  def after_remove_for_reviews(); end

  def after_remove_for_reviews=(val); end

  def after_remove_for_reviews?(); end

  def after_remove_for_roles(); end

  def after_remove_for_roles=(val); end

  def after_remove_for_roles?(); end

  def after_remove_for_rss_feed_items(); end

  def after_remove_for_rss_feed_items=(val); end

  def after_remove_for_rss_feed_items?(); end

  def after_remove_for_users(); end

  def after_remove_for_users=(val); end

  def after_remove_for_users?(); end

  def autosave_associated_records_for_event_subscriptions(*args); end

  def autosave_associated_records_for_group_maintainers(*args); end

  def autosave_associated_records_for_groups_roles(*args); end

  def autosave_associated_records_for_groups_users(*args); end

  def autosave_associated_records_for_relationships(*args); end

  def autosave_associated_records_for_reviews(*args); end

  def autosave_associated_records_for_roles(*args); end

  def autosave_associated_records_for_rss_feed_items(*args); end

  def autosave_associated_records_for_staging_workflow(); end

  def autosave_associated_records_for_users(*args); end

  def before_add_for_event_subscriptions(); end

  def before_add_for_event_subscriptions=(val); end

  def before_add_for_event_subscriptions?(); end

  def before_add_for_group_maintainers(); end

  def before_add_for_group_maintainers=(val); end

  def before_add_for_group_maintainers?(); end

  def before_add_for_groups_roles(); end

  def before_add_for_groups_roles=(val); end

  def before_add_for_groups_roles?(); end

  def before_add_for_groups_users(); end

  def before_add_for_groups_users=(val); end

  def before_add_for_groups_users?(); end

  def before_add_for_relationships(); end

  def before_add_for_relationships=(val); end

  def before_add_for_relationships?(); end

  def before_add_for_reviews(); end

  def before_add_for_reviews=(val); end

  def before_add_for_reviews?(); end

  def before_add_for_roles(); end

  def before_add_for_roles=(val); end

  def before_add_for_roles?(); end

  def before_add_for_rss_feed_items(); end

  def before_add_for_rss_feed_items=(val); end

  def before_add_for_rss_feed_items?(); end

  def before_add_for_users(); end

  def before_add_for_users=(val); end

  def before_add_for_users?(); end

  def before_remove_for_event_subscriptions(); end

  def before_remove_for_event_subscriptions=(val); end

  def before_remove_for_event_subscriptions?(); end

  def before_remove_for_group_maintainers(); end

  def before_remove_for_group_maintainers=(val); end

  def before_remove_for_group_maintainers?(); end

  def before_remove_for_groups_roles(); end

  def before_remove_for_groups_roles=(val); end

  def before_remove_for_groups_roles?(); end

  def before_remove_for_groups_users(); end

  def before_remove_for_groups_users=(val); end

  def before_remove_for_groups_users?(); end

  def before_remove_for_relationships(); end

  def before_remove_for_relationships=(val); end

  def before_remove_for_relationships?(); end

  def before_remove_for_reviews(); end

  def before_remove_for_reviews=(val); end

  def before_remove_for_reviews?(); end

  def before_remove_for_roles(); end

  def before_remove_for_roles=(val); end

  def before_remove_for_roles?(); end

  def before_remove_for_rss_feed_items(); end

  def before_remove_for_rss_feed_items=(val); end

  def before_remove_for_rss_feed_items?(); end

  def before_remove_for_users(); end

  def before_remove_for_users=(val); end

  def before_remove_for_users?(); end

  def name(*args); end

  def name=(*args); end

  def name?(*args); end

  def name_before_last_save(*args); end

  def name_before_type_cast(*args); end

  def name_came_from_user?(*args); end

  def name_change(*args); end

  def name_change_to_be_saved(*args); end

  def name_changed?(*args); end

  def name_in_database(*args); end

  def name_previous_change(*args); end

  def name_previously_changed?(*args); end

  def name_was(*args); end

  def name_will_change!(*args); end

  def restore_name!(*args); end

  def saved_change_to_name(*args); end

  def saved_change_to_name?(*args); end

  def validate_associated_records_for_event_subscriptions(*args); end

  def validate_associated_records_for_group_maintainers(*args); end

  def validate_associated_records_for_groups_roles(*args); end

  def validate_associated_records_for_groups_users(*args); end

  def validate_associated_records_for_relationships(*args); end

  def validate_associated_records_for_reviews(*args); end

  def validate_associated_records_for_roles(*args); end

  def validate_associated_records_for_rss_feed_items(*args); end

  def validate_associated_records_for_users(*args); end

  def will_save_change_to_name?(*args); end
end

module Group::GeneratedAssociationMethods
  def build_staging_workflow(*args, &block); end

  def create_staging_workflow(*args, &block); end

  def create_staging_workflow!(*args, &block); end

  def event_subscription_ids(); end

  def event_subscription_ids=(ids); end

  def event_subscriptions(); end

  def event_subscriptions=(value); end

  def group_maintainer_ids(); end

  def group_maintainer_ids=(ids); end

  def group_maintainers(); end

  def group_maintainers=(value); end

  def groups_user_ids(); end

  def groups_user_ids=(ids); end

  def groups_users(); end

  def groups_users=(value); end

  def relationship_ids(); end

  def relationship_ids=(ids); end

  def relationships(); end

  def relationships=(value); end

  def reload_staging_workflow(); end

  def review_ids(); end

  def review_ids=(ids); end

  def reviews(); end

  def reviews=(value); end

  def role_ids(); end

  def role_ids=(ids); end

  def roles(); end

  def roles=(value); end

  def rss_feed_item_ids(); end

  def rss_feed_item_ids=(ids); end

  def rss_feed_items(); end

  def rss_feed_items=(value); end

  def staging_workflow(); end

  def staging_workflow=(value); end

  def user_ids(); end

  def user_ids=(ids); end

  def users(); end

  def users=(value); end
end

module Group::GeneratedAssociationMethods
  extend ::T::Sig
end

class Group
  def self.after_add_for_event_subscriptions(); end

  def self.after_add_for_event_subscriptions=(val); end

  def self.after_add_for_event_subscriptions?(); end

  def self.after_add_for_group_maintainers(); end

  def self.after_add_for_group_maintainers=(val); end

  def self.after_add_for_group_maintainers?(); end

  def self.after_add_for_groups_roles(); end

  def self.after_add_for_groups_roles=(val); end

  def self.after_add_for_groups_roles?(); end

  def self.after_add_for_groups_users(); end

  def self.after_add_for_groups_users=(val); end

  def self.after_add_for_groups_users?(); end

  def self.after_add_for_relationships(); end

  def self.after_add_for_relationships=(val); end

  def self.after_add_for_relationships?(); end

  def self.after_add_for_reviews(); end

  def self.after_add_for_reviews=(val); end

  def self.after_add_for_reviews?(); end

  def self.after_add_for_roles(); end

  def self.after_add_for_roles=(val); end

  def self.after_add_for_roles?(); end

  def self.after_add_for_rss_feed_items(); end

  def self.after_add_for_rss_feed_items=(val); end

  def self.after_add_for_rss_feed_items?(); end

  def self.after_add_for_users(); end

  def self.after_add_for_users=(val); end

  def self.after_add_for_users?(); end

  def self.after_remove_for_event_subscriptions(); end

  def self.after_remove_for_event_subscriptions=(val); end

  def self.after_remove_for_event_subscriptions?(); end

  def self.after_remove_for_group_maintainers(); end

  def self.after_remove_for_group_maintainers=(val); end

  def self.after_remove_for_group_maintainers?(); end

  def self.after_remove_for_groups_roles(); end

  def self.after_remove_for_groups_roles=(val); end

  def self.after_remove_for_groups_roles?(); end

  def self.after_remove_for_groups_users(); end

  def self.after_remove_for_groups_users=(val); end

  def self.after_remove_for_groups_users?(); end

  def self.after_remove_for_relationships(); end

  def self.after_remove_for_relationships=(val); end

  def self.after_remove_for_relationships?(); end

  def self.after_remove_for_reviews(); end

  def self.after_remove_for_reviews=(val); end

  def self.after_remove_for_reviews?(); end

  def self.after_remove_for_roles(); end

  def self.after_remove_for_roles=(val); end

  def self.after_remove_for_roles?(); end

  def self.after_remove_for_rss_feed_items(); end

  def self.after_remove_for_rss_feed_items=(val); end

  def self.after_remove_for_rss_feed_items?(); end

  def self.after_remove_for_users(); end

  def self.after_remove_for_users=(val); end

  def self.after_remove_for_users?(); end

  def self.before_add_for_event_subscriptions(); end

  def self.before_add_for_event_subscriptions=(val); end

  def self.before_add_for_event_subscriptions?(); end

  def self.before_add_for_group_maintainers(); end

  def self.before_add_for_group_maintainers=(val); end

  def self.before_add_for_group_maintainers?(); end

  def self.before_add_for_groups_roles(); end

  def self.before_add_for_groups_roles=(val); end

  def self.before_add_for_groups_roles?(); end

  def self.before_add_for_groups_users(); end

  def self.before_add_for_groups_users=(val); end

  def self.before_add_for_groups_users?(); end

  def self.before_add_for_relationships(); end

  def self.before_add_for_relationships=(val); end

  def self.before_add_for_relationships?(); end

  def self.before_add_for_reviews(); end

  def self.before_add_for_reviews=(val); end

  def self.before_add_for_reviews?(); end

  def self.before_add_for_roles(); end

  def self.before_add_for_roles=(val); end

  def self.before_add_for_roles?(); end

  def self.before_add_for_rss_feed_items(); end

  def self.before_add_for_rss_feed_items=(val); end

  def self.before_add_for_rss_feed_items?(); end

  def self.before_add_for_users(); end

  def self.before_add_for_users=(val); end

  def self.before_add_for_users?(); end

  def self.before_remove_for_event_subscriptions(); end

  def self.before_remove_for_event_subscriptions=(val); end

  def self.before_remove_for_event_subscriptions?(); end

  def self.before_remove_for_group_maintainers(); end

  def self.before_remove_for_group_maintainers=(val); end

  def self.before_remove_for_group_maintainers?(); end

  def self.before_remove_for_groups_roles(); end

  def self.before_remove_for_groups_roles=(val); end

  def self.before_remove_for_groups_roles?(); end

  def self.before_remove_for_groups_users(); end

  def self.before_remove_for_groups_users=(val); end

  def self.before_remove_for_groups_users?(); end

  def self.before_remove_for_relationships(); end

  def self.before_remove_for_relationships=(val); end

  def self.before_remove_for_relationships?(); end

  def self.before_remove_for_reviews(); end

  def self.before_remove_for_reviews=(val); end

  def self.before_remove_for_reviews?(); end

  def self.before_remove_for_roles(); end

  def self.before_remove_for_roles=(val); end

  def self.before_remove_for_roles?(); end

  def self.before_remove_for_rss_feed_items(); end

  def self.before_remove_for_rss_feed_items=(val); end

  def self.before_remove_for_rss_feed_items?(); end

  def self.before_remove_for_users(); end

  def self.before_remove_for_users=(val); end

  def self.before_remove_for_users?(); end
end

class GroupMaintainer
  include ::GroupMaintainer::GeneratedAssociationMethods
  def autosave_associated_records_for_group(*args); end

  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module GroupMaintainer::GeneratedAssociationMethods
  def build_group(*args, &block); end

  def build_user(*args, &block); end

  def create_group(*args, &block); end

  def create_group!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def group(); end

  def group=(value); end

  def reload_group(); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module GroupMaintainer::GeneratedAssociationMethods
  extend ::T::Sig
end

class GroupsUser
  include ::GroupsUser::GeneratedAssociationMethods
  def autosave_associated_records_for_group(*args); end

  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module GroupsUser::GeneratedAssociationMethods
  def build_group(*args, &block); end

  def build_user(*args, &block); end

  def create_group(*args, &block); end

  def create_group!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def group(); end

  def group=(value); end

  def reload_group(); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module GroupsUser::GeneratedAssociationMethods
  extend ::T::Sig
end

class HTMLSelector
  NO_STRIP = ::T.let(nil, ::T.untyped)
end

module Haml
  VERSION = ::T.let(nil, ::T.untyped)
end

module Haml::AttributeBuilder
  INVALID_ATTRIBUTE_NAME_REGEX = ::T.let(nil, ::T.untyped)
end

module Haml::AttributeBuilder
  extend ::T::Sig
end

module Haml::AttributeParser
  IGNORED_TYPES = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
end

module Haml::AttributeParser
  extend ::T::Sig
end

class Haml::Error
  MESSAGES = ::T.let(nil, ::T.untyped)
end

module Haml::Filters::Base
  extend ::T::Sig
end

module Haml::Filters::Cdata
  extend ::T::Sig
end

module Haml::Filters::Coffee
  extend ::T::Sig
end

module Haml::Filters::Css
  extend ::T::Sig
end

module Haml::Filters::Erb
  extend ::T::Sig
end

module Haml::Filters::Escaped
  extend ::T::Sig
end

module Haml::Filters::Javascript
  extend ::T::Sig
end

module Haml::Filters::Less
  extend ::T::Sig
end

module Haml::Filters::Markdown
  extend ::T::Sig
end

module Haml::Filters::Plain
  extend ::T::Sig
end

module Haml::Filters::PrecompiledTiltFilter
  extend ::T::Sig
end

module Haml::Filters::Preserve
  extend ::T::Sig
end

module Haml::Filters::RailsErb
  extend ::T::Sig
end

module Haml::Filters::Ruby
  extend ::T::Sig
end

module Haml::Filters::Sass
  extend ::T::Sig
end

module Haml::Filters::Scss
  extend ::T::Sig
end

module Haml::Filters::TiltFilter
  extend ::T::Sig
end

module Haml::Filters
  extend ::T::Sig
end

module Haml::Helpers
  HTML_ESCAPE = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_ONCE_REGEX = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_REGEX = ::T.let(nil, ::T.untyped)
end

module Haml::Helpers::ActionViewExtensions
  extend ::T::Sig
end

module Haml::Helpers::ActionViewMods
  extend ::T::Sig
end

module Haml::Helpers::XssMods
  extend ::T::Sig
end

module Haml::Helpers
  extend ::T::Sig
end

class Haml::Parser
  BLOCK_KEYWORD_REGEX = ::T.let(nil, ::T.untyped)
  BLOCK_WITH_SPACES = ::T.let(nil, ::T.untyped)
  CLASS_KEY = ::T.let(nil, ::T.untyped)
  COMMENT = ::T.let(nil, ::T.untyped)
  DIV_CLASS = ::T.let(nil, ::T.untyped)
  DIV_ID = ::T.let(nil, ::T.untyped)
  DOCTYPE = ::T.let(nil, ::T.untyped)
  DOCTYPE_REGEX = ::T.let(nil, ::T.untyped)
  ELEMENT = ::T.let(nil, ::T.untyped)
  ESCAPE = ::T.let(nil, ::T.untyped)
  FILTER = ::T.let(nil, ::T.untyped)
  FLAT_SCRIPT = ::T.let(nil, ::T.untyped)
  ID_KEY = ::T.let(nil, ::T.untyped)
  LITERAL_VALUE_REGEX = ::T.let(nil, ::T.untyped)
  MID_BLOCK_KEYWORDS = ::T.let(nil, ::T.untyped)
  MULTILINE_CHAR_VALUE = ::T.let(nil, ::T.untyped)
  PLAIN_TEXT = ::T.let(nil, ::T.untyped)
  SANITIZE = ::T.let(nil, ::T.untyped)
  SCRIPT = ::T.let(nil, ::T.untyped)
  SILENT_COMMENT = ::T.let(nil, ::T.untyped)
  SILENT_SCRIPT = ::T.let(nil, ::T.untyped)
  SPECIAL_CHARACTERS = ::T.let(nil, ::T.untyped)
  START_BLOCK_KEYWORDS = ::T.let(nil, ::T.untyped)
  START_BLOCK_KEYWORD_REGEX = ::T.let(nil, ::T.untyped)
end

module Haml::Rails
  extend ::T::Sig
end

module Haml::Template
  extend ::T::Sig
end

module Haml::TempleLineCounter
  extend ::T::Sig
end

module Haml::Util
  extend ::T::Sig
end

module Haml
  extend ::T::Sig
end

module HamlLint
  APP_NAME = ::T.let(nil, ::T.untyped)
  BUG_REPORT_URL = ::T.let(nil, ::T.untyped)
  HOME = ::T.let(nil, ::T.untyped)
  REPO_URL = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class HamlLint::ConfigurationLoader
  AUTO_GENERATED_FILE = ::T.let(nil, ::T.untyped)
  CONFIG_FILE_NAME = ::T.let(nil, ::T.untyped)
  DEFAULT_CONFIG_PATH = ::T.let(nil, ::T.untyped)
end

class HamlLint::Directive
  DIRECTIVE_REGEXP = ::T.let(nil, ::T.untyped)
  LINTER_REGEXP = ::T.let(nil, ::T.untyped)
end

class HamlLint::Document
  STRING_SOURCE = ::T.let(nil, ::T.untyped)
end

module HamlLint::Exceptions
  extend ::T::Sig
end

class HamlLint::FileFinder
  VALID_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

module HamlLint::HamlVisitor
  extend ::T::Sig
end

class HamlLint::Linter::AlignmentTabs
  REGEX = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::ClassAttributeWithStaticValue
  STATIC_TYPES = ::T.let(nil, ::T.untyped)
  VALID_CLASS_REGEX = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::ClassesBeforeIds
  MSG = ::T.let(nil, ::T.untyped)
  TYPES_BY_PREFIX = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::ConsecutiveComments
  COMMENT_DETECTOR = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::ConsecutiveSilentScripts
  SILENT_SCRIPT_DETECTOR = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::IdNames
  STYLES = ::T.let(nil, ::T.untyped)
  STYLIZED_NAMES = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::Indentation
  INDENT_REGEX = ::T.let(nil, ::T.untyped)
  LEADING_SPACES_REGEX = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::InlineStyles
  MESSAGE = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::LineLength
  MSG = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::MultilinePipe
  MESSAGE = ::T.let(nil, ::T.untyped)
  MULTILINE_PIPE_REGEX = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::MultilineScript
  SPLIT_OPERATORS = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::RepeatedId
  MESSAGE_FORMAT = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::RuboCop
  SEVERITY_MAP = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::SpaceBeforeScript
  ALLOWED_SEPARATORS = ::T.let(nil, ::T.untyped)
  MESSAGE_FORMAT = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::SpaceInsideHashAttributes
  STYLE = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::UnnecessaryStringOutput
  MESSAGE = ::T.let(nil, ::T.untyped)
end

class HamlLint::Linter::ViewLength
  MSG = ::T.let(nil, ::T.untyped)
end

module HamlLint::LinterRegistry
  extend ::T::Sig
end

class HamlLint::ParsedRuby
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class HamlLint::Reporter::DisabledConfigReporter
  HEADING = ::T.let(nil, ::T.untyped)
end

module HamlLint::Reporter::Hooks
  extend ::T::Sig
end

class HamlLint::Reporter::ProgressReporter
  DOT = ::T.let(nil, ::T.untyped)
end

module HamlLint::Reporter::Utils
  extend ::T::Sig
end

class HamlLint::RubyExtractor
  LOOP_KEYWORDS = ::T.let(nil, ::T.untyped)
  MID_BLOCK_KEYWORDS = ::T.let(nil, ::T.untyped)
  START_BLOCK_KEYWORDS = ::T.let(nil, ::T.untyped)
end

class HamlLint::Severity
  COLORS = ::T.let(nil, ::T.untyped)
  MARKS = ::T.let(nil, ::T.untyped)
  NAMES = ::T.let(nil, ::T.untyped)
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
  SEVERITY_ERROR = ::T.let(nil, ::T.untyped)
  SEVERITY_WARNING = ::T.let(nil, ::T.untyped)
end

class HamlLint::Tree::Node::Siblings
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module HamlLint::Tree
  extend ::T::Sig
end

module HamlLint::Utils
  extend ::T::Sig
end

module HamlLint
  extend ::T::Sig
end

module HasAttributes
  extend ::T::Sig
end

module HasRatings
  extend ::T::Sig
end

module HasRelationships
  extend ::T::Sig
end

class Hash
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::JSON::Ext::Generator::GeneratorMethods::Hash
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def <(_); end

  def <=(_); end

  def >(_); end

  def >=(_); end

  def compact(); end

  def compact!(); end

  def default_proc(); end

  def default_proc=(default_proc); end

  def dig(*_); end

  def fetch_values(*_); end

  def flatten(*_); end

  def index(_); end

  def merge!(_); end

  def replace(_); end

  def slice(*_); end

  def to_h(); end

  def to_proc(); end

  def transform_keys(); end

  def transform_keys!(); end

  def transform_values(); end

  def transform_values!(); end

  def update(_); end
end

class Hash
  extend ::T::Sig
  def self.from_trusted_xml(xml); end
end

HashWithIndifferentAccess = ActiveSupport::HashWithIndifferentAccess

module Hashdiff
  VERSION = ::T.let(nil, ::T.untyped)
end

module Hashdiff
  extend ::T::Sig
end

class HistoryElement::Base
  include ::HistoryElement::Base::GeneratedAssociationMethods
  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module HistoryElement::Base::GeneratedAssociationMethods
  def build_user(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module HistoryElement::Base::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::Request
  include ::HistoryElement::Request::GeneratedAssociationMethods
end

module HistoryElement::Request::GeneratedAssociationMethods
end

module HistoryElement::Request::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::RequestAccepted
  include ::HistoryElement::RequestAccepted::GeneratedAssociationMethods
end

module HistoryElement::RequestAccepted::GeneratedAssociationMethods
end

module HistoryElement::RequestAccepted::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::RequestAllReviewsApproved
  include ::HistoryElement::RequestAllReviewsApproved::GeneratedAssociationMethods
end

module HistoryElement::RequestAllReviewsApproved::GeneratedAssociationMethods
end

module HistoryElement::RequestAllReviewsApproved::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::RequestDeclined
  include ::HistoryElement::RequestDeclined::GeneratedAssociationMethods
end

module HistoryElement::RequestDeclined::GeneratedAssociationMethods
end

module HistoryElement::RequestDeclined::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::RequestDeleted
  include ::HistoryElement::RequestDeleted::GeneratedAssociationMethods
end

module HistoryElement::RequestDeleted::GeneratedAssociationMethods
end

module HistoryElement::RequestDeleted::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::RequestPriorityChange
  include ::HistoryElement::RequestPriorityChange::GeneratedAssociationMethods
end

module HistoryElement::RequestPriorityChange::GeneratedAssociationMethods
end

module HistoryElement::RequestPriorityChange::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::RequestReopened
  include ::HistoryElement::RequestReopened::GeneratedAssociationMethods
end

module HistoryElement::RequestReopened::GeneratedAssociationMethods
end

module HistoryElement::RequestReopened::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::RequestReviewAdded
  include ::HistoryElement::RequestReviewAdded::GeneratedAssociationMethods
end

module HistoryElement::RequestReviewAdded::GeneratedAssociationMethods
end

module HistoryElement::RequestReviewAdded::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::RequestRevoked
  include ::HistoryElement::RequestRevoked::GeneratedAssociationMethods
end

module HistoryElement::RequestRevoked::GeneratedAssociationMethods
end

module HistoryElement::RequestRevoked::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::RequestSetIncident
  include ::HistoryElement::RequestSetIncident::GeneratedAssociationMethods
end

module HistoryElement::RequestSetIncident::GeneratedAssociationMethods
end

module HistoryElement::RequestSetIncident::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::RequestSuperseded
  include ::HistoryElement::RequestSuperseded::GeneratedAssociationMethods
end

module HistoryElement::RequestSuperseded::GeneratedAssociationMethods
end

module HistoryElement::RequestSuperseded::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::Review
  include ::HistoryElement::Review::GeneratedAssociationMethods
end

module HistoryElement::Review::GeneratedAssociationMethods
end

module HistoryElement::Review::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::ReviewAccepted
  include ::HistoryElement::ReviewAccepted::GeneratedAssociationMethods
end

module HistoryElement::ReviewAccepted::GeneratedAssociationMethods
end

module HistoryElement::ReviewAccepted::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::ReviewAssigned
  include ::HistoryElement::ReviewAssigned::GeneratedAssociationMethods
end

module HistoryElement::ReviewAssigned::GeneratedAssociationMethods
end

module HistoryElement::ReviewAssigned::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::ReviewDeclined
  include ::HistoryElement::ReviewDeclined::GeneratedAssociationMethods
end

module HistoryElement::ReviewDeclined::GeneratedAssociationMethods
end

module HistoryElement::ReviewDeclined::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::ReviewObsoleted
  include ::HistoryElement::ReviewObsoleted::GeneratedAssociationMethods
end

module HistoryElement::ReviewObsoleted::GeneratedAssociationMethods
end

module HistoryElement::ReviewObsoleted::GeneratedAssociationMethods
  extend ::T::Sig
end

class HistoryElement::ReviewReopened
  include ::HistoryElement::ReviewReopened::GeneratedAssociationMethods
end

module HistoryElement::ReviewReopened::GeneratedAssociationMethods
end

module HistoryElement::ReviewReopened::GeneratedAssociationMethods
  extend ::T::Sig
end

module HistoryElement
  extend ::T::Sig
end

class HistoryTest
  def test_basic_operation_request_creations(); end
end

module I18n
  DEFAULT_INTERPOLATION_PATTERNS = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  INTERPOLATION_PATTERN = ::T.let(nil, ::T.untyped)
  RESERVED_KEYS = ::T.let(nil, ::T.untyped)
  RESERVED_KEYS_PATTERN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Base
  extend ::T::Sig
end

module I18n::Backend::Cache
  def _fetch(cache_key, &block); end

  def cache_key(locale, key, options); end

  def fetch(cache_key, &block); end

  def translate(locale, key, options=T.unsafe(nil)); end
end

module I18n::Backend::Cache
  extend ::T::Sig
end

module I18n::Backend::CacheFile
  def load_file(filename); end

  def normalized_path(file); end

  def path_roots(); end

  def path_roots=(path_roots); end
end

module I18n::Backend::CacheFile
  extend ::T::Sig
end

module I18n::Backend::Cascade
  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end
end

module I18n::Backend::Cascade
  extend ::T::Sig
end

class I18n::Backend::Chain
  include ::I18n::Backend::Chain::Implementation
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
end

module I18n::Backend::Chain::Implementation
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
  def available_locales(); end

  def backends(); end

  def backends=(backends); end

  def eager_load!(); end

  def exists?(locale, key); end

  def init_translations(); end

  def initialize(*backends); end

  def initialized?(); end

  def localize(locale, object, format=T.unsafe(nil), options=T.unsafe(nil)); end

  def namespace_lookup?(result, options); end

  def reload!(); end

  def store_translations(locale, data, options=T.unsafe(nil)); end

  def translate(locale, key, default_options=T.unsafe(nil)); end

  def translations(); end
end

module I18n::Backend::Chain::Implementation
  extend ::T::Sig
end

class I18n::Backend::Chain
end

module I18n::Backend::Fallbacks
  def exists?(locale, key); end

  def extract_non_symbol_default!(options); end

  def translate(locale, key, options=T.unsafe(nil)); end
end

module I18n::Backend::Fallbacks
  extend ::T::Sig
end

module I18n::Backend::Flatten
  def escape_default_separator(key); end

  def find_link(locale, key); end

  def flatten_keys(hash, escape, prev_key=T.unsafe(nil), &block); end

  def flatten_translations(locale, data, escape, subtree); end

  def links(); end

  def normalize_flat_keys(locale, key, scope, separator); end

  def resolve_link(locale, key); end

  def store_link(locale, key, link); end
  FLATTEN_SEPARATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR_ESCAPE_CHAR = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Flatten
  extend ::T::Sig
  def self.escape_default_separator(key); end

  def self.normalize_flat_keys(locale, key, scope, separator); end
end

module I18n::Backend::Gettext
  def load_po(filename); end

  def normalize(locale, data); end

  def normalize_pluralization(locale, key, value); end

  def parse(filename); end
end

class I18n::Backend::Gettext::PoData
  def set_comment(msgid_or_sym, comment); end
end

class I18n::Backend::Gettext::PoData
end

module I18n::Backend::Gettext
  extend ::T::Sig
end

module I18n::Backend::InterpolationCompiler
  def compile_all_strings_in(data); end

  def interpolate(locale, string, values); end

  def store_translations(locale, data, options=T.unsafe(nil)); end
end

module I18n::Backend::InterpolationCompiler::Compiler
  def compile_if_an_interpolation(string); end

  def compile_interpolation_token(key); end

  def compiled_interpolation_body(str); end

  def direct_key(key); end

  def escape_key_sym(key); end

  def escape_plain_str(str); end

  def handle_interpolation_token(interpolation, matchdata); end

  def interpolate_key(key); end

  def interpolate_or_raise_missing(key); end

  def interpolated_str?(str); end

  def missing_key(key); end

  def nil_key(key); end

  def reserved_key(key); end

  def tokenize(str); end
  INTERPOLATION_SYNTAX_PATTERN = ::T.let(nil, ::T.untyped)
  TOKENIZER = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::InterpolationCompiler::Compiler
  extend ::I18n::Backend::InterpolationCompiler::Compiler
  extend ::T::Sig
end

module I18n::Backend::InterpolationCompiler
  extend ::T::Sig
end

class I18n::Backend::KeyValue
  include ::I18n::Backend::KeyValue::Implementation
  include ::I18n::Backend::Flatten
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
end

module I18n::Backend::KeyValue::Implementation
  include ::I18n::Backend::Flatten
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
  def available_locales(); end

  def init_translations(); end

  def initialize(store, subtrees=T.unsafe(nil)); end

  def initialized?(); end

  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end

  def pluralize(locale, entry, count); end

  def store(); end

  def store=(store); end

  def store_translations(locale, data, options=T.unsafe(nil)); end

  def subtrees?(); end

  def translations(); end
end

module I18n::Backend::KeyValue::Implementation
  extend ::T::Sig
end

class I18n::Backend::KeyValue::SubtreeProxy
  def [](key); end

  def has_key?(key); end

  def initialize(master_key, store); end

  def instance_of?(klass); end

  def is_a?(klass); end

  def kind_of?(klass); end
end

class I18n::Backend::KeyValue::SubtreeProxy
end

class I18n::Backend::KeyValue
end

module I18n::Backend::Memoize
  def available_locales(); end

  def eager_load!(); end

  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end

  def memoized_lookup(); end

  def reload!(); end

  def reset_memoizations!(locale=T.unsafe(nil)); end

  def store_translations(locale, data, options=T.unsafe(nil)); end
end

module I18n::Backend::Memoize
  extend ::T::Sig
end

module I18n::Backend::Metadata
  def interpolate(locale, entry, values=T.unsafe(nil)); end

  def pluralize(locale, entry, count); end

  def translate(locale, key, options=T.unsafe(nil)); end

  def with_metadata(metadata, &block); end
end

module I18n::Backend::Metadata
  extend ::T::Sig
  def self.included(base); end
end

module I18n::Backend::Pluralization
  def pluralize(locale, entry, count); end

  def pluralizer(locale); end

  def pluralizers(); end
end

module I18n::Backend::Pluralization
  extend ::T::Sig
end

module I18n::Backend::Simple::Implementation
  extend ::T::Sig
end

module I18n::Backend::Transliterator
  DEFAULT_REPLACEMENT_CHAR = ::T.let(nil, ::T.untyped)
end

class I18n::Backend::Transliterator::HashTransliterator
  DEFAULT_APPROXIMATIONS = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Transliterator
  extend ::T::Sig
end

module I18n::Backend
  extend ::T::Sig
end

module I18n::Base
  extend ::T::Sig
end

module I18n::Gettext
  CONTEXT_SEPARATOR = ::T.let(nil, ::T.untyped)
  PLURAL_SEPARATOR = ::T.let(nil, ::T.untyped)
end

module I18n::Gettext::Helpers
  def N_(msgsid); end

  def _(msgid, options=T.unsafe(nil)); end

  def gettext(msgid, options=T.unsafe(nil)); end

  def n_(msgid, msgid_plural, n=T.unsafe(nil)); end

  def ngettext(msgid, msgid_plural, n=T.unsafe(nil)); end

  def np_(msgctxt, msgid, msgid_plural, n=T.unsafe(nil)); end

  def npgettext(msgctxt, msgid, msgid_plural, n=T.unsafe(nil)); end

  def ns_(msgid, msgid_plural, n=T.unsafe(nil), separator=T.unsafe(nil)); end

  def nsgettext(msgid, msgid_plural, n=T.unsafe(nil), separator=T.unsafe(nil)); end

  def p_(msgctxt, msgid); end

  def pgettext(msgctxt, msgid); end

  def s_(msgid, separator=T.unsafe(nil)); end

  def sgettext(msgid, separator=T.unsafe(nil)); end
end

module I18n::Gettext::Helpers
  extend ::T::Sig
end

module I18n::Gettext
  extend ::T::Sig
  def self.extract_scope(msgid, separator); end

  def self.plural_keys(*args); end
end

module I18n::HashRefinements
  extend ::T::Sig
end

module I18n::Locale
end

class I18n::Locale::Fallbacks
  def [](locale); end

  def compute(tags, include_defaults=T.unsafe(nil), exclude=T.unsafe(nil)); end

  def defaults(); end

  def defaults=(defaults); end

  def initialize(*mappings); end

  def map(mappings); end
end

class I18n::Locale::Fallbacks
end

module I18n::Locale::Tag
  RFC4646_FORMATS = ::T.let(nil, ::T.untyped)
  RFC4646_SUBTAGS = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag::Parents
  def parent(); end

  def parents(); end

  def self_and_parents(); end
end

module I18n::Locale::Tag::Parents
  extend ::T::Sig
end

class I18n::Locale::Tag::Rfc4646
  include ::I18n::Locale::Tag::Parents
  def to_sym(); end
end

module I18n::Locale::Tag::Rfc4646::Parser
  PATTERN = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag::Rfc4646::Parser
  extend ::T::Sig
  def self.match(tag); end
end

class I18n::Locale::Tag::Rfc4646
  def self.parser(); end

  def self.parser=(parser); end

  def self.tag(tag); end
end

class I18n::Locale::Tag::Simple
  include ::I18n::Locale::Tag::Parents
  def initialize(*tag); end

  def subtags(); end

  def tag(); end

  def to_a(); end

  def to_sym(); end
end

class I18n::Locale::Tag::Simple
  def self.tag(tag); end
end

module I18n::Locale::Tag
  extend ::T::Sig
  def self.implementation(); end

  def self.implementation=(implementation); end

  def self.tag(tag); end
end

module I18n::Locale
  extend ::T::Sig
end

class I18n::Middleware
  def call(env); end

  def initialize(app); end
end

class I18n::Middleware
end

module I18n::MissingTranslation::Base
  extend ::T::Sig
end

module I18n::Tests
end

module I18n::Tests::Localization
end

module I18n::Tests::Localization
  extend ::T::Sig
  def self.included(base); end
end

module I18n::Tests
  extend ::T::Sig
end

module I18n
  extend ::T::Sig
  def self.cache_key_digest(); end

  def self.cache_key_digest=(key_digest); end

  def self.cache_namespace(); end

  def self.cache_namespace=(namespace); end

  def self.cache_store(); end

  def self.cache_store=(store); end

  def self.fallbacks(); end

  def self.fallbacks=(fallbacks); end

  def self.perform_caching?(); end
end

class IO
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def beep(); end

  def cooked(); end

  def cooked!(); end

  def cursor(); end

  def cursor=(); end

  def echo=(echo); end

  def echo?(); end

  def external_encoding(); end

  def getch(*_); end

  def getpass(*_); end

  def goto(); end

  def iflush(); end

  def ioflush(); end

  def noecho(); end

  def nonblock(*_); end

  def nonblock=(nonblock); end

  def nonblock?(); end

  def nread(); end

  def oflush(); end

  def pathconf(_); end

  def pread(*_); end

  def pressed?(); end

  def pwrite(_, _1); end

  def raw(*_); end

  def raw!(*_); end

  def ready?(); end

  def wait(*_); end

  def wait_readable(*_); end

  def wait_writable(*_); end

  def winsize(); end

  def winsize=(winsize); end

  def write_nonblock(buf, exception: T.unsafe(nil)); end
end

class IO::EAGAINWaitReadable
  extend ::T::Sig
end

class IO::EAGAINWaitWritable
  extend ::T::Sig
end

class IO::EINPROGRESSWaitReadable
  extend ::T::Sig
end

class IO::EINPROGRESSWaitWritable
  extend ::T::Sig
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable

IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable

module IO::WaitReadable
  extend ::T::Sig
end

module IO::WaitWritable
  extend ::T::Sig
end

class IO
  extend ::T::Sig
  def self.console(*_); end

  def self.console_size(); end

  def self.default_console_size(); end

  def self.foreach(*_); end

  def self.open(*_); end

  def self.pipe(*_); end

end

class IOError
  extend ::T::Sig
end

class IPAddr
  include ::Comparable
  def &(other); end

  def <<(num); end

  def ==(other); end

  def ===(other); end

  def >>(num); end

  def eql?(other); end

  def family(); end

  def hton(); end

  def include?(other); end

  def initialize(addr=T.unsafe(nil), family=T.unsafe(nil)); end

  def ip6_arpa(); end

  def ip6_int(); end

  def ipv4?(); end

  def ipv4_compat(); end

  def ipv4_compat?(); end

  def ipv4_mapped(); end

  def ipv4_mapped?(); end

  def ipv6?(); end

  def link_local?(); end

  def loopback?(); end

  def mask(prefixlen); end

  def mask!(mask); end

  def native(); end

  def prefix(); end

  def prefix=(prefix); end

  def private?(); end

  def reverse(); end

  def set(addr, *family); end

  def succ(); end

  def to_i(); end

  def to_range(); end

  def to_string(); end

  def |(other); end

  def ~(); end
  IN4MASK = ::T.let(nil, ::T.untyped)
  IN6FORMAT = ::T.let(nil, ::T.untyped)
  IN6MASK = ::T.let(nil, ::T.untyped)
  RE_IPV4ADDRLIKE = ::T.let(nil, ::T.untyped)
  RE_IPV6ADDRLIKE_COMPRESSED = ::T.let(nil, ::T.untyped)
  RE_IPV6ADDRLIKE_FULL = ::T.let(nil, ::T.untyped)
end

class IPAddr::AddressFamilyError
end

class IPAddr::AddressFamilyError
end

class IPAddr::Error
end

class IPAddr::Error
end

class IPAddr::InvalidAddressError
end

class IPAddr::InvalidAddressError
end

class IPAddr::InvalidPrefixError
end

class IPAddr::InvalidPrefixError
end

class IPAddr
  def self.new_ntoh(addr); end

  def self.ntop(addr); end
end

class IPSocket
  extend ::T::Sig
end

module IRB
  IRBRC_EXT = ::T.let(nil, ::T.untyped)
  MagicFile = ::T.let(nil, ::T.untyped)
  STDIN_FILE_NAME = ::T.let(nil, ::T.untyped)
end

class IRB::Abort
end

class IRB::Abort
end

class IRB::Context
  def __exit__(*_); end

  def __inspect__(); end

  def __to_s__(); end

  def ap_name(); end

  def ap_name=(ap_name); end

  def auto_indent_mode(); end

  def auto_indent_mode=(auto_indent_mode); end

  def back_trace_limit(); end

  def back_trace_limit=(back_trace_limit); end

  def debug?(); end

  def debug_level(); end

  def debug_level=(value); end

  def echo(); end

  def echo=(echo); end

  def echo?(); end

  def eval_history=(*opts, &b); end

  def evaluate(line, line_no); end

  def exit(ret=T.unsafe(nil)); end

  def file_input?(); end

  def ignore_eof(); end

  def ignore_eof=(ignore_eof); end

  def ignore_eof?(); end

  def ignore_sigint(); end

  def ignore_sigint=(ignore_sigint); end

  def ignore_sigint?(); end

  def initialize(irb, workspace=T.unsafe(nil), input_method=T.unsafe(nil), output_method=T.unsafe(nil)); end

  def inspect?(); end

  def inspect_last_value(); end

  def inspect_mode(); end

  def inspect_mode=(opt); end

  def io(); end

  def io=(io); end

  def irb(); end

  def irb=(irb); end

  def irb_name(); end

  def irb_name=(irb_name); end

  def irb_path(); end

  def irb_path=(irb_path); end

  def last_value(); end

  def load_modules(); end

  def load_modules=(load_modules); end

  def main(); end

  def prompt_c(); end

  def prompt_c=(prompt_c); end

  def prompt_i(); end

  def prompt_i=(prompt_i); end

  def prompt_mode(); end

  def prompt_mode=(mode); end

  def prompt_n(); end

  def prompt_n=(prompt_n); end

  def prompt_s(); end

  def prompt_s=(prompt_s); end

  def prompting?(); end

  def rc(); end

  def rc=(rc); end

  def rc?(); end

  def return_format(); end

  def return_format=(return_format); end

  def save_history=(*opts, &b); end

  def set_last_value(value); end

  def thread(); end

  def use_loader=(*opts, &b); end

  def use_readline(); end

  def use_readline=(opt); end

  def use_readline?(); end

  def use_tracer=(*opts, &b); end

  def verbose(); end

  def verbose=(verbose); end

  def verbose?(); end

  def workspace(); end

  def workspace=(workspace); end

  def workspace_home(); end
  IDNAME_IVARS = ::T.let(nil, ::T.untyped)
  NOPRINTING_IVARS = ::T.let(nil, ::T.untyped)
  NO_INSPECTING_IVARS = ::T.let(nil, ::T.untyped)
end

class IRB::Context
end

module IRB::ContextExtender
end

IRB::ContextExtender::CE = IRB::ContextExtender

module IRB::ContextExtender
  extend ::T::Sig
  def self.def_extend_command(cmd_name, load_file, *aliases); end

  def self.install_extend_commands(); end
end

class IRB::DefaultEncodings
  def external(); end

  def external=(_); end

  def internal(); end

  def internal=(_); end
end

class IRB::DefaultEncodings
  def self.[](*_); end

  def self.members(); end
end

module IRB::ExtendCommandBundle
  def install_alias_method(to, from, override=T.unsafe(nil)); end

  def irb(*opts, &b); end

  def irb_change_workspace(*opts, &b); end

  def irb_context(); end

  def irb_current_working_workspace(*opts, &b); end

  def irb_exit(ret=T.unsafe(nil)); end

  def irb_fg(*opts, &b); end

  def irb_help(*opts, &b); end

  def irb_jobs(*opts, &b); end

  def irb_kill(*opts, &b); end

  def irb_load(*opts, &b); end

  def irb_pop_workspace(*opts, &b); end

  def irb_push_workspace(*opts, &b); end

  def irb_require(*opts, &b); end

  def irb_source(*opts, &b); end

  def irb_workspaces(*opts, &b); end
  NO_OVERRIDE = ::T.let(nil, ::T.untyped)
  OVERRIDE_ALL = ::T.let(nil, ::T.untyped)
  OVERRIDE_PRIVATE_ONLY = ::T.let(nil, ::T.untyped)
end

IRB::ExtendCommandBundle::EXCB = IRB::ExtendCommandBundle

module IRB::ExtendCommandBundle
  extend ::T::Sig
  def self.def_extend_command(cmd_name, cmd_class, load_file=T.unsafe(nil), *aliases); end

  def self.extend_object(obj); end

  def self.install_extend_commands(); end

  def self.irb_original_method_name(method_name); end
end

class IRB::FileInputMethod
  def encoding(); end

  def eof?(); end

  def initialize(file); end
end

class IRB::FileInputMethod
end

class IRB::InputMethod
  def file_name(); end

  def gets(); end

  def initialize(file=T.unsafe(nil)); end

  def prompt(); end

  def prompt=(prompt); end

  def readable_after_eof?(); end
end

class IRB::InputMethod
end

class IRB::Inspector
  def init(); end

  def initialize(inspect_proc, init_proc=T.unsafe(nil)); end

  def inspect_value(v); end
  INSPECTORS = ::T.let(nil, ::T.untyped)
end

class IRB::Inspector
  def self.def_inspector(key, arg=T.unsafe(nil), &block); end

  def self.keys_with_inspector(inspector); end
end

class IRB::Irb
  def context(); end

  def eval_input(); end

  def initialize(workspace=T.unsafe(nil), input_method=T.unsafe(nil), output_method=T.unsafe(nil)); end

  def output_value(); end

  def prompt(prompt, ltype, indent, line_no); end

  def run(conf=T.unsafe(nil)); end

  def scanner(); end

  def scanner=(scanner); end

  def signal_handle(); end

  def signal_status(status); end

  def suspend_context(context); end

  def suspend_input_method(input_method); end

  def suspend_name(path=T.unsafe(nil), name=T.unsafe(nil)); end

  def suspend_workspace(workspace); end
  ATTR_PLAIN = ::T.let(nil, ::T.untyped)
  ATTR_TTY = ::T.let(nil, ::T.untyped)
end

class IRB::Irb
end

class IRB::Locale
  def String(mes); end

  def encoding(); end

  def find(file, paths=T.unsafe(nil)); end

  def format(*opts); end

  def gets(*rs); end

  def initialize(locale=T.unsafe(nil)); end

  def lang(); end

  def load(file, priv=T.unsafe(nil)); end

  def modifier(); end

  def print(*opts); end

  def printf(*opts); end

  def puts(*opts); end

  def readline(*rs); end

  def require(file, priv=T.unsafe(nil)); end

  def territory(); end
  LOCALE_DIR = ::T.let(nil, ::T.untyped)
  LOCALE_NAME_RE = ::T.let(nil, ::T.untyped)
end

class IRB::Locale
end

module IRB::MethodExtender
  def def_post_proc(base_method, extend_method); end

  def def_pre_proc(base_method, extend_method); end

  def new_alias_name(name, prefix=T.unsafe(nil), postfix=T.unsafe(nil)); end
end

module IRB::MethodExtender
  extend ::T::Sig
end

module IRB::Notifier
  def Fail(err=T.unsafe(nil), *rest); end

  def Raise(err=T.unsafe(nil), *rest); end
  D_NOMSG = ::T.let(nil, ::T.untyped)
end

class IRB::Notifier::AbstractNotifier
  def exec_if(); end

  def initialize(prefix, base_notifier); end

  def notify?(); end

  def ppx(prefix, *objs); end

  def prefix(); end

  def print(*opts); end

  def printf(format, *opts); end

  def printn(*opts); end

  def puts(*objs); end
end

class IRB::Notifier::AbstractNotifier
end

class IRB::Notifier::CompositeNotifier
  def def_notifier(level, prefix=T.unsafe(nil)); end

  def level(); end

  def level=(value); end

  def level_notifier(); end

  def level_notifier=(value); end

  def notifiers(); end
end

class IRB::Notifier::CompositeNotifier
end

class IRB::Notifier::ErrUndefinedNotifier
end

class IRB::Notifier::ErrUndefinedNotifier
end

class IRB::Notifier::ErrUnrecognizedLevel
end

class IRB::Notifier::ErrUnrecognizedLevel
end

class IRB::Notifier::LeveledNotifier
  include ::Comparable
  def initialize(base, level, prefix); end

  def level(); end
end

class IRB::Notifier::LeveledNotifier
end

class IRB::Notifier::NoMsgNotifier
  def initialize(); end
end

class IRB::Notifier::NoMsgNotifier
end

module IRB::Notifier
  extend ::Exception2MessageMapper
  extend ::T::Sig
  def self.def_notifier(prefix=T.unsafe(nil), output_method=T.unsafe(nil)); end

  def self.included(mod); end
end

class IRB::OutputMethod
  def Fail(err=T.unsafe(nil), *rest); end

  def Raise(err=T.unsafe(nil), *rest); end

  def parse_printf_format(format, opts); end

  def ppx(prefix, *objs); end

  def print(*opts); end

  def printf(format, *opts); end

  def printn(*opts); end

  def puts(*objs); end
end

class IRB::OutputMethod::NotImplementedError
end

class IRB::OutputMethod::NotImplementedError
end

class IRB::OutputMethod
  extend ::Exception2MessageMapper
  def self.included(mod); end
end

class IRB::ReadlineInputMethod
  include ::Readline
  def encoding(); end

  def eof?(); end

  def initialize(); end

  def line(line_no); end
end

class IRB::ReadlineInputMethod
end

class IRB::SLex
  def Fail(err=T.unsafe(nil), *rest); end

  def Raise(err=T.unsafe(nil), *rest); end

  def create(token, preproc=T.unsafe(nil), postproc=T.unsafe(nil)); end

  def def_rule(token, preproc=T.unsafe(nil), postproc=T.unsafe(nil), &block); end

  def def_rules(*tokens, &block); end

  def match(token); end

  def postproc(token); end

  def preproc(token, proc); end

  def search(token); end
  DOUT = ::T.let(nil, ::T.untyped)
  D_DEBUG = ::T.let(nil, ::T.untyped)
  D_DETAIL = ::T.let(nil, ::T.untyped)
  D_WARN = ::T.let(nil, ::T.untyped)
end

class IRB::SLex::ErrNodeAlreadyExists
end

class IRB::SLex::ErrNodeAlreadyExists
end

class IRB::SLex::ErrNodeNothing
end

class IRB::SLex::ErrNodeNothing
end

class IRB::SLex::Node
  def create_subnode(chrs, preproc=T.unsafe(nil), postproc=T.unsafe(nil)); end

  def initialize(preproc=T.unsafe(nil), postproc=T.unsafe(nil)); end

  def match(chrs, op=T.unsafe(nil)); end

  def match_io(io, op=T.unsafe(nil)); end

  def postproc(); end

  def postproc=(postproc); end

  def preproc(); end

  def preproc=(preproc); end

  def search(chrs, opt=T.unsafe(nil)); end
end

class IRB::SLex::Node
end

class IRB::SLex
  extend ::Exception2MessageMapper
  def self.included(mod); end
end

class IRB::StdioInputMethod
  def encoding(); end

  def eof?(); end

  def initialize(); end

  def line(line_no); end
end

class IRB::StdioInputMethod
end

class IRB::StdioOutputMethod
end

class IRB::StdioOutputMethod
end

class IRB::WorkSpace
  def code_around_binding(); end

  def evaluate(context, statements, file=T.unsafe(nil), line=T.unsafe(nil)); end

  def filter_backtrace(bt); end

  def initialize(*main); end

  def main(); end
end

class IRB::WorkSpace
end

module IRB
  extend ::T::Sig
  def self.CurrentContext(); end

  def self.Inspector(inspect, init=T.unsafe(nil)); end

  def self.conf(); end

  def self.default_src_encoding(); end

  def self.delete_caller(); end

  def self.init_config(ap_path); end

  def self.init_error(); end

  def self.irb_abort(irb, exception=T.unsafe(nil)); end

  def self.irb_at_exit(); end

  def self.irb_exit(irb, ret); end

  def self.load_modules(); end

  def self.parse_opts(argv: T.unsafe(nil)); end

  def self.rc_file(ext=T.unsafe(nil)); end

  def self.rc_file_generators(); end

  def self.run_config(); end

  def self.setup(ap_path, argv: T.unsafe(nil)); end

  def self.start(ap_path=T.unsafe(nil)); end

  def self.version(); end
end

class ImageTemplatesAttribute::AttribTypeModifiableBy
  include ::ImageTemplatesAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
end

module ImageTemplatesAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
end

module ImageTemplatesAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
  extend ::T::Sig
end

class IncidentPriorityAttribute::AttribTypeModifiableBy
  include ::IncidentPriorityAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
end

module IncidentPriorityAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
end

module IncidentPriorityAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
  extend ::T::Sig
end

class IncidentUpdateinfoCounterValue
  include ::IncidentUpdateinfoCounterValue::GeneratedAssociationMethods
  def autosave_associated_records_for_project(*args); end

  def autosave_associated_records_for_updateinfo_counter(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module IncidentUpdateinfoCounterValue::GeneratedAssociationMethods
  def build_project(*args, &block); end

  def build_updateinfo_counter(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def create_updateinfo_counter(*args, &block); end

  def create_updateinfo_counter!(*args, &block); end

  def project(); end

  def project=(value); end

  def reload_project(); end

  def reload_updateinfo_counter(); end

  def updateinfo_counter(); end

  def updateinfo_counter=(value); end
end

module IncidentUpdateinfoCounterValue::GeneratedAssociationMethods
  extend ::T::Sig
end

class IndexError
  extend ::T::Sig
end

module InfluxDB
  DEFAULT_CONFIG_OPTIONS = ::T.let(nil, ::T.untyped)
  NON_RECOVERABLE_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  NON_RECOVERABLE_MESSAGE = ::T.let(nil, ::T.untyped)
  RECOVERABLE_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class InfluxDB::Config
  AUTH_METHODS = ::T.let(nil, ::T.untyped)
end

module InfluxDB::HTTP
  extend ::T::Sig
end

module InfluxDB::Logging
  PREFIX = ::T.let(nil, ::T.untyped)
end

module InfluxDB::Logging
  extend ::T::Sig
end

module InfluxDB::OBS::Middleware
  extend ::T::Sig
end

module InfluxDB::OBS
  extend ::T::Sig
end

module InfluxDB::Query::Cluster
  extend ::T::Sig
end

module InfluxDB::Query::ContinuousQuery
  extend ::T::Sig
end

module InfluxDB::Query::Core
  extend ::T::Sig
end

module InfluxDB::Query::Database
  extend ::T::Sig
end

module InfluxDB::Query::Measurement
  extend ::T::Sig
end

module InfluxDB::Query::RetentionPolicy
  extend ::T::Sig
end

module InfluxDB::Query::Series
  extend ::T::Sig
end

module InfluxDB::Query::User
  extend ::T::Sig
end

module InfluxDB::Query
  extend ::T::Sig
end

module InfluxDB::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

module InfluxDB::Rails::AirTrafficController
  extend ::T::Sig
end

class InfluxDB::Rails::Backtrace::Line
  FORMAT = ::T.let(nil, ::T.untyped)
end

class InfluxDB::Rails::Configuration
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

module InfluxDB::Rails::Instrumentation
  extend ::T::Sig
end

module InfluxDB::Rails::Logger
  PREFIX = ::T.let(nil, ::T.untyped)
end

module InfluxDB::Rails::Logger
  extend ::T::Sig
end

module InfluxDB::Rails::Middleware::HijackRenderException
  extend ::T::Sig
end

module InfluxDB::Rails::Middleware
  extend ::T::Sig
end

class InfluxDB::Rails::Sql::Query
  TRACKED_SQL_COMMANDS = ::T.let(nil, ::T.untyped)
  UNTRACKED_NAMES = ::T.let(nil, ::T.untyped)
end

module InfluxDB::Rails::Sql
  extend ::T::Sig
end

module InfluxDB::Rails
  extend ::InfluxDB::Rails::Logger
  extend ::T::Sig
end

class InfluxDB::Writer::Async
  WORKER_MUTEX = ::T.let(nil, ::T.untyped)
end

class InfluxDB::Writer::Async::Worker
  BLOCK_ON_FULL_QUEUE = ::T.let(nil, ::T.untyped)
  MAX_POST_POINTS = ::T.let(nil, ::T.untyped)
  MAX_QUEUE_SIZE = ::T.let(nil, ::T.untyped)
  NUM_WORKER_THREADS = ::T.let(nil, ::T.untyped)
  SLEEP_INTERVAL = ::T.let(nil, ::T.untyped)
end

module InfluxDB::Writer
  extend ::T::Sig
end

module InfluxDB
  extend ::T::Sig
end

module Innertube
  extend ::T::Sig
end

class Integer
  include ::ActiveSupport::NumericWithFormat
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::JSON::Ext::Generator::GeneratorMethods::Integer
  def allbits?(_); end

  def anybits?(_); end

  def digits(*_); end

  def nobits?(_); end

  def pow(*_); end

  def to_bn(); end

  def to_d(); end
end

class Integer
  extend ::T::Sig
  def self.sqrt(_); end
end

class Interrupt
  extend ::T::Sig
end

class Issue
  include ::Issue::GeneratedAssociationMethods
  def after_add_for_package_issues(); end

  def after_add_for_package_issues=(val); end

  def after_add_for_package_issues?(); end

  def after_remove_for_package_issues(); end

  def after_remove_for_package_issues=(val); end

  def after_remove_for_package_issues?(); end

  def autosave_associated_records_for_issue_tracker(*args); end

  def autosave_associated_records_for_owner(*args); end

  def autosave_associated_records_for_package_issues(*args); end

  def before_add_for_package_issues(); end

  def before_add_for_package_issues=(val); end

  def before_add_for_package_issues?(); end

  def before_remove_for_package_issues(); end

  def before_remove_for_package_issues=(val); end

  def before_remove_for_package_issues?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_package_issues(*args); end
end

module Issue::GeneratedAssociationMethods
  def build_issue_tracker(*args, &block); end

  def build_owner(*args, &block); end

  def create_issue_tracker(*args, &block); end

  def create_issue_tracker!(*args, &block); end

  def create_owner(*args, &block); end

  def create_owner!(*args, &block); end

  def issue_tracker(); end

  def issue_tracker=(value); end

  def owner(); end

  def owner=(value); end

  def package_issue_ids(); end

  def package_issue_ids=(ids); end

  def package_issues(); end

  def package_issues=(value); end

  def reload_issue_tracker(); end

  def reload_owner(); end
end

module Issue::GeneratedAssociationMethods
  extend ::T::Sig
end

class Issue
  def self.after_add_for_package_issues(); end

  def self.after_add_for_package_issues=(val); end

  def self.after_add_for_package_issues?(); end

  def self.after_remove_for_package_issues(); end

  def self.after_remove_for_package_issues=(val); end

  def self.after_remove_for_package_issues?(); end

  def self.before_add_for_package_issues(); end

  def self.before_add_for_package_issues=(val); end

  def self.before_add_for_package_issues?(); end

  def self.before_remove_for_package_issues(); end

  def self.before_remove_for_package_issues=(val); end

  def self.before_remove_for_package_issues?(); end

  def self.stateless(*args); end
end

class IssueTest
  def test_fetch_cve(); end

  def test_fetch_fate(); end

  def test_fetch_issues(); end
end

class IssueTracker
  include ::IssueTracker::GeneratedAssociationMethods
  def after_add_for_issues(); end

  def after_add_for_issues=(val); end

  def after_add_for_issues?(); end

  def after_remove_for_issues(); end

  def after_remove_for_issues=(val); end

  def after_remove_for_issues?(); end

  def autosave_associated_records_for_issues(*args); end

  def before_add_for_issues(); end

  def before_add_for_issues=(val); end

  def before_add_for_issues?(); end

  def before_remove_for_issues(); end

  def before_remove_for_issues=(val); end

  def before_remove_for_issues?(); end

  def validate_associated_records_for_issues(*args); end
end

module IssueTracker::GeneratedAssociationMethods
  def issue_ids(); end

  def issue_ids=(ids); end

  def issues(); end

  def issues=(value); end
end

module IssueTracker::GeneratedAssociationMethods
  extend ::T::Sig
end

class IssueTracker
  def self.after_add_for_issues(); end

  def self.after_add_for_issues=(val); end

  def self.after_add_for_issues?(); end

  def self.after_remove_for_issues(); end

  def self.after_remove_for_issues=(val); end

  def self.after_remove_for_issues?(); end

  def self.before_add_for_issues(); end

  def self.before_add_for_issues=(val); end

  def self.before_add_for_issues?(); end

  def self.before_remove_for_issues(); end

  def self.before_remove_for_issues=(val); end

  def self.before_remove_for_issues?(); end
end

class JSON::CircularDatastructure
  extend ::T::Sig
end

module JSON::Ext::Generator::GeneratorMethods::Array
  extend ::T::Sig
end

module JSON::Ext::Generator::GeneratorMethods::FalseClass
  extend ::T::Sig
end

module JSON::Ext::Generator::GeneratorMethods::Float
  extend ::T::Sig
end

module JSON::Ext::Generator::GeneratorMethods::Hash
  extend ::T::Sig
end

module JSON::Ext::Generator::GeneratorMethods::Integer
  extend ::T::Sig
end

module JSON::Ext::Generator::GeneratorMethods::NilClass
  extend ::T::Sig
end

module JSON::Ext::Generator::GeneratorMethods::Object
  extend ::T::Sig
end

module JSON::Ext::Generator::GeneratorMethods::String
  extend ::T::Sig
end

module JSON::Ext::Generator::GeneratorMethods::TrueClass
  extend ::T::Sig
end

module JSON::Ext::Generator::GeneratorMethods
  extend ::T::Sig
end

class JSON::Ext::Generator::State
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class JSON::Ext::Generator::State
  extend ::T::Sig
  def self.from_state(_); end
end

module JSON::Ext::Generator
  extend ::T::Sig
end

class JSON::Ext::Parser
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def initialize(*_); end
end

class JSON::Ext::Parser
  extend ::T::Sig
end

module JSON::Ext
  extend ::T::Sig
end

class JSON::GeneratorError
  extend ::T::Sig
end

class JSON::GenericObject
  extend ::T::Sig
end

class JSON::JSONError
  extend ::T::Sig
end

class JSON::MissingUnicodeSupport
  extend ::T::Sig
end

class JSON::NestingError
  extend ::T::Sig
end

JSON::Parser = JSON::Ext::Parser

class JSON::ParserError
  extend ::T::Sig
end

JSON::State = JSON::Ext::Generator::State

JSON::UnparserError = JSON::GeneratorError

module JSON
  extend ::T::Sig
end

JSONTree = Psych::Visitors::JSONTree

module JaroWinkler
  VERSION = ::T.let(nil, ::T.untyped)
end

class JaroWinkler::Error
end

class JaroWinkler::Error
end

class JaroWinkler::InvalidWeightError
end

class JaroWinkler::InvalidWeightError
end

module JaroWinkler
  extend ::T::Sig
end

class Joiner::Path
  AGGREGATE_MACROS = ::T.let(nil, ::T.untyped)
end

module Joiner
  extend ::T::Sig
end

module Jquery::Datatables
  VERSION = ::T.let(nil, ::T.untyped)
end

module Jquery::Datatables
  extend ::T::Sig
end

module Jquery::Rails
  JQUERY_2_VERSION = ::T.let(nil, ::T.untyped)
  JQUERY_3_VERSION = ::T.let(nil, ::T.untyped)
  JQUERY_UJS_VERSION = ::T.let(nil, ::T.untyped)
  JQUERY_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Jquery::Rails
  extend ::T::Sig
end

module Jquery::Ui::Rails
  JQUERY_UI_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Jquery::Ui::Rails
  extend ::T::Sig
end

module Jquery::Ui
  extend ::T::Sig
end

module Jquery
  extend ::T::Sig
end

module Kaminari::ActionViewExtension::LogSubscriberSilencer
  extend ::T::Sig
end

module Kaminari::ActionViewExtension
  extend ::T::Sig
end

module Kaminari::Actionview
  VERSION = ::T.let(nil, ::T.untyped)
end

module Kaminari::Actionview
  extend ::T::Sig
end

module Kaminari::ActiveRecordExtension
  extend ::T::Sig
end

module Kaminari::ActiveRecordModelExtension
  extend ::T::Sig
end

module Kaminari::ActiveRecordRelationMethods
  extend ::T::Sig
end

module Kaminari::Activerecord
  VERSION = ::T.let(nil, ::T.untyped)
end

module Kaminari::Activerecord
  extend ::T::Sig
end

module Kaminari::ConfigurationMethods::ClassMethods
  extend ::T::Sig
end

module Kaminari::ConfigurationMethods
  extend ::T::Sig
end

module Kaminari::Helpers
  PARAM_KEY_BLACKLIST = ::T.let(nil, ::T.untyped)
end

module Kaminari::Helpers::HelperMethods
  extend ::T::Sig
end

module Kaminari::Helpers::Link
  extend ::T::Sig
end

module Kaminari::Helpers
  extend ::T::Sig
end

module Kaminari::PageScopeMethods
  extend ::T::Sig
end

class Kaminari::PaginatableArray
  ENTRY = ::T.let(nil, ::T.untyped)
end

module Kaminari::PaginatableWithoutCount
  extend ::T::Sig
end

module Kaminari
  extend ::T::Sig
end

module Kconv
  ASCII = ::T.let(nil, ::T.untyped)
  AUTO = ::T.let(nil, ::T.untyped)
  BINARY = ::T.let(nil, ::T.untyped)
  EUC = ::T.let(nil, ::T.untyped)
  JIS = ::T.let(nil, ::T.untyped)
  NOCONV = ::T.let(nil, ::T.untyped)
  SJIS = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
  UTF16 = ::T.let(nil, ::T.untyped)
  UTF32 = ::T.let(nil, ::T.untyped)
  UTF8 = ::T.let(nil, ::T.untyped)
end

module Kconv
  extend ::T::Sig
  def self.guess(str); end

  def self.iseuc(str); end

  def self.isjis(str); end

  def self.issjis(str); end

  def self.isutf8(str); end

  def self.kconv(str, to_enc, from_enc=T.unsafe(nil)); end

  def self.toeuc(str); end

  def self.tojis(str); end

  def self.tolocale(str); end

  def self.tosjis(str); end

  def self.toutf16(str); end

  def self.toutf32(str); end

  def self.toutf8(str); end
end

module Kernel
  def JSON(object, opts=T.unsafe(nil)); end

  def gem(dep, *reqs); end

  def itself(); end

  def object_id(); end

  def pretty_inspect(); end

  def respond_to?(*_); end

  def yield_self(); end
end

module Kernel
  extend ::T::Sig
  def self.`(_); end

  def self.at_exit(); end

  def self.load(*_); end

  def self.require(_); end
end

class KeyError
  include ::DidYouMean::Correctable
  def key(); end

  def receiver(); end
end

class KeyError
  extend ::T::Sig
end

class Kiwi::Description
  include ::Kiwi::Description::GeneratedAssociationMethods
  def autosave_associated_records_for_image(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module Kiwi::Description::GeneratedAssociationMethods
  def build_image(*args, &block); end

  def create_image(*args, &block); end

  def create_image!(*args, &block); end

  def image(); end

  def image=(value); end

  def reload_image(); end
end

module Kiwi::Description::GeneratedAssociationMethods
  extend ::T::Sig
end

class Kiwi::Description
  def self.description_types(); end

  def self.system(*args); end
end

class Kiwi::Image
  include ::Kiwi::Image::GeneratedAssociationMethods
  def after_add_for_kiwi_packages(); end

  def after_add_for_kiwi_packages=(val); end

  def after_add_for_kiwi_packages?(); end

  def after_add_for_package_groups(); end

  def after_add_for_package_groups=(val); end

  def after_add_for_package_groups?(); end

  def after_add_for_preferences(); end

  def after_add_for_preferences=(val); end

  def after_add_for_preferences?(); end

  def after_add_for_profiles(); end

  def after_add_for_profiles=(val); end

  def after_add_for_profiles?(); end

  def after_add_for_repositories(); end

  def after_add_for_repositories=(val); end

  def after_add_for_repositories?(); end

  def after_remove_for_kiwi_packages(); end

  def after_remove_for_kiwi_packages=(val); end

  def after_remove_for_kiwi_packages?(); end

  def after_remove_for_package_groups(); end

  def after_remove_for_package_groups=(val); end

  def after_remove_for_package_groups?(); end

  def after_remove_for_preferences(); end

  def after_remove_for_preferences=(val); end

  def after_remove_for_preferences?(); end

  def after_remove_for_profiles(); end

  def after_remove_for_profiles=(val); end

  def after_remove_for_profiles?(); end

  def after_remove_for_repositories(); end

  def after_remove_for_repositories=(val); end

  def after_remove_for_repositories?(); end

  def autosave_associated_records_for_description(); end

  def autosave_associated_records_for_kiwi_packages(*args); end

  def autosave_associated_records_for_package(); end

  def autosave_associated_records_for_package_groups(*args); end

  def autosave_associated_records_for_preferences(*args); end

  def autosave_associated_records_for_profiles(*args); end

  def autosave_associated_records_for_repositories(*args); end

  def before_add_for_kiwi_packages(); end

  def before_add_for_kiwi_packages=(val); end

  def before_add_for_kiwi_packages?(); end

  def before_add_for_package_groups(); end

  def before_add_for_package_groups=(val); end

  def before_add_for_package_groups?(); end

  def before_add_for_preferences(); end

  def before_add_for_preferences=(val); end

  def before_add_for_preferences?(); end

  def before_add_for_profiles(); end

  def before_add_for_profiles=(val); end

  def before_add_for_profiles?(); end

  def before_add_for_repositories(); end

  def before_add_for_repositories=(val); end

  def before_add_for_repositories?(); end

  def before_remove_for_kiwi_packages(); end

  def before_remove_for_kiwi_packages=(val); end

  def before_remove_for_kiwi_packages?(); end

  def before_remove_for_package_groups(); end

  def before_remove_for_package_groups=(val); end

  def before_remove_for_package_groups?(); end

  def before_remove_for_preferences(); end

  def before_remove_for_preferences=(val); end

  def before_remove_for_preferences?(); end

  def before_remove_for_profiles(); end

  def before_remove_for_profiles=(val); end

  def before_remove_for_profiles?(); end

  def before_remove_for_repositories(); end

  def before_remove_for_repositories=(val); end

  def before_remove_for_repositories?(); end

  def nested_error_groupings(); end

  def nested_error_groupings=(val); end

  def nested_error_groupings?(); end

  def nested_error_messages(); end

  def validate_associated_records_for_description(*args); end

  def validate_associated_records_for_kiwi_packages(*args); end

  def validate_associated_records_for_package_groups(*args); end

  def validate_associated_records_for_preferences(*args); end

  def validate_associated_records_for_profiles(*args); end

  def validate_associated_records_for_repositories(*args); end
end

module Kiwi::Image::GeneratedAssociationMethods
  def build_description(*args, &block); end

  def build_package(*args, &block); end

  def create_description(*args, &block); end

  def create_description!(*args, &block); end

  def create_package(*args, &block); end

  def create_package!(*args, &block); end

  def description(); end

  def description=(value); end

  def description_attributes=(attributes); end

  def kiwi_package_ids(); end

  def kiwi_package_ids=(ids); end

  def kiwi_packages(); end

  def kiwi_packages=(value); end

  def kiwi_packages_attributes=(attributes); end

  def package(); end

  def package=(value); end

  def package_group_ids(); end

  def package_group_ids=(ids); end

  def package_groups(); end

  def package_groups=(value); end

  def package_groups_attributes=(attributes); end

  def preference_ids(); end

  def preference_ids=(ids); end

  def preferences(); end

  def preferences=(value); end

  def preferences_attributes=(attributes); end

  def profile_ids(); end

  def profile_ids=(ids); end

  def profiles(); end

  def profiles=(value); end

  def profiles_attributes=(attributes); end

  def reload_description(); end

  def reload_package(); end

  def repositories(); end

  def repositories=(value); end

  def repositories_attributes=(attributes); end

  def repository_ids(); end

  def repository_ids=(ids); end
end

module Kiwi::Image::GeneratedAssociationMethods
  extend ::T::Sig
end

class Kiwi::Image
  def self.after_add_for_kiwi_packages(); end

  def self.after_add_for_kiwi_packages=(val); end

  def self.after_add_for_kiwi_packages?(); end

  def self.after_add_for_package_groups(); end

  def self.after_add_for_package_groups=(val); end

  def self.after_add_for_package_groups?(); end

  def self.after_add_for_preferences(); end

  def self.after_add_for_preferences=(val); end

  def self.after_add_for_preferences?(); end

  def self.after_add_for_profiles(); end

  def self.after_add_for_profiles=(val); end

  def self.after_add_for_profiles?(); end

  def self.after_add_for_repositories(); end

  def self.after_add_for_repositories=(val); end

  def self.after_add_for_repositories?(); end

  def self.after_remove_for_kiwi_packages(); end

  def self.after_remove_for_kiwi_packages=(val); end

  def self.after_remove_for_kiwi_packages?(); end

  def self.after_remove_for_package_groups(); end

  def self.after_remove_for_package_groups=(val); end

  def self.after_remove_for_package_groups?(); end

  def self.after_remove_for_preferences(); end

  def self.after_remove_for_preferences=(val); end

  def self.after_remove_for_preferences?(); end

  def self.after_remove_for_profiles(); end

  def self.after_remove_for_profiles=(val); end

  def self.after_remove_for_profiles?(); end

  def self.after_remove_for_repositories(); end

  def self.after_remove_for_repositories=(val); end

  def self.after_remove_for_repositories?(); end

  def self.before_add_for_kiwi_packages(); end

  def self.before_add_for_kiwi_packages=(val); end

  def self.before_add_for_kiwi_packages?(); end

  def self.before_add_for_package_groups(); end

  def self.before_add_for_package_groups=(val); end

  def self.before_add_for_package_groups?(); end

  def self.before_add_for_preferences(); end

  def self.before_add_for_preferences=(val); end

  def self.before_add_for_preferences?(); end

  def self.before_add_for_profiles(); end

  def self.before_add_for_profiles=(val); end

  def self.before_add_for_profiles?(); end

  def self.before_add_for_repositories(); end

  def self.before_add_for_repositories=(val); end

  def self.before_add_for_repositories?(); end

  def self.before_remove_for_kiwi_packages(); end

  def self.before_remove_for_kiwi_packages=(val); end

  def self.before_remove_for_kiwi_packages?(); end

  def self.before_remove_for_package_groups(); end

  def self.before_remove_for_package_groups=(val); end

  def self.before_remove_for_package_groups?(); end

  def self.before_remove_for_preferences(); end

  def self.before_remove_for_preferences=(val); end

  def self.before_remove_for_preferences?(); end

  def self.before_remove_for_profiles(); end

  def self.before_remove_for_profiles=(val); end

  def self.before_remove_for_profiles?(); end

  def self.before_remove_for_repositories(); end

  def self.before_remove_for_repositories=(val); end

  def self.before_remove_for_repositories?(); end

  def self.nest_errors_for(association_name, options=T.unsafe(nil)); end

  def self.nested_error_groupings(); end

  def self.nested_error_groupings=(val); end

  def self.nested_error_groupings?(); end
end

class Kiwi::Package
  include ::Kiwi::Package::GeneratedAssociationMethods
  def autosave_associated_records_for_kiwi_image(); end

  def autosave_associated_records_for_package_group(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module Kiwi::Package::GeneratedAssociationMethods
  def build_package_group(*args, &block); end

  def create_package_group(*args, &block); end

  def create_package_group!(*args, &block); end

  def kiwi_image(); end

  def kiwi_image=(value); end

  def package_group(); end

  def package_group=(value); end

  def reload_kiwi_image(); end

  def reload_package_group(); end
end

module Kiwi::Package::GeneratedAssociationMethods
  extend ::T::Sig
end

class Kiwi::PackageGroup
  include ::Kiwi::PackageGroup::GeneratedAssociationMethods
  def after_add_for_packages(); end

  def after_add_for_packages=(val); end

  def after_add_for_packages?(); end

  def after_remove_for_packages(); end

  def after_remove_for_packages=(val); end

  def after_remove_for_packages?(); end

  def autosave_associated_records_for_image(*args); end

  def autosave_associated_records_for_packages(*args); end

  def before_add_for_packages(); end

  def before_add_for_packages=(val); end

  def before_add_for_packages?(); end

  def before_remove_for_packages(); end

  def before_remove_for_packages=(val); end

  def before_remove_for_packages?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_packages(*args); end
end

module Kiwi::PackageGroup::GeneratedAssociationMethods
  def build_image(*args, &block); end

  def create_image(*args, &block); end

  def create_image!(*args, &block); end

  def image(); end

  def image=(value); end

  def package_ids(); end

  def package_ids=(ids); end

  def packages(); end

  def packages=(value); end

  def packages_attributes=(attributes); end

  def reload_image(); end
end

module Kiwi::PackageGroup::GeneratedAssociationMethods
  extend ::T::Sig
end

class Kiwi::PackageGroup
  def self.after_add_for_packages(); end

  def self.after_add_for_packages=(val); end

  def self.after_add_for_packages?(); end

  def self.after_remove_for_packages(); end

  def self.after_remove_for_packages=(val); end

  def self.after_remove_for_packages?(); end

  def self.before_add_for_packages(); end

  def self.before_add_for_packages=(val); end

  def self.before_add_for_packages?(); end

  def self.before_remove_for_packages(); end

  def self.before_remove_for_packages=(val); end

  def self.before_remove_for_packages?(); end

  def self.kiwi_types(); end

  def self.type_bootstrap(*args); end

  def self.type_delete(*args); end

  def self.type_docker(*args); end

  def self.type_image(*args); end

  def self.type_iso(*args); end

  def self.type_lxc(*args); end

  def self.type_oem(*args); end

  def self.type_pxe(*args); end

  def self.type_split(*args); end

  def self.type_testsuite(*args); end

  def self.type_vmx(*args); end
end

class Kiwi::Preference
  include ::Kiwi::Preference::GeneratedAssociationMethods
  def autosave_associated_records_for_image(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module Kiwi::Preference::GeneratedAssociationMethods
  def build_image(*args, &block); end

  def create_image(*args, &block); end

  def create_image!(*args, &block); end

  def image(); end

  def image=(value); end

  def reload_image(); end
end

module Kiwi::Preference::GeneratedAssociationMethods
  extend ::T::Sig
end

class Kiwi::Preference
  def self.image_type_btrfs(*args); end

  def self.image_type_clicfs(*args); end

  def self.image_type_cpio(*args); end

  def self.image_type_docker(*args); end

  def self.image_type_ext2(*args); end

  def self.image_type_ext3(*args); end

  def self.image_type_ext4(*args); end

  def self.image_type_iso(*args); end

  def self.image_type_lxc(*args); end

  def self.image_type_oem(*args); end

  def self.image_type_product(*args); end

  def self.image_type_pxe(*args); end

  def self.image_type_reiserfs(*args); end

  def self.image_type_split(*args); end

  def self.image_type_squashfs(*args); end

  def self.image_type_tbz(*args); end

  def self.image_type_vmx(*args); end

  def self.image_type_xfs(*args); end

  def self.image_type_zfs(*args); end

  def self.type_images(); end
end

class Kiwi::Profile
  include ::Kiwi::Profile::GeneratedAssociationMethods
  def autosave_associated_records_for_image(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module Kiwi::Profile::GeneratedAssociationMethods
  def build_image(*args, &block); end

  def create_image(*args, &block); end

  def create_image!(*args, &block); end

  def image(); end

  def image=(value); end

  def reload_image(); end
end

module Kiwi::Profile::GeneratedAssociationMethods
  extend ::T::Sig
end

class Kiwi::Profile
  def self.selected(*args); end
end

class Kiwi::Repository
  include ::Kiwi::Repository::GeneratedAssociationMethods
  def autosave_associated_records_for_image(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module Kiwi::Repository::GeneratedAssociationMethods
  def build_image(*args, &block); end

  def create_image(*args, &block); end

  def create_image!(*args, &block); end

  def image(); end

  def image=(value); end

  def reload_image(); end
end

module Kiwi::Repository::GeneratedAssociationMethods
  extend ::T::Sig
end

module Kiwi
  extend ::T::Sig
end

module LDAP
  LDAPS_PORT = ::T.let(nil, ::T.untyped)
  LDAP_ADMINLIMIT_EXCEEDED = ::T.let(nil, ::T.untyped)
  LDAP_ALIAS_DEREF_PROBLEM = ::T.let(nil, ::T.untyped)
  LDAP_ALIAS_PROBLEM = ::T.let(nil, ::T.untyped)
  LDAP_ALREADY_EXISTS = ::T.let(nil, ::T.untyped)
  LDAP_API_INFO_VERSION = ::T.let(nil, ::T.untyped)
  LDAP_API_VERSION = ::T.let(nil, ::T.untyped)
  LDAP_AUTH_KRBV41 = ::T.let(nil, ::T.untyped)
  LDAP_AUTH_KRBV42 = ::T.let(nil, ::T.untyped)
  LDAP_AUTH_METHOD_NOT_SUPPORTED = ::T.let(nil, ::T.untyped)
  LDAP_AUTH_NEGOTIATE = ::T.let(nil, ::T.untyped)
  LDAP_AUTH_NONE = ::T.let(nil, ::T.untyped)
  LDAP_AUTH_SASL = ::T.let(nil, ::T.untyped)
  LDAP_AUTH_SIMPLE = ::T.let(nil, ::T.untyped)
  LDAP_AUTH_UNKNOWN = ::T.let(nil, ::T.untyped)
  LDAP_BUSY = ::T.let(nil, ::T.untyped)
  LDAP_COMPARE_FALSE = ::T.let(nil, ::T.untyped)
  LDAP_COMPARE_TRUE = ::T.let(nil, ::T.untyped)
  LDAP_CONFIDENTIALITY_REQUIRED = ::T.let(nil, ::T.untyped)
  LDAP_CONSTRAINT_VIOLATION = ::T.let(nil, ::T.untyped)
  LDAP_CONTROL_PAGEDRESULTS = ::T.let(nil, ::T.untyped)
  LDAP_DECODING_ERROR = ::T.let(nil, ::T.untyped)
  LDAP_DEREF_ALWAYS = ::T.let(nil, ::T.untyped)
  LDAP_DEREF_FINDING = ::T.let(nil, ::T.untyped)
  LDAP_DEREF_NEVER = ::T.let(nil, ::T.untyped)
  LDAP_DEREF_SEARCHING = ::T.let(nil, ::T.untyped)
  LDAP_ENCODING_ERROR = ::T.let(nil, ::T.untyped)
  LDAP_FILTER_ERROR = ::T.let(nil, ::T.untyped)
  LDAP_INAPPROPRIATE_AUTH = ::T.let(nil, ::T.untyped)
  LDAP_INAPPROPRIATE_MATCHING = ::T.let(nil, ::T.untyped)
  LDAP_INSUFFICIENT_ACCESS = ::T.let(nil, ::T.untyped)
  LDAP_INVALID_CREDENTIALS = ::T.let(nil, ::T.untyped)
  LDAP_INVALID_DN_SYNTAX = ::T.let(nil, ::T.untyped)
  LDAP_INVALID_SYNTAX = ::T.let(nil, ::T.untyped)
  LDAP_IS_LEAF = ::T.let(nil, ::T.untyped)
  LDAP_LOCAL_ERROR = ::T.let(nil, ::T.untyped)
  LDAP_LOOP_DETECT = ::T.let(nil, ::T.untyped)
  LDAP_MOD_ADD = ::T.let(nil, ::T.untyped)
  LDAP_MOD_BVALUES = ::T.let(nil, ::T.untyped)
  LDAP_MOD_DELETE = ::T.let(nil, ::T.untyped)
  LDAP_MOD_INCREMENT = ::T.let(nil, ::T.untyped)
  LDAP_MOD_OP = ::T.let(nil, ::T.untyped)
  LDAP_MOD_REPLACE = ::T.let(nil, ::T.untyped)
  LDAP_NAMING_VIOLATION = ::T.let(nil, ::T.untyped)
  LDAP_NOT_ALLOWED_ON_NONLEAF = ::T.let(nil, ::T.untyped)
  LDAP_NOT_ALLOWED_ON_RDN = ::T.let(nil, ::T.untyped)
  LDAP_NO_MEMORY = ::T.let(nil, ::T.untyped)
  LDAP_NO_OBJECT_CLASS_MODS = ::T.let(nil, ::T.untyped)
  LDAP_NO_SUCH_ATTRIBUTE = ::T.let(nil, ::T.untyped)
  LDAP_NO_SUCH_OBJECT = ::T.let(nil, ::T.untyped)
  LDAP_OBJECT_CLASS_VIOLATION = ::T.let(nil, ::T.untyped)
  LDAP_OPERATIONS_ERROR = ::T.let(nil, ::T.untyped)
  LDAP_OPT_API_FEATURE_INFO = ::T.let(nil, ::T.untyped)
  LDAP_OPT_API_INFO = ::T.let(nil, ::T.untyped)
  LDAP_OPT_CLIENT_CONTROLS = ::T.let(nil, ::T.untyped)
  LDAP_OPT_DEREF = ::T.let(nil, ::T.untyped)
  LDAP_OPT_DESC = ::T.let(nil, ::T.untyped)
  LDAP_OPT_HOST_NAME = ::T.let(nil, ::T.untyped)
  LDAP_OPT_NETWORK_TIMEOUT = ::T.let(nil, ::T.untyped)
  LDAP_OPT_OFF = ::T.let(nil, ::T.untyped)
  LDAP_OPT_ON = ::T.let(nil, ::T.untyped)
  LDAP_OPT_PROTOCOL_VERSION = ::T.let(nil, ::T.untyped)
  LDAP_OPT_REFERRALS = ::T.let(nil, ::T.untyped)
  LDAP_OPT_RESTART = ::T.let(nil, ::T.untyped)
  LDAP_OPT_SERVER_CONTROLS = ::T.let(nil, ::T.untyped)
  LDAP_OPT_SIZELIMIT = ::T.let(nil, ::T.untyped)
  LDAP_OPT_TIMELIMIT = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_SASL_AUTHCID = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_SASL_AUTHZID = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_SASL_MAXBUFSIZE = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_SASL_MECH = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_SASL_REALM = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_SASL_SECPROPS = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_SASL_SSF = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_SASL_SSF_EXTERNAL = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_SASL_SSF_MAX = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_SASL_SSF_MIN = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_ALLOW = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_CACERTDIR = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_CACERTFILE = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_CERTFILE = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_CIPHER_SUITE = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_DEMAND = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_HARD = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_KEYFILE = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_NEVER = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_NEWCTX = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_PROTOCOL_MIN = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_RANDOM_FILE = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_REQUIRE_CERT = ::T.let(nil, ::T.untyped)
  LDAP_OPT_X_TLS_TRY = ::T.let(nil, ::T.untyped)
  LDAP_OTHER = ::T.let(nil, ::T.untyped)
  LDAP_PARAM_ERROR = ::T.let(nil, ::T.untyped)
  LDAP_PARTIAL_RESULTS = ::T.let(nil, ::T.untyped)
  LDAP_PORT = ::T.let(nil, ::T.untyped)
  LDAP_PROTOCOL_ERROR = ::T.let(nil, ::T.untyped)
  LDAP_REFERRAL = ::T.let(nil, ::T.untyped)
  LDAP_RESULTS_TOO_LARGE = ::T.let(nil, ::T.untyped)
  LDAP_SASL_BIND_IN_PROGRESS = ::T.let(nil, ::T.untyped)
  LDAP_SASL_SIMPLE = ::T.let(nil, ::T.untyped)
  LDAP_SCOPE_BASE = ::T.let(nil, ::T.untyped)
  LDAP_SCOPE_ONELEVEL = ::T.let(nil, ::T.untyped)
  LDAP_SCOPE_SUBTREE = ::T.let(nil, ::T.untyped)
  LDAP_SERVER_DOWN = ::T.let(nil, ::T.untyped)
  LDAP_SIZELIMIT_EXCEEDED = ::T.let(nil, ::T.untyped)
  LDAP_STRONG_AUTH_NOT_SUPPORTED = ::T.let(nil, ::T.untyped)
  LDAP_STRONG_AUTH_REQUIRED = ::T.let(nil, ::T.untyped)
  LDAP_SUCCESS = ::T.let(nil, ::T.untyped)
  LDAP_TIMELIMIT_EXCEEDED = ::T.let(nil, ::T.untyped)
  LDAP_TIMEOUT = ::T.let(nil, ::T.untyped)
  LDAP_TYPE_OR_VALUE_EXISTS = ::T.let(nil, ::T.untyped)
  LDAP_UNAVAILABLE = ::T.let(nil, ::T.untyped)
  LDAP_UNAVAILABLE_CRITICAL_EXTENSION = ::T.let(nil, ::T.untyped)
  LDAP_UNDEFINED_TYPE = ::T.let(nil, ::T.untyped)
  LDAP_UNWILLING_TO_PERFORM = ::T.let(nil, ::T.untyped)
  LDAP_USER_CANCELLED = ::T.let(nil, ::T.untyped)
  LDAP_VENDOR_NAME = ::T.let(nil, ::T.untyped)
  LDAP_VENDOR_VERSION = ::T.let(nil, ::T.untyped)
  LDAP_VERSION = ::T.let(nil, ::T.untyped)
  LDAP_VERSION1 = ::T.let(nil, ::T.untyped)
  LDAP_VERSION2 = ::T.let(nil, ::T.untyped)
  LDAP_VERSION3 = ::T.let(nil, ::T.untyped)
  LDAP_VERSION_MAX = ::T.let(nil, ::T.untyped)
  MAJOR_VERSION = ::T.let(nil, ::T.untyped)
  MINOR_VERSION = ::T.let(nil, ::T.untyped)
  PATCH_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

LDAP::APIInfo = Struct::APIInfo

class LDAP::Error
end

class LDAP::Error
end

class LDAP::InvalidDataError
end

class LDAP::InvalidDataError
end

class LDAP::InvalidEntryError
end

class LDAP::InvalidEntryError
end

LDAP::Message = LDAP::Entry

class LDAP::ResultError
end

class LDAP::ResultError
end

module LDAP
  extend ::T::Sig
end

class LastEventsTest
  def test_update_lastevents(); end
end

module Launchy
  VERSION = ::T.let(nil, ::T.untyped)
end

module Launchy::DescendantTracker
  extend ::T::Sig
end

module Launchy::Detect
  extend ::T::Sig
end

module Launchy::Version
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
end

module Launchy::Version
  extend ::T::Sig
end

module Launchy
  extend ::T::Sig
end

class LinkedProject
  include ::LinkedProject::GeneratedAssociationMethods
  def autosave_associated_records_for_linked_db_project(*args); end

  def autosave_associated_records_for_project(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module LinkedProject::GeneratedAssociationMethods
  def build_linked_db_project(*args, &block); end

  def build_project(*args, &block); end

  def create_linked_db_project(*args, &block); end

  def create_linked_db_project!(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def linked_db_project(); end

  def linked_db_project=(value); end

  def project(); end

  def project=(value); end

  def reload_linked_db_project(); end

  def reload_project(); end
end

module LinkedProject::GeneratedAssociationMethods
  extend ::T::Sig
end

class LoadError
  def path(); end
end

class LoadError
  extend ::T::Sig
end

class LocalBuildResult
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class LocalBuildResult::ForPackage
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class LocalBuildResult::ForPackage
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class LocalBuildResult
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class LocalBuildStatistic::ForPackage
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class LocalBuildStatistic::ForPackage
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class LocalBuildStatistic::Package::Disk
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class LocalBuildStatistic::Package::Disk
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class LocalBuildStatistic::Package::Memory
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class LocalBuildStatistic::Package::Memory
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class LocalBuildStatistic::Package::Time
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class LocalBuildStatistic::Package::Time
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

module LocalBuildStatistic::Package
  extend ::T::Sig
end

module LocalBuildStatistic
  extend ::T::Sig
end

class LocalJobHistory
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class LocalJobHistory
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class LocalJumpError
  def exit_value(); end

  def reason(); end
end

class LocalJumpError
  extend ::T::Sig
end

class LocalStatistic
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class LocalStatistic
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class Logger
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  SEV_LABEL = ::T.let(nil, ::T.untyped)
end

class Logger::Error
  extend ::T::Sig
end

class Logger::Formatter
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  Format = ::T.let(nil, ::T.untyped)
end

class Logger::Formatter
  extend ::T::Sig
end

class Logger::LogDevice
  include ::MonitorMixin
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Logger::LogDevice
  extend ::T::Sig
end

module Logger::Period
  SiD = ::T.let(nil, ::T.untyped)
end

module Logger::Period
  extend ::T::Sig
end

module Logger::Severity
  extend ::T::Sig
end

class Logger::ShiftingError
  extend ::T::Sig
end

class Logger
  extend ::T::Sig
end

module LoggerSilence
  extend ::T::Sig
end

module Lograge
  VERSION = ::T.let(nil, ::T.untyped)
end

module Lograge::Formatters::Helpers::MethodAndPath
  extend ::T::Sig
end

module Lograge::Formatters::Helpers
  extend ::T::Sig
end

class Lograge::Formatters::L2met
  L2MET_FIELDS = ::T.let(nil, ::T.untyped)
  UNWANTED_FIELDS = ::T.let(nil, ::T.untyped)
end

module Lograge::Formatters
  extend ::T::Sig
end

class Lograge::LogSubscribers::ActionCable
  def connect(event); end

  def disconnect(event); end

  def perform_action(event); end

  def subscribe(event); end

  def unsubscribe(event); end
end

class Lograge::LogSubscribers::ActionController
  def process_action(event); end

  def redirect_to(event); end

  def unpermitted_parameters(event); end
end

module Lograge::LogSubscribers
  extend ::T::Sig
end

class Lograge::SilentLogger
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Lograge
  extend ::T::Sig
end

module Loofah
  VERSION = ::T.let(nil, ::T.untyped)
end

module Loofah::DocumentDecorator
  extend ::T::Sig
end

module Loofah::Elements
  BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  LOOSE_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML4 = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML5 = ::T.let(nil, ::T.untyped)
end

module Loofah::Elements
  extend ::T::Sig
end

module Loofah::HTML
  extend ::T::Sig
end

module Loofah::HTML5::Scrub
  CONTROL_CHARACTERS = ::T.let(nil, ::T.untyped)
  CRASS_SEMICOLON = ::T.let(nil, ::T.untyped)
  CSS_KEYWORDISH = ::T.let(nil, ::T.untyped)
end

module Loofah::HTML5::Scrub
  extend ::T::Sig
end

module Loofah::HTML5::WhiteList
  ACCEPTABLE_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_ELEMENTS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ALLOWED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  ALLOWED_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ALLOWED_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ATTR_VAL_IS_URI = ::T.let(nil, ::T.untyped)
  MATHML_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  MATHML_ELEMENTS = ::T.let(nil, ::T.untyped)
  PROTOCOL_SEPARATOR = ::T.let(nil, ::T.untyped)
  SHORTHAND_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  SVG_ALLOW_LOCAL_HREF = ::T.let(nil, ::T.untyped)
  SVG_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SVG_ATTR_VAL_ALLOWS_REF = ::T.let(nil, ::T.untyped)
  SVG_ELEMENTS = ::T.let(nil, ::T.untyped)
  TAGS_SAFE_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  VOID_ELEMENTS = ::T.let(nil, ::T.untyped)
end

module Loofah::HTML5::WhiteList
  extend ::T::Sig
end

module Loofah::HTML5
  extend ::T::Sig
end

module Loofah::LibxmlWorkarounds
  BROKEN_ESCAPING_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  BROKEN_ESCAPING_ATTRIBUTES_QUALIFYING_TAG = ::T.let(nil, ::T.untyped)
end

module Loofah::LibxmlWorkarounds
  extend ::T::Sig
end

module Loofah::MetaHelpers
  extend ::T::Sig
end

module Loofah::ScrubBehavior::Node
  extend ::T::Sig
end

module Loofah::ScrubBehavior::NodeSet
  extend ::T::Sig
end

module Loofah::ScrubBehavior
  extend ::T::Sig
end

class Loofah::Scrubber
  CONTINUE = ::T.let(nil, ::T.untyped)
  STOP = ::T.let(nil, ::T.untyped)
end

module Loofah::Scrubbers
  MAP = ::T.let(nil, ::T.untyped)
end

module Loofah::Scrubbers
  extend ::T::Sig
end

module Loofah::TextBehavior
  extend ::T::Sig
end

module Loofah::XML
  extend ::T::Sig
end

module Loofah
  extend ::T::Sig
end

module Mail
  RANDOM_TAG = ::T.let(nil, ::T.untyped)
end

class Mail::Address
  include ::Mail::Utilities
  include ::Mail::Constants
  def address(output_type=T.unsafe(nil)); end

  def address=(value); end

  def comments(); end

  def decoded(); end

  def display_name(output_type=T.unsafe(nil)); end

  def display_name=(str); end

  def domain(output_type=T.unsafe(nil)); end

  def encoded(); end

  def format(output_type=T.unsafe(nil)); end

  def group(); end

  def initialize(value=T.unsafe(nil)); end

  def local(output_type=T.unsafe(nil)); end

  def name(); end

  def raw(); end
end

class Mail::Address
end

class Mail::AddressList
  def addresses(); end

  def addresses_grouped_by_group(); end

  def group_names(); end

  def initialize(string); end
end

class Mail::AddressList
end

class Mail::BccField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CcField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

module Mail::CheckDeliveryParams
  extend ::T::Sig
end

class Mail::CommentsField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

module Mail::CommonAddress
  extend ::T::Sig
end

module Mail::CommonDate
  extend ::T::Sig
end

module Mail::CommonField
  FILENAME_RE = ::T.let(nil, ::T.untyped)
end

module Mail::CommonField
  extend ::T::Sig
end

module Mail::CommonMessageId
  extend ::T::Sig
end

module Mail::Constants
  ASTERISK = ::T.let(nil, ::T.untyped)
  ATOM_UNSAFE = ::T.let(nil, ::T.untyped)
  B_VALUES = ::T.let(nil, ::T.untyped)
  CAPITAL_M = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  CONTROL_CHAR = ::T.let(nil, ::T.untyped)
  CR = ::T.let(nil, ::T.untyped)
  CRLF = ::T.let(nil, ::T.untyped)
  CR_ENCODED = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  EQUAL_LF = ::T.let(nil, ::T.untyped)
  FIELD_BODY = ::T.let(nil, ::T.untyped)
  FIELD_LINE = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
  FIELD_PREFIX = ::T.let(nil, ::T.untyped)
  FIELD_SPLIT = ::T.let(nil, ::T.untyped)
  FULL_ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  FWS = ::T.let(nil, ::T.untyped)
  HEADER_LINE = ::T.let(nil, ::T.untyped)
  HEADER_SPLIT = ::T.let(nil, ::T.untyped)
  HYPHEN = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  LF_ENCODED = ::T.let(nil, ::T.untyped)
  NULL_SENDER = ::T.let(nil, ::T.untyped)
  PHRASE_UNSAFE = ::T.let(nil, ::T.untyped)
  QP_SAFE = ::T.let(nil, ::T.untyped)
  QP_UNSAFE = ::T.let(nil, ::T.untyped)
  Q_VALUES = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
  TOKEN_UNSAFE = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
  WSP = ::T.let(nil, ::T.untyped)
end

module Mail::Constants
  extend ::T::Sig
end

class Mail::ContentDescriptionField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentDispositionElement
  def disposition_type(); end

  def initialize(string); end

  def parameters(); end
end

class Mail::ContentDispositionElement
end

class Mail::ContentDispositionField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentIdField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentLocationElement
  def initialize(string); end

  def location(); end

  def to_s(*args); end
end

class Mail::ContentLocationElement
end

class Mail::ContentLocationField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTransferEncodingElement
  def encoding(); end

  def initialize(string); end
end

class Mail::ContentTransferEncodingElement
end

class Mail::ContentTransferEncodingField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTypeElement
  def initialize(string); end

  def main_type(); end

  def parameters(); end

  def sub_type(); end
end

class Mail::ContentTypeElement
end

class Mail::ContentTypeField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::DateField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::DateTimeElement
  def date_string(); end

  def initialize(string); end

  def time_string(); end
end

class Mail::DateTimeElement
end

class Mail::Encodings::Base64
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::Binary
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::EightBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::QuotedPrintable
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::SevenBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::TransferEncoding
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::UnixToUnix
  NAME = ::T.let(nil, ::T.untyped)
end

module Mail::Encodings
  extend ::T::Sig
end

class Mail::EnvelopeFromElement
  def address(); end

  def date_time(); end

  def formatted_date_time(); end

  def initialize(string); end
end

class Mail::EnvelopeFromElement
end

class Mail::Exim
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::Exim
end

class Mail::Field
  FIELDS_MAP = ::T.let(nil, ::T.untyped)
  FIELD_NAME_MAP = ::T.let(nil, ::T.untyped)
  FIELD_ORDER = ::T.let(nil, ::T.untyped)
  FIELD_ORDER_LOOKUP = ::T.let(nil, ::T.untyped)
  KNOWN_FIELDS = ::T.let(nil, ::T.untyped)
  STRUCTURED_FIELDS = ::T.let(nil, ::T.untyped)
end

class Mail::FromField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Header
  LIMITED_FIELDS = ::T.let(nil, ::T.untyped)
end

class Mail::IMAP
  def connection(&block); end

  def delete_all(mailbox=T.unsafe(nil)); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::IMAP
end

class Mail::InReplyToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::KeywordsField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::LoggerDelivery
  include ::Mail::CheckDeliveryParams
  def deliver!(mail); end

  def initialize(settings); end

  def logger(); end

  def settings(); end

  def severity(); end
end

class Mail::LoggerDelivery
end

module Mail::Matchers
  extend ::T::Sig
end

class Mail::Message
  HEADER_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Mail::MessageIdField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::MessageIdsElement
  def initialize(string); end

  def message_id(); end

  def message_ids(); end
end

class Mail::MessageIdsElement
end

class Mail::MimeVersionElement
  def initialize(string); end

  def major(); end

  def minor(); end
end

class Mail::MimeVersionElement
end

class Mail::MimeVersionField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

module Mail::Multibyte
  VALID_CHARACTER = ::T.let(nil, ::T.untyped)
end

module Mail::Multibyte::Unicode
  HANGUL_JAMO_FIRST = ::T.let(nil, ::T.untyped)
  HANGUL_JAMO_LAST = ::T.let(nil, ::T.untyped)
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SLAST = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  LEADERS_AND_TRAILERS = ::T.let(nil, ::T.untyped)
  LEADERS_PAT = ::T.let(nil, ::T.untyped)
  NORMALIZATION_FORMS = ::T.let(nil, ::T.untyped)
  TRAILERS_PAT = ::T.let(nil, ::T.untyped)
  UNICODE_VERSION = ::T.let(nil, ::T.untyped)
  WHITESPACE = ::T.let(nil, ::T.untyped)
end

class Mail::Multibyte::Unicode::UnicodeDatabase
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

module Mail::Multibyte::Unicode
  extend ::T::Sig
end

module Mail::Multibyte
  extend ::T::Sig
end

class Mail::OptionalField
end

class Mail::OptionalField
end

class Mail::POP3
  def connection(&block); end

  def delete_all(); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::POP3
end

module Mail::Parsers
end

module Mail::Parsers::AddressListsParser
end

class Mail::Parsers::AddressListsParser::AddressListStruct
  def addresses(); end

  def addresses=(_); end

  def error(); end

  def error=(_); end

  def group_names(); end

  def group_names=(_); end
end

class Mail::Parsers::AddressListsParser::AddressListStruct
  def self.[](*_); end

  def self.members(); end
end

class Mail::Parsers::AddressListsParser::AddressStruct
  def comments(); end

  def comments=(_); end

  def display_name(); end

  def display_name=(_); end

  def domain(); end

  def domain=(_); end

  def error(); end

  def error=(_); end

  def group(); end

  def group=(_); end

  def local(); end

  def local=(_); end

  def obs_domain_list(); end

  def obs_domain_list=(_); end

  def raw(); end

  def raw=(_); end
end

class Mail::Parsers::AddressListsParser::AddressStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::AddressListsParser
  extend ::T::Sig
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentDispositionParser
end

class Mail::Parsers::ContentDispositionParser::ContentDispositionStruct
  def disposition_type(); end

  def disposition_type=(_); end

  def error(); end

  def error=(_); end

  def parameters(); end

  def parameters=(_); end
end

class Mail::Parsers::ContentDispositionParser::ContentDispositionStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::ContentDispositionParser
  extend ::T::Sig
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentLocationParser
end

class Mail::Parsers::ContentLocationParser::ContentLocationStruct
  def error(); end

  def error=(_); end

  def location(); end

  def location=(_); end
end

class Mail::Parsers::ContentLocationParser::ContentLocationStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::ContentLocationParser
  extend ::T::Sig
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentTransferEncodingParser
end

class Mail::Parsers::ContentTransferEncodingParser::ContentTransferEncodingStruct
  def encoding(); end

  def encoding=(_); end

  def error(); end

  def error=(_); end
end

class Mail::Parsers::ContentTransferEncodingParser::ContentTransferEncodingStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::ContentTransferEncodingParser
  extend ::T::Sig
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentTypeParser
end

class Mail::Parsers::ContentTypeParser::ContentTypeStruct
  def error(); end

  def error=(_); end

  def main_type(); end

  def main_type=(_); end

  def parameters(); end

  def parameters=(_); end

  def sub_type(); end

  def sub_type=(_); end
end

class Mail::Parsers::ContentTypeParser::ContentTypeStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::ContentTypeParser
  extend ::T::Sig
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::DateTimeParser
end

class Mail::Parsers::DateTimeParser::DateTimeStruct
  def date_string(); end

  def date_string=(_); end

  def error(); end

  def error=(_); end

  def time_string(); end

  def time_string=(_); end
end

class Mail::Parsers::DateTimeParser::DateTimeStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::DateTimeParser
  extend ::T::Sig
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::EnvelopeFromParser
end

class Mail::Parsers::EnvelopeFromParser::EnvelopeFromStruct
  def address(); end

  def address=(_); end

  def ctime_date(); end

  def ctime_date=(_); end

  def error(); end

  def error=(_); end
end

class Mail::Parsers::EnvelopeFromParser::EnvelopeFromStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::EnvelopeFromParser
  extend ::T::Sig
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::MessageIdsParser
end

class Mail::Parsers::MessageIdsParser::MessageIdsStruct
  def error(); end

  def error=(_); end

  def message_ids(); end

  def message_ids=(_); end
end

class Mail::Parsers::MessageIdsParser::MessageIdsStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::MessageIdsParser
  extend ::T::Sig
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::MimeVersionParser
end

class Mail::Parsers::MimeVersionParser::MimeVersionStruct
  def error(); end

  def error=(_); end

  def major(); end

  def major=(_); end

  def minor(); end

  def minor=(_); end
end

class Mail::Parsers::MimeVersionParser::MimeVersionStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::MimeVersionParser
  extend ::T::Sig
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

class Mail::Parsers::PhraseListsParser
end

class Mail::Parsers::PhraseListsParser::PhraseListsStruct
  def error(); end

  def error=(_); end

  def phrases(); end

  def phrases=(_); end
end

class Mail::Parsers::PhraseListsParser::PhraseListsStruct
  def self.[](*_); end

  def self.members(); end
end

class Mail::Parsers::PhraseListsParser
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ReceivedParser
end

class Mail::Parsers::ReceivedParser::ReceivedStruct
  def date(); end

  def date=(_); end

  def error(); end

  def error=(_); end

  def info(); end

  def info=(_); end

  def time(); end

  def time=(_); end
end

class Mail::Parsers::ReceivedParser::ReceivedStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::ReceivedParser
  extend ::T::Sig
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers
  extend ::T::Sig
end

class Mail::PartsList
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Mail::PhraseList
  def initialize(string); end

  def phrases(); end
end

class Mail::PhraseList
end

class Mail::ReceivedElement
  include ::Mail::Utilities
  include ::Mail::Constants
  def date_time(); end

  def info(); end

  def initialize(string); end

  def to_s(*args); end
end

class Mail::ReceivedElement
end

class Mail::ReceivedField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReferencesField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReplyToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentBccField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentCcField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentDateField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentFromField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentMessageIdField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentSenderField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReturnPathField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

Mail::RubyVer = Mail::Ruby19

class Mail::SMTP
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::SMTPConnection
  def deliver!(mail); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end

  def smtp(); end

  def smtp=(smtp); end
end

class Mail::SMTPConnection
end

class Mail::SenderField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Sendmail
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::SubjectField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::TestRetriever
  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end
end

class Mail::TestRetriever
  def self.emails(); end

  def self.emails=(val); end
end

class Mail::ToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

module Mail::Utilities
  CRLF = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  TO_CRLF_REGEX = ::T.let(nil, ::T.untyped)
end

module Mail::Utilities
  extend ::T::Sig
end

module Mail::VERSION
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

module Mail::VERSION
  extend ::T::Sig
end

module Mail
  extend ::T::Sig
end

class MaintainedProject
  include ::MaintainedProject::GeneratedAssociationMethods
  def autosave_associated_records_for_maintenance_project(*args); end

  def autosave_associated_records_for_project(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module MaintainedProject::GeneratedAssociationMethods
  def build_maintenance_project(*args, &block); end

  def build_project(*args, &block); end

  def create_maintenance_project(*args, &block); end

  def create_maintenance_project!(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def maintenance_project(); end

  def maintenance_project=(value); end

  def project(); end

  def project=(value); end

  def reload_maintenance_project(); end

  def reload_project(); end
end

module MaintainedProject::GeneratedAssociationMethods
  extend ::T::Sig
end

class MaintainedProjectDatatable
  def content_tag(*args, &block); end

  def link_to(*args, &block); end

  def policy(*args, &block); end

  def project_maintained_project_path(*args, &block); end

  def project_show_path(*args, &block); end
end

module MaintenanceHelper
  extend ::T::Sig
end

class MaintenanceIncident
  include ::MaintenanceIncident::GeneratedAssociationMethods
  def autosave_associated_records_for_maintenance_db_project(*args); end

  def autosave_associated_records_for_project(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module MaintenanceIncident::GeneratedAssociationMethods
  def build_maintenance_db_project(*args, &block); end

  def build_project(*args, &block); end

  def create_maintenance_db_project(*args, &block); end

  def create_maintenance_db_project!(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def maintenance_db_project(); end

  def maintenance_db_project=(value); end

  def project(); end

  def project=(value); end

  def reload_maintenance_db_project(); end

  def reload_project(); end
end

module MaintenanceIncident::GeneratedAssociationMethods
  extend ::T::Sig
end

class MaintenanceIncidentDatatable
  def build_results_cell(*args, &block); end

  def category_cell(*args, &block); end

  def info_cell(*args, &block); end

  def packages_cell(*args, &block); end

  def patchinfo_data(*args, &block); end

  def release_targets_cell(*args, &block); end

  def summary_cell(*args, &block); end
end

class MakeOriginOlderAttribute::AttribTypeModifiableBy
  include ::MakeOriginOlderAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
end

module MakeOriginOlderAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
end

module MakeOriginOlderAttribute::AttribTypeModifiableBy::GeneratedAssociationMethods
  extend ::T::Sig
end

module Marcel
  VERSION = ::T.let(nil, ::T.untyped)
end

class Marcel::MimeType
  BINARY = ::T.let(nil, ::T.untyped)
end

class Marcel::MimeType
  def self.extend(type, extensions: T.unsafe(nil), parents: T.unsafe(nil), magic: T.unsafe(nil)); end

  def self.for(pathname_or_io=T.unsafe(nil), name: T.unsafe(nil), extension: T.unsafe(nil), declared_type: T.unsafe(nil)); end
end

module Marcel
  extend ::T::Sig
end

Markdown = RedcarpetCompat

module Marshal
  extend ::T::Sig
  extend ::ActiveSupport::MarshalWithAutoloading
  def self.restore(*_); end
end

class MatchData
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def named_captures(); end
end

class MatchData
  extend ::T::Sig
end

class Math::DomainError
  extend ::T::Sig
end

module Math
  extend ::T::Sig
end

class Message
  include ::Message::GeneratedAssociationMethods
  def autosave_associated_records_for_packages(*args); end

  def autosave_associated_records_for_projects(*args); end

  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module Message::GeneratedAssociationMethods
  def build_packages(*args, &block); end

  def build_projects(*args, &block); end

  def build_user(*args, &block); end

  def create_packages(*args, &block); end

  def create_packages!(*args, &block); end

  def create_projects(*args, &block); end

  def create_projects!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def packages(); end

  def packages=(value); end

  def projects(); end

  def projects=(value); end

  def reload_packages(); end

  def reload_projects(); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module Message::GeneratedAssociationMethods
  extend ::T::Sig
end

module MetaControllerService
  extend ::T::Sig
end

module MetaTagHelper
  extend ::T::Sig
end

module Metaclass
  VERSION = ::T.let(nil, ::T.untyped)
end

module Metaclass::ObjectMethods
  extend ::T::Sig
end

module Metaclass
  extend ::T::Sig
end

class Method
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def ===(*_); end

  def [](*_); end

  def arity(); end

  def clone(); end

  def curry(*_); end

  def name(); end

  def original_name(); end

  def owner(); end

  def parameters(); end

  def receiver(); end

  def super_method(); end

  def unbind(); end
end

class Method
  extend ::T::Sig
end

module MethodSource
  VERSION = ::T.let(nil, ::T.untyped)
end

module MethodSource::CodeHelpers::IncompleteExpression
  GENERIC_REGEXPS = ::T.let(nil, ::T.untyped)
  RBX_ONLY_REGEXPS = ::T.let(nil, ::T.untyped)
end

module MethodSource::CodeHelpers::IncompleteExpression
  extend ::T::Sig
end

module MethodSource::CodeHelpers
  extend ::T::Sig
end

module MethodSource::MethodExtensions
  extend ::T::Sig
end

module MethodSource::ReeSourceLocation
  extend ::T::Sig
end

module MethodSource::SourceLocation::MethodExtensions
  extend ::T::Sig
end

module MethodSource::SourceLocation::ProcExtensions
  extend ::T::Sig
end

module MethodSource::SourceLocation::UnboundMethodExtensions
  extend ::T::Sig
end

module MethodSource::SourceLocation
  extend ::T::Sig
end

module MethodSource
  extend ::T::Sig
end

Methods = T::Private::Methods

module Middleware
  VERSION = ::T.let(nil, ::T.untyped)
end

class Middleware::Runner
  EMPTY_MIDDLEWARE = ::T.let(nil, ::T.untyped)
end

module Middleware
  extend ::T::Sig
end

module Mime
  ALL = ::T.let(nil, ::T.untyped)
  EXTENSION_LOOKUP = ::T.let(nil, ::T.untyped)
  LOOKUP = ::T.let(nil, ::T.untyped)
  SET = ::T.let(nil, ::T.untyped)
end

module Mime
  extend ::T::Sig
end

module MiniMime
  VERSION = ::T.let(nil, ::T.untyped)
end

module MiniMime::Configuration
  extend ::T::Sig
end

class MiniMime::Db
  LOCK = ::T.let(nil, ::T.untyped)
end

class MiniMime::Db::RandomAccessDb
  MAX_CACHED = ::T.let(nil, ::T.untyped)
end

class MiniMime::Info
  BINARY_ENCODINGS = ::T.let(nil, ::T.untyped)
end

module MiniMime
  extend ::T::Sig
end

module Minitest
end

MiniTest::Assertions = Minitest::Assertions

MiniTest::Expectations = Minitest::Expectations

MiniTest::Guard = Minitest::Guard

MiniTest::Reportable = Minitest::Reportable

MiniTest::Runnable = Minitest::Runnable

class Minitest::Spec
end

module Minitest::Spec::DSL
end

MiniTest::Spec::DSL::InstanceMethods = Minitest::Spec::DSL::InstanceMethods

module Minitest::Spec::DSL
end

class Minitest::Spec
end

MiniTest::Test = Minitest::Test

module Minitest
end

module Minitest
  ENCS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Minitest::Assertions
  E = ::T.let(nil, ::T.untyped)
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

module Minitest::Assertions
  extend ::T::Sig
end

class Minitest::BacktraceFilter
  MT_RE = ::T.let(nil, ::T.untyped)
end

module Minitest::Expectations
  extend ::T::Sig
end

module Minitest::Guard
  extend ::T::Sig
end

module Minitest::Parallel::Test::ClassMethods
  extend ::T::Sig
end

module Minitest::Parallel::Test
  extend ::T::Sig
end

module Minitest::Parallel
  extend ::T::Sig
end

module Minitest::RelativePosition
  INFO_PADDING = ::T.let(nil, ::T.untyped)
  MARK_SIZE = ::T.let(nil, ::T.untyped)
  TEST_PADDING = ::T.let(nil, ::T.untyped)
  TEST_SIZE = ::T.let(nil, ::T.untyped)
end

module Minitest::RelativePosition
  extend ::T::Sig
end

module Minitest::Reportable
  extend ::T::Sig
end

module Minitest::Reporters
  VERSION = ::T.let(nil, ::T.untyped)
end

module Minitest::Reporters::ANSI::Code
  extend ::T::Sig
end

module Minitest::Reporters::ANSI
  extend ::T::Sig
end

class Minitest::Reporters::DefaultReporter
  include ::Minitest::Reporters::ANSI::Code
  include ::ANSI::Code
  include ::ANSI::Constants
  include ::Minitest::RelativePosition
  def after_suite(suite); end

  def before_suite(suite); end

  def on_record(test); end

  def on_report(); end

  def on_start(); end

  def print_failure(test); end

  def record_failure(record); end

  def record_pass(record); end

  def record_skip(record); end
end

class Minitest::Reporters::DefaultReporter
end

class Minitest::Reporters::HtmlReporter
  def friendly_name(test); end

  def initialize(args=T.unsafe(nil)); end

  def passes(); end

  def percent_errors_failures(); end

  def percent_passes(); end

  def percent_skipps(); end

  def title(); end
end

class Minitest::Reporters::HtmlReporter
end

class Minitest::Reporters::JUnitReporter
  def get_relative_path(result); end

  def initialize(reports_dir=T.unsafe(nil), empty=T.unsafe(nil), options=T.unsafe(nil)); end
end

class Minitest::Reporters::JUnitReporter
end

class Minitest::Reporters::MeanTimeReporter
  def all_suite_times(); end

  def all_suite_times=(all_suite_times); end

  def reset_statistics!(); end
end

class Minitest::Reporters::MeanTimeReporter::InvalidOrder
end

class Minitest::Reporters::MeanTimeReporter::InvalidOrder
end

class Minitest::Reporters::MeanTimeReporter::InvalidSortColumn
end

class Minitest::Reporters::MeanTimeReporter::InvalidSortColumn
end

class Minitest::Reporters::MeanTimeReporter
  def self.reset_statistics!(); end
end

class Minitest::Reporters::ProgressReporter
  include ::Minitest::RelativePosition
  include ::Minitest::Reporters::ANSI::Code
  include ::ANSI::Code
  include ::ANSI::Constants
  PROGRESS_MARK = ::T.let(nil, ::T.untyped)
end

class Minitest::Reporters::ProgressReporter
end

class Minitest::Reporters::RubyMateReporter
  include ::Minitest::RelativePosition
  INFO_PADDING = ::T.let(nil, ::T.untyped)
end

class Minitest::Reporters::RubyMateReporter
end

class Minitest::Reporters::RubyMineReporter
end

class Minitest::Reporters::RubyMineReporter
end

module Minitest::Reporters
  extend ::T::Sig
end

class Minitest::Runnable
  SIGNALS = ::T.let(nil, ::T.untyped)
end

class Minitest::Spec
  TYPES = ::T.let(nil, ::T.untyped)
end

module Minitest::Spec::DSL
  TYPES = ::T.let(nil, ::T.untyped)
end

module Minitest::Spec::DSL::InstanceMethods
  extend ::T::Sig
end

module Minitest::Spec::DSL
  extend ::T::Sig
end

class Minitest::Test
  def run_with_hooks(*args); end

  def run_without_hooks(); end
  PASSTHROUGH_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  TEARDOWN_METHODS = ::T.let(nil, ::T.untyped)
end

module Minitest::Test::LifecycleHooks
  extend ::T::Sig
end

class Minitest::Unit
  VERSION = ::T.let(nil, ::T.untyped)
end

module Minitest
  extend ::T::Sig
end

module Mocha
  PRE_RUBY_V19 = ::T.let(nil, ::T.untyped)
  RUBY_V2_PLUS = ::T.let(nil, ::T.untyped)
end

module Mocha::API
  extend ::T::Sig
end

module Mocha::ArrayMethods
  extend ::T::Sig
end

class Mocha::BacktraceFilter
  LIB_DIRECTORY = ::T.let(nil, ::T.untyped)
end

class Mocha::Cardinality
  INFINITY = ::T.let(nil, ::T.untyped)
end

module Mocha::ClassMethods
  extend ::T::Sig
end

class Mocha::Configuration
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

module Mocha::DateMethods
  extend ::T::Sig
end

module Mocha::Debug
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module Mocha::Debug
  extend ::T::Sig
end

module Mocha::Detection::MiniTest
  extend ::T::Sig
end

module Mocha::Detection::TestUnit
  extend ::T::Sig
end

module Mocha::Detection
  extend ::T::Sig
end

module Mocha::HashMethods
  extend ::T::Sig
end

module Mocha::Hooks
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Adapter
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Nothing
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version13::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version13
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version140::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version140
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version141::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version141
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version142To172::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version142To172
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version200::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version200
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version201To222::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version201To222
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version2110To2111::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version2110To2111
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version2112To320::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version2112To320
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version230To2101::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::MiniTest::Version230To2101
  extend ::T::Sig
end

module Mocha::Integration::MiniTest
  extend ::T::Sig
end

module Mocha::Integration::MonkeyPatcher
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::Adapter
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::GemVersion200::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::GemVersion200
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::GemVersion201To202::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::GemVersion201To202
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::GemVersion203To220::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::GemVersion203To220
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::GemVersion230To250::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::GemVersion230To250
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::Nothing
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::RubyVersion185AndBelow::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::RubyVersion185AndBelow
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::RubyVersion186AndAbove::RunMethodPatch
  extend ::T::Sig
end

module Mocha::Integration::TestUnit::RubyVersion186AndAbove
  extend ::T::Sig
end

module Mocha::Integration::TestUnit
  extend ::T::Sig
end

module Mocha::Integration
  extend ::T::Sig
end

module Mocha::ModuleMethods
  extend ::T::Sig
end

module Mocha::ObjectMethods
  extend ::T::Sig
end

module Mocha::ParameterMatchers
  extend ::T::Sig
end

module Mocha::TimeMethods
  extend ::T::Sig
end

module Mocha
  extend ::T::Sig
end

module ModelHelper
  extend ::T::Sig
end

module ModelsAuthentication
  extend ::T::Sig
end

class Module
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def deprecate_constant(*_); end

  def undef_method(*_); end
  DELEGATION_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
  DELEGATION_RESERVED_METHOD_NAMES = ::T.let(nil, ::T.untyped)
  RUBY_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
end

module Module::Concerning
  extend ::T::Sig
end

class Module
  extend ::T::Sig
  def self.used_modules(); end
end

module Momentjs::Rails
  extend ::T::Sig
end

module Momentjs
  extend ::T::Sig
end

class Monitor
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def enter(); end

  def exit(); end

  def try_enter(); end
end

class Monitor
  extend ::T::Sig
end

module MonitorMixin
  def initialize(*args); end

  def mon_enter(); end

  def mon_exit(); end

  def mon_locked?(); end

  def mon_owned?(); end

  def mon_synchronize(); end

  def mon_try_enter(); end

  def new_cond(); end

  def synchronize(); end

  def try_mon_enter(); end
end

class MonitorMixin::ConditionVariable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def broadcast(); end

  def initialize(monitor); end

  def signal(); end

  def wait(timeout=T.unsafe(nil)); end

  def wait_until(); end

  def wait_while(); end
end

class MonitorMixin::ConditionVariable::Timeout
  extend ::T::Sig
end

class MonitorMixin::ConditionVariable
  extend ::T::Sig
end

module MonitorMixin
  extend ::T::Sig
  def self.extend_object(obj); end
end

module Mousetrap::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

module Mousetrap::Rails
  extend ::T::Sig
end

module Mousetrap
  extend ::T::Sig
end

class MultiRBTree
  include ::Enumerable
end

Mutex = Thread::Mutex

module Mutex_m
  extend ::T::Sig
end

module Mysql2
  VERSION = ::T.let(nil, ::T.untyped)
end

class Mysql2::Client
  include ::Peek::Mysql2::Timing
  COMPRESS = ::T.let(nil, ::T.untyped)
  CONNECT_ATTRS = ::T.let(nil, ::T.untyped)
  CONNECT_WITH_DB = ::T.let(nil, ::T.untyped)
  FOUND_ROWS = ::T.let(nil, ::T.untyped)
  IGNORE_SIGPIPE = ::T.let(nil, ::T.untyped)
  IGNORE_SPACE = ::T.let(nil, ::T.untyped)
  INTERACTIVE = ::T.let(nil, ::T.untyped)
  LOCAL_FILES = ::T.let(nil, ::T.untyped)
  LONG_FLAG = ::T.let(nil, ::T.untyped)
  LONG_PASSWORD = ::T.let(nil, ::T.untyped)
  MULTI_STATEMENTS = ::T.let(nil, ::T.untyped)
  NO_SCHEMA = ::T.let(nil, ::T.untyped)
  ODBC = ::T.let(nil, ::T.untyped)
  OPTION_MULTI_STATEMENTS_OFF = ::T.let(nil, ::T.untyped)
  OPTION_MULTI_STATEMENTS_ON = ::T.let(nil, ::T.untyped)
  PROTOCOL_41 = ::T.let(nil, ::T.untyped)
  PS_MULTI_RESULTS = ::T.let(nil, ::T.untyped)
  REMEMBER_OPTIONS = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  SECURE_CONNECTION = ::T.let(nil, ::T.untyped)
  SSL = ::T.let(nil, ::T.untyped)
  SSL_MODE_DISABLED = ::T.let(nil, ::T.untyped)
  SSL_MODE_PREFERRED = ::T.let(nil, ::T.untyped)
  SSL_MODE_REQUIRED = ::T.let(nil, ::T.untyped)
  SSL_MODE_VERIFY_CA = ::T.let(nil, ::T.untyped)
  SSL_MODE_VERIFY_IDENTITY = ::T.let(nil, ::T.untyped)
  SSL_VERIFY_SERVER_CERT = ::T.let(nil, ::T.untyped)
  TRANSACTIONS = ::T.let(nil, ::T.untyped)
end

class Mysql2::Error
  CODES = ::T.let(nil, ::T.untyped)
  ENCODE_OPTS = ::T.let(nil, ::T.untyped)
end

Mysql2::Util::TIMEOUT_ERROR_CLASS = Timeout::Error

module Mysql2::Util
  extend ::T::Sig
end

module Mysql2
  extend ::T::Sig
end

module NIO
  ENGINE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class NIO::ByteBuffer
  include ::Enumerable
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::UnderflowError
end

class NIO::ByteBuffer::UnderflowError
end

module NIO
  extend ::T::Sig
end

module NKF
  ASCII = ::T.let(nil, ::T.untyped)
  AUTO = ::T.let(nil, ::T.untyped)
  BINARY = ::T.let(nil, ::T.untyped)
  EUC = ::T.let(nil, ::T.untyped)
  JIS = ::T.let(nil, ::T.untyped)
  NKF_RELEASE_DATE = ::T.let(nil, ::T.untyped)
  NKF_VERSION = ::T.let(nil, ::T.untyped)
  NOCONV = ::T.let(nil, ::T.untyped)
  SJIS = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
  UTF16 = ::T.let(nil, ::T.untyped)
  UTF32 = ::T.let(nil, ::T.untyped)
  UTF8 = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module NKF
  extend ::T::Sig
  def self.guess(_); end

  def self.nkf(_, _1); end
end

class NameError
  include ::DidYouMean::Correctable
  def name(); end

  def receiver(); end
end

class NameError
  extend ::T::Sig
end

class Net::APOP
end

class Net::APOP
end

Net::APOPSession = Net::APOP

class Net::BufferedIO
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::BufferedIO
  extend ::T::Sig
end

class Net::HTTP
  def max_retries(); end

  def max_retries=(retries); end

  def max_version(); end

  def max_version=(max_version); end

  def min_version(); end

  def min_version=(min_version); end
  ENVIRONMENT_VARIABLE_IS_MULTIUSER_SAFE = ::T.let(nil, ::T.untyped)
end

class Net::HTTP::Copy
  extend ::T::Sig
end

class Net::HTTP::Delete
  extend ::T::Sig
end

class Net::HTTP::Get
  extend ::T::Sig
end

class Net::HTTP::Head
  extend ::T::Sig
end

class Net::HTTP::Lock
  extend ::T::Sig
end

class Net::HTTP::Mkcol
  extend ::T::Sig
end

class Net::HTTP::Move
  extend ::T::Sig
end

class Net::HTTP::Options
  extend ::T::Sig
end

class Net::HTTP::Patch
  extend ::T::Sig
end

class Net::HTTP::Post
  extend ::T::Sig
end

class Net::HTTP::Propfind
  extend ::T::Sig
end

class Net::HTTP::Proppatch
  extend ::T::Sig
end

module Net::HTTP::ProxyDelta
  extend ::T::Sig
end

Net::HTTP::ProxyMod = Net::HTTP::ProxyDelta

class Net::HTTP::Put
  extend ::T::Sig
end

class Net::HTTP::Trace
  extend ::T::Sig
end

class Net::HTTP::Unlock
  extend ::T::Sig
end

class Net::HTTP
  extend ::T::Sig
end

class Net::HTTPAccepted
  extend ::T::Sig
end

class Net::HTTPAlreadyReported
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPAlreadyReported
end

class Net::HTTPBadGateway
  extend ::T::Sig
end

class Net::HTTPBadRequest
  extend ::T::Sig
end

class Net::HTTPBadResponse
  extend ::T::Sig
end

Net::HTTPClientError::EXCEPTION_TYPE = Net::HTTPServerException

class Net::HTTPClientError
  extend ::T::Sig
end

Net::HTTPClientErrorCode = Net::HTTPClientError

class Net::HTTPConflict
  extend ::T::Sig
end

class Net::HTTPContinue
  extend ::T::Sig
end

class Net::HTTPCreated
  extend ::T::Sig
end

class Net::HTTPError
  extend ::T::Sig
end

module Net::HTTPExceptions
  extend ::T::Sig
end

class Net::HTTPExpectationFailed
  extend ::T::Sig
end

class Net::HTTPFailedDependency
  extend ::T::Sig
end

class Net::HTTPFatalError
  extend ::T::Sig
end

Net::HTTPFatalErrorCode = Net::HTTPClientError

class Net::HTTPForbidden
  extend ::T::Sig
end

class Net::HTTPFound
  extend ::T::Sig
end

class Net::HTTPGatewayTimeOut
  extend ::T::Sig
end

class Net::HTTPGenericRequest
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::HTTPGenericRequest::Chunker
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::HTTPGenericRequest::Chunker
  extend ::T::Sig
end

class Net::HTTPGenericRequest
  extend ::T::Sig
end

class Net::HTTPGone
  extend ::T::Sig
end

module Net::HTTPHeader
  extend ::T::Sig
end

class Net::HTTPHeaderSyntaxError
  extend ::T::Sig
end

class Net::HTTPIMUsed
  extend ::T::Sig
end

Net::HTTPInformation::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPInformation
  extend ::T::Sig
end

Net::HTTPInformationCode = Net::HTTPInformation

class Net::HTTPInsufficientStorage
  extend ::T::Sig
end

class Net::HTTPInternalServerError
  extend ::T::Sig
end

class Net::HTTPLengthRequired
  extend ::T::Sig
end

class Net::HTTPLocked
  extend ::T::Sig
end

class Net::HTTPLoopDetected
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPLoopDetected
end

class Net::HTTPMethodNotAllowed
  extend ::T::Sig
end

class Net::HTTPMisdirectedRequest
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPMisdirectedRequest
end

class Net::HTTPMovedPermanently
  extend ::T::Sig
end

Net::HTTPMovedTemporarily = Net::HTTPFound

class Net::HTTPMultiStatus
  extend ::T::Sig
end

Net::HTTPMultipleChoice = Net::HTTPMultipleChoices

class Net::HTTPMultipleChoices
  extend ::T::Sig
end

class Net::HTTPNetworkAuthenticationRequired
  extend ::T::Sig
end

class Net::HTTPNoContent
  extend ::T::Sig
end

class Net::HTTPNonAuthoritativeInformation
  extend ::T::Sig
end

class Net::HTTPNotAcceptable
  extend ::T::Sig
end

class Net::HTTPNotExtended
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPNotExtended
end

class Net::HTTPNotFound
  extend ::T::Sig
end

class Net::HTTPNotImplemented
  extend ::T::Sig
end

class Net::HTTPNotModified
  extend ::T::Sig
end

class Net::HTTPOK
  extend ::T::Sig
end

class Net::HTTPPartialContent
  extend ::T::Sig
end

class Net::HTTPPaymentRequired
  extend ::T::Sig
end

class Net::HTTPPermanentRedirect
  extend ::T::Sig
end

class Net::HTTPPreconditionFailed
  extend ::T::Sig
end

class Net::HTTPPreconditionRequired
  extend ::T::Sig
end

class Net::HTTPProcessing
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPProcessing
end

class Net::HTTPProxyAuthenticationRequired
  extend ::T::Sig
end

Net::HTTPRedirection::EXCEPTION_TYPE = Net::HTTPRetriableError

class Net::HTTPRedirection
  extend ::T::Sig
end

Net::HTTPRedirectionCode = Net::HTTPRedirection

class Net::HTTPRequest
  extend ::T::Sig
end

class Net::HTTPRequestEntityTooLarge
  extend ::T::Sig
end

class Net::HTTPRequestHeaderFieldsTooLarge
  extend ::T::Sig
end

class Net::HTTPRequestTimeOut
  extend ::T::Sig
end

Net::HTTPRequestURITooLarge = Net::HTTPRequestURITooLong

class Net::HTTPRequestURITooLong
  extend ::T::Sig
end

class Net::HTTPRequestedRangeNotSatisfiable
  extend ::T::Sig
end

class Net::HTTPResetContent
  extend ::T::Sig
end

Net::HTTPResponceReceiver = Net::HTTPResponse

class Net::HTTPResponse
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::HTTPResponse::Inflater
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::HTTPResponse::Inflater
  extend ::T::Sig
end

class Net::HTTPResponse
  extend ::T::Sig
end

Net::HTTPRetriableCode = Net::HTTPRedirection

class Net::HTTPRetriableError
  extend ::T::Sig
end

class Net::HTTPSeeOther
  extend ::T::Sig
end

Net::HTTPServerError::EXCEPTION_TYPE = Net::HTTPFatalError

class Net::HTTPServerError
  extend ::T::Sig
end

Net::HTTPServerErrorCode = Net::HTTPServerError

class Net::HTTPServerException
  extend ::T::Sig
end

class Net::HTTPServiceUnavailable
  extend ::T::Sig
end

Net::HTTPSession = Net::HTTP

Net::HTTPSuccess::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPSuccess
  extend ::T::Sig
end

Net::HTTPSuccessCode = Net::HTTPSuccess

class Net::HTTPSwitchProtocol
  extend ::T::Sig
end

class Net::HTTPTemporaryRedirect
  extend ::T::Sig
end

class Net::HTTPTooManyRequests
  extend ::T::Sig
end

class Net::HTTPUnauthorized
  extend ::T::Sig
end

class Net::HTTPUnavailableForLegalReasons
  extend ::T::Sig
end

Net::HTTPUnknownResponse::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPUnknownResponse
  extend ::T::Sig
end

class Net::HTTPUnprocessableEntity
  extend ::T::Sig
end

class Net::HTTPUnsupportedMediaType
  extend ::T::Sig
end

class Net::HTTPUpgradeRequired
  extend ::T::Sig
end

class Net::HTTPUseProxy
  extend ::T::Sig
end

class Net::HTTPVariantAlsoNegotiates
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPVariantAlsoNegotiates
end

class Net::HTTPVersionNotSupported
  extend ::T::Sig
end

class Net::IMAP
  def open_timeout(); end

  RESPONSE_ERRORS = ::T.let(nil, ::T.untyped)
end

class Net::IMAP::Address
  extend ::T::Sig
end

class Net::IMAP::Atom
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::IMAP::Atom
  extend ::T::Sig
end

class Net::IMAP::BadResponseError
  extend ::T::Sig
end

class Net::IMAP::BodyTypeAttachment
  extend ::T::Sig
end

class Net::IMAP::BodyTypeBasic
  extend ::T::Sig
end

class Net::IMAP::BodyTypeExtension
  extend ::T::Sig
end

class Net::IMAP::BodyTypeMessage
  extend ::T::Sig
end

class Net::IMAP::BodyTypeMultipart
  extend ::T::Sig
end

class Net::IMAP::BodyTypeText
  extend ::T::Sig
end

class Net::IMAP::ByeResponseError
  extend ::T::Sig
end

class Net::IMAP::ContentDisposition
  extend ::T::Sig
end

class Net::IMAP::ContinuationRequest
  extend ::T::Sig
end

class Net::IMAP::CramMD5Authenticator
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::IMAP::CramMD5Authenticator
  extend ::T::Sig
end

class Net::IMAP::DataFormatError
  extend ::T::Sig
end

class Net::IMAP::DigestMD5Authenticator
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::IMAP::DigestMD5Authenticator
  extend ::T::Sig
end

class Net::IMAP::Envelope
  extend ::T::Sig
end

class Net::IMAP::Error
  extend ::T::Sig
end

class Net::IMAP::FetchData
  extend ::T::Sig
end

class Net::IMAP::FlagCountError
  extend ::T::Sig
end

class Net::IMAP::Literal
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::IMAP::Literal
  extend ::T::Sig
end

class Net::IMAP::LoginAuthenticator
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::IMAP::LoginAuthenticator
  extend ::T::Sig
end

class Net::IMAP::MailboxACLItem
  extend ::T::Sig
end

class Net::IMAP::MailboxList
  extend ::T::Sig
end

class Net::IMAP::MailboxQuota
  extend ::T::Sig
end

class Net::IMAP::MailboxQuotaRoot
  extend ::T::Sig
end

class Net::IMAP::MessageSet
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::IMAP::MessageSet
  extend ::T::Sig
end

class Net::IMAP::NoResponseError
  extend ::T::Sig
end

module Net::IMAP::NumValidator
  extend ::T::Sig
  def self.ensure_mod_sequence_value(num); end

  def self.valid_mod_sequence_value?(num); end
end

class Net::IMAP::PlainAuthenticator
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::IMAP::PlainAuthenticator
  extend ::T::Sig
end

class Net::IMAP::QuotedString
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::IMAP::QuotedString
  extend ::T::Sig
end

class Net::IMAP::RawData
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::IMAP::RawData
  extend ::T::Sig
end

class Net::IMAP::ResponseCode
  extend ::T::Sig
end

class Net::IMAP::ResponseError
  extend ::T::Sig
end

class Net::IMAP::ResponseParseError
  extend ::T::Sig
end

class Net::IMAP::ResponseParser
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::IMAP::ResponseParser::Token
  extend ::T::Sig
end

class Net::IMAP::ResponseParser
  extend ::T::Sig
end

class Net::IMAP::ResponseText
  extend ::T::Sig
end

class Net::IMAP::StatusData
  extend ::T::Sig
end

class Net::IMAP::TaggedResponse
  extend ::T::Sig
end

class Net::IMAP::ThreadMember
  extend ::T::Sig
end

class Net::IMAP::UntaggedResponse
  extend ::T::Sig
end

class Net::IMAP
  extend ::T::Sig
end

class Net::InternetMessageIO
  extend ::T::Sig
end

Net::NetPrivate::HTTPRequest = Net::HTTPRequest

Net::NetPrivate::Socket = Net::InternetMessageIO

module Net::NetPrivate
  extend ::T::Sig
end

class Net::OpenTimeout
  extend ::T::Sig
end

Net::POP = Net::POP3

class Net::POP3
  def active?(); end

  def address(); end

  def apop?(); end

  def auth_only(account, password); end

  def delete_all(); end

  def disable_ssl(); end

  def each(&block); end

  def each_mail(&block); end

  def enable_ssl(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil), port=T.unsafe(nil)); end

  def finish(); end

  def initialize(addr, port=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def logging(msg); end

  def mails(); end

  def n_bytes(); end

  def n_mails(); end

  def open_timeout(); end

  def open_timeout=(open_timeout); end

  def port(); end

  def read_timeout(); end

  def read_timeout=(sec); end

  def reset(); end

  def set_all_uids(); end

  def set_debug_output(arg); end

  def start(account, password); end

  def started?(); end

  def use_ssl?(); end
  Revision = ::T.let(nil, ::T.untyped)
end

class Net::POP3
  def self.APOP(isapop); end

  def self.auth_only(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def self.certs(); end

  def self.create_ssl_params(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil)); end

  def self.default_pop3_port(); end

  def self.default_pop3s_port(); end

  def self.default_port(); end

  def self.delete_all(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.disable_ssl(); end

  def self.enable_ssl(*args); end

  def self.foreach(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.socket_type(); end

  def self.ssl_params(); end

  def self.start(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.use_ssl?(); end

  def self.verify(); end
end

class Net::POP3Command
  def apop(account, password); end

  def auth(account, password); end

  def dele(num); end

  def initialize(sock); end

  def list(); end

  def quit(); end

  def retr(num, &block); end

  def rset(); end

  def socket(); end

  def stat(); end

  def top(num, lines=T.unsafe(nil), &block); end

  def uidl(num=T.unsafe(nil)); end
end

class Net::POP3Command
end

Net::POP3Session = Net::POP3

class Net::POPAuthenticationError
end

class Net::POPAuthenticationError
end

class Net::POPBadResponse
end

class Net::POPBadResponse
end

class Net::POPError
end

class Net::POPError
end

class Net::POPMail
  def all(dest=T.unsafe(nil), &block); end

  def delete(); end

  def delete!(); end

  def deleted?(); end

  def header(dest=T.unsafe(nil)); end

  def initialize(num, len, pop, cmd); end

  def length(); end

  def mail(dest=T.unsafe(nil), &block); end

  def number(); end

  def pop(dest=T.unsafe(nil), &block); end

  def size(); end

  def top(lines, dest=T.unsafe(nil)); end

  def uid=(uid); end

  def uidl(); end

  def unique_id(); end
end

class Net::POPMail
end

Net::POPSession = Net::POP3

class Net::ProtoAuthError
  extend ::T::Sig
end

class Net::ProtoCommandError
  extend ::T::Sig
end

class Net::ProtoFatalError
  extend ::T::Sig
end

class Net::ProtoRetriableError
  extend ::T::Sig
end

class Net::ProtoServerError
  extend ::T::Sig
end

class Net::ProtoSyntaxError
  extend ::T::Sig
end

class Net::ProtoUnknownError
  extend ::T::Sig
end

Net::ProtocRetryError = Net::ProtoRetriableError

class Net::Protocol
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::Protocol
  extend ::T::Sig
end

class Net::ProtocolError
  extend ::T::Sig
end

class Net::ReadAdapter
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::ReadAdapter
  extend ::T::Sig
end

class Net::ReadTimeout
  extend ::T::Sig
end

class Net::SMTP::Response
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::SMTP::Response
  extend ::T::Sig
end

class Net::SMTP
  extend ::T::Sig
end

class Net::SMTPAuthenticationError
  extend ::T::Sig
end

module Net::SMTPError
  extend ::T::Sig
end

class Net::SMTPFatalError
  extend ::T::Sig
end

class Net::SMTPServerBusy
  extend ::T::Sig
end

Net::SMTPSession = Net::SMTP

class Net::SMTPSyntaxError
  extend ::T::Sig
end

class Net::SMTPUnknownError
  extend ::T::Sig
end

class Net::SMTPUnsupportedCommand
  extend ::T::Sig
end

module Net::WebMockHTTPResponse
  extend ::T::Sig
end

class Net::WriteAdapter
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Net::WriteAdapter
  extend ::T::Sig
end

module Net
  extend ::T::Sig
end

class NilClass
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::JSON::Ext::Generator::GeneratorMethods::NilClass
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def to_i(); end
end

class NilClass
  extend ::T::Sig
end

class NoMemoryError
  extend ::T::Sig
end

class NoMethodError
  include ::DidYouMean::Correctable
  def args(); end

  def private_call?(); end
end

class NoMethodError
  extend ::T::Sig
end

module Nokogiri
  LIBXML_ICONV_ENABLED = ::T.let(nil, ::T.untyped)
  LIBXML_PARSER_VERSION = ::T.let(nil, ::T.untyped)
  LIBXML_VERSION = ::T.let(nil, ::T.untyped)
  NOKOGIRI_LIBXML2_PATCHES = ::T.let(nil, ::T.untyped)
  NOKOGIRI_LIBXML2_PATH = ::T.let(nil, ::T.untyped)
  NOKOGIRI_LIBXSLT_PATCHES = ::T.let(nil, ::T.untyped)
  NOKOGIRI_LIBXSLT_PATH = ::T.let(nil, ::T.untyped)
  NOKOGIRI_USE_PACKAGED_LIBRARIES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_INFO = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Node
  ALLOW_COMBINATOR_ON_SELF = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

module Nokogiri::CSS
  extend ::T::Sig
end

module Nokogiri::Decorators::Slop
  XPATH_PREFIX = ::T.let(nil, ::T.untyped)
end

module Nokogiri::Decorators::Slop
  extend ::T::Sig
end

module Nokogiri::Decorators
  extend ::T::Sig
end

module Nokogiri::HTML
  NamedCharacters = ::T.let(nil, ::T.untyped)
end

class Nokogiri::HTML::ElementDescription
  ACTION_ATTR = ::T.let(nil, ::T.untyped)
  ALIGN_ATTR = ::T.let(nil, ::T.untyped)
  ALT_ATTR = ::T.let(nil, ::T.untyped)
  APPLET_ATTRS = ::T.let(nil, ::T.untyped)
  AREA_ATTRS = ::T.let(nil, ::T.untyped)
  ATTRS = ::T.let(nil, ::T.untyped)
  A_ATTRS = ::T.let(nil, ::T.untyped)
  BASEFONT_ATTRS = ::T.let(nil, ::T.untyped)
  BGCOLOR_ATTR = ::T.let(nil, ::T.untyped)
  BLOCK = ::T.let(nil, ::T.untyped)
  BLOCKLI_ELT = ::T.let(nil, ::T.untyped)
  BODY_ATTRS = ::T.let(nil, ::T.untyped)
  BODY_CONTENTS = ::T.let(nil, ::T.untyped)
  BODY_DEPR = ::T.let(nil, ::T.untyped)
  BUTTON_ATTRS = ::T.let(nil, ::T.untyped)
  CELLHALIGN = ::T.let(nil, ::T.untyped)
  CELLVALIGN = ::T.let(nil, ::T.untyped)
  CLEAR_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ELT = ::T.let(nil, ::T.untyped)
  COMPACT_ATTR = ::T.let(nil, ::T.untyped)
  COMPACT_ATTRS = ::T.let(nil, ::T.untyped)
  CONTENT_ATTR = ::T.let(nil, ::T.untyped)
  COREATTRS = ::T.let(nil, ::T.untyped)
  CORE_ATTRS = ::T.let(nil, ::T.untyped)
  CORE_I18N_ATTRS = ::T.let(nil, ::T.untyped)
  DIR_ATTR = ::T.let(nil, ::T.untyped)
  DL_CONTENTS = ::T.let(nil, ::T.untyped)
  DefaultDescriptions = ::T.let(nil, ::T.untyped)
  EDIT_ATTRS = ::T.let(nil, ::T.untyped)
  EMBED_ATTRS = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  EVENTS = ::T.let(nil, ::T.untyped)
  FIELDSET_CONTENTS = ::T.let(nil, ::T.untyped)
  FLOW = ::T.let(nil, ::T.untyped)
  FLOW_PARAM = ::T.let(nil, ::T.untyped)
  FONTSTYLE = ::T.let(nil, ::T.untyped)
  FONT_ATTRS = ::T.let(nil, ::T.untyped)
  FORMCTRL = ::T.let(nil, ::T.untyped)
  FORM_ATTRS = ::T.let(nil, ::T.untyped)
  FORM_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAMESET_ATTRS = ::T.let(nil, ::T.untyped)
  FRAMESET_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAME_ATTRS = ::T.let(nil, ::T.untyped)
  HEADING = ::T.let(nil, ::T.untyped)
  HEAD_ATTRS = ::T.let(nil, ::T.untyped)
  HEAD_CONTENTS = ::T.let(nil, ::T.untyped)
  HREF_ATTRS = ::T.let(nil, ::T.untyped)
  HR_DEPR = ::T.let(nil, ::T.untyped)
  HTML_ATTRS = ::T.let(nil, ::T.untyped)
  HTML_CDATA = ::T.let(nil, ::T.untyped)
  HTML_CONTENT = ::T.let(nil, ::T.untyped)
  HTML_FLOW = ::T.let(nil, ::T.untyped)
  HTML_INLINE = ::T.let(nil, ::T.untyped)
  HTML_PCDATA = ::T.let(nil, ::T.untyped)
  I18N = ::T.let(nil, ::T.untyped)
  I18N_ATTRS = ::T.let(nil, ::T.untyped)
  IFRAME_ATTRS = ::T.let(nil, ::T.untyped)
  IMG_ATTRS = ::T.let(nil, ::T.untyped)
  INLINE = ::T.let(nil, ::T.untyped)
  INLINE_P = ::T.let(nil, ::T.untyped)
  INPUT_ATTRS = ::T.let(nil, ::T.untyped)
  LABEL_ATTR = ::T.let(nil, ::T.untyped)
  LABEL_ATTRS = ::T.let(nil, ::T.untyped)
  LANGUAGE_ATTR = ::T.let(nil, ::T.untyped)
  LEGEND_ATTRS = ::T.let(nil, ::T.untyped)
  LINK_ATTRS = ::T.let(nil, ::T.untyped)
  LIST = ::T.let(nil, ::T.untyped)
  LI_ELT = ::T.let(nil, ::T.untyped)
  MAP_CONTENTS = ::T.let(nil, ::T.untyped)
  META_ATTRS = ::T.let(nil, ::T.untyped)
  MODIFIER = ::T.let(nil, ::T.untyped)
  NAME_ATTR = ::T.let(nil, ::T.untyped)
  NOFRAMES_CONTENT = ::T.let(nil, ::T.untyped)
  OBJECT_ATTRS = ::T.let(nil, ::T.untyped)
  OBJECT_CONTENTS = ::T.let(nil, ::T.untyped)
  OBJECT_DEPR = ::T.let(nil, ::T.untyped)
  OL_ATTRS = ::T.let(nil, ::T.untyped)
  OPTGROUP_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ELT = ::T.let(nil, ::T.untyped)
  PARAM_ATTRS = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PHRASE = ::T.let(nil, ::T.untyped)
  PRE_CONTENT = ::T.let(nil, ::T.untyped)
  PROMPT_ATTRS = ::T.let(nil, ::T.untyped)
  QUOTE_ATTRS = ::T.let(nil, ::T.untyped)
  ROWS_COLS_ATTR = ::T.let(nil, ::T.untyped)
  SCRIPT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_CONTENT = ::T.let(nil, ::T.untyped)
  SPECIAL = ::T.let(nil, ::T.untyped)
  SRC_ALT_ATTRS = ::T.let(nil, ::T.untyped)
  STYLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_CONTENTS = ::T.let(nil, ::T.untyped)
  TABLE_DEPR = ::T.let(nil, ::T.untyped)
  TALIGN_ATTRS = ::T.let(nil, ::T.untyped)
  TARGET_ATTR = ::T.let(nil, ::T.untyped)
  TEXTAREA_ATTRS = ::T.let(nil, ::T.untyped)
  TH_TD_ATTR = ::T.let(nil, ::T.untyped)
  TH_TD_DEPR = ::T.let(nil, ::T.untyped)
  TR_CONTENTS = ::T.let(nil, ::T.untyped)
  TR_ELT = ::T.let(nil, ::T.untyped)
  TYPE_ATTR = ::T.let(nil, ::T.untyped)
  UL_DEPR = ::T.let(nil, ::T.untyped)
  VERSION_ATTR = ::T.let(nil, ::T.untyped)
  WIDTH_ATTR = ::T.let(nil, ::T.untyped)
end

Nokogiri::HTML::ElementDescription::Desc = Struct::HTMLElementDescription

module Nokogiri::HTML::SAX
  extend ::T::Sig
end

module Nokogiri::HTML
  extend ::T::Sig
end

module Nokogiri::HTML5
  HTML_NAMESPACE = ::T.let(nil, ::T.untyped)
  MATHML_NAMESPACE = ::T.let(nil, ::T.untyped)
  SVG_NAMESPACE = ::T.let(nil, ::T.untyped)
  XLINK_NAMESPACE = ::T.let(nil, ::T.untyped)
  XMLNS_NAMESPACE = ::T.let(nil, ::T.untyped)
  XML_NAMESPACE = ::T.let(nil, ::T.untyped)
end

module Nokogiri::HTML5::Node
  extend ::T::Sig
end

module Nokogiri::HTML5
  extend ::T::Sig
end

module Nokogiri::XML
  XML_C14N_1_0 = ::T.let(nil, ::T.untyped)
  XML_C14N_1_1 = ::T.let(nil, ::T.untyped)
  XML_C14N_EXCLUSIVE_1_0 = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Document
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NCNAME_CHAR = ::T.let(nil, ::T.untyped)
  NCNAME_RE = ::T.let(nil, ::T.untyped)
  NCNAME_START_CHAR = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::ElementContent
  ELEMENT = ::T.let(nil, ::T.untyped)
  MULT = ::T.let(nil, ::T.untyped)
  ONCE = ::T.let(nil, ::T.untyped)
  OPT = ::T.let(nil, ::T.untyped)
  OR = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PLUS = ::T.let(nil, ::T.untyped)
  SEQ = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::EntityDecl
  EXTERNAL_GENERAL_PARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_GENERAL_UNPARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_GENERAL = ::T.let(nil, ::T.untyped)
  INTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_PREDEFINED = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Node
  include ::Nokogiri::HTML5::Node
  ATTRIBUTE_DECL = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_NODE = ::T.let(nil, ::T.untyped)
  CDATA_SECTION_NODE = ::T.let(nil, ::T.untyped)
  COMMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCB_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_FRAG_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_TYPE_NODE = ::T.let(nil, ::T.untyped)
  DTD_NODE = ::T.let(nil, ::T.untyped)
  ELEMENT_DECL = ::T.let(nil, ::T.untyped)
  ELEMENT_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_DECL = ::T.let(nil, ::T.untyped)
  ENTITY_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_REF_NODE = ::T.let(nil, ::T.untyped)
  HTML_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NAMESPACE_DECL = ::T.let(nil, ::T.untyped)
  NOTATION_NODE = ::T.let(nil, ::T.untyped)
  PI_NODE = ::T.let(nil, ::T.untyped)
  TEXT_NODE = ::T.let(nil, ::T.untyped)
  XINCLUDE_END = ::T.let(nil, ::T.untyped)
  XINCLUDE_START = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::NodeSet
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::PP::CharacterData
  extend ::T::Sig
end

module Nokogiri::XML::PP::Node
  extend ::T::Sig
end

module Nokogiri::XML::PP
  extend ::T::Sig
end

class Nokogiri::XML::ParseOptions
  COMPACT = ::T.let(nil, ::T.untyped)
  DEFAULT_HTML = ::T.let(nil, ::T.untyped)
  DEFAULT_XML = ::T.let(nil, ::T.untyped)
  DTDATTR = ::T.let(nil, ::T.untyped)
  DTDLOAD = ::T.let(nil, ::T.untyped)
  DTDVALID = ::T.let(nil, ::T.untyped)
  HUGE = ::T.let(nil, ::T.untyped)
  NOBASEFIX = ::T.let(nil, ::T.untyped)
  NOBLANKS = ::T.let(nil, ::T.untyped)
  NOCDATA = ::T.let(nil, ::T.untyped)
  NODICT = ::T.let(nil, ::T.untyped)
  NOENT = ::T.let(nil, ::T.untyped)
  NOERROR = ::T.let(nil, ::T.untyped)
  NONET = ::T.let(nil, ::T.untyped)
  NOWARNING = ::T.let(nil, ::T.untyped)
  NOXINCNODE = ::T.let(nil, ::T.untyped)
  NSCLEAN = ::T.let(nil, ::T.untyped)
  OLD10 = ::T.let(nil, ::T.untyped)
  PEDANTIC = ::T.let(nil, ::T.untyped)
  RECOVER = ::T.let(nil, ::T.untyped)
  SAX1 = ::T.let(nil, ::T.untyped)
  STRICT = ::T.let(nil, ::T.untyped)
  XINCLUDE = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Reader
  TYPE_ATTRIBUTE = ::T.let(nil, ::T.untyped)
  TYPE_CDATA = ::T.let(nil, ::T.untyped)
  TYPE_COMMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_FRAGMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_TYPE = ::T.let(nil, ::T.untyped)
  TYPE_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY_REFERENCE = ::T.let(nil, ::T.untyped)
  TYPE_NONE = ::T.let(nil, ::T.untyped)
  TYPE_NOTATION = ::T.let(nil, ::T.untyped)
  TYPE_PROCESSING_INSTRUCTION = ::T.let(nil, ::T.untyped)
  TYPE_SIGNIFICANT_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_TEXT = ::T.let(nil, ::T.untyped)
  TYPE_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_XML_DECLARATION = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::SAX::Parser
  ENCODINGS = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::SAX
  extend ::T::Sig
end

module Nokogiri::XML::Searchable
  LOOKS_LIKE_XPATH = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::Searchable
  extend ::T::Sig
end

module Nokogiri::XML
  extend ::T::Sig
end

module Nokogiri::XSLT
  extend ::T::Sig
end

module Nokogiri
  extend ::T::Sig
end

module Nokogumbo
  DEFAULT_MAX_ERRORS = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_TREE_DEPTH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Nokogumbo
  extend ::T::Sig
end

class NotImplementedError
  extend ::T::Sig
end

class Notification
  include ::Notification::GeneratedAssociationMethods
  def autosave_associated_records_for_subscriber(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module Notification::GeneratedAssociationMethods
  def reload_subscriber(); end

  def subscriber(); end

  def subscriber=(value); end
end

module Notification::GeneratedAssociationMethods
  extend ::T::Sig
end

class Notification::RssFeedItem
  include ::Notification::RssFeedItem::GeneratedAssociationMethods
end

module Notification::RssFeedItem::GeneratedAssociationMethods
end

module Notification::RssFeedItem::GeneratedAssociationMethods
  extend ::T::Sig
end

class Notification20170831143534
  include ::Notification20170831143534::GeneratedAssociationMethods
end

module Notification20170831143534::GeneratedAssociationMethods
end

module Notification20170831143534::GeneratedAssociationMethods
  extend ::T::Sig
end

class Numeric
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def finite?(); end

  def infinite?(); end

  def negative?(); end

  def positive?(); end

  EXABYTE = ::T.let(nil, ::T.untyped)
  GIGABYTE = ::T.let(nil, ::T.untyped)
  KILOBYTE = ::T.let(nil, ::T.untyped)
  MEGABYTE = ::T.let(nil, ::T.untyped)
  PETABYTE = ::T.let(nil, ::T.untyped)
  TERABYTE = ::T.let(nil, ::T.untyped)
end

class Numeric
  extend ::T::Sig
end

class OBSApi::MarkdownRenderer
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def default_url_options(); end

  def default_url_options=(val); end

  def default_url_options?(); end
end

class OBSApi::MarkdownRenderer
  def self._routes(); end

  def self.default_url_options=(val); end

  def self.default_url_options?(); end
end

module OBSApi
  extend ::T::Sig
end

module OBSEngine
  extend ::T::Sig
end

class Object
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::MaintenanceHelper
  include ::ValidationHelper
  include ::PP::ObjectMixin
  include ::JSON::Ext::Generator::GeneratorMethods::Object
  def dclone(); end

  def to_yaml(options=T.unsafe(nil)); end
  ARGF = ::T.let(nil, ::T.untyped)
  ARGV = ::T.let(nil, ::T.untyped)
  CONFIG = ::T.let(nil, ::T.untyped)
  CROSS_COMPILING = ::T.let(nil, ::T.untyped)
  ENV = ::T.let(nil, ::T.untyped)
  IS_SECTION = ::T.let(nil, ::T.untyped)
  RUBY_COPYRIGHT = ::T.let(nil, ::T.untyped)
  RUBY_DESCRIPTION = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE_VERSION = ::T.let(nil, ::T.untyped)
  RUBY_PATCHLEVEL = ::T.let(nil, ::T.untyped)
  RUBY_PLATFORM = ::T.let(nil, ::T.untyped)
  RUBY_RELEASE_DATE = ::T.let(nil, ::T.untyped)
  RUBY_REVISION = ::T.let(nil, ::T.untyped)
  RUBY_VERSION = ::T.let(nil, ::T.untyped)
  STATIC_TABLES = ::T.let(nil, ::T.untyped)
  STDERR = ::T.let(nil, ::T.untyped)
  STDIN = ::T.let(nil, ::T.untyped)
  STDOUT = ::T.let(nil, ::T.untyped)
  TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
  USED_CASSETTES = ::T.let(nil, ::T.untyped)
end

class Object
  extend ::T::Sig
  def self.yaml_tag(url); end
end

class ObjectSpace::WeakMap
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def [](_); end

  def []=(_, _1); end

  def each(&blk); end

  def each_key(); end

  def each_pair(); end

  def each_value(); end

  def key?(_); end

  def keys(); end

  def length(); end

  def size(); end

  def values(); end
end

class ObjectSpace::WeakMap
  extend ::T::Sig
end

module ObjectSpace
  extend ::T::Sig
  def self.count_objects(*_); end

  def self.define_finalizer(*_); end

  def self.garbage_collect(*_); end

  def self.undefine_finalizer(_); end
end

class ObsFactory::BasePresenter
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ObsFactory::Distribution
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def arch(*args, &block); end

  def model_name(*args, &block); end

  def openqa_group(*args, &block); end

  def openqa_version(*args, &block); end

  def root_project_name(*args, &block); end

  def staging_manager(*args, &block); end

  def url_suffix(*args, &block); end

  def validation_context(); end
end

class ObsFactory::Distribution
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class ObsFactory::DistributionStrategyFactory
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class ObsFactory::DistributionStrategyFactory
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class ObsFactory::ObsProjectPresenter
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ObsFactory::OpenqaJob
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def include_root_in_json(); end

  def include_root_in_json?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class ObsFactory::OpenqaJob
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end

  def self.include_root_in_json(); end

  def self.include_root_in_json=(val); end

  def self.include_root_in_json?(); end
end

class ObsFactory::OpenqaJobPresenter
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ObsFactory::StagingProject
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def include_root_in_json(); end

  def include_root_in_json?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class ObsFactory::StagingProject
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end

  def self.include_root_in_json(); end

  def self.include_root_in_json=(val); end

  def self.include_root_in_json?(); end
end

class ObsFactory::StagingProjectPresenter
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ObsFactory
  extend ::T::Sig
end

module Observable
  def add_observer(observer, func=T.unsafe(nil)); end

  def changed(state=T.unsafe(nil)); end

  def changed?(); end

  def count_observers(); end

  def delete_observer(observer); end

  def delete_observers(); end

  def notify_observers(*arg); end
end

module Observable
  extend ::T::Sig
end

class OpenSSL::ASN1::ASN1Data
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def indefinite_length(); end

  def indefinite_length=(indefinite_length); end
end

class OpenSSL::ASN1::ASN1Data
  extend ::T::Sig
end

class OpenSSL::ASN1::ASN1Error
  extend ::T::Sig
end

class OpenSSL::ASN1::BMPString
  extend ::T::Sig
end

class OpenSSL::ASN1::BitString
  extend ::T::Sig
end

class OpenSSL::ASN1::Boolean
  extend ::T::Sig
end

class OpenSSL::ASN1::Constructive
  extend ::T::Sig
end

class OpenSSL::ASN1::EndOfContent
  extend ::T::Sig
end

class OpenSSL::ASN1::Enumerated
  extend ::T::Sig
end

class OpenSSL::ASN1::GeneralString
  extend ::T::Sig
end

class OpenSSL::ASN1::GeneralizedTime
  extend ::T::Sig
end

class OpenSSL::ASN1::GraphicString
  extend ::T::Sig
end

class OpenSSL::ASN1::IA5String
  extend ::T::Sig
end

class OpenSSL::ASN1::ISO64String
  extend ::T::Sig
end

class OpenSSL::ASN1::Integer
  extend ::T::Sig
end

class OpenSSL::ASN1::Null
  extend ::T::Sig
end

class OpenSSL::ASN1::NumericString
  extend ::T::Sig
end

class OpenSSL::ASN1::ObjectId
  extend ::T::Sig
end

class OpenSSL::ASN1::OctetString
  extend ::T::Sig
end

class OpenSSL::ASN1::Primitive
  extend ::T::Sig
end

class OpenSSL::ASN1::PrintableString
  extend ::T::Sig
end

class OpenSSL::ASN1::Sequence
  extend ::T::Sig
end

class OpenSSL::ASN1::Set
  extend ::T::Sig
end

class OpenSSL::ASN1::T61String
  extend ::T::Sig
end

class OpenSSL::ASN1::UTCTime
  extend ::T::Sig
end

class OpenSSL::ASN1::UTF8String
  extend ::T::Sig
end

class OpenSSL::ASN1::UniversalString
  extend ::T::Sig
end

class OpenSSL::ASN1::VideotexString
  extend ::T::Sig
end

module OpenSSL::ASN1
  extend ::T::Sig
end

class OpenSSL::BN
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def +@(); end

  def -@(); end

  def /(_); end

  def negative?(); end
end

class OpenSSL::BN
  extend ::T::Sig
end

class OpenSSL::BNError
  extend ::T::Sig
end

module OpenSSL::Buffering
  extend ::T::Sig
end

class OpenSSL::Cipher
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::Cipher::AES
  extend ::T::Sig
end

class OpenSSL::Cipher::AES128
  extend ::T::Sig
end

class OpenSSL::Cipher::AES192
  extend ::T::Sig
end

class OpenSSL::Cipher::AES256
  extend ::T::Sig
end

class OpenSSL::Cipher::BF
  extend ::T::Sig
end

class OpenSSL::Cipher::CAST5
  extend ::T::Sig
end

class OpenSSL::Cipher::CipherError
  extend ::T::Sig
end

class OpenSSL::Cipher::DES
  extend ::T::Sig
end

class OpenSSL::Cipher::IDEA
  extend ::T::Sig
end

class OpenSSL::Cipher::RC2
  extend ::T::Sig
end

class OpenSSL::Cipher::RC4
  extend ::T::Sig
end

class OpenSSL::Cipher::RC5
  extend ::T::Sig
end

class OpenSSL::Cipher
  extend ::T::Sig
end

class OpenSSL::Config
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::Config
  extend ::T::Sig
end

class OpenSSL::ConfigError
  extend ::T::Sig
end

class OpenSSL::Digest
  extend ::T::Sig
end

class OpenSSL::Engine
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::Engine::EngineError
  extend ::T::Sig
end

class OpenSSL::Engine
  extend ::T::Sig
end

module OpenSSL::ExtConfig
  extend ::T::Sig
end

class OpenSSL::HMAC
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::HMAC
  extend ::T::Sig
end

class OpenSSL::HMACError
  extend ::T::Sig
end

module OpenSSL::KDF
end

class OpenSSL::KDF::KDFError
end

class OpenSSL::KDF::KDFError
end

module OpenSSL::KDF
  extend ::T::Sig
  def self.hkdf(*_); end

  def self.pbkdf2_hmac(*_); end

  def self.scrypt(*_); end
end

class OpenSSL::Netscape::SPKI
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::Netscape::SPKI
  extend ::T::Sig
end

class OpenSSL::Netscape::SPKIError
  extend ::T::Sig
end

module OpenSSL::Netscape
  extend ::T::Sig
end

class OpenSSL::OCSP::BasicResponse
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::OCSP::BasicResponse
  extend ::T::Sig
end

class OpenSSL::OCSP::CertificateId
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::OCSP::CertificateId
  extend ::T::Sig
end

class OpenSSL::OCSP::OCSPError
  extend ::T::Sig
end

class OpenSSL::OCSP::Request
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def signed?(); end
end

class OpenSSL::OCSP::Request
  extend ::T::Sig
end

class OpenSSL::OCSP::Response
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::OCSP::Response
  extend ::T::Sig
end

class OpenSSL::OCSP::SingleResponse
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::OCSP::SingleResponse
  extend ::T::Sig
end

module OpenSSL::OCSP
  extend ::T::Sig
end

class OpenSSL::OpenSSLError
  extend ::T::Sig
end

class OpenSSL::PKCS12
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::PKCS12::PKCS12Error
  extend ::T::Sig
end

class OpenSSL::PKCS12
  extend ::T::Sig
end

module OpenSSL::PKCS5
  extend ::T::Sig
end

class OpenSSL::PKCS7
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::PKCS7::PKCS7Error
  extend ::T::Sig
end

class OpenSSL::PKCS7::RecipientInfo
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::PKCS7::RecipientInfo
  extend ::T::Sig
end

OpenSSL::PKCS7::Signer = OpenSSL::PKCS7::SignerInfo

class OpenSSL::PKCS7::SignerInfo
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::PKCS7::SignerInfo
  extend ::T::Sig
end

class OpenSSL::PKCS7
  extend ::T::Sig
end

class OpenSSL::PKey::DH
  extend ::T::Sig
end

class OpenSSL::PKey::DHError
  extend ::T::Sig
end

class OpenSSL::PKey::DSA
  extend ::T::Sig
end

class OpenSSL::PKey::DSAError
  extend ::T::Sig
end

class OpenSSL::PKey::EC
  EXPLICIT_CURVE = ::T.let(nil, ::T.untyped)
end

class OpenSSL::PKey::EC::Group
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::PKey::EC::Group::Error
  extend ::T::Sig
end

class OpenSSL::PKey::EC::Group
  extend ::T::Sig
end

class OpenSSL::PKey::EC::Point
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def to_octet_string(_); end
end

class OpenSSL::PKey::EC::Point::Error
  extend ::T::Sig
end

class OpenSSL::PKey::EC::Point
  extend ::T::Sig
end

class OpenSSL::PKey::EC
  extend ::T::Sig
end

class OpenSSL::PKey::ECError
  extend ::T::Sig
end

class OpenSSL::PKey::PKey
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::PKey::PKey
  extend ::T::Sig
end

class OpenSSL::PKey::PKeyError
  extend ::T::Sig
end

class OpenSSL::PKey::RSA
  def sign_pss(*_); end

  def verify_pss(*_); end
end

class OpenSSL::PKey::RSA
  extend ::T::Sig
end

class OpenSSL::PKey::RSAError
  extend ::T::Sig
end

module OpenSSL::PKey
  extend ::T::Sig
end

class OpenSSL::Random::RandomError
  extend ::T::Sig
end

module OpenSSL::Random
  extend ::T::Sig
end

module OpenSSL::SSL
  OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_CRYPTOPRO_TLSEXT_BUG = ::T.let(nil, ::T.untyped)
  OP_LEGACY_SERVER_CONNECT = ::T.let(nil, ::T.untyped)
  OP_NO_ENCRYPT_THEN_MAC = ::T.let(nil, ::T.untyped)
  OP_NO_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_SAFARI_ECDHE_ECDSA_BUG = ::T.let(nil, ::T.untyped)
  OP_TLSEXT_PADDING = ::T.let(nil, ::T.untyped)
  SSL2_VERSION = ::T.let(nil, ::T.untyped)
  SSL3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_1_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_2_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_VERSION = ::T.let(nil, ::T.untyped)
end

class OpenSSL::SSL::SSLSocket
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def alpn_protocol(); end

  def tmp_key(); end
end

class OpenSSL::SSL::SSLSocket
  extend ::T::Sig
end

module OpenSSL::SSL::SocketForwarder
  extend ::T::Sig
end

module OpenSSL::SSL
  extend ::T::Sig
end

module OpenSSL::X509
  V_FLAG_NO_CHECK_TIME = ::T.let(nil, ::T.untyped)
  V_FLAG_TRUSTED_FIRST = ::T.let(nil, ::T.untyped)
end

class OpenSSL::X509::Attribute
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def ==(other); end
end

class OpenSSL::X509::Attribute
  extend ::T::Sig
end

class OpenSSL::X509::AttributeError
  extend ::T::Sig
end

class OpenSSL::X509::CRL
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def ==(other); end
end

class OpenSSL::X509::CRL
  extend ::T::Sig
end

class OpenSSL::X509::CRLError
  extend ::T::Sig
end

class OpenSSL::X509::Certificate
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::X509::Certificate
  extend ::T::Sig
end

class OpenSSL::X509::CertificateError
  extend ::T::Sig
end

class OpenSSL::X509::Extension
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def ==(other); end
end

class OpenSSL::X509::Extension
  extend ::T::Sig
end

class OpenSSL::X509::ExtensionError
  extend ::T::Sig
end

class OpenSSL::X509::ExtensionFactory
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::X509::ExtensionFactory
  extend ::T::Sig
end

class OpenSSL::X509::Name
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def to_utf8(); end
end

module OpenSSL::X509::Name::RFC2253DN
  extend ::T::Sig
end

class OpenSSL::X509::Name
  extend ::T::Sig
end

class OpenSSL::X509::NameError
  extend ::T::Sig
end

class OpenSSL::X509::Request
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def ==(other); end
end

class OpenSSL::X509::Request
  extend ::T::Sig
end

class OpenSSL::X509::RequestError
  extend ::T::Sig
end

class OpenSSL::X509::Revoked
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def ==(other); end

  def to_der(); end
end

class OpenSSL::X509::Revoked
  extend ::T::Sig
end

class OpenSSL::X509::RevokedError
  extend ::T::Sig
end

class OpenSSL::X509::Store
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::X509::Store
  extend ::T::Sig
end

class OpenSSL::X509::StoreContext
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenSSL::X509::StoreContext
  extend ::T::Sig
end

class OpenSSL::X509::StoreError
  extend ::T::Sig
end

module OpenSSL::X509
  extend ::T::Sig
end

module OpenSSL
  extend ::T::Sig
  def self.fips_mode(); end
end

class OpenStruct
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class OpenStruct
  extend ::T::Sig
end

module OpenURI
  Options = ::T.let(nil, ::T.untyped)
end

class OpenURI::Buffer
  def <<(str); end

  def io(); end

  def size(); end
  StringMax = ::T.let(nil, ::T.untyped)
end

class OpenURI::Buffer
end

class OpenURI::HTTPError
  def initialize(message, io); end

  def io(); end
end

class OpenURI::HTTPError
end

class OpenURI::HTTPRedirect
  def initialize(message, io, uri); end

  def uri(); end
end

class OpenURI::HTTPRedirect
end

module OpenURI::Meta
  def base_uri(); end

  def base_uri=(base_uri); end

  def charset(); end

  def content_encoding(); end

  def content_type(); end

  def content_type_parse(); end

  def last_modified(); end

  def meta(); end

  def meta_add_field(name, value); end

  def meta_add_field2(name, values); end

  def meta_setup_encoding(); end

  def metas(); end

  def status(); end

  def status=(status); end
  RE_LWS = ::T.let(nil, ::T.untyped)
  RE_PARAMETERS = ::T.let(nil, ::T.untyped)
  RE_QUOTED_STRING = ::T.let(nil, ::T.untyped)
  RE_TOKEN = ::T.let(nil, ::T.untyped)
end

module OpenURI::Meta
  extend ::T::Sig
  def self.init(obj, src=T.unsafe(nil)); end
end

module OpenURI::OpenRead
  def open(*rest, &block); end

  def read(options=T.unsafe(nil)); end
end

module OpenURI::OpenRead
  extend ::T::Sig
end

module OpenURI
  extend ::T::Sig
  def self.check_options(options); end

  def self.open_http(buf, target, proxy, options); end

  def self.open_loop(uri, options); end

  def self.open_uri(name, *rest); end

  def self.redirectable?(uri1, uri2); end

  def self.scan_open_optional_arguments(*rest); end
end

OptParse = OptionParser

class OptionParser
  def abort(mesg=T.unsafe(nil)); end

  def accept(*args, &blk); end

  def add_officious(); end

  def banner(); end

  def banner=(banner); end

  def base(); end

  def candidate(word); end

  def compsys(to, name=T.unsafe(nil)); end

  def def_head_option(*opts, &block); end

  def def_option(*opts, &block); end

  def def_tail_option(*opts, &block); end

  def default_argv(); end

  def default_argv=(default_argv); end

  def define(*opts, &block); end

  def define_head(*opts, &block); end

  def define_tail(*opts, &block); end

  def environment(env=T.unsafe(nil)); end

  def getopts(*args); end

  def help(); end

  def inc(*args); end

  def initialize(banner=T.unsafe(nil), width=T.unsafe(nil), indent=T.unsafe(nil)); end

  def load(filename=T.unsafe(nil)); end

  def make_switch(opts, block=T.unsafe(nil)); end

  def new(); end

  def on(*opts, &block); end

  def on_head(*opts, &block); end

  def on_tail(*opts, &block); end

  def order(*argv, into: T.unsafe(nil), &nonopt); end

  def order!(argv=T.unsafe(nil), into: T.unsafe(nil), &nonopt); end

  def parse(*argv, into: T.unsafe(nil)); end

  def parse!(argv=T.unsafe(nil), into: T.unsafe(nil)); end

  def permute(*argv, into: T.unsafe(nil)); end

  def permute!(argv=T.unsafe(nil), into: T.unsafe(nil)); end

  def program_name(); end

  def program_name=(program_name); end

  def reject(*args, &blk); end

  def release(); end

  def release=(release); end

  def remove(); end

  def separator(string); end

  def set_banner(_); end

  def set_program_name(_); end

  def set_summary_indent(_); end

  def set_summary_width(_); end

  def summarize(to=T.unsafe(nil), width=T.unsafe(nil), max=T.unsafe(nil), indent=T.unsafe(nil), &blk); end

  def summary_indent(); end

  def summary_indent=(summary_indent); end

  def summary_width(); end

  def summary_width=(summary_width); end

  def terminate(arg=T.unsafe(nil)); end

  def to_a(); end

  def top(); end

  def ver(); end

  def version(); end

  def version=(version); end

  def warn(mesg=T.unsafe(nil)); end
  ArgumentStyle = ::T.let(nil, ::T.untyped)
  COMPSYS_HEADER = ::T.let(nil, ::T.untyped)
  DecimalInteger = ::T.let(nil, ::T.untyped)
  DecimalNumeric = ::T.let(nil, ::T.untyped)
  DefaultList = ::T.let(nil, ::T.untyped)
  NO_ARGUMENT = ::T.let(nil, ::T.untyped)
  NoArgument = ::T.let(nil, ::T.untyped)
  OPTIONAL_ARGUMENT = ::T.let(nil, ::T.untyped)
  OctalInteger = ::T.let(nil, ::T.untyped)
  Officious = ::T.let(nil, ::T.untyped)
  OptionalArgument = ::T.let(nil, ::T.untyped)
  REQUIRED_ARGUMENT = ::T.let(nil, ::T.untyped)
  RequiredArgument = ::T.let(nil, ::T.untyped)
  SPLAT_PROC = ::T.let(nil, ::T.untyped)
end

module OptionParser::Acceptables
  DecimalInteger = ::T.let(nil, ::T.untyped)
  DecimalNumeric = ::T.let(nil, ::T.untyped)
  OctalInteger = ::T.let(nil, ::T.untyped)
end

module OptionParser::Acceptables
  extend ::T::Sig
end

class OptionParser::AmbiguousArgument
  Reason = ::T.let(nil, ::T.untyped)
end

class OptionParser::AmbiguousArgument
end

class OptionParser::AmbiguousOption
  Reason = ::T.let(nil, ::T.untyped)
end

class OptionParser::AmbiguousOption
end

module OptionParser::Arguable
  def getopts(*args); end

  def initialize(*args); end

  def options(); end

  def options=(opt); end

  def order!(&blk); end

  def parse!(); end

  def permute!(); end
end

module OptionParser::Arguable
  extend ::T::Sig
  def self.extend_object(obj); end
end

class OptionParser::CompletingHash
  include ::OptionParser::Completion
  def match(key); end
end

class OptionParser::CompletingHash
end

module OptionParser::Completion
  def candidate(key, icase=T.unsafe(nil), pat=T.unsafe(nil)); end

  def complete(key, icase=T.unsafe(nil), pat=T.unsafe(nil)); end

  def convert(opt=T.unsafe(nil), val=T.unsafe(nil), *_); end
end

module OptionParser::Completion
  extend ::T::Sig
  def self.candidate(key, icase=T.unsafe(nil), pat=T.unsafe(nil), &block); end

  def self.regexp(key, icase); end
end

class OptionParser::InvalidArgument
  Reason = ::T.let(nil, ::T.untyped)
end

class OptionParser::InvalidArgument
end

class OptionParser::InvalidOption
  Reason = ::T.let(nil, ::T.untyped)
end

class OptionParser::InvalidOption
end

class OptionParser::List
  def accept(t, pat=T.unsafe(nil), &block); end

  def add_banner(to); end

  def append(*args); end

  def atype(); end

  def complete(id, opt, icase=T.unsafe(nil), *pat, &block); end

  def compsys(*args, &block); end

  def each_option(&block); end

  def list(); end

  def long(); end

  def prepend(*args); end

  def reject(t); end

  def search(id, key); end

  def short(); end

  def summarize(*args, &block); end
end

class OptionParser::List
end

class OptionParser::MissingArgument
  Reason = ::T.let(nil, ::T.untyped)
end

class OptionParser::MissingArgument
end

class OptionParser::NeedlessArgument
  Reason = ::T.let(nil, ::T.untyped)
end

class OptionParser::NeedlessArgument
end

class OptionParser::OptionMap
  include ::OptionParser::Completion
end

class OptionParser::OptionMap
end

class OptionParser::ParseError
  def args(); end

  def initialize(*args); end

  def reason(); end

  def reason=(reason); end

  def recover(argv); end

  def set_backtrace(array); end

  def set_option(opt, eq); end
  Reason = ::T.let(nil, ::T.untyped)
end

class OptionParser::ParseError
  def self.filter_backtrace(array); end
end

class OptionParser::Switch
  def add_banner(to); end

  def arg(); end

  def block(); end

  def compsys(sdone, ldone); end

  def conv(); end

  def desc(); end

  def initialize(pattern=T.unsafe(nil), conv=T.unsafe(nil), short=T.unsafe(nil), long=T.unsafe(nil), arg=T.unsafe(nil), desc=T.unsafe(nil), block=T.unsafe(nil)); end

  def long(); end

  def match_nonswitch?(str); end

  def pattern(); end

  def short(); end

  def summarize(sdone=T.unsafe(nil), ldone=T.unsafe(nil), width=T.unsafe(nil), max=T.unsafe(nil), indent=T.unsafe(nil)); end

  def switch_name(); end
end

class OptionParser::Switch::NoArgument
  def parse(arg, argv); end
end

class OptionParser::Switch::NoArgument
  def self.incompatible_argument_styles(*_); end
end

class OptionParser::Switch::OptionalArgument
  def parse(arg, argv, &error); end
end

class OptionParser::Switch::OptionalArgument
end

class OptionParser::Switch::PlacedArgument
  def parse(arg, argv, &error); end
end

class OptionParser::Switch::PlacedArgument
end

class OptionParser::Switch::RequiredArgument
  def parse(arg, argv); end
end

class OptionParser::Switch::RequiredArgument
end

class OptionParser::Switch
  def self.guess(arg); end

  def self.incompatible_argument_styles(arg, t); end

  def self.pattern(); end
end

class OptionParser
  def self.accept(*args, &blk); end

  def self.getopts(*args); end

  def self.inc(arg, default=T.unsafe(nil)); end

  def self.reject(*args, &blk); end

  def self.terminate(arg=T.unsafe(nil)); end

  def self.top(); end

  def self.with(*args, &block); end
end

class Owner
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def filter(); end

  def filter=(filter); end

  def groups(); end

  def groups=(groups); end

  def model_name(*args, &block); end

  def package(); end

  def package=(package); end

  def project(); end

  def project=(project); end

  def rootproject(); end

  def rootproject=(rootproject); end

  def users(); end

  def users=(users); end

  def validation_context(); end
end

class Owner
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

module OwnerSearch
  extend ::T::Sig
end

module PP::ObjectMixin
  extend ::T::Sig
end

module PP::PPMethods
  extend ::T::Sig
end

class PP::SingleLine
  extend ::T::Sig
end

class PP
  extend ::T::Sig
end

class Package
  include ::Package::GeneratedAssociationMethods
  def after_add_for_attribs(); end

  def after_add_for_attribs=(val); end

  def after_add_for_attribs?(); end

  def after_add_for_binary_releases(); end

  def after_add_for_binary_releases=(val); end

  def after_add_for_binary_releases?(); end

  def after_add_for_channels(); end

  def after_add_for_channels=(val); end

  def after_add_for_channels?(); end

  def after_add_for_comments(); end

  def after_add_for_comments=(val); end

  def after_add_for_comments?(); end

  def after_add_for_develpackages(); end

  def after_add_for_develpackages=(val); end

  def after_add_for_develpackages?(); end

  def after_add_for_flags(); end

  def after_add_for_flags=(val); end

  def after_add_for_flags?(); end

  def after_add_for_issues(); end

  def after_add_for_issues=(val); end

  def after_add_for_issues?(); end

  def after_add_for_messages(); end

  def after_add_for_messages=(val); end

  def after_add_for_messages?(); end

  def after_add_for_package_issues(); end

  def after_add_for_package_issues=(val); end

  def after_add_for_package_issues?(); end

  def after_add_for_package_kinds(); end

  def after_add_for_package_kinds=(val); end

  def after_add_for_package_kinds?(); end

  def after_add_for_products(); end

  def after_add_for_products=(val); end

  def after_add_for_products?(); end

  def after_add_for_ratings(); end

  def after_add_for_ratings=(val); end

  def after_add_for_ratings?(); end

  def after_add_for_relationships(); end

  def after_add_for_relationships=(val); end

  def after_add_for_relationships?(); end

  def after_add_for_reviews(); end

  def after_add_for_reviews=(val); end

  def after_add_for_reviews?(); end

  def after_add_for_target_of_bs_request_actions(); end

  def after_add_for_target_of_bs_request_actions=(val); end

  def after_add_for_target_of_bs_request_actions?(); end

  def after_add_for_target_of_bs_requests(); end

  def after_add_for_target_of_bs_requests=(val); end

  def after_add_for_target_of_bs_requests?(); end

  def after_add_for_tokens(); end

  def after_add_for_tokens=(val); end

  def after_add_for_tokens?(); end

  def after_remove_for_attribs(); end

  def after_remove_for_attribs=(val); end

  def after_remove_for_attribs?(); end

  def after_remove_for_binary_releases(); end

  def after_remove_for_binary_releases=(val); end

  def after_remove_for_binary_releases?(); end

  def after_remove_for_channels(); end

  def after_remove_for_channels=(val); end

  def after_remove_for_channels?(); end

  def after_remove_for_comments(); end

  def after_remove_for_comments=(val); end

  def after_remove_for_comments?(); end

  def after_remove_for_develpackages(); end

  def after_remove_for_develpackages=(val); end

  def after_remove_for_develpackages?(); end

  def after_remove_for_flags(); end

  def after_remove_for_flags=(val); end

  def after_remove_for_flags?(); end

  def after_remove_for_issues(); end

  def after_remove_for_issues=(val); end

  def after_remove_for_issues?(); end

  def after_remove_for_messages(); end

  def after_remove_for_messages=(val); end

  def after_remove_for_messages?(); end

  def after_remove_for_package_issues(); end

  def after_remove_for_package_issues=(val); end

  def after_remove_for_package_issues?(); end

  def after_remove_for_package_kinds(); end

  def after_remove_for_package_kinds=(val); end

  def after_remove_for_package_kinds?(); end

  def after_remove_for_products(); end

  def after_remove_for_products=(val); end

  def after_remove_for_products?(); end

  def after_remove_for_ratings(); end

  def after_remove_for_ratings=(val); end

  def after_remove_for_ratings?(); end

  def after_remove_for_relationships(); end

  def after_remove_for_relationships=(val); end

  def after_remove_for_relationships?(); end

  def after_remove_for_reviews(); end

  def after_remove_for_reviews=(val); end

  def after_remove_for_reviews?(); end

  def after_remove_for_target_of_bs_request_actions(); end

  def after_remove_for_target_of_bs_request_actions=(val); end

  def after_remove_for_target_of_bs_request_actions?(); end

  def after_remove_for_target_of_bs_requests(); end

  def after_remove_for_target_of_bs_requests=(val); end

  def after_remove_for_target_of_bs_requests?(); end

  def after_remove_for_tokens(); end

  def after_remove_for_tokens=(val); end

  def after_remove_for_tokens?(); end

  def autosave_associated_records_for_attribs(*args); end

  def autosave_associated_records_for_backend_package(); end

  def autosave_associated_records_for_binary_releases(*args); end

  def autosave_associated_records_for_channels(*args); end

  def autosave_associated_records_for_comments(*args); end

  def autosave_associated_records_for_develpackage(*args); end

  def autosave_associated_records_for_develpackages(*args); end

  def autosave_associated_records_for_flags(*args); end

  def autosave_associated_records_for_issues(*args); end

  def autosave_associated_records_for_kiwi_image(*args); end

  def autosave_associated_records_for_messages(*args); end

  def autosave_associated_records_for_package_issues(*args); end

  def autosave_associated_records_for_package_kinds(*args); end

  def autosave_associated_records_for_products(*args); end

  def autosave_associated_records_for_project(*args); end

  def autosave_associated_records_for_ratings(*args); end

  def autosave_associated_records_for_relationships(*args); end

  def autosave_associated_records_for_reviews(*args); end

  def autosave_associated_records_for_target_of_bs_request_actions(*args); end

  def autosave_associated_records_for_target_of_bs_requests(*args); end

  def autosave_associated_records_for_token(); end

  def autosave_associated_records_for_tokens(*args); end

  def before_add_for_attribs(); end

  def before_add_for_attribs=(val); end

  def before_add_for_attribs?(); end

  def before_add_for_binary_releases(); end

  def before_add_for_binary_releases=(val); end

  def before_add_for_binary_releases?(); end

  def before_add_for_channels(); end

  def before_add_for_channels=(val); end

  def before_add_for_channels?(); end

  def before_add_for_comments(); end

  def before_add_for_comments=(val); end

  def before_add_for_comments?(); end

  def before_add_for_develpackages(); end

  def before_add_for_develpackages=(val); end

  def before_add_for_develpackages?(); end

  def before_add_for_flags(); end

  def before_add_for_flags=(val); end

  def before_add_for_flags?(); end

  def before_add_for_issues(); end

  def before_add_for_issues=(val); end

  def before_add_for_issues?(); end

  def before_add_for_messages(); end

  def before_add_for_messages=(val); end

  def before_add_for_messages?(); end

  def before_add_for_package_issues(); end

  def before_add_for_package_issues=(val); end

  def before_add_for_package_issues?(); end

  def before_add_for_package_kinds(); end

  def before_add_for_package_kinds=(val); end

  def before_add_for_package_kinds?(); end

  def before_add_for_products(); end

  def before_add_for_products=(val); end

  def before_add_for_products?(); end

  def before_add_for_ratings(); end

  def before_add_for_ratings=(val); end

  def before_add_for_ratings?(); end

  def before_add_for_relationships(); end

  def before_add_for_relationships=(val); end

  def before_add_for_relationships?(); end

  def before_add_for_reviews(); end

  def before_add_for_reviews=(val); end

  def before_add_for_reviews?(); end

  def before_add_for_target_of_bs_request_actions(); end

  def before_add_for_target_of_bs_request_actions=(val); end

  def before_add_for_target_of_bs_request_actions?(); end

  def before_add_for_target_of_bs_requests(); end

  def before_add_for_target_of_bs_requests=(val); end

  def before_add_for_target_of_bs_requests?(); end

  def before_add_for_tokens(); end

  def before_add_for_tokens=(val); end

  def before_add_for_tokens?(); end

  def before_remove_for_attribs(); end

  def before_remove_for_attribs=(val); end

  def before_remove_for_attribs?(); end

  def before_remove_for_binary_releases(); end

  def before_remove_for_binary_releases=(val); end

  def before_remove_for_binary_releases?(); end

  def before_remove_for_channels(); end

  def before_remove_for_channels=(val); end

  def before_remove_for_channels?(); end

  def before_remove_for_comments(); end

  def before_remove_for_comments=(val); end

  def before_remove_for_comments?(); end

  def before_remove_for_develpackages(); end

  def before_remove_for_develpackages=(val); end

  def before_remove_for_develpackages?(); end

  def before_remove_for_flags(); end

  def before_remove_for_flags=(val); end

  def before_remove_for_flags?(); end

  def before_remove_for_issues(); end

  def before_remove_for_issues=(val); end

  def before_remove_for_issues?(); end

  def before_remove_for_messages(); end

  def before_remove_for_messages=(val); end

  def before_remove_for_messages?(); end

  def before_remove_for_package_issues(); end

  def before_remove_for_package_issues=(val); end

  def before_remove_for_package_issues?(); end

  def before_remove_for_package_kinds(); end

  def before_remove_for_package_kinds=(val); end

  def before_remove_for_package_kinds?(); end

  def before_remove_for_products(); end

  def before_remove_for_products=(val); end

  def before_remove_for_products?(); end

  def before_remove_for_ratings(); end

  def before_remove_for_ratings=(val); end

  def before_remove_for_ratings?(); end

  def before_remove_for_relationships(); end

  def before_remove_for_relationships=(val); end

  def before_remove_for_relationships?(); end

  def before_remove_for_reviews(); end

  def before_remove_for_reviews=(val); end

  def before_remove_for_reviews?(); end

  def before_remove_for_target_of_bs_request_actions(); end

  def before_remove_for_target_of_bs_request_actions=(val); end

  def before_remove_for_target_of_bs_request_actions?(); end

  def before_remove_for_target_of_bs_requests(); end

  def before_remove_for_target_of_bs_requests=(val); end

  def before_remove_for_target_of_bs_requests?(); end

  def before_remove_for_tokens(); end

  def before_remove_for_tokens=(val); end

  def before_remove_for_tokens?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def get_flags(flag_type, repository_names, architectures); end

  def validate_associated_records_for_attribs(*args); end

  def validate_associated_records_for_binary_releases(*args); end

  def validate_associated_records_for_channels(*args); end

  def validate_associated_records_for_comments(*args); end

  def validate_associated_records_for_develpackages(*args); end

  def validate_associated_records_for_flags(*args); end

  def validate_associated_records_for_issues(*args); end

  def validate_associated_records_for_kiwi_image(*args); end

  def validate_associated_records_for_messages(*args); end

  def validate_associated_records_for_package_issues(*args); end

  def validate_associated_records_for_package_kinds(*args); end

  def validate_associated_records_for_products(*args); end

  def validate_associated_records_for_ratings(*args); end

  def validate_associated_records_for_relationships(*args); end

  def validate_associated_records_for_reviews(*args); end

  def validate_associated_records_for_target_of_bs_request_actions(*args); end

  def validate_associated_records_for_target_of_bs_requests(*args); end

  def validate_associated_records_for_tokens(*args); end
end

module Package::Errors
  extend ::T::Sig
end

module Package::GeneratedAssociationMethods
  def attrib_ids(); end

  def attrib_ids=(ids); end

  def attribs(); end

  def attribs=(value); end

  def backend_package(); end

  def backend_package=(value); end

  def binary_release_ids(); end

  def binary_release_ids=(ids); end

  def binary_releases(); end

  def binary_releases=(value); end

  def build_backend_package(*args, &block); end

  def build_develpackage(*args, &block); end

  def build_kiwi_image(*args, &block); end

  def build_project(*args, &block); end

  def build_token(*args, &block); end

  def channel_ids(); end

  def channel_ids=(ids); end

  def channels(); end

  def channels=(value); end

  def comment_ids(); end

  def comment_ids=(ids); end

  def comments(); end

  def comments=(value); end

  def create_backend_package(*args, &block); end

  def create_backend_package!(*args, &block); end

  def create_develpackage(*args, &block); end

  def create_develpackage!(*args, &block); end

  def create_kiwi_image(*args, &block); end

  def create_kiwi_image!(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def create_token(*args, &block); end

  def create_token!(*args, &block); end

  def develpackage(); end

  def develpackage=(value); end

  def develpackage_ids(); end

  def develpackage_ids=(ids); end

  def develpackages(); end

  def develpackages=(value); end

  def flag_ids(); end

  def flag_ids=(ids); end

  def flags(); end

  def flags=(value); end

  def issue_ids(); end

  def issue_ids=(ids); end

  def issues(); end

  def issues=(value); end

  def kiwi_image(); end

  def kiwi_image=(value); end

  def kiwi_image_attributes=(attributes); end

  def message_ids(); end

  def message_ids=(ids); end

  def messages(); end

  def messages=(value); end

  def package_issue_ids(); end

  def package_issue_ids=(ids); end

  def package_issues(); end

  def package_issues=(value); end

  def package_kind_ids(); end

  def package_kind_ids=(ids); end

  def package_kinds(); end

  def package_kinds=(value); end

  def product_ids(); end

  def product_ids=(ids); end

  def products(); end

  def products=(value); end

  def project(); end

  def project=(value); end

  def rating_ids(); end

  def rating_ids=(ids); end

  def ratings(); end

  def ratings=(value); end

  def relationship_ids(); end

  def relationship_ids=(ids); end

  def relationships(); end

  def relationships=(value); end

  def reload_backend_package(); end

  def reload_develpackage(); end

  def reload_kiwi_image(); end

  def reload_project(); end

  def reload_token(); end

  def review_ids(); end

  def review_ids=(ids); end

  def reviews(); end

  def reviews=(value); end

  def target_of_bs_request_action_ids(); end

  def target_of_bs_request_action_ids=(ids); end

  def target_of_bs_request_actions(); end

  def target_of_bs_request_actions=(value); end

  def target_of_bs_request_ids(); end

  def target_of_bs_request_ids=(ids); end

  def target_of_bs_requests(); end

  def target_of_bs_requests=(value); end

  def token(); end

  def token=(value); end

  def token_ids(); end

  def token_ids=(ids); end

  def tokens(); end

  def tokens=(value); end
end

module Package::GeneratedAssociationMethods
  extend ::T::Sig
end

class Package
  def self.after_add_for_attribs(); end

  def self.after_add_for_attribs=(val); end

  def self.after_add_for_attribs?(); end

  def self.after_add_for_binary_releases(); end

  def self.after_add_for_binary_releases=(val); end

  def self.after_add_for_binary_releases?(); end

  def self.after_add_for_channels(); end

  def self.after_add_for_channels=(val); end

  def self.after_add_for_channels?(); end

  def self.after_add_for_comments(); end

  def self.after_add_for_comments=(val); end

  def self.after_add_for_comments?(); end

  def self.after_add_for_develpackages(); end

  def self.after_add_for_develpackages=(val); end

  def self.after_add_for_develpackages?(); end

  def self.after_add_for_flags(); end

  def self.after_add_for_flags=(val); end

  def self.after_add_for_flags?(); end

  def self.after_add_for_issues(); end

  def self.after_add_for_issues=(val); end

  def self.after_add_for_issues?(); end

  def self.after_add_for_messages(); end

  def self.after_add_for_messages=(val); end

  def self.after_add_for_messages?(); end

  def self.after_add_for_package_issues(); end

  def self.after_add_for_package_issues=(val); end

  def self.after_add_for_package_issues?(); end

  def self.after_add_for_package_kinds(); end

  def self.after_add_for_package_kinds=(val); end

  def self.after_add_for_package_kinds?(); end

  def self.after_add_for_products(); end

  def self.after_add_for_products=(val); end

  def self.after_add_for_products?(); end

  def self.after_add_for_ratings(); end

  def self.after_add_for_ratings=(val); end

  def self.after_add_for_ratings?(); end

  def self.after_add_for_relationships(); end

  def self.after_add_for_relationships=(val); end

  def self.after_add_for_relationships?(); end

  def self.after_add_for_reviews(); end

  def self.after_add_for_reviews=(val); end

  def self.after_add_for_reviews?(); end

  def self.after_add_for_target_of_bs_request_actions(); end

  def self.after_add_for_target_of_bs_request_actions=(val); end

  def self.after_add_for_target_of_bs_request_actions?(); end

  def self.after_add_for_target_of_bs_requests(); end

  def self.after_add_for_target_of_bs_requests=(val); end

  def self.after_add_for_target_of_bs_requests?(); end

  def self.after_add_for_tokens(); end

  def self.after_add_for_tokens=(val); end

  def self.after_add_for_tokens?(); end

  def self.after_remove_for_attribs(); end

  def self.after_remove_for_attribs=(val); end

  def self.after_remove_for_attribs?(); end

  def self.after_remove_for_binary_releases(); end

  def self.after_remove_for_binary_releases=(val); end

  def self.after_remove_for_binary_releases?(); end

  def self.after_remove_for_channels(); end

  def self.after_remove_for_channels=(val); end

  def self.after_remove_for_channels?(); end

  def self.after_remove_for_comments(); end

  def self.after_remove_for_comments=(val); end

  def self.after_remove_for_comments?(); end

  def self.after_remove_for_develpackages(); end

  def self.after_remove_for_develpackages=(val); end

  def self.after_remove_for_develpackages?(); end

  def self.after_remove_for_flags(); end

  def self.after_remove_for_flags=(val); end

  def self.after_remove_for_flags?(); end

  def self.after_remove_for_issues(); end

  def self.after_remove_for_issues=(val); end

  def self.after_remove_for_issues?(); end

  def self.after_remove_for_messages(); end

  def self.after_remove_for_messages=(val); end

  def self.after_remove_for_messages?(); end

  def self.after_remove_for_package_issues(); end

  def self.after_remove_for_package_issues=(val); end

  def self.after_remove_for_package_issues?(); end

  def self.after_remove_for_package_kinds(); end

  def self.after_remove_for_package_kinds=(val); end

  def self.after_remove_for_package_kinds?(); end

  def self.after_remove_for_products(); end

  def self.after_remove_for_products=(val); end

  def self.after_remove_for_products?(); end

  def self.after_remove_for_ratings(); end

  def self.after_remove_for_ratings=(val); end

  def self.after_remove_for_ratings?(); end

  def self.after_remove_for_relationships(); end

  def self.after_remove_for_relationships=(val); end

  def self.after_remove_for_relationships?(); end

  def self.after_remove_for_reviews(); end

  def self.after_remove_for_reviews=(val); end

  def self.after_remove_for_reviews?(); end

  def self.after_remove_for_target_of_bs_request_actions(); end

  def self.after_remove_for_target_of_bs_request_actions=(val); end

  def self.after_remove_for_target_of_bs_request_actions?(); end

  def self.after_remove_for_target_of_bs_requests(); end

  def self.after_remove_for_target_of_bs_requests=(val); end

  def self.after_remove_for_target_of_bs_requests?(); end

  def self.after_remove_for_tokens(); end

  def self.after_remove_for_tokens=(val); end

  def self.after_remove_for_tokens?(); end

  def self.before_add_for_attribs(); end

  def self.before_add_for_attribs=(val); end

  def self.before_add_for_attribs?(); end

  def self.before_add_for_binary_releases(); end

  def self.before_add_for_binary_releases=(val); end

  def self.before_add_for_binary_releases?(); end

  def self.before_add_for_channels(); end

  def self.before_add_for_channels=(val); end

  def self.before_add_for_channels?(); end

  def self.before_add_for_comments(); end

  def self.before_add_for_comments=(val); end

  def self.before_add_for_comments?(); end

  def self.before_add_for_develpackages(); end

  def self.before_add_for_develpackages=(val); end

  def self.before_add_for_develpackages?(); end

  def self.before_add_for_flags(); end

  def self.before_add_for_flags=(val); end

  def self.before_add_for_flags?(); end

  def self.before_add_for_issues(); end

  def self.before_add_for_issues=(val); end

  def self.before_add_for_issues?(); end

  def self.before_add_for_messages(); end

  def self.before_add_for_messages=(val); end

  def self.before_add_for_messages?(); end

  def self.before_add_for_package_issues(); end

  def self.before_add_for_package_issues=(val); end

  def self.before_add_for_package_issues?(); end

  def self.before_add_for_package_kinds(); end

  def self.before_add_for_package_kinds=(val); end

  def self.before_add_for_package_kinds?(); end

  def self.before_add_for_products(); end

  def self.before_add_for_products=(val); end

  def self.before_add_for_products?(); end

  def self.before_add_for_ratings(); end

  def self.before_add_for_ratings=(val); end

  def self.before_add_for_ratings?(); end

  def self.before_add_for_relationships(); end

  def self.before_add_for_relationships=(val); end

  def self.before_add_for_relationships?(); end

  def self.before_add_for_reviews(); end

  def self.before_add_for_reviews=(val); end

  def self.before_add_for_reviews?(); end

  def self.before_add_for_target_of_bs_request_actions(); end

  def self.before_add_for_target_of_bs_request_actions=(val); end

  def self.before_add_for_target_of_bs_request_actions?(); end

  def self.before_add_for_target_of_bs_requests(); end

  def self.before_add_for_target_of_bs_requests=(val); end

  def self.before_add_for_target_of_bs_requests?(); end

  def self.before_add_for_tokens(); end

  def self.before_add_for_tokens=(val); end

  def self.before_add_for_tokens?(); end

  def self.before_remove_for_attribs(); end

  def self.before_remove_for_attribs=(val); end

  def self.before_remove_for_attribs?(); end

  def self.before_remove_for_binary_releases(); end

  def self.before_remove_for_binary_releases=(val); end

  def self.before_remove_for_binary_releases?(); end

  def self.before_remove_for_channels(); end

  def self.before_remove_for_channels=(val); end

  def self.before_remove_for_channels?(); end

  def self.before_remove_for_comments(); end

  def self.before_remove_for_comments=(val); end

  def self.before_remove_for_comments?(); end

  def self.before_remove_for_develpackages(); end

  def self.before_remove_for_develpackages=(val); end

  def self.before_remove_for_develpackages?(); end

  def self.before_remove_for_flags(); end

  def self.before_remove_for_flags=(val); end

  def self.before_remove_for_flags?(); end

  def self.before_remove_for_issues(); end

  def self.before_remove_for_issues=(val); end

  def self.before_remove_for_issues?(); end

  def self.before_remove_for_messages(); end

  def self.before_remove_for_messages=(val); end

  def self.before_remove_for_messages?(); end

  def self.before_remove_for_package_issues(); end

  def self.before_remove_for_package_issues=(val); end

  def self.before_remove_for_package_issues?(); end

  def self.before_remove_for_package_kinds(); end

  def self.before_remove_for_package_kinds=(val); end

  def self.before_remove_for_package_kinds?(); end

  def self.before_remove_for_products(); end

  def self.before_remove_for_products=(val); end

  def self.before_remove_for_products?(); end

  def self.before_remove_for_ratings(); end

  def self.before_remove_for_ratings=(val); end

  def self.before_remove_for_ratings?(); end

  def self.before_remove_for_relationships(); end

  def self.before_remove_for_relationships=(val); end

  def self.before_remove_for_relationships?(); end

  def self.before_remove_for_reviews(); end

  def self.before_remove_for_reviews=(val); end

  def self.before_remove_for_reviews?(); end

  def self.before_remove_for_target_of_bs_request_actions(); end

  def self.before_remove_for_target_of_bs_request_actions=(val); end

  def self.before_remove_for_target_of_bs_request_actions?(); end

  def self.before_remove_for_target_of_bs_requests(); end

  def self.before_remove_for_target_of_bs_requests=(val); end

  def self.before_remove_for_target_of_bs_requests?(); end

  def self.before_remove_for_tokens(); end

  def self.before_remove_for_tokens=(val); end

  def self.before_remove_for_tokens?(); end

  def self.dirty_backend_package(*args); end

  def self.for_group(*args); end

  def self.for_user(*args); end

  def self.order_by_name(*args); end

  def self.with_kind(*args); end

  def self.with_product_name(*args); end
end

class PackageBuildReason
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class PackageBuildReason
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

module PackageControllerService
  extend ::T::Sig
end

class PackageDatatable
  def link_to(*args, &block); end

  def package_show_path(*args, &block); end

  def time_ago_in_words(*args, &block); end
end

class PackageIssue
  include ::PackageIssue::GeneratedAssociationMethods
  def autosave_associated_records_for_issue(*args); end

  def autosave_associated_records_for_package(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module PackageIssue::GeneratedAssociationMethods
  def build_issue(*args, &block); end

  def build_package(*args, &block); end

  def create_issue(*args, &block); end

  def create_issue!(*args, &block); end

  def create_package(*args, &block); end

  def create_package!(*args, &block); end

  def issue(); end

  def issue=(value); end

  def package(); end

  def package=(value); end

  def reload_issue(); end

  def reload_package(); end
end

module PackageIssue::GeneratedAssociationMethods
  extend ::T::Sig
end

class PackageIssue
  def self.open_issues_of_owner(*args); end

  def self.with_patchinfo(*args); end
end

class PackageKind
  include ::PackageKind::GeneratedAssociationMethods
  def autosave_associated_records_for_package(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module PackageKind::GeneratedAssociationMethods
  def build_package(*args, &block); end

  def create_package(*args, &block); end

  def create_package!(*args, &block); end

  def package(); end

  def package=(value); end

  def reload_package(); end
end

module PackageKind::GeneratedAssociationMethods
  extend ::T::Sig
end

class PackageTest
  def test_default_scope_does_not_include_forbidden_projects(); end

  def test_fixtures_name(); end

  def test_invalid_names_are_catched(); end

  def test_is_binary_file?(); end

  def test_utf8_input(); end
end

module Page
  extend ::T::Sig
end

module Parallel
  Stop = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

module Parallel::ProcessorCount
  extend ::T::Sig
end

class Parallel::UserInterruptHandler
  INTERRUPT_SIGNAL = ::T.let(nil, ::T.untyped)
end

module Parallel
  extend ::T::Sig
end

ParseError = Racc::ParseError

module ParsePackageDiff
  extend ::T::Sig
end

module Parser
  MESSAGES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Parser::AST
  extend ::T::Sig
end

module Parser::Builders
  extend ::T::Sig
end

Parser::CurrentRuby = Parser::Ruby25

module Parser::Deprecation
  extend ::T::Sig
end

class Parser::Diagnostic
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer
  ESCAPES = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  KEYWORDS_BEGIN = ::T.let(nil, ::T.untyped)
  LEX_STATES = ::T.let(nil, ::T.untyped)
  PUNCTUATION = ::T.let(nil, ::T.untyped)
  PUNCTUATION_BEGIN = ::T.let(nil, ::T.untyped)
  REGEXP_META_CHARACTERS = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::Literal
  DELIMITERS = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

module Parser::Meta
  NODE_TYPES = ::T.let(nil, ::T.untyped)
end

module Parser::Meta
  extend ::T::Sig
end

class Parser::Rewriter
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Ruby25
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Buffer
  ENCODING_RE = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Comment::Associator
  MAGIC_COMMENT_RE = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Rewriter
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Source::TreeRewriter
  ACTIONS = ::T.let(nil, ::T.untyped)
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
  POLICY_TO_LEVEL = ::T.let(nil, ::T.untyped)
end

module Parser::Source
  extend ::T::Sig
end

module Parser
  extend ::T::Sig
end

class Patchinfo
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Patchinfo
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class PathElement
  include ::PathElement::GeneratedAssociationMethods
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def autosave_associated_records_for_link(*args); end

  def autosave_associated_records_for_repository(*args); end

  def belongs_to_counter_cache_after_update(reflection); end

  def connection(*args, &block); end

  def destroyed_via_scope?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end
end

module PathElement::GeneratedAssociationMethods
  def build_link(*args, &block); end

  def build_repository(*args, &block); end

  def create_link(*args, &block); end

  def create_link!(*args, &block); end

  def create_repository(*args, &block); end

  def create_repository!(*args, &block); end

  def link(); end

  def link=(value); end

  def reload_link(); end

  def reload_repository(); end

  def repository(); end

  def repository=(value); end
end

module PathElement::GeneratedAssociationMethods
  extend ::T::Sig
end

class PathElement
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self.acts_as_list_top(); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.update_all_with_touch(updates); end
end

class Pathname
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def empty?(); end

  def fnmatch?(*_); end

  def glob(*_); end

  def make_symlink(_); end

end

class Pathname
  extend ::T::Sig
end

module Peek
  ALLOWED_ENVS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Peek::Adapters
  extend ::T::Sig
end

module Peek::ControllerHelpers
  extend ::T::Sig
end

module Peek::Dalli
  VERSION = ::T.let(nil, ::T.untyped)
end

module Peek::Dalli
  extend ::T::Sig
end

module Peek::Host
  VERSION = ::T.let(nil, ::T.untyped)
end

module Peek::Host
  extend ::T::Sig
end

module Peek::Mysql2
  VERSION = ::T.let(nil, ::T.untyped)
end

module Peek::Mysql2::Timing
  extend ::T::Sig
end

module Peek::Mysql2
  extend ::T::Sig
end

module Peek::Views
  extend ::T::Sig
end

module Peek
  extend ::T::Sig
end

module Person
  extend ::T::Sig
end

module PopperJs
  VERSION = ::T.let(nil, ::T.untyped)
end

module PopperJs
  extend ::T::Sig
end

module PowerAssert
  VERSION = ::T.let(nil, ::T.untyped)
end

module PowerAssert
  extend ::T::Sig
end

module PrettyNestedErrors
  extend ::T::Sig
end

class PrettyPrint
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class PrettyPrint::Breakable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class PrettyPrint::Breakable
  extend ::T::Sig
end

class PrettyPrint::Group
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class PrettyPrint::Group
  extend ::T::Sig
end

class PrettyPrint::GroupQueue
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class PrettyPrint::GroupQueue
  extend ::T::Sig
end

class PrettyPrint::SingleLine
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class PrettyPrint::SingleLine
  extend ::T::Sig
end

class PrettyPrint::Text
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class PrettyPrint::Text
  extend ::T::Sig
end

class PrettyPrint
  extend ::T::Sig
end

class Proc
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def ===(*_); end

  def clone(); end

  def lambda?(); end

  def yield(*_); end
end

class Proc
  extend ::T::Sig
end

module Process::GID
  extend ::T::Sig
end

class Process::Status
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Process::Status
  extend ::T::Sig
end

module Process::Sys
  extend ::T::Sig
  def self.getegid(); end

end

class Process::Tms
  def cstime(); end

  def cstime=(_); end

  def cutime(); end

  def cutime=(_); end

  def stime(); end

  def stime=(_); end

  def utime(); end

  def utime=(_); end
end

class Process::Tms
  extend ::T::Sig
  def self.[](*_); end

  def self.members(); end
end

module Process::UID
  extend ::T::Sig
end

class Process::Waiter
  extend ::T::Sig
end

module Process
  extend ::T::Sig
  def self.last_status(); end

  def self.setpgrp(); end

end

class Product
  include ::Product::GeneratedAssociationMethods
  def after_add_for_product_media(); end

  def after_add_for_product_media=(val); end

  def after_add_for_product_media?(); end

  def after_add_for_product_update_repositories(); end

  def after_add_for_product_update_repositories=(val); end

  def after_add_for_product_update_repositories?(); end

  def after_remove_for_product_media(); end

  def after_remove_for_product_media=(val); end

  def after_remove_for_product_media?(); end

  def after_remove_for_product_update_repositories(); end

  def after_remove_for_product_update_repositories=(val); end

  def after_remove_for_product_update_repositories?(); end

  def autosave_associated_records_for_package(*args); end

  def autosave_associated_records_for_product_media(*args); end

  def autosave_associated_records_for_product_update_repositories(*args); end

  def before_add_for_product_media(); end

  def before_add_for_product_media=(val); end

  def before_add_for_product_media?(); end

  def before_add_for_product_update_repositories(); end

  def before_add_for_product_update_repositories=(val); end

  def before_add_for_product_update_repositories?(); end

  def before_remove_for_product_media(); end

  def before_remove_for_product_media=(val); end

  def before_remove_for_product_media?(); end

  def before_remove_for_product_update_repositories(); end

  def before_remove_for_product_update_repositories=(val); end

  def before_remove_for_product_update_repositories?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_product_media(*args); end

  def validate_associated_records_for_product_update_repositories(*args); end
end

module Product::GeneratedAssociationMethods
  def build_package(*args, &block); end

  def create_package(*args, &block); end

  def create_package!(*args, &block); end

  def package(); end

  def package=(value); end

  def product_media(); end

  def product_media=(value); end

  def product_medium_ids(); end

  def product_medium_ids=(ids); end

  def product_update_repositories(); end

  def product_update_repositories=(value); end

  def product_update_repository_ids(); end

  def product_update_repository_ids=(ids); end

  def reload_package(); end
end

module Product::GeneratedAssociationMethods
  extend ::T::Sig
end

class Product
  def self.after_add_for_product_media(); end

  def self.after_add_for_product_media=(val); end

  def self.after_add_for_product_media?(); end

  def self.after_add_for_product_update_repositories(); end

  def self.after_add_for_product_update_repositories=(val); end

  def self.after_add_for_product_update_repositories?(); end

  def self.after_remove_for_product_media(); end

  def self.after_remove_for_product_media=(val); end

  def self.after_remove_for_product_media?(); end

  def self.after_remove_for_product_update_repositories(); end

  def self.after_remove_for_product_update_repositories=(val); end

  def self.after_remove_for_product_update_repositories?(); end

  def self.before_add_for_product_media(); end

  def self.before_add_for_product_media=(val); end

  def self.before_add_for_product_media?(); end

  def self.before_add_for_product_update_repositories(); end

  def self.before_add_for_product_update_repositories=(val); end

  def self.before_add_for_product_update_repositories?(); end

  def self.before_remove_for_product_media(); end

  def self.before_remove_for_product_media=(val); end

  def self.before_remove_for_product_media?(); end

  def self.before_remove_for_product_update_repositories(); end

  def self.before_remove_for_product_update_repositories=(val); end

  def self.before_remove_for_product_update_repositories?(); end
end

class ProductMedium
  include ::ProductMedium::GeneratedAssociationMethods
  def autosave_associated_records_for_arch_filter(*args); end

  def autosave_associated_records_for_product(*args); end

  def autosave_associated_records_for_repository(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module ProductMedium::GeneratedAssociationMethods
  def arch_filter(); end

  def arch_filter=(value); end

  def build_arch_filter(*args, &block); end

  def build_product(*args, &block); end

  def build_repository(*args, &block); end

  def create_arch_filter(*args, &block); end

  def create_arch_filter!(*args, &block); end

  def create_product(*args, &block); end

  def create_product!(*args, &block); end

  def create_repository(*args, &block); end

  def create_repository!(*args, &block); end

  def product(); end

  def product=(value); end

  def reload_arch_filter(); end

  def reload_product(); end

  def reload_repository(); end

  def repository(); end

  def repository=(value); end
end

module ProductMedium::GeneratedAssociationMethods
  extend ::T::Sig
end

class ProductUpdateRepository
  include ::ProductUpdateRepository::GeneratedAssociationMethods
  def autosave_associated_records_for_arch_filter(*args); end

  def autosave_associated_records_for_product(*args); end

  def autosave_associated_records_for_repository(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module ProductUpdateRepository::GeneratedAssociationMethods
  def arch_filter(); end

  def arch_filter=(value); end

  def build_arch_filter(*args, &block); end

  def build_product(*args, &block); end

  def build_repository(*args, &block); end

  def create_arch_filter(*args, &block); end

  def create_arch_filter!(*args, &block); end

  def create_product(*args, &block); end

  def create_product!(*args, &block); end

  def create_repository(*args, &block); end

  def create_repository!(*args, &block); end

  def product(); end

  def product=(value); end

  def reload_arch_filter(); end

  def reload_product(); end

  def reload_repository(); end

  def repository(); end

  def repository=(value); end
end

module ProductUpdateRepository::GeneratedAssociationMethods
  extend ::T::Sig
end

module ProgressBar::Calculators
  extend ::T::Sig
end

class ProgressBar::Components::Bar
  DEFAULT_PROGRESS_MARK = ::T.let(nil, ::T.untyped)
  DEFAULT_REMAINDER_MARK = ::T.let(nil, ::T.untyped)
  DEFAULT_UPA_STEPS = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Components::Time
  ELAPSED_LABEL = ::T.let(nil, ::T.untyped)
  ESTIMATED_LABEL = ::T.let(nil, ::T.untyped)
  NO_TIME_ELAPSED_TEXT = ::T.let(nil, ::T.untyped)
  OOB_FRIENDLY_TIME_TEXT = ::T.let(nil, ::T.untyped)
  OOB_LIMIT_IN_HOURS = ::T.let(nil, ::T.untyped)
  OOB_TIME_FORMATS = ::T.let(nil, ::T.untyped)
  OOB_UNKNOWN_TIME_TEXT = ::T.let(nil, ::T.untyped)
  TIME_FORMAT = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Components::Title
  DEFAULT_TITLE = ::T.let(nil, ::T.untyped)
end

module ProgressBar::Components
  extend ::T::Sig
end

class ProgressBar::Format::Molecule
  BAR_MOLECULES = ::T.let(nil, ::T.untyped)
  MOLECULES = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Format::String
  ANSI_SGR_PATTERN = ::T.let(nil, ::T.untyped)
  MOLECULE_PATTERN = ::T.let(nil, ::T.untyped)
end

module ProgressBar::Format
  extend ::T::Sig
end

class ProgressBar::Output
  DEFAULT_OUTPUT_STREAM = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Outputs::NonTty
  DEFAULT_FORMAT_STRING = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Outputs::Tty
  DEFAULT_FORMAT_STRING = ::T.let(nil, ::T.untyped)
end

module ProgressBar::Outputs
  extend ::T::Sig
end

class ProgressBar::Progress
  DEFAULT_BEGINNING_POSITION = ::T.let(nil, ::T.untyped)
  DEFAULT_SMOOTHING = ::T.let(nil, ::T.untyped)
  DEFAULT_TOTAL = ::T.let(nil, ::T.untyped)
end

module ProgressBar::Refinements::Enumerator
  extend ::T::Sig
end

module ProgressBar::Refinements
  extend ::T::Sig
end

class ProgressBar::Time
  TIME_MOCKING_LIBRARY_METHODS = ::T.let(nil, ::T.untyped)
end

class Project
  include ::Project::GeneratedAssociationMethods
  def after_add_for_attribs(); end

  def after_add_for_attribs=(val); end

  def after_add_for_attribs?(); end

  def after_add_for_comments(); end

  def after_add_for_comments=(val); end

  def after_add_for_comments?(); end

  def after_add_for_develprojects(); end

  def after_add_for_develprojects=(val); end

  def after_add_for_develprojects?(); end

  def after_add_for_flags(); end

  def after_add_for_flags=(val); end

  def after_add_for_flags?(); end

  def after_add_for_incident_updateinfo_counter_values(); end

  def after_add_for_incident_updateinfo_counter_values=(val); end

  def after_add_for_incident_updateinfo_counter_values?(); end

  def after_add_for_issues(); end

  def after_add_for_issues=(val); end

  def after_add_for_issues?(); end

  def after_add_for_linked_by(); end

  def after_add_for_linked_by=(val); end

  def after_add_for_linked_by?(); end

  def after_add_for_linked_by_projects(); end

  def after_add_for_linked_by_projects=(val); end

  def after_add_for_linked_by_projects?(); end

  def after_add_for_linked_repositories(); end

  def after_add_for_linked_repositories=(val); end

  def after_add_for_linked_repositories?(); end

  def after_add_for_linking_to(); end

  def after_add_for_linking_to=(val); end

  def after_add_for_linking_to?(); end

  def after_add_for_maintained_projects(); end

  def after_add_for_maintained_projects=(val); end

  def after_add_for_maintained_projects?(); end

  def after_add_for_maintenance_projects(); end

  def after_add_for_maintenance_projects=(val); end

  def after_add_for_maintenance_projects?(); end

  def after_add_for_messages(); end

  def after_add_for_messages=(val); end

  def after_add_for_messages?(); end

  def after_add_for_package_kinds(); end

  def after_add_for_package_kinds=(val); end

  def after_add_for_package_kinds?(); end

  def after_add_for_packages(); end

  def after_add_for_packages=(val); end

  def after_add_for_packages?(); end

  def after_add_for_patchinfos(); end

  def after_add_for_patchinfos=(val); end

  def after_add_for_patchinfos?(); end

  def after_add_for_path_elements(); end

  def after_add_for_path_elements=(val); end

  def after_add_for_path_elements?(); end

  def after_add_for_project_log_entries(); end

  def after_add_for_project_log_entries=(val); end

  def after_add_for_project_log_entries?(); end

  def after_add_for_projects_linking_to(); end

  def after_add_for_projects_linking_to=(val); end

  def after_add_for_projects_linking_to?(); end

  def after_add_for_ratings(); end

  def after_add_for_ratings=(val); end

  def after_add_for_ratings?(); end

  def after_add_for_relationships(); end

  def after_add_for_relationships=(val); end

  def after_add_for_relationships?(); end

  def after_add_for_release_targets(); end

  def after_add_for_release_targets=(val); end

  def after_add_for_release_targets?(); end

  def after_add_for_repositories(); end

  def after_add_for_repositories=(val); end

  def after_add_for_repositories?(); end

  def after_add_for_repository_architectures(); end

  def after_add_for_repository_architectures=(val); end

  def after_add_for_repository_architectures?(); end

  def after_add_for_reviews(); end

  def after_add_for_reviews=(val); end

  def after_add_for_reviews?(); end

  def after_add_for_staged_requests(); end

  def after_add_for_staged_requests=(val); end

  def after_add_for_staged_requests?(); end

  def after_add_for_target_of_bs_request_actions(); end

  def after_add_for_target_of_bs_request_actions=(val); end

  def after_add_for_target_of_bs_request_actions?(); end

  def after_add_for_target_of_bs_requests(); end

  def after_add_for_target_of_bs_requests=(val); end

  def after_add_for_target_of_bs_requests?(); end

  def after_add_for_target_repositories(); end

  def after_add_for_target_repositories=(val); end

  def after_add_for_target_repositories?(); end

  def after_add_for_watched_projects(); end

  def after_add_for_watched_projects=(val); end

  def after_add_for_watched_projects?(); end

  def after_remove_for_attribs(); end

  def after_remove_for_attribs=(val); end

  def after_remove_for_attribs?(); end

  def after_remove_for_comments(); end

  def after_remove_for_comments=(val); end

  def after_remove_for_comments?(); end

  def after_remove_for_develprojects(); end

  def after_remove_for_develprojects=(val); end

  def after_remove_for_develprojects?(); end

  def after_remove_for_flags(); end

  def after_remove_for_flags=(val); end

  def after_remove_for_flags?(); end

  def after_remove_for_incident_updateinfo_counter_values(); end

  def after_remove_for_incident_updateinfo_counter_values=(val); end

  def after_remove_for_incident_updateinfo_counter_values?(); end

  def after_remove_for_issues(); end

  def after_remove_for_issues=(val); end

  def after_remove_for_issues?(); end

  def after_remove_for_linked_by(); end

  def after_remove_for_linked_by=(val); end

  def after_remove_for_linked_by?(); end

  def after_remove_for_linked_by_projects(); end

  def after_remove_for_linked_by_projects=(val); end

  def after_remove_for_linked_by_projects?(); end

  def after_remove_for_linked_repositories(); end

  def after_remove_for_linked_repositories=(val); end

  def after_remove_for_linked_repositories?(); end

  def after_remove_for_linking_to(); end

  def after_remove_for_linking_to=(val); end

  def after_remove_for_linking_to?(); end

  def after_remove_for_maintained_projects(); end

  def after_remove_for_maintained_projects=(val); end

  def after_remove_for_maintained_projects?(); end

  def after_remove_for_maintenance_projects(); end

  def after_remove_for_maintenance_projects=(val); end

  def after_remove_for_maintenance_projects?(); end

  def after_remove_for_messages(); end

  def after_remove_for_messages=(val); end

  def after_remove_for_messages?(); end

  def after_remove_for_package_kinds(); end

  def after_remove_for_package_kinds=(val); end

  def after_remove_for_package_kinds?(); end

  def after_remove_for_packages(); end

  def after_remove_for_packages=(val); end

  def after_remove_for_packages?(); end

  def after_remove_for_patchinfos(); end

  def after_remove_for_patchinfos=(val); end

  def after_remove_for_patchinfos?(); end

  def after_remove_for_path_elements(); end

  def after_remove_for_path_elements=(val); end

  def after_remove_for_path_elements?(); end

  def after_remove_for_project_log_entries(); end

  def after_remove_for_project_log_entries=(val); end

  def after_remove_for_project_log_entries?(); end

  def after_remove_for_projects_linking_to(); end

  def after_remove_for_projects_linking_to=(val); end

  def after_remove_for_projects_linking_to?(); end

  def after_remove_for_ratings(); end

  def after_remove_for_ratings=(val); end

  def after_remove_for_ratings?(); end

  def after_remove_for_relationships(); end

  def after_remove_for_relationships=(val); end

  def after_remove_for_relationships?(); end

  def after_remove_for_release_targets(); end

  def after_remove_for_release_targets=(val); end

  def after_remove_for_release_targets?(); end

  def after_remove_for_repositories(); end

  def after_remove_for_repositories=(val); end

  def after_remove_for_repositories?(); end

  def after_remove_for_repository_architectures(); end

  def after_remove_for_repository_architectures=(val); end

  def after_remove_for_repository_architectures?(); end

  def after_remove_for_reviews(); end

  def after_remove_for_reviews=(val); end

  def after_remove_for_reviews?(); end

  def after_remove_for_staged_requests(); end

  def after_remove_for_staged_requests=(val); end

  def after_remove_for_staged_requests?(); end

  def after_remove_for_target_of_bs_request_actions(); end

  def after_remove_for_target_of_bs_request_actions=(val); end

  def after_remove_for_target_of_bs_request_actions?(); end

  def after_remove_for_target_of_bs_requests(); end

  def after_remove_for_target_of_bs_requests=(val); end

  def after_remove_for_target_of_bs_requests?(); end

  def after_remove_for_target_repositories(); end

  def after_remove_for_target_repositories=(val); end

  def after_remove_for_target_repositories?(); end

  def after_remove_for_watched_projects(); end

  def after_remove_for_watched_projects=(val); end

  def after_remove_for_watched_projects?(); end

  def autosave_associated_records_for_attribs(*args); end

  def autosave_associated_records_for_comments(*args); end

  def autosave_associated_records_for_develproject(*args); end

  def autosave_associated_records_for_develprojects(*args); end

  def autosave_associated_records_for_flags(*args); end

  def autosave_associated_records_for_incident_updateinfo_counter_values(*args); end

  def autosave_associated_records_for_issues(*args); end

  def autosave_associated_records_for_linked_by(*args); end

  def autosave_associated_records_for_linked_by_projects(*args); end

  def autosave_associated_records_for_linked_repositories(*args); end

  def autosave_associated_records_for_linking_to(*args); end

  def autosave_associated_records_for_maintained_projects(*args); end

  def autosave_associated_records_for_maintenance_incident(); end

  def autosave_associated_records_for_maintenance_projects(*args); end

  def autosave_associated_records_for_messages(*args); end

  def autosave_associated_records_for_package_kinds(*args); end

  def autosave_associated_records_for_packages(*args); end

  def autosave_associated_records_for_patchinfos(*args); end

  def autosave_associated_records_for_path_elements(*args); end

  def autosave_associated_records_for_project_log_entries(*args); end

  def autosave_associated_records_for_projects_linking_to(*args); end

  def autosave_associated_records_for_ratings(*args); end

  def autosave_associated_records_for_relationships(*args); end

  def autosave_associated_records_for_release_targets(*args); end

  def autosave_associated_records_for_repositories(*args); end

  def autosave_associated_records_for_repository_architectures(*args); end

  def autosave_associated_records_for_reviews(*args); end

  def autosave_associated_records_for_staged_requests(*args); end

  def autosave_associated_records_for_staging(); end

  def autosave_associated_records_for_staging_workflow(*args); end

  def autosave_associated_records_for_target_of_bs_request_actions(*args); end

  def autosave_associated_records_for_target_of_bs_requests(*args); end

  def autosave_associated_records_for_target_repositories(*args); end

  def autosave_associated_records_for_watched_projects(*args); end

  def before_add_for_attribs(); end

  def before_add_for_attribs=(val); end

  def before_add_for_attribs?(); end

  def before_add_for_comments(); end

  def before_add_for_comments=(val); end

  def before_add_for_comments?(); end

  def before_add_for_develprojects(); end

  def before_add_for_develprojects=(val); end

  def before_add_for_develprojects?(); end

  def before_add_for_flags(); end

  def before_add_for_flags=(val); end

  def before_add_for_flags?(); end

  def before_add_for_incident_updateinfo_counter_values(); end

  def before_add_for_incident_updateinfo_counter_values=(val); end

  def before_add_for_incident_updateinfo_counter_values?(); end

  def before_add_for_issues(); end

  def before_add_for_issues=(val); end

  def before_add_for_issues?(); end

  def before_add_for_linked_by(); end

  def before_add_for_linked_by=(val); end

  def before_add_for_linked_by?(); end

  def before_add_for_linked_by_projects(); end

  def before_add_for_linked_by_projects=(val); end

  def before_add_for_linked_by_projects?(); end

  def before_add_for_linked_repositories(); end

  def before_add_for_linked_repositories=(val); end

  def before_add_for_linked_repositories?(); end

  def before_add_for_linking_to(); end

  def before_add_for_linking_to=(val); end

  def before_add_for_linking_to?(); end

  def before_add_for_maintained_projects(); end

  def before_add_for_maintained_projects=(val); end

  def before_add_for_maintained_projects?(); end

  def before_add_for_maintenance_projects(); end

  def before_add_for_maintenance_projects=(val); end

  def before_add_for_maintenance_projects?(); end

  def before_add_for_messages(); end

  def before_add_for_messages=(val); end

  def before_add_for_messages?(); end

  def before_add_for_package_kinds(); end

  def before_add_for_package_kinds=(val); end

  def before_add_for_package_kinds?(); end

  def before_add_for_packages(); end

  def before_add_for_packages=(val); end

  def before_add_for_packages?(); end

  def before_add_for_patchinfos(); end

  def before_add_for_patchinfos=(val); end

  def before_add_for_patchinfos?(); end

  def before_add_for_path_elements(); end

  def before_add_for_path_elements=(val); end

  def before_add_for_path_elements?(); end

  def before_add_for_project_log_entries(); end

  def before_add_for_project_log_entries=(val); end

  def before_add_for_project_log_entries?(); end

  def before_add_for_projects_linking_to(); end

  def before_add_for_projects_linking_to=(val); end

  def before_add_for_projects_linking_to?(); end

  def before_add_for_ratings(); end

  def before_add_for_ratings=(val); end

  def before_add_for_ratings?(); end

  def before_add_for_relationships(); end

  def before_add_for_relationships=(val); end

  def before_add_for_relationships?(); end

  def before_add_for_release_targets(); end

  def before_add_for_release_targets=(val); end

  def before_add_for_release_targets?(); end

  def before_add_for_repositories(); end

  def before_add_for_repositories=(val); end

  def before_add_for_repositories?(); end

  def before_add_for_repository_architectures(); end

  def before_add_for_repository_architectures=(val); end

  def before_add_for_repository_architectures?(); end

  def before_add_for_reviews(); end

  def before_add_for_reviews=(val); end

  def before_add_for_reviews?(); end

  def before_add_for_staged_requests(); end

  def before_add_for_staged_requests=(val); end

  def before_add_for_staged_requests?(); end

  def before_add_for_target_of_bs_request_actions(); end

  def before_add_for_target_of_bs_request_actions=(val); end

  def before_add_for_target_of_bs_request_actions?(); end

  def before_add_for_target_of_bs_requests(); end

  def before_add_for_target_of_bs_requests=(val); end

  def before_add_for_target_of_bs_requests?(); end

  def before_add_for_target_repositories(); end

  def before_add_for_target_repositories=(val); end

  def before_add_for_target_repositories?(); end

  def before_add_for_watched_projects(); end

  def before_add_for_watched_projects=(val); end

  def before_add_for_watched_projects?(); end

  def before_remove_for_attribs(); end

  def before_remove_for_attribs=(val); end

  def before_remove_for_attribs?(); end

  def before_remove_for_comments(); end

  def before_remove_for_comments=(val); end

  def before_remove_for_comments?(); end

  def before_remove_for_develprojects(); end

  def before_remove_for_develprojects=(val); end

  def before_remove_for_develprojects?(); end

  def before_remove_for_flags(); end

  def before_remove_for_flags=(val); end

  def before_remove_for_flags?(); end

  def before_remove_for_incident_updateinfo_counter_values(); end

  def before_remove_for_incident_updateinfo_counter_values=(val); end

  def before_remove_for_incident_updateinfo_counter_values?(); end

  def before_remove_for_issues(); end

  def before_remove_for_issues=(val); end

  def before_remove_for_issues?(); end

  def before_remove_for_linked_by(); end

  def before_remove_for_linked_by=(val); end

  def before_remove_for_linked_by?(); end

  def before_remove_for_linked_by_projects(); end

  def before_remove_for_linked_by_projects=(val); end

  def before_remove_for_linked_by_projects?(); end

  def before_remove_for_linked_repositories(); end

  def before_remove_for_linked_repositories=(val); end

  def before_remove_for_linked_repositories?(); end

  def before_remove_for_linking_to(); end

  def before_remove_for_linking_to=(val); end

  def before_remove_for_linking_to?(); end

  def before_remove_for_maintained_projects(); end

  def before_remove_for_maintained_projects=(val); end

  def before_remove_for_maintained_projects?(); end

  def before_remove_for_maintenance_projects(); end

  def before_remove_for_maintenance_projects=(val); end

  def before_remove_for_maintenance_projects?(); end

  def before_remove_for_messages(); end

  def before_remove_for_messages=(val); end

  def before_remove_for_messages?(); end

  def before_remove_for_package_kinds(); end

  def before_remove_for_package_kinds=(val); end

  def before_remove_for_package_kinds?(); end

  def before_remove_for_packages(); end

  def before_remove_for_packages=(val); end

  def before_remove_for_packages?(); end

  def before_remove_for_patchinfos(); end

  def before_remove_for_patchinfos=(val); end

  def before_remove_for_patchinfos?(); end

  def before_remove_for_path_elements(); end

  def before_remove_for_path_elements=(val); end

  def before_remove_for_path_elements?(); end

  def before_remove_for_project_log_entries(); end

  def before_remove_for_project_log_entries=(val); end

  def before_remove_for_project_log_entries?(); end

  def before_remove_for_projects_linking_to(); end

  def before_remove_for_projects_linking_to=(val); end

  def before_remove_for_projects_linking_to?(); end

  def before_remove_for_ratings(); end

  def before_remove_for_ratings=(val); end

  def before_remove_for_ratings?(); end

  def before_remove_for_relationships(); end

  def before_remove_for_relationships=(val); end

  def before_remove_for_relationships?(); end

  def before_remove_for_release_targets(); end

  def before_remove_for_release_targets=(val); end

  def before_remove_for_release_targets?(); end

  def before_remove_for_repositories(); end

  def before_remove_for_repositories=(val); end

  def before_remove_for_repositories?(); end

  def before_remove_for_repository_architectures(); end

  def before_remove_for_repository_architectures=(val); end

  def before_remove_for_repository_architectures?(); end

  def before_remove_for_reviews(); end

  def before_remove_for_reviews=(val); end

  def before_remove_for_reviews?(); end

  def before_remove_for_staged_requests(); end

  def before_remove_for_staged_requests=(val); end

  def before_remove_for_staged_requests?(); end

  def before_remove_for_target_of_bs_request_actions(); end

  def before_remove_for_target_of_bs_request_actions=(val); end

  def before_remove_for_target_of_bs_request_actions?(); end

  def before_remove_for_target_of_bs_requests(); end

  def before_remove_for_target_of_bs_requests=(val); end

  def before_remove_for_target_of_bs_requests?(); end

  def before_remove_for_target_repositories(); end

  def before_remove_for_target_repositories=(val); end

  def before_remove_for_target_repositories?(); end

  def before_remove_for_watched_projects(); end

  def before_remove_for_watched_projects=(val); end

  def before_remove_for_watched_projects?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def get_flags(flag_type, repository_names, architectures); end

  def validate_associated_records_for_attribs(*args); end

  def validate_associated_records_for_comments(*args); end

  def validate_associated_records_for_develprojects(*args); end

  def validate_associated_records_for_flags(*args); end

  def validate_associated_records_for_incident_updateinfo_counter_values(*args); end

  def validate_associated_records_for_issues(*args); end

  def validate_associated_records_for_linked_by(*args); end

  def validate_associated_records_for_linked_by_projects(*args); end

  def validate_associated_records_for_linked_repositories(*args); end

  def validate_associated_records_for_linking_to(*args); end

  def validate_associated_records_for_maintained_projects(*args); end

  def validate_associated_records_for_maintenance_projects(*args); end

  def validate_associated_records_for_messages(*args); end

  def validate_associated_records_for_package_kinds(*args); end

  def validate_associated_records_for_packages(*args); end

  def validate_associated_records_for_patchinfos(*args); end

  def validate_associated_records_for_path_elements(*args); end

  def validate_associated_records_for_project_log_entries(*args); end

  def validate_associated_records_for_projects_linking_to(*args); end

  def validate_associated_records_for_ratings(*args); end

  def validate_associated_records_for_relationships(*args); end

  def validate_associated_records_for_release_targets(*args); end

  def validate_associated_records_for_repositories(*args); end

  def validate_associated_records_for_repository_architectures(*args); end

  def validate_associated_records_for_reviews(*args); end

  def validate_associated_records_for_staged_requests(*args); end

  def validate_associated_records_for_target_of_bs_request_actions(*args); end

  def validate_associated_records_for_target_of_bs_requests(*args); end

  def validate_associated_records_for_target_repositories(*args); end

  def validate_associated_records_for_watched_projects(*args); end
end

module Project::Errors
  extend ::T::Sig
end

module Project::GeneratedAssociationMethods
  def attrib_ids(); end

  def attrib_ids=(ids); end

  def attribs(); end

  def attribs=(value); end

  def build_develproject(*args, &block); end

  def build_maintenance_incident(*args, &block); end

  def build_staging(*args, &block); end

  def build_staging_workflow(*args, &block); end

  def comment_ids(); end

  def comment_ids=(ids); end

  def comments(); end

  def comments=(value); end

  def create_develproject(*args, &block); end

  def create_develproject!(*args, &block); end

  def create_maintenance_incident(*args, &block); end

  def create_maintenance_incident!(*args, &block); end

  def create_staging(*args, &block); end

  def create_staging!(*args, &block); end

  def create_staging_workflow(*args, &block); end

  def create_staging_workflow!(*args, &block); end

  def develproject(); end

  def develproject=(value); end

  def develproject_ids(); end

  def develproject_ids=(ids); end

  def develprojects(); end

  def develprojects=(value); end

  def flag_ids(); end

  def flag_ids=(ids); end

  def flags(); end

  def flags=(value); end

  def incident_updateinfo_counter_value_ids(); end

  def incident_updateinfo_counter_value_ids=(ids); end

  def incident_updateinfo_counter_values(); end

  def incident_updateinfo_counter_values=(value); end

  def issue_ids(); end

  def issue_ids=(ids); end

  def issues(); end

  def issues=(value); end

  def linked_by(); end

  def linked_by=(value); end

  def linked_by_ids(); end

  def linked_by_ids=(ids); end

  def linked_by_project_ids(); end

  def linked_by_project_ids=(ids); end

  def linked_by_projects(); end

  def linked_by_projects=(value); end

  def linked_repositories(); end

  def linked_repositories=(value); end

  def linked_repository_ids(); end

  def linked_repository_ids=(ids); end

  def linking_to(); end

  def linking_to=(value); end

  def linking_to_ids(); end

  def linking_to_ids=(ids); end

  def maintained_project_ids(); end

  def maintained_project_ids=(ids); end

  def maintained_projects(); end

  def maintained_projects=(value); end

  def maintenance_incident(); end

  def maintenance_incident=(value); end

  def maintenance_project_ids(); end

  def maintenance_project_ids=(ids); end

  def maintenance_projects(); end

  def maintenance_projects=(value); end

  def message_ids(); end

  def message_ids=(ids); end

  def messages(); end

  def messages=(value); end

  def package_ids(); end

  def package_ids=(ids); end

  def package_kind_ids(); end

  def package_kind_ids=(ids); end

  def package_kinds(); end

  def package_kinds=(value); end

  def packages(); end

  def packages=(value); end

  def patchinfo_ids(); end

  def patchinfo_ids=(ids); end

  def patchinfos(); end

  def patchinfos=(value); end

  def path_element_ids(); end

  def path_element_ids=(ids); end

  def path_elements(); end

  def path_elements=(value); end

  def project_log_entries(); end

  def project_log_entries=(value); end

  def project_log_entry_ids(); end

  def project_log_entry_ids=(ids); end

  def projects_linking_to(); end

  def projects_linking_to=(value); end

  def projects_linking_to_ids(); end

  def projects_linking_to_ids=(ids); end

  def rating_ids(); end

  def rating_ids=(ids); end

  def ratings(); end

  def ratings=(value); end

  def relationship_ids(); end

  def relationship_ids=(ids); end

  def relationships(); end

  def relationships=(value); end

  def release_target_ids(); end

  def release_target_ids=(ids); end

  def release_targets(); end

  def release_targets=(value); end

  def reload_develproject(); end

  def reload_maintenance_incident(); end

  def reload_staging(); end

  def reload_staging_workflow(); end

  def repositories(); end

  def repositories=(value); end

  def repository_architecture_ids(); end

  def repository_architecture_ids=(ids); end

  def repository_architectures(); end

  def repository_architectures=(value); end

  def repository_ids(); end

  def repository_ids=(ids); end

  def review_ids(); end

  def review_ids=(ids); end

  def reviews(); end

  def reviews=(value); end

  def staged_request_ids(); end

  def staged_request_ids=(ids); end

  def staged_requests(); end

  def staged_requests=(value); end

  def staging(); end

  def staging=(value); end

  def staging_workflow(); end

  def staging_workflow=(value); end

  def target_of_bs_request_action_ids(); end

  def target_of_bs_request_action_ids=(ids); end

  def target_of_bs_request_actions(); end

  def target_of_bs_request_actions=(value); end

  def target_of_bs_request_ids(); end

  def target_of_bs_request_ids=(ids); end

  def target_of_bs_requests(); end

  def target_of_bs_requests=(value); end

  def target_repositories(); end

  def target_repositories=(value); end

  def target_repository_ids(); end

  def target_repository_ids=(ids); end

  def watched_project_ids(); end

  def watched_project_ids=(ids); end

  def watched_projects(); end

  def watched_projects=(value); end
end

module Project::GeneratedAssociationMethods
  extend ::T::Sig
end

class Project::KeyInfo
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Project::KeyInfo
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class Project
  def self.after_add_for_attribs(); end

  def self.after_add_for_attribs=(val); end

  def self.after_add_for_attribs?(); end

  def self.after_add_for_comments(); end

  def self.after_add_for_comments=(val); end

  def self.after_add_for_comments?(); end

  def self.after_add_for_develprojects(); end

  def self.after_add_for_develprojects=(val); end

  def self.after_add_for_develprojects?(); end

  def self.after_add_for_flags(); end

  def self.after_add_for_flags=(val); end

  def self.after_add_for_flags?(); end

  def self.after_add_for_incident_updateinfo_counter_values(); end

  def self.after_add_for_incident_updateinfo_counter_values=(val); end

  def self.after_add_for_incident_updateinfo_counter_values?(); end

  def self.after_add_for_issues(); end

  def self.after_add_for_issues=(val); end

  def self.after_add_for_issues?(); end

  def self.after_add_for_linked_by(); end

  def self.after_add_for_linked_by=(val); end

  def self.after_add_for_linked_by?(); end

  def self.after_add_for_linked_by_projects(); end

  def self.after_add_for_linked_by_projects=(val); end

  def self.after_add_for_linked_by_projects?(); end

  def self.after_add_for_linked_repositories(); end

  def self.after_add_for_linked_repositories=(val); end

  def self.after_add_for_linked_repositories?(); end

  def self.after_add_for_linking_to(); end

  def self.after_add_for_linking_to=(val); end

  def self.after_add_for_linking_to?(); end

  def self.after_add_for_maintained_projects(); end

  def self.after_add_for_maintained_projects=(val); end

  def self.after_add_for_maintained_projects?(); end

  def self.after_add_for_maintenance_projects(); end

  def self.after_add_for_maintenance_projects=(val); end

  def self.after_add_for_maintenance_projects?(); end

  def self.after_add_for_messages(); end

  def self.after_add_for_messages=(val); end

  def self.after_add_for_messages?(); end

  def self.after_add_for_package_kinds(); end

  def self.after_add_for_package_kinds=(val); end

  def self.after_add_for_package_kinds?(); end

  def self.after_add_for_packages(); end

  def self.after_add_for_packages=(val); end

  def self.after_add_for_packages?(); end

  def self.after_add_for_patchinfos(); end

  def self.after_add_for_patchinfos=(val); end

  def self.after_add_for_patchinfos?(); end

  def self.after_add_for_path_elements(); end

  def self.after_add_for_path_elements=(val); end

  def self.after_add_for_path_elements?(); end

  def self.after_add_for_project_log_entries(); end

  def self.after_add_for_project_log_entries=(val); end

  def self.after_add_for_project_log_entries?(); end

  def self.after_add_for_projects_linking_to(); end

  def self.after_add_for_projects_linking_to=(val); end

  def self.after_add_for_projects_linking_to?(); end

  def self.after_add_for_ratings(); end

  def self.after_add_for_ratings=(val); end

  def self.after_add_for_ratings?(); end

  def self.after_add_for_relationships(); end

  def self.after_add_for_relationships=(val); end

  def self.after_add_for_relationships?(); end

  def self.after_add_for_release_targets(); end

  def self.after_add_for_release_targets=(val); end

  def self.after_add_for_release_targets?(); end

  def self.after_add_for_repositories(); end

  def self.after_add_for_repositories=(val); end

  def self.after_add_for_repositories?(); end

  def self.after_add_for_repository_architectures(); end

  def self.after_add_for_repository_architectures=(val); end

  def self.after_add_for_repository_architectures?(); end

  def self.after_add_for_reviews(); end

  def self.after_add_for_reviews=(val); end

  def self.after_add_for_reviews?(); end

  def self.after_add_for_staged_requests(); end

  def self.after_add_for_staged_requests=(val); end

  def self.after_add_for_staged_requests?(); end

  def self.after_add_for_target_of_bs_request_actions(); end

  def self.after_add_for_target_of_bs_request_actions=(val); end

  def self.after_add_for_target_of_bs_request_actions?(); end

  def self.after_add_for_target_of_bs_requests(); end

  def self.after_add_for_target_of_bs_requests=(val); end

  def self.after_add_for_target_of_bs_requests?(); end

  def self.after_add_for_target_repositories(); end

  def self.after_add_for_target_repositories=(val); end

  def self.after_add_for_target_repositories?(); end

  def self.after_add_for_watched_projects(); end

  def self.after_add_for_watched_projects=(val); end

  def self.after_add_for_watched_projects?(); end

  def self.after_remove_for_attribs(); end

  def self.after_remove_for_attribs=(val); end

  def self.after_remove_for_attribs?(); end

  def self.after_remove_for_comments(); end

  def self.after_remove_for_comments=(val); end

  def self.after_remove_for_comments?(); end

  def self.after_remove_for_develprojects(); end

  def self.after_remove_for_develprojects=(val); end

  def self.after_remove_for_develprojects?(); end

  def self.after_remove_for_flags(); end

  def self.after_remove_for_flags=(val); end

  def self.after_remove_for_flags?(); end

  def self.after_remove_for_incident_updateinfo_counter_values(); end

  def self.after_remove_for_incident_updateinfo_counter_values=(val); end

  def self.after_remove_for_incident_updateinfo_counter_values?(); end

  def self.after_remove_for_issues(); end

  def self.after_remove_for_issues=(val); end

  def self.after_remove_for_issues?(); end

  def self.after_remove_for_linked_by(); end

  def self.after_remove_for_linked_by=(val); end

  def self.after_remove_for_linked_by?(); end

  def self.after_remove_for_linked_by_projects(); end

  def self.after_remove_for_linked_by_projects=(val); end

  def self.after_remove_for_linked_by_projects?(); end

  def self.after_remove_for_linked_repositories(); end

  def self.after_remove_for_linked_repositories=(val); end

  def self.after_remove_for_linked_repositories?(); end

  def self.after_remove_for_linking_to(); end

  def self.after_remove_for_linking_to=(val); end

  def self.after_remove_for_linking_to?(); end

  def self.after_remove_for_maintained_projects(); end

  def self.after_remove_for_maintained_projects=(val); end

  def self.after_remove_for_maintained_projects?(); end

  def self.after_remove_for_maintenance_projects(); end

  def self.after_remove_for_maintenance_projects=(val); end

  def self.after_remove_for_maintenance_projects?(); end

  def self.after_remove_for_messages(); end

  def self.after_remove_for_messages=(val); end

  def self.after_remove_for_messages?(); end

  def self.after_remove_for_package_kinds(); end

  def self.after_remove_for_package_kinds=(val); end

  def self.after_remove_for_package_kinds?(); end

  def self.after_remove_for_packages(); end

  def self.after_remove_for_packages=(val); end

  def self.after_remove_for_packages?(); end

  def self.after_remove_for_patchinfos(); end

  def self.after_remove_for_patchinfos=(val); end

  def self.after_remove_for_patchinfos?(); end

  def self.after_remove_for_path_elements(); end

  def self.after_remove_for_path_elements=(val); end

  def self.after_remove_for_path_elements?(); end

  def self.after_remove_for_project_log_entries(); end

  def self.after_remove_for_project_log_entries=(val); end

  def self.after_remove_for_project_log_entries?(); end

  def self.after_remove_for_projects_linking_to(); end

  def self.after_remove_for_projects_linking_to=(val); end

  def self.after_remove_for_projects_linking_to?(); end

  def self.after_remove_for_ratings(); end

  def self.after_remove_for_ratings=(val); end

  def self.after_remove_for_ratings?(); end

  def self.after_remove_for_relationships(); end

  def self.after_remove_for_relationships=(val); end

  def self.after_remove_for_relationships?(); end

  def self.after_remove_for_release_targets(); end

  def self.after_remove_for_release_targets=(val); end

  def self.after_remove_for_release_targets?(); end

  def self.after_remove_for_repositories(); end

  def self.after_remove_for_repositories=(val); end

  def self.after_remove_for_repositories?(); end

  def self.after_remove_for_repository_architectures(); end

  def self.after_remove_for_repository_architectures=(val); end

  def self.after_remove_for_repository_architectures?(); end

  def self.after_remove_for_reviews(); end

  def self.after_remove_for_reviews=(val); end

  def self.after_remove_for_reviews?(); end

  def self.after_remove_for_staged_requests(); end

  def self.after_remove_for_staged_requests=(val); end

  def self.after_remove_for_staged_requests?(); end

  def self.after_remove_for_target_of_bs_request_actions(); end

  def self.after_remove_for_target_of_bs_request_actions=(val); end

  def self.after_remove_for_target_of_bs_request_actions?(); end

  def self.after_remove_for_target_of_bs_requests(); end

  def self.after_remove_for_target_of_bs_requests=(val); end

  def self.after_remove_for_target_of_bs_requests?(); end

  def self.after_remove_for_target_repositories(); end

  def self.after_remove_for_target_repositories=(val); end

  def self.after_remove_for_target_repositories?(); end

  def self.after_remove_for_watched_projects(); end

  def self.after_remove_for_watched_projects=(val); end

  def self.after_remove_for_watched_projects?(); end

  def self.autocomplete(*args); end

  def self.before_add_for_attribs(); end

  def self.before_add_for_attribs=(val); end

  def self.before_add_for_attribs?(); end

  def self.before_add_for_comments(); end

  def self.before_add_for_comments=(val); end

  def self.before_add_for_comments?(); end

  def self.before_add_for_develprojects(); end

  def self.before_add_for_develprojects=(val); end

  def self.before_add_for_develprojects?(); end

  def self.before_add_for_flags(); end

  def self.before_add_for_flags=(val); end

  def self.before_add_for_flags?(); end

  def self.before_add_for_incident_updateinfo_counter_values(); end

  def self.before_add_for_incident_updateinfo_counter_values=(val); end

  def self.before_add_for_incident_updateinfo_counter_values?(); end

  def self.before_add_for_issues(); end

  def self.before_add_for_issues=(val); end

  def self.before_add_for_issues?(); end

  def self.before_add_for_linked_by(); end

  def self.before_add_for_linked_by=(val); end

  def self.before_add_for_linked_by?(); end

  def self.before_add_for_linked_by_projects(); end

  def self.before_add_for_linked_by_projects=(val); end

  def self.before_add_for_linked_by_projects?(); end

  def self.before_add_for_linked_repositories(); end

  def self.before_add_for_linked_repositories=(val); end

  def self.before_add_for_linked_repositories?(); end

  def self.before_add_for_linking_to(); end

  def self.before_add_for_linking_to=(val); end

  def self.before_add_for_linking_to?(); end

  def self.before_add_for_maintained_projects(); end

  def self.before_add_for_maintained_projects=(val); end

  def self.before_add_for_maintained_projects?(); end

  def self.before_add_for_maintenance_projects(); end

  def self.before_add_for_maintenance_projects=(val); end

  def self.before_add_for_maintenance_projects?(); end

  def self.before_add_for_messages(); end

  def self.before_add_for_messages=(val); end

  def self.before_add_for_messages?(); end

  def self.before_add_for_package_kinds(); end

  def self.before_add_for_package_kinds=(val); end

  def self.before_add_for_package_kinds?(); end

  def self.before_add_for_packages(); end

  def self.before_add_for_packages=(val); end

  def self.before_add_for_packages?(); end

  def self.before_add_for_patchinfos(); end

  def self.before_add_for_patchinfos=(val); end

  def self.before_add_for_patchinfos?(); end

  def self.before_add_for_path_elements(); end

  def self.before_add_for_path_elements=(val); end

  def self.before_add_for_path_elements?(); end

  def self.before_add_for_project_log_entries(); end

  def self.before_add_for_project_log_entries=(val); end

  def self.before_add_for_project_log_entries?(); end

  def self.before_add_for_projects_linking_to(); end

  def self.before_add_for_projects_linking_to=(val); end

  def self.before_add_for_projects_linking_to?(); end

  def self.before_add_for_ratings(); end

  def self.before_add_for_ratings=(val); end

  def self.before_add_for_ratings?(); end

  def self.before_add_for_relationships(); end

  def self.before_add_for_relationships=(val); end

  def self.before_add_for_relationships?(); end

  def self.before_add_for_release_targets(); end

  def self.before_add_for_release_targets=(val); end

  def self.before_add_for_release_targets?(); end

  def self.before_add_for_repositories(); end

  def self.before_add_for_repositories=(val); end

  def self.before_add_for_repositories?(); end

  def self.before_add_for_repository_architectures(); end

  def self.before_add_for_repository_architectures=(val); end

  def self.before_add_for_repository_architectures?(); end

  def self.before_add_for_reviews(); end

  def self.before_add_for_reviews=(val); end

  def self.before_add_for_reviews?(); end

  def self.before_add_for_staged_requests(); end

  def self.before_add_for_staged_requests=(val); end

  def self.before_add_for_staged_requests?(); end

  def self.before_add_for_target_of_bs_request_actions(); end

  def self.before_add_for_target_of_bs_request_actions=(val); end

  def self.before_add_for_target_of_bs_request_actions?(); end

  def self.before_add_for_target_of_bs_requests(); end

  def self.before_add_for_target_of_bs_requests=(val); end

  def self.before_add_for_target_of_bs_requests?(); end

  def self.before_add_for_target_repositories(); end

  def self.before_add_for_target_repositories=(val); end

  def self.before_add_for_target_repositories?(); end

  def self.before_add_for_watched_projects(); end

  def self.before_add_for_watched_projects=(val); end

  def self.before_add_for_watched_projects?(); end

  def self.before_remove_for_attribs(); end

  def self.before_remove_for_attribs=(val); end

  def self.before_remove_for_attribs?(); end

  def self.before_remove_for_comments(); end

  def self.before_remove_for_comments=(val); end

  def self.before_remove_for_comments?(); end

  def self.before_remove_for_develprojects(); end

  def self.before_remove_for_develprojects=(val); end

  def self.before_remove_for_develprojects?(); end

  def self.before_remove_for_flags(); end

  def self.before_remove_for_flags=(val); end

  def self.before_remove_for_flags?(); end

  def self.before_remove_for_incident_updateinfo_counter_values(); end

  def self.before_remove_for_incident_updateinfo_counter_values=(val); end

  def self.before_remove_for_incident_updateinfo_counter_values?(); end

  def self.before_remove_for_issues(); end

  def self.before_remove_for_issues=(val); end

  def self.before_remove_for_issues?(); end

  def self.before_remove_for_linked_by(); end

  def self.before_remove_for_linked_by=(val); end

  def self.before_remove_for_linked_by?(); end

  def self.before_remove_for_linked_by_projects(); end

  def self.before_remove_for_linked_by_projects=(val); end

  def self.before_remove_for_linked_by_projects?(); end

  def self.before_remove_for_linked_repositories(); end

  def self.before_remove_for_linked_repositories=(val); end

  def self.before_remove_for_linked_repositories?(); end

  def self.before_remove_for_linking_to(); end

  def self.before_remove_for_linking_to=(val); end

  def self.before_remove_for_linking_to?(); end

  def self.before_remove_for_maintained_projects(); end

  def self.before_remove_for_maintained_projects=(val); end

  def self.before_remove_for_maintained_projects?(); end

  def self.before_remove_for_maintenance_projects(); end

  def self.before_remove_for_maintenance_projects=(val); end

  def self.before_remove_for_maintenance_projects?(); end

  def self.before_remove_for_messages(); end

  def self.before_remove_for_messages=(val); end

  def self.before_remove_for_messages?(); end

  def self.before_remove_for_package_kinds(); end

  def self.before_remove_for_package_kinds=(val); end

  def self.before_remove_for_package_kinds?(); end

  def self.before_remove_for_packages(); end

  def self.before_remove_for_packages=(val); end

  def self.before_remove_for_packages?(); end

  def self.before_remove_for_patchinfos(); end

  def self.before_remove_for_patchinfos=(val); end

  def self.before_remove_for_patchinfos?(); end

  def self.before_remove_for_path_elements(); end

  def self.before_remove_for_path_elements=(val); end

  def self.before_remove_for_path_elements?(); end

  def self.before_remove_for_project_log_entries(); end

  def self.before_remove_for_project_log_entries=(val); end

  def self.before_remove_for_project_log_entries?(); end

  def self.before_remove_for_projects_linking_to(); end

  def self.before_remove_for_projects_linking_to=(val); end

  def self.before_remove_for_projects_linking_to?(); end

  def self.before_remove_for_ratings(); end

  def self.before_remove_for_ratings=(val); end

  def self.before_remove_for_ratings?(); end

  def self.before_remove_for_relationships(); end

  def self.before_remove_for_relationships=(val); end

  def self.before_remove_for_relationships?(); end

  def self.before_remove_for_release_targets(); end

  def self.before_remove_for_release_targets=(val); end

  def self.before_remove_for_release_targets?(); end

  def self.before_remove_for_repositories(); end

  def self.before_remove_for_repositories=(val); end

  def self.before_remove_for_repositories?(); end

  def self.before_remove_for_repository_architectures(); end

  def self.before_remove_for_repository_architectures=(val); end

  def self.before_remove_for_repository_architectures?(); end

  def self.before_remove_for_reviews(); end

  def self.before_remove_for_reviews=(val); end

  def self.before_remove_for_reviews?(); end

  def self.before_remove_for_staged_requests(); end

  def self.before_remove_for_staged_requests=(val); end

  def self.before_remove_for_staged_requests?(); end

  def self.before_remove_for_target_of_bs_request_actions(); end

  def self.before_remove_for_target_of_bs_request_actions=(val); end

  def self.before_remove_for_target_of_bs_request_actions?(); end

  def self.before_remove_for_target_of_bs_requests(); end

  def self.before_remove_for_target_of_bs_requests=(val); end

  def self.before_remove_for_target_of_bs_requests?(); end

  def self.before_remove_for_target_repositories(); end

  def self.before_remove_for_target_repositories=(val); end

  def self.before_remove_for_target_repositories?(); end

  def self.before_remove_for_watched_projects(); end

  def self.before_remove_for_watched_projects=(val); end

  def self.before_remove_for_watched_projects?(); end

  def self.filtered_for_list(*args); end

  def self.for_group(*args); end

  def self.for_user(*args); end

  def self.local_image_templates(*args); end

  def self.maintenance(*args); end

  def self.maintenance_incident(*args); end

  def self.maintenance_release(*args); end

  def self.not_maintenance_incident(*args); end

  def self.remote(*args); end

  def self.staging_projects(*args); end
end

module ProjectConfigurationService
  extend ::T::Sig
end

class ProjectDatatable
  def link_to(*args, &block); end

  def project_show_path(*args, &block); end
end

class ProjectLogEntry
  include ::ProjectLogEntry::GeneratedAssociationMethods
  def autosave_associated_records_for_bs_request(*args); end

  def autosave_associated_records_for_project(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module ProjectLogEntry::GeneratedAssociationMethods
  def bs_request(); end

  def bs_request=(value); end

  def build_bs_request(*args, &block); end

  def build_project(*args, &block); end

  def create_bs_request(*args, &block); end

  def create_bs_request!(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def project(); end

  def project=(value); end

  def reload_bs_request(); end

  def reload_project(); end
end

module ProjectLogEntry::GeneratedAssociationMethods
  extend ::T::Sig
end

class ProjectLogEntryTest
  def test_create_from_a_commit(); end

  def test_create_from_build_fail_with_deleted_user_and_request(); end

  def test_create_from_build_success_for_a_deleted_project(); end

  def test_create_from_commit_for_a_deleted_package(); end
end

class ProjectMaintains::OldProject
  include ::ProjectMaintains::OldProject::GeneratedAssociationMethods
end

module ProjectMaintains::OldProject::GeneratedAssociationMethods
end

module ProjectMaintains::OldProject::GeneratedAssociationMethods
  extend ::T::Sig
end

module ProjectPackagesAssociationExtension
  def autocomplete(search); end
end

module ProjectPackagesAssociationExtension
  extend ::T::Sig
end

module ProjectStatus
  extend ::T::Sig
end

class ProjectTest
  def test_check_repositories_returns_an_error_if_a_linking_repository_exists(); end

  def test_check_repositories_returns_an_error_if_a_linking_target_repository_exists(); end

  def test_check_repositories_returns_no_error_if_no_linking_and_no_linking_taget_repository_exists(); end

  def test_config_file_exists_and_have_the_right_content(); end

  def test_duplicated_repos(); end

  def test_duplicated_repos_with_remote(); end

  def test_exists_by_name(); end

  def test_get_removed_repositories_does_not_include_repositories_which_belong_to_a_remote_project(); end

  def test_get_removed_repositories_returns_all_repositories_if_new_repositories_does_not_contain_the_old_repositories(); end

  def test_get_removed_repositories_returns_all_repositories_if_new_repositories_is_empty(); end

  def test_get_removed_repositories_returns_no_repository_if_new_repositories_matches_old_repositories(); end

  def test_get_removed_repositories_returns_nothing_if_repositories_is_empty(); end

  def test_get_removed_repositories_returns_the_repository_if_new_repositories_does_not_include_it(); end

  def test_invalid_names(); end

  def test_linked_packages_returns_all_packages_from_projects_inherited_by_one_level(); end

  def test_not_duplicated_repos_with_remote(); end

  def test_returns_an_error_if_repository_access_is_disabled(); end

  def test_returns_no_error_if_target_project_equals_project(); end

  def test_valid_name(); end

  def test_validate_link_xml_attribute_returns_an_error_if_target_project_access_is_disabled(); end

  def test_validate_link_xml_attribute_returns_no_error_if_target_project_is_not_disabled(); end

  def test_validate_maintenance_xml_attribute_returns_an_error_if_User_can_not_modify_target_project(); end

  def test_validate_maintenance_xml_attribute_returns_no_error_if_User_can_modify_target_project(); end

  def test_validate_repository_xml_attribute_returns_no_error_if_project_access_is_not_disabled(); end
end

class Pry
  BINDING_METHOD_IMPL = ::T.let(nil, ::T.untyped)
  CLIPPED_PRINT = ::T.let(nil, ::T.untyped)
  Commands = ::T.let(nil, ::T.untyped)
  DEFAULT_CONTROL_D_HANDLER = ::T.let(nil, ::T.untyped)
  DEFAULT_EXCEPTION_HANDLER = ::T.let(nil, ::T.untyped)
  DEFAULT_EXCEPTION_WHITELIST = ::T.let(nil, ::T.untyped)
  DEFAULT_HOOKS = ::T.let(nil, ::T.untyped)
  DEFAULT_PRINT = ::T.let(nil, ::T.untyped)
  DEFAULT_SYSTEM = ::T.let(nil, ::T.untyped)
  EMPTY_COMPLETIONS = ::T.let(nil, ::T.untyped)
  HOME_RC_FILE = ::T.let(nil, ::T.untyped)
  LOCAL_RC_FILE = ::T.let(nil, ::T.untyped)
  SIMPLE_PRINT = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

Pry::BasicObject::Kernel = Kernel

Pry::BasicObject::Pry = Pry

class Pry::Byebug::Breakpoints::FileBreakpoint
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Pry::Byebug::Breakpoints::MethodBreakpoint
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Pry::Byebug::Breakpoints
  extend ::T::Sig
end

module Pry::Byebug
  extend ::T::Sig
end

class Pry::Code
  extend ::MethodSource::CodeHelpers
end

class Pry::CodeFile
  DEFAULT_EXT = ::T.let(nil, ::T.untyped)
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  FILES = ::T.let(nil, ::T.untyped)
  INITIAL_PWD = ::T.let(nil, ::T.untyped)
end

module Pry::CodeObject::Helpers
  extend ::T::Sig
end

class Pry::ColorPrinter
  OBJ_COLOR = ::T.let(nil, ::T.untyped)
end

class Pry::Command
  VOID_VALUE = ::T.let(nil, ::T.untyped)
end

module Pry::Command::Edit::FileAndLineLocator
  extend ::T::Sig
end

class Pry::Command::GemSearch
  API_ENDPOINT = ::T.let(nil, ::T.untyped)
end

class Pry::Command::GemStat
  FAIL_WHALE = ::T.let(nil, ::T.untyped)
  STAT_HOST = ::T.let(nil, ::T.untyped)
  STAT_PATH = ::T.let(nil, ::T.untyped)
  STAT_PORT = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls::Constants
  DEPRECATED_CONSTANTS = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls::Globals
  BUILTIN_GLOBALS = ::T.let(nil, ::T.untyped)
  PSEUDO_GLOBALS = ::T.let(nil, ::T.untyped)
end

module Pry::Command::Ls::Interrogatable
  extend ::T::Sig
end

module Pry::Command::Ls::JRubyHacks
  extend ::T::Sig
end

module Pry::Command::Ls::MethodsHelper
  extend ::T::Sig
end

module Pry::Config::Behavior
  ASSIGNMENT = ::T.let(nil, ::T.untyped)
  INSPECT_REGEXP = ::T.let(nil, ::T.untyped)
  NODUP = ::T.let(nil, ::T.untyped)
end

module Pry::Config::Behavior::Builder
  extend ::T::Sig
end

module Pry::Config::Behavior
  extend ::T::Sig
end

module Pry::Config::Convenience
  SHORTCUTS = ::T.let(nil, ::T.untyped)
end

module Pry::Config::Convenience
  extend ::T::Sig
end

module Pry::Config::Memoization
  MEMOIZED_METHODS = ::T.let(nil, ::T.untyped)
end

module Pry::Config::Memoization::ClassMethods
  extend ::T::Sig
end

module Pry::Config::Memoization
  extend ::T::Sig
end

module Pry::ExtendCommandBundle
  extend ::T::Sig
end

module Pry::Forwardable
  extend ::T::Sig
end

module Pry::FrozenObjectException
  extend ::T::Sig
end

module Pry::Helpers::BaseHelpers
  extend ::T::Sig
end

module Pry::Helpers::CommandHelpers
  extend ::T::Sig
end

module Pry::Helpers::DocumentationHelpers
  extend ::T::Sig
end

module Pry::Helpers::OptionsHelpers
  extend ::T::Sig
end

module Pry::Helpers::Platform
  extend ::T::Sig
end

module Pry::Helpers::Text
  COLORS = ::T.let(nil, ::T.untyped)
end

module Pry::Helpers::Text
  extend ::T::Sig
end

module Pry::Helpers
  extend ::T::Sig
end

class Pry::Indent
  IGNORE_TOKENS = ::T.let(nil, ::T.untyped)
  MIDWAY_TOKENS = ::T.let(nil, ::T.untyped)
  OPEN_TOKENS = ::T.let(nil, ::T.untyped)
  OPTIONAL_DO_TOKENS = ::T.let(nil, ::T.untyped)
  SINGLELINE_TOKENS = ::T.let(nil, ::T.untyped)
  SPACES = ::T.let(nil, ::T.untyped)
  STATEMENT_END_TOKENS = ::T.let(nil, ::T.untyped)
end

class Pry::Inspector
  MAP = ::T.let(nil, ::T.untyped)
end

class Pry::ObjectPath
  SPECIAL_TERMS = ::T.let(nil, ::T.untyped)
end

class Pry::PluginManager
  PRY_PLUGIN_PREFIX = ::T.let(nil, ::T.untyped)
end

module Pry::Prompt
  DEFAULT_NAME = ::T.let(nil, ::T.untyped)
  SAFE_CONTEXTS = ::T.let(nil, ::T.untyped)
end

module Pry::Prompt
  extend ::T::Sig
end

module Pry::RescuableException
  extend ::T::Sig
end

module Pry::Rubygem
  extend ::T::Sig
end

class Pry::Slop
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Pry::Slop::Option
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module Pry::TooSafeException
  extend ::T::Sig
end

module Pry::UserError
  extend ::T::Sig
end

module PryByebug::Helpers::Breakpoints
  extend ::T::Sig
end

module PryByebug::Helpers::Multiline
  extend ::T::Sig
end

module PryByebug::Helpers::Navigation
  extend ::T::Sig
end

module PryByebug::Helpers
  extend ::T::Sig
end

module PryByebug
  extend ::T::Sig
end

module Psych
  LIBYAML_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Psych::BadAlias
end

class Psych::BadAlias
end

class Psych::ClassLoader
  def big_decimal(); end

  def complex(); end

  def date(); end

  def date_time(); end

  def exception(); end

  def load(klassname); end

  def object(); end

  def psych_omap(); end

  def psych_set(); end

  def range(); end

  def rational(); end

  def regexp(); end

  def struct(); end

  def symbol(); end

  def symbolize(sym); end
  BIG_DECIMAL = ::T.let(nil, ::T.untyped)
  CACHE = ::T.let(nil, ::T.untyped)
  COMPLEX = ::T.let(nil, ::T.untyped)
  DATE = ::T.let(nil, ::T.untyped)
  DATE_TIME = ::T.let(nil, ::T.untyped)
  EXCEPTION = ::T.let(nil, ::T.untyped)
  OBJECT = ::T.let(nil, ::T.untyped)
  PSYCH_OMAP = ::T.let(nil, ::T.untyped)
  PSYCH_SET = ::T.let(nil, ::T.untyped)
  RANGE = ::T.let(nil, ::T.untyped)
  RATIONAL = ::T.let(nil, ::T.untyped)
  REGEXP = ::T.let(nil, ::T.untyped)
  STRUCT = ::T.let(nil, ::T.untyped)
  SYMBOL = ::T.let(nil, ::T.untyped)
end

class Psych::ClassLoader::Restricted
  def initialize(classes, symbols); end
end

class Psych::ClassLoader::Restricted
end

class Psych::ClassLoader
end

class Psych::Coder
  def [](k); end

  def []=(k, v); end

  def add(k, v); end

  def implicit(); end

  def implicit=(implicit); end

  def initialize(tag); end

  def map(tag=T.unsafe(nil), style=T.unsafe(nil)); end

  def map=(map); end

  def object(); end

  def object=(object); end

  def represent_map(tag, map); end

  def represent_object(tag, obj); end

  def represent_scalar(tag, value); end

  def represent_seq(tag, list); end

  def scalar(*args); end

  def scalar=(value); end

  def seq(); end

  def seq=(list); end

  def style(); end

  def style=(style); end

  def tag(); end

  def tag=(tag); end

  def type(); end
end

class Psych::Coder
end

class Psych::DisallowedClass
  def initialize(klass_name); end
end

class Psych::DisallowedClass
end

class Psych::Emitter
  def alias(_); end

  def canonical(); end

  def canonical=(canonical); end

  def end_document(_); end

  def indentation(); end

  def indentation=(indentation); end

  def initialize(*_); end

  def line_width(); end

  def line_width=(line_width); end

  def scalar(_, _1, _2, _3, _4, _5); end

  def start_document(_, _1, _2); end

  def start_mapping(_, _1, _2, _3); end

  def start_sequence(_, _1, _2, _3); end

  def start_stream(_); end
end

class Psych::Emitter
end

class Psych::Exception
end

class Psych::Exception
end

class Psych::FALLBACK
  def to_ruby(); end

  def to_ruby=(_); end
end

class Psych::FALLBACK
  def self.[](*_); end

  def self.members(); end
end

class Psych::Handler
  def alias(anchor); end

  def empty(); end

  def end_document(implicit); end

  def end_mapping(); end

  def end_sequence(); end

  def end_stream(); end

  def event_location(start_line, start_column, end_line, end_column); end

  def scalar(value, anchor, tag, plain, quoted, style); end

  def start_document(version, tag_directives, implicit); end

  def start_mapping(anchor, tag, implicit, style); end

  def start_sequence(anchor, tag, implicit, style); end

  def start_stream(encoding); end

  def streaming?(); end
  EVENTS = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
end

class Psych::Handler::DumperOptions
  def canonical(); end

  def canonical=(canonical); end

  def indentation(); end

  def indentation=(indentation); end

  def line_width(); end

  def line_width=(line_width); end
end

class Psych::Handler::DumperOptions
end

class Psych::Handler
end

module Psych::Handlers
end

class Psych::Handlers::DocumentStream
  def initialize(&block); end
end

class Psych::Handlers::DocumentStream
end

module Psych::Handlers
  extend ::T::Sig
end

module Psych::JSON
end

module Psych::JSON::RubyEvents
  def visit_DateTime(o); end

  def visit_String(o); end

  def visit_Symbol(o); end

  def visit_Time(o); end
end

module Psych::JSON::RubyEvents
  extend ::T::Sig
end

class Psych::JSON::Stream
  include ::Psych::Streaming
end

class Psych::JSON::Stream::Emitter
  include ::Psych::JSON::YAMLEvents
end

class Psych::JSON::Stream::Emitter
end

class Psych::JSON::Stream
  extend ::Psych::Streaming::ClassMethods
end

class Psych::JSON::TreeBuilder
  include ::Psych::JSON::YAMLEvents
end

class Psych::JSON::TreeBuilder
end

module Psych::JSON::YAMLEvents
  def end_document(implicit_end=T.unsafe(nil)); end

  def scalar(value, anchor, tag, plain, quoted, style); end

  def start_document(version, tag_directives, implicit); end

  def start_mapping(anchor, tag, implicit, style); end

  def start_sequence(anchor, tag, implicit, style); end
end

module Psych::JSON::YAMLEvents
  extend ::T::Sig
end

module Psych::JSON
  extend ::T::Sig
end

module Psych::Nodes
end

class Psych::Nodes::Alias
  def anchor(); end

  def anchor=(anchor); end

  def initialize(anchor); end
end

class Psych::Nodes::Alias
end

class Psych::Nodes::Document
  def implicit(); end

  def implicit=(implicit); end

  def implicit_end(); end

  def implicit_end=(implicit_end); end

  def initialize(version=T.unsafe(nil), tag_directives=T.unsafe(nil), implicit=T.unsafe(nil)); end

  def root(); end

  def tag_directives(); end

  def tag_directives=(tag_directives); end

  def version(); end

  def version=(version); end
end

class Psych::Nodes::Document
end

class Psych::Nodes::Mapping
  def anchor(); end

  def anchor=(anchor); end

  def implicit(); end

  def implicit=(implicit); end

  def initialize(anchor=T.unsafe(nil), tag=T.unsafe(nil), implicit=T.unsafe(nil), style=T.unsafe(nil)); end

  def style(); end

  def style=(style); end

  def tag=(tag); end
  ANY = ::T.let(nil, ::T.untyped)
  BLOCK = ::T.let(nil, ::T.untyped)
  FLOW = ::T.let(nil, ::T.untyped)
end

class Psych::Nodes::Mapping
end

class Psych::Nodes::Node
  include ::Enumerable
  def children(); end

  def each(&block); end

  def end_column(); end

  def end_column=(end_column); end

  def end_line(); end

  def end_line=(end_line); end

  def start_column(); end

  def start_column=(start_column); end

  def start_line(); end

  def start_line=(start_line); end

  def tag(); end

  def to_ruby(); end

  def to_yaml(io=T.unsafe(nil), options=T.unsafe(nil)); end

  def transform(); end

  def yaml(io=T.unsafe(nil), options=T.unsafe(nil)); end
end

class Psych::Nodes::Node
end

class Psych::Nodes::Scalar
  def anchor(); end

  def anchor=(anchor); end

  def initialize(value, anchor=T.unsafe(nil), tag=T.unsafe(nil), plain=T.unsafe(nil), quoted=T.unsafe(nil), style=T.unsafe(nil)); end

  def plain(); end

  def plain=(plain); end

  def quoted(); end

  def quoted=(quoted); end

  def style(); end

  def style=(style); end

  def tag=(tag); end

  def value(); end

  def value=(value); end
  ANY = ::T.let(nil, ::T.untyped)
  DOUBLE_QUOTED = ::T.let(nil, ::T.untyped)
  FOLDED = ::T.let(nil, ::T.untyped)
  LITERAL = ::T.let(nil, ::T.untyped)
  PLAIN = ::T.let(nil, ::T.untyped)
  SINGLE_QUOTED = ::T.let(nil, ::T.untyped)
end

class Psych::Nodes::Scalar
end

class Psych::Nodes::Sequence
  def anchor(); end

  def anchor=(anchor); end

  def implicit(); end

  def implicit=(implicit); end

  def initialize(anchor=T.unsafe(nil), tag=T.unsafe(nil), implicit=T.unsafe(nil), style=T.unsafe(nil)); end

  def style(); end

  def style=(style); end

  def tag=(tag); end
  ANY = ::T.let(nil, ::T.untyped)
  BLOCK = ::T.let(nil, ::T.untyped)
  FLOW = ::T.let(nil, ::T.untyped)
end

class Psych::Nodes::Sequence
end

class Psych::Nodes::Stream
  def encoding(); end

  def encoding=(encoding); end

  def initialize(encoding=T.unsafe(nil)); end
  ANY = ::T.let(nil, ::T.untyped)
  UTF16BE = ::T.let(nil, ::T.untyped)
  UTF16LE = ::T.let(nil, ::T.untyped)
  UTF8 = ::T.let(nil, ::T.untyped)
end

class Psych::Nodes::Stream
end

module Psych::Nodes
  extend ::T::Sig
end

class Psych::Omap
end

class Psych::Omap
end

class Psych::Parser
  def external_encoding=(external_encoding); end

  def handler(); end

  def handler=(handler); end

  def initialize(handler=T.unsafe(nil)); end

  def mark(); end

  def parse(*_); end
  ANY = ::T.let(nil, ::T.untyped)
  UTF16BE = ::T.let(nil, ::T.untyped)
  UTF16LE = ::T.let(nil, ::T.untyped)
  UTF8 = ::T.let(nil, ::T.untyped)
end

class Psych::Parser::Mark
end

class Psych::Parser::Mark
end

class Psych::Parser
end

class Psych::ScalarScanner
  def class_loader(); end

  def initialize(class_loader); end

  def parse_int(string); end

  def parse_time(string); end

  def tokenize(string); end
  FLOAT = ::T.let(nil, ::T.untyped)
  INTEGER = ::T.let(nil, ::T.untyped)
  TIME = ::T.let(nil, ::T.untyped)
end

class Psych::ScalarScanner
end

class Psych::Set
end

class Psych::Set
end

class Psych::Stream
  include ::Psych::Streaming
end

class Psych::Stream::Emitter
  def end_document(implicit_end=T.unsafe(nil)); end
end

class Psych::Stream::Emitter
end

class Psych::Stream
  extend ::Psych::Streaming::ClassMethods
end

module Psych::Streaming
  def start(encoding=T.unsafe(nil)); end
end

module Psych::Streaming::ClassMethods
  def new(io); end
end

module Psych::Streaming::ClassMethods
  extend ::T::Sig
end

module Psych::Streaming
  extend ::T::Sig
end

class Psych::SyntaxError
  def column(); end

  def context(); end

  def file(); end

  def initialize(file, line, col, offset, problem, context); end

  def line(); end

  def offset(); end

  def problem(); end
end

class Psych::SyntaxError
end

class Psych::TreeBuilder
  def end_document(implicit_end=T.unsafe(nil)); end

  def root(); end
end

class Psych::TreeBuilder
end

module Psych::Visitors
end

class Psych::Visitors::DepthFirst
  def initialize(block); end
end

class Psych::Visitors::DepthFirst
end

class Psych::Visitors::Emitter
  def initialize(io, options=T.unsafe(nil)); end

  def visit_Psych_Nodes_Alias(o); end

  def visit_Psych_Nodes_Document(o); end

  def visit_Psych_Nodes_Mapping(o); end

  def visit_Psych_Nodes_Scalar(o); end

  def visit_Psych_Nodes_Sequence(o); end

  def visit_Psych_Nodes_Stream(o); end
end

class Psych::Visitors::Emitter
end

class Psych::Visitors::JSONTree
  include ::Psych::JSON::RubyEvents
end

class Psych::Visitors::JSONTree
  def self.create(options=T.unsafe(nil)); end
end

class Psych::Visitors::NoAliasRuby
end

class Psych::Visitors::NoAliasRuby
end

class Psych::Visitors::ToRuby
  def class_loader(); end

  def initialize(ss, class_loader); end

  def visit_Psych_Nodes_Alias(o); end

  def visit_Psych_Nodes_Document(o); end

  def visit_Psych_Nodes_Mapping(o); end

  def visit_Psych_Nodes_Scalar(o); end

  def visit_Psych_Nodes_Sequence(o); end

  def visit_Psych_Nodes_Stream(o); end
  SHOVEL = ::T.let(nil, ::T.untyped)
end

class Psych::Visitors::ToRuby
  def self.create(); end
end

class Psych::Visitors::Visitor
  def accept(target); end
  DISPATCH = ::T.let(nil, ::T.untyped)
end

class Psych::Visitors::Visitor
end

class Psych::Visitors::YAMLTree
  def <<(object); end

  def finish(); end

  def finished(); end

  def finished?(); end

  def initialize(emitter, ss, options); end

  def push(object); end

  def start(encoding=T.unsafe(nil)); end

  def started(); end

  def started?(); end

  def tree(); end

  def visit_Array(o); end

  def visit_BasicObject(o); end

  def visit_BigDecimal(o); end

  def visit_Class(o); end

  def visit_Complex(o); end

  def visit_Date(o); end

  def visit_DateTime(o); end

  def visit_Delegator(o); end

  def visit_Encoding(o); end

  def visit_Enumerator(o); end

  def visit_Exception(o); end

  def visit_FalseClass(o); end

  def visit_Float(o); end

  def visit_Hash(o); end

  def visit_Integer(o); end

  def visit_Module(o); end

  def visit_NameError(o); end

  def visit_NilClass(o); end

  def visit_Object(o); end

  def visit_Psych_Omap(o); end

  def visit_Psych_Set(o); end

  def visit_Range(o); end

  def visit_Rational(o); end

  def visit_Regexp(o); end

  def visit_String(o); end

  def visit_Struct(o); end

  def visit_Symbol(o); end

  def visit_Time(o); end

  def visit_TrueClass(o); end
end

class Psych::Visitors::YAMLTree
  def self.create(options=T.unsafe(nil), emitter=T.unsafe(nil)); end
end

module Psych::Visitors
  extend ::T::Sig
end

module Psych
  extend ::T::Sig
  def self.add_builtin_type(type_tag, &block); end

  def self.add_domain_type(domain, type_tag, &block); end

  def self.add_tag(tag, klass); end

  def self.domain_types(); end

  def self.domain_types=(domain_types); end

  def self.dump(o, io=T.unsafe(nil), options=T.unsafe(nil)); end

  def self.dump_stream(*objects); end

  def self.dump_tags(); end

  def self.dump_tags=(dump_tags); end

  def self.libyaml_version(); end

  def self.load(yaml, filename=T.unsafe(nil), fallback: T.unsafe(nil), symbolize_names: T.unsafe(nil)); end

  def self.load_file(filename, fallback: T.unsafe(nil)); end

  def self.load_stream(yaml, filename=T.unsafe(nil)); end

  def self.load_tags(); end

  def self.load_tags=(load_tags); end

  def self.parse(yaml, filename=T.unsafe(nil), fallback: T.unsafe(nil)); end

  def self.parse_file(filename); end

  def self.parse_stream(yaml, filename=T.unsafe(nil), &block); end

  def self.parser(); end

  def self.remove_type(type_tag); end

  def self.safe_load(yaml, whitelist_classes=T.unsafe(nil), whitelist_symbols=T.unsafe(nil), aliases=T.unsafe(nil), filename=T.unsafe(nil), symbolize_names: T.unsafe(nil)); end

  def self.to_json(object); end
end

module PublicHelper
  extend ::T::Sig
end

module PublicSuffix
  BANG = ::T.let(nil, ::T.untyped)
  DOT = ::T.let(nil, ::T.untyped)
  STAR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class PublicSuffix::List
  DEFAULT_LIST_PATH = ::T.let(nil, ::T.untyped)
end

module PublicSuffix::Rule
  extend ::T::Sig
end

module PublicSuffix
  extend ::T::Sig
end

module Puma
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  IS_JRUBY = ::T.let(nil, ::T.untyped)
  IS_WINDOWS = ::T.let(nil, ::T.untyped)
  Plugins = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
end

class Puma::Binder
  RACK_VERSION = ::T.let(nil, ::T.untyped)
end

class Puma::Client
  EmptyBody = ::T.let(nil, ::T.untyped)
end

module Puma::ConfigDefault
  DefaultRackup = ::T.let(nil, ::T.untyped)
  DefaultTCPHost = ::T.let(nil, ::T.untyped)
  DefaultTCPPort = ::T.let(nil, ::T.untyped)
  DefaultWorkerShutdownTimeout = ::T.let(nil, ::T.untyped)
  DefaultWorkerTimeout = ::T.let(nil, ::T.untyped)
end

module Puma::ConfigDefault
  extend ::T::Sig
end

module Puma::Const
  CGI_VER = ::T.let(nil, ::T.untyped)
  CHUNKED = ::T.let(nil, ::T.untyped)
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
  CLOSE = ::T.let(nil, ::T.untyped)
  CLOSE_CHUNKED = ::T.let(nil, ::T.untyped)
  CODE_NAME = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  CONNECTION_CLOSE = ::T.let(nil, ::T.untyped)
  CONNECTION_KEEP_ALIVE = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH2 = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH_S = ::T.let(nil, ::T.untyped)
  CONTINUE = ::T.let(nil, ::T.untyped)
  EARLY_HINTS = ::T.let(nil, ::T.untyped)
  ERROR_400_RESPONSE = ::T.let(nil, ::T.untyped)
  ERROR_404_RESPONSE = ::T.let(nil, ::T.untyped)
  ERROR_408_RESPONSE = ::T.let(nil, ::T.untyped)
  ERROR_500_RESPONSE = ::T.let(nil, ::T.untyped)
  ERROR_503_RESPONSE = ::T.let(nil, ::T.untyped)
  FAST_TRACK_KA_TIMEOUT = ::T.let(nil, ::T.untyped)
  FIRST_DATA_TIMEOUT = ::T.let(nil, ::T.untyped)
  GATEWAY_INTERFACE = ::T.let(nil, ::T.untyped)
  HALT_COMMAND = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HIJACK = ::T.let(nil, ::T.untyped)
  HIJACK_IO = ::T.let(nil, ::T.untyped)
  HIJACK_P = ::T.let(nil, ::T.untyped)
  HTTP = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTPS_KEY = ::T.let(nil, ::T.untyped)
  HTTP_10_200 = ::T.let(nil, ::T.untyped)
  HTTP_11 = ::T.let(nil, ::T.untyped)
  HTTP_11_100 = ::T.let(nil, ::T.untyped)
  HTTP_11_200 = ::T.let(nil, ::T.untyped)
  HTTP_CONNECTION = ::T.let(nil, ::T.untyped)
  HTTP_EXPECT = ::T.let(nil, ::T.untyped)
  HTTP_HOST = ::T.let(nil, ::T.untyped)
  HTTP_VERSION = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_FOR = ::T.let(nil, ::T.untyped)
  KEEP_ALIVE = ::T.let(nil, ::T.untyped)
  LINE_END = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  LOCALHOST_ADDR = ::T.let(nil, ::T.untyped)
  LOCALHOST_IP = ::T.let(nil, ::T.untyped)
  MAX_BODY = ::T.let(nil, ::T.untyped)
  MAX_HEADER = ::T.let(nil, ::T.untyped)
  NEWLINE = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  PERSISTENT_TIMEOUT = ::T.let(nil, ::T.untyped)
  PORT_443 = ::T.let(nil, ::T.untyped)
  PORT_80 = ::T.let(nil, ::T.untyped)
  PUMA_CONFIG = ::T.let(nil, ::T.untyped)
  PUMA_PEERCERT = ::T.let(nil, ::T.untyped)
  PUMA_SERVER_STRING = ::T.let(nil, ::T.untyped)
  PUMA_SOCKET = ::T.let(nil, ::T.untyped)
  PUMA_TMP_BASE = ::T.let(nil, ::T.untyped)
  PUMA_VERSION = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_AFTER_REPLY = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  REMOTE_ADDR = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_PATH = ::T.let(nil, ::T.untyped)
  REQUEST_URI = ::T.let(nil, ::T.untyped)
  RESTART_COMMAND = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_PORT = ::T.let(nil, ::T.untyped)
  SERVER_PROTOCOL = ::T.let(nil, ::T.untyped)
  SERVER_SOFTWARE = ::T.let(nil, ::T.untyped)
  STOP_COMMAND = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING2 = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING_CHUNKED = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  WORKER_CHECK_INTERVAL = ::T.let(nil, ::T.untyped)
  WRITE_TIMEOUT = ::T.let(nil, ::T.untyped)
end

module Puma::Const
  extend ::T::Sig
end

module Puma::Delegation
  extend ::T::Sig
end

class Puma::Events
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Puma::HttpParserError
end

class Puma::HttpParserError
end

class Puma::Launcher
  KEYS_NOT_TO_PERSIST_IN_STATE = ::T.let(nil, ::T.untyped)
end

module Puma::MiniSSL
  OPENSSL_LIBRARY_VERSION = ::T.let(nil, ::T.untyped)
  OPENSSL_VERSION = ::T.let(nil, ::T.untyped)
  VERIFY_FAIL_IF_NO_PEER_CERT = ::T.let(nil, ::T.untyped)
  VERIFY_NONE = ::T.let(nil, ::T.untyped)
  VERIFY_PEER = ::T.let(nil, ::T.untyped)
end

class Puma::MiniSSL::SSLError
end

class Puma::MiniSSL::SSLError
end

module Puma::MiniSSL
  extend ::T::Sig
end

class Puma::Plugin
  CALLER_FILE = ::T.let(nil, ::T.untyped)
end

module Puma::Rack
  extend ::T::Sig
end

class Puma::Reactor
  DefaultSleepFor = ::T.let(nil, ::T.untyped)
end

class Puma::Server
  ThreadLocalKey = ::T.let(nil, ::T.untyped)
  UNPACK_TCP_STATE_FROM_TCP_INFO = ::T.let(nil, ::T.untyped)
end

class Puma::ThreadPool
  SHUTDOWN_GRACE_TIME = ::T.let(nil, ::T.untyped)
end

module Puma::Util
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
end

module Puma::Util
  extend ::T::Sig
end

module Puma
  extend ::T::Sig
end

module Pundit
  SUFFIX = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Pundit::Generators
  extend ::T::Sig
end

module Pundit::Helper
  extend ::T::Sig
end

module Pundit
  extend ::T::Sig
end

Queue = Thread::Queue

class RBTree
end

class RBTree
end

module RDoc
  ATTR_MODIFIERS = ::T.let(nil, ::T.untyped)
  CLASS_MODIFIERS = ::T.let(nil, ::T.untyped)
  CONSTANT_MODIFIERS = ::T.let(nil, ::T.untyped)
  DOT_DOC_FILENAME = ::T.let(nil, ::T.untyped)
  GENERAL_MODIFIERS = ::T.let(nil, ::T.untyped)
  KNOWN_CLASSES = ::T.let(nil, ::T.untyped)
  METHOD_MODIFIERS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VISIBILITIES = ::T.let(nil, ::T.untyped)
end

class RDoc::Alias
  def aref(); end

  def full_old_name(); end

  def html_name(); end

  def initialize(text, old_name, new_name, comment, singleton=T.unsafe(nil)); end

  def name(); end

  def name_prefix(); end

  def new_name(); end

  def old_name(); end

  def pretty_name(); end

  def pretty_new_name(); end

  def pretty_old_name(); end

  def singleton(); end

  def singleton=(singleton); end

  def text(); end
end

class RDoc::Alias
end

class RDoc::AnonClass
end

class RDoc::AnonClass
end

class RDoc::AnyMethod
  include ::RDoc::TokenStream
  def add_alias(an_alias, context=T.unsafe(nil)); end

  def c_function(); end

  def c_function=(c_function); end

  def call_seq=(call_seq); end

  def calls_super(); end

  def calls_super=(calls_super); end

  def dont_rename_initialize(); end

  def dont_rename_initialize=(dont_rename_initialize); end

  def marshal_dump(); end

  def marshal_load(array); end

  def param_list(); end

  def superclass_method(); end
  MARSHAL_VERSION = ::T.let(nil, ::T.untyped)
end

class RDoc::AnyMethod
end

class RDoc::Attr
  def calls_super(); end

  def definition(); end

  def initialize(text, name, rw, comment, singleton=T.unsafe(nil)); end

  def marshal_dump(); end

  def marshal_load(array); end

  def rw(); end

  def rw=(rw); end

  def token_stream(); end
  MARSHAL_VERSION = ::T.let(nil, ::T.untyped)
end

class RDoc::Attr
end

class RDoc::ClassModule
  def add_comment(comment, location); end

  def add_things(my_things, other_things); end

  def ancestors(); end

  def aref(); end

  def aref_prefix(); end

  def clear_comment(); end

  def comment_location(); end

  def comment_location=(comment_location); end

  def complete(min_visibility); end

  def constant_aliases(); end

  def constant_aliases=(constant_aliases); end

  def diagram(); end

  def diagram=(diagram); end

  def direct_ancestors(); end

  def document_self_or_methods(); end

  def find_ancestor_local_symbol(symbol); end

  def find_class_named(name); end

  def initialize(name, superclass=T.unsafe(nil)); end

  def is_alias_for(); end

  def is_alias_for=(is_alias_for); end

  def marshal_dump(); end

  def marshal_load(array); end

  def merge(class_module); end

  def merge_collections(mine, other, other_files, &block); end

  def merge_sections(cm); end

  def module?(); end

  def name=(new_name); end

  def non_aliases(); end

  def parse(comment_location); end

  def path(); end

  def remove_nodoc_children(); end

  def remove_things(my_things, other_files); end

  def search_record(); end

  def superclass(); end

  def superclass=(superclass); end

  def type(); end

  def update_aliases(); end

  def update_extends(); end

  def update_includes(); end
  MARSHAL_VERSION = ::T.let(nil, ::T.untyped)
end

class RDoc::ClassModule
  def self.from_module(class_type, mod); end
end

class RDoc::CodeObject
  include ::RDoc::Text
  include ::RDoc::Generator::Markup
  def comment(); end

  def comment=(comment); end

  def display?(); end

  def document_children(); end

  def document_children=(document_children); end

  def document_self(); end

  def document_self=(document_self); end

  def documented?(); end

  def done_documenting(); end

  def done_documenting=(value); end

  def each_parent(); end

  def file(); end

  def file_name(); end

  def force_documentation(); end

  def force_documentation=(value); end

  def full_name=(full_name); end

  def ignore(); end

  def ignored?(); end

  def initialize_visibility(); end

  def line(); end

  def line=(line); end

  def metadata(); end

  def options(); end

  def parent(); end

  def parent=(parent); end

  def parent_file_name(); end

  def parent_name(); end

  def received_nodoc(); end

  def record_location(top_level); end

  def section(); end

  def section=(section); end

  def start_doc(); end

  def stop_doc(); end

  def store(); end

  def store=(store); end

  def suppress(); end

  def suppressed?(); end

  def viewer(); end

  def viewer=(viewer); end
end

class RDoc::CodeObject
end

class RDoc::Comment
  include ::RDoc::Text
  def ==(other); end

  def document=(document); end

  def empty?(); end

  def encode!(encoding); end

  def extract_call_seq(method); end

  def file(); end

  def format(); end

  def format=(format); end

  def initialize(text=T.unsafe(nil), location=T.unsafe(nil)); end

  def location(); end

  def location=(location); end

  def normalize(); end

  def normalized?(); end

  def parse(); end

  def remove_private(); end

  def text(); end

  def text=(text); end

  def tomdoc?(); end
end

class RDoc::Comment
end

class RDoc::Constant
  def ==(other); end

  def full_name(); end

  def initialize(name, value, comment); end

  def is_alias_for(); end

  def is_alias_for=(is_alias_for); end

  def marshal_dump(); end

  def marshal_load(array); end

  def name(); end

  def name=(name); end

  def path(); end

  def value(); end

  def value=(value); end

  def visibility(); end

  def visibility=(visibility); end
  MARSHAL_VERSION = ::T.let(nil, ::T.untyped)
end

class RDoc::Constant
end

class RDoc::Context
  include ::Comparable
  def add(klass, name, comment); end

  def add_alias(an_alias); end

  def add_attribute(attribute); end

  def add_class(class_type, given_name, superclass=T.unsafe(nil)); end

  def add_class_or_module(mod, self_hash, all_hash); end

  def add_constant(constant); end

  def add_extend(ext); end

  def add_include(include); end

  def add_method(method); end

  def add_module(class_type, name); end

  def add_module_alias(from, from_name, to, file); end

  def add_module_by_normal_module(mod); end

  def add_require(require); end

  def add_section(title, comment=T.unsafe(nil)); end

  def add_to(array, thing); end

  def aliases(); end

  def any_content(includes=T.unsafe(nil)); end

  def attributes(); end

  def block_params(); end

  def block_params=(block_params); end

  def child_name(name); end

  def class_attributes(); end

  def class_method_list(); end

  def classes(); end

  def classes_and_modules(); end

  def classes_hash(); end

  def constants(); end

  def constants_hash(); end

  def current_line_visibility=(current_line_visibility); end

  def current_section(); end

  def current_section=(current_section); end

  def defined_in?(file); end

  def display(method_attr); end

  def each_ancestor(); end

  def each_attribute(); end

  def each_classmodule(&block); end

  def each_constant(); end

  def each_extend(); end

  def each_include(); end

  def each_method(); end

  def each_section(); end

  def extends(); end

  def external_aliases(); end

  def find_attribute(name, singleton); end

  def find_attribute_named(name); end

  def find_class_method_named(name); end

  def find_constant_named(name); end

  def find_enclosing_module_named(name); end

  def find_external_alias(name, singleton); end

  def find_external_alias_named(name); end

  def find_file_named(name); end

  def find_instance_method_named(name); end

  def find_local_symbol(symbol); end

  def find_method(name, singleton); end

  def find_method_named(name); end

  def find_module_named(name); end

  def find_symbol(symbol); end

  def find_symbol_module(symbol); end

  def full_name(); end

  def fully_documented?(); end

  def http_url(prefix); end

  def in_files(); end

  def includes(); end

  def initialize_methods_etc(); end

  def instance_attributes(); end

  def instance_method_list(); end

  def method_list(); end

  def methods_by_type(section=T.unsafe(nil)); end

  def methods_hash(); end

  def methods_matching(methods, singleton=T.unsafe(nil), &block); end

  def modules(); end

  def modules_hash(); end

  def name(); end

  def name_for_path(); end

  def ongoing_visibility=(visibility); end

  def params(); end

  def params=(params); end

  def remove_from_documentation?(); end

  def remove_invisible(min_visibility); end

  def remove_invisible_in(array, min_visibility); end

  def requires(); end

  def resolve_aliases(added); end

  def section_contents(); end

  def sections(); end

  def sections_hash(); end

  def set_constant_visibility_for(names, visibility); end

  def set_current_section(title, comment); end

  def set_visibility_for(methods, visibility, singleton=T.unsafe(nil)); end

  def sort_sections(); end

  def temporary_section(); end

  def temporary_section=(temporary_section); end

  def top_level(); end

  def unmatched_alias_lists(); end

  def unmatched_alias_lists=(unmatched_alias_lists); end

  def upgrade_to_class(mod, class_type, enclosing); end

  def visibility(); end

  def visibility=(visibility); end
  TOMDOC_TITLES = ::T.let(nil, ::T.untyped)
  TOMDOC_TITLES_SORT = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

class RDoc::Context::Section
  include ::RDoc::Text
  include ::RDoc::Generator::Markup
  def ==(other); end

  def add_comment(comment); end

  def aref(); end

  def comment(); end

  def comments(); end

  def eql?(other); end

  def extract_comment(comment); end

  def in_files(); end

  def initialize(parent, title, comment); end

  def marshal_dump(); end

  def marshal_load(array); end

  def parent(); end

  def parse(); end

  def plain_html(); end

  def remove_comment(comment); end

  def sequence(); end

  def title(); end
  MARSHAL_VERSION = ::T.let(nil, ::T.untyped)
end

class RDoc::Context::Section
end

class RDoc::Context
end

class RDoc::CrossReference
  def initialize(context); end

  def resolve(name, text); end

  def seen(); end

  def seen=(seen); end
  ALL_CROSSREF_REGEXP = ::T.let(nil, ::T.untyped)
  CLASS_REGEXP_STR = ::T.let(nil, ::T.untyped)
  CROSSREF_REGEXP = ::T.let(nil, ::T.untyped)
  METHOD_REGEXP_STR = ::T.let(nil, ::T.untyped)
end

class RDoc::CrossReference
end

class RDoc::ERBIO
  def set_eoutvar(compiler, io_variable); end
end

class RDoc::ERBIO
end

class RDoc::ERBPartial
end

class RDoc::ERBPartial
end

module RDoc::Encoding
  HEADER_REGEXP = ::T.let(nil, ::T.untyped)
end

module RDoc::Encoding
  extend ::T::Sig
  def self.change_encoding(text, encoding); end

  def self.detect_encoding(string); end

  def self.read_file(filename, encoding, force_transcode=T.unsafe(nil)); end

  def self.remove_frozen_string_literal(string); end

  def self.remove_magic_comment(string); end
end

class RDoc::Extend
end

class RDoc::Extend
end

module RDoc::Generator
end

class RDoc::Generator::Darkfish
  include ::ERB::Util
  def assemble_template(body_file); end

  def asset_rel_path(); end

  def asset_rel_path=(asset_rel_path); end

  def base_dir(); end

  def class_dir(); end

  def classes(); end

  def copy_static(); end

  def debug_msg(*msg); end

  def dry_run(); end

  def dry_run=(dry_run); end

  def file_dir(); end

  def file_output(); end

  def file_output=(file_output); end

  def files(); end

  def gen_sub_directories(); end

  def generate(); end

  def generate_class(klass, template_file=T.unsafe(nil)); end

  def generate_class_files(); end

  def generate_file_files(); end

  def generate_index(); end

  def generate_page(file); end

  def generate_servlet_not_found(message); end

  def generate_servlet_root(installed); end

  def generate_table_of_contents(); end

  def get_sorted_module_list(classes); end

  def get_svninfo(klass); end

  def initialize(store, options); end

  def install_rdoc_static_file(source, destination, options); end

  def json_index(); end

  def methods(); end

  def modsort(); end

  def outputdir(); end

  def render(file_name); end

  def render_template(template_file, out_file=T.unsafe(nil)); end

  def setup(); end

  def store(); end

  def template_dir(); end

  def template_for(file, page=T.unsafe(nil), klass=T.unsafe(nil)); end

  def template_result(template, context, template_file); end

  def time_delta_string(seconds); end

  def write_style_sheet(); end
  BUILTIN_STYLE_ITEMS = ::T.let(nil, ::T.untyped)
  DESCRIPTION = ::T.let(nil, ::T.untyped)
  GENERATOR_DIR = ::T.let(nil, ::T.untyped)
  SVNID_PATTERN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class RDoc::Generator::Darkfish
end

class RDoc::Generator::JsonIndex
  include ::RDoc::Text
  def build_index(); end

  def class_dir(); end

  def debug_msg(*msg); end

  def file_dir(); end

  def generate(); end

  def generate_gzipped(); end

  def index(); end

  def index_classes(); end

  def index_methods(); end

  def index_pages(); end

  def initialize(parent_generator, options); end

  def reset(files, classes); end

  def search_string(string); end
  SEARCH_INDEX_FILE = ::T.let(nil, ::T.untyped)
end

class RDoc::Generator::JsonIndex
end

module RDoc::Generator::Markup
  def aref_to(target_path); end

  def as_href(from_path); end

  def cvs_url(url, full_path); end

  def description(); end

  def formatter(); end
end

module RDoc::Generator::Markup
  extend ::T::Sig
end

class RDoc::Generator::POT
  def class_dir(); end

  def generate(); end

  def initialize(store, options); end
  DESCRIPTION = ::T.let(nil, ::T.untyped)
end

class RDoc::Generator::POT::MessageExtractor
  def extract(); end

  def initialize(store); end
end

class RDoc::Generator::POT::MessageExtractor
end

class RDoc::Generator::POT::PO
  def add(entry); end
end

class RDoc::Generator::POT::PO
end

class RDoc::Generator::POT::POEntry
  def extracted_comment(); end

  def flags(); end

  def initialize(msgid, options=T.unsafe(nil)); end

  def merge(other_entry); end

  def msgid(); end

  def msgstr(); end

  def references(); end

  def translator_comment(); end
end

class RDoc::Generator::POT::POEntry
end

class RDoc::Generator::POT
end

class RDoc::Generator::RI
  def generate(); end

  def initialize(store, options); end
  DESCRIPTION = ::T.let(nil, ::T.untyped)
end

class RDoc::Generator::RI
end

module RDoc::Generator
  extend ::T::Sig
end

class RDoc::GhostMethod
end

class RDoc::GhostMethod
end

class RDoc::I18n::Locale
  def initialize(name); end

  def load(locale_directory); end

  def name(); end

  def translate(message); end
end

class RDoc::I18n::Locale
  def self.[](locale_name); end

  def self.[]=(locale_name, locale); end
end

module RDoc::I18n
  extend ::T::Sig
end

class RDoc::Include
end

class RDoc::Include
end

class RDoc::Markdown
  def _Alphanumeric(); end

  def _AlphanumericAscii(); end

  def _AtxHeading(); end

  def _AtxInline(); end

  def _AtxStart(); end

  def _AutoLink(); end

  def _AutoLinkEmail(); end

  def _AutoLinkUrl(); end

  def _BOM(); end

  def _BlankLine(); end

  def _Block(); end

  def _BlockQuote(); end

  def _BlockQuoteRaw(); end

  def _Bullet(); end

  def _BulletList(); end

  def _CharEntity(); end

  def _Code(); end

  def _CodeFence(); end

  def _DecEntity(); end

  def _DefinitionList(); end

  def _DefinitionListDefinition(); end

  def _DefinitionListItem(); end

  def _DefinitionListLabel(); end

  def _Digit(); end

  def _Doc(); end

  def _Emph(); end

  def _EmphStar(); end

  def _EmphUl(); end

  def _EmptyTitle(); end

  def _Endline(); end

  def _Entity(); end

  def _Enumerator(); end

  def _Eof(); end

  def _EscapedChar(); end

  def _ExplicitLink(); end

  def _ExtendedSpecialChar(); end

  def _Heading(); end

  def _HexEntity(); end

  def _HorizontalRule(); end

  def _HtmlAnchor(); end

  def _HtmlAttribute(); end

  def _HtmlBlock(); end

  def _HtmlBlockAddress(); end

  def _HtmlBlockBlockquote(); end

  def _HtmlBlockCenter(); end

  def _HtmlBlockCloseAddress(); end

  def _HtmlBlockCloseBlockquote(); end

  def _HtmlBlockCloseCenter(); end

  def _HtmlBlockCloseDd(); end

  def _HtmlBlockCloseDir(); end

  def _HtmlBlockCloseDiv(); end

  def _HtmlBlockCloseDl(); end

  def _HtmlBlockCloseDt(); end

  def _HtmlBlockCloseFieldset(); end

  def _HtmlBlockCloseForm(); end

  def _HtmlBlockCloseFrameset(); end

  def _HtmlBlockCloseH1(); end

  def _HtmlBlockCloseH2(); end

  def _HtmlBlockCloseH3(); end

  def _HtmlBlockCloseH4(); end

  def _HtmlBlockCloseH5(); end

  def _HtmlBlockCloseH6(); end

  def _HtmlBlockCloseHead(); end

  def _HtmlBlockCloseLi(); end

  def _HtmlBlockCloseMenu(); end

  def _HtmlBlockCloseNoframes(); end

  def _HtmlBlockCloseNoscript(); end

  def _HtmlBlockCloseOl(); end

  def _HtmlBlockCloseP(); end

  def _HtmlBlockClosePre(); end

  def _HtmlBlockCloseScript(); end

  def _HtmlBlockCloseTable(); end

  def _HtmlBlockCloseTbody(); end

  def _HtmlBlockCloseTd(); end

  def _HtmlBlockCloseTfoot(); end

  def _HtmlBlockCloseTh(); end

  def _HtmlBlockCloseThead(); end

  def _HtmlBlockCloseTr(); end

  def _HtmlBlockCloseUl(); end

  def _HtmlBlockDd(); end

  def _HtmlBlockDir(); end

  def _HtmlBlockDiv(); end

  def _HtmlBlockDl(); end

  def _HtmlBlockDt(); end

  def _HtmlBlockFieldset(); end

  def _HtmlBlockForm(); end

  def _HtmlBlockFrameset(); end

  def _HtmlBlockH1(); end

  def _HtmlBlockH2(); end

  def _HtmlBlockH3(); end

  def _HtmlBlockH4(); end

  def _HtmlBlockH5(); end

  def _HtmlBlockH6(); end

  def _HtmlBlockHead(); end

  def _HtmlBlockInTags(); end

  def _HtmlBlockLi(); end

  def _HtmlBlockMenu(); end

  def _HtmlBlockNoframes(); end

  def _HtmlBlockNoscript(); end

  def _HtmlBlockOl(); end

  def _HtmlBlockOpenAddress(); end

  def _HtmlBlockOpenBlockquote(); end

  def _HtmlBlockOpenCenter(); end

  def _HtmlBlockOpenDd(); end

  def _HtmlBlockOpenDir(); end

  def _HtmlBlockOpenDiv(); end

  def _HtmlBlockOpenDl(); end

  def _HtmlBlockOpenDt(); end

  def _HtmlBlockOpenFieldset(); end

  def _HtmlBlockOpenForm(); end

  def _HtmlBlockOpenFrameset(); end

  def _HtmlBlockOpenH1(); end

  def _HtmlBlockOpenH2(); end

  def _HtmlBlockOpenH3(); end

  def _HtmlBlockOpenH4(); end

  def _HtmlBlockOpenH5(); end

  def _HtmlBlockOpenH6(); end

  def _HtmlBlockOpenHead(); end

  def _HtmlBlockOpenLi(); end

  def _HtmlBlockOpenMenu(); end

  def _HtmlBlockOpenNoframes(); end

  def _HtmlBlockOpenNoscript(); end

  def _HtmlBlockOpenOl(); end

  def _HtmlBlockOpenP(); end

  def _HtmlBlockOpenPre(); end

  def _HtmlBlockOpenScript(); end

  def _HtmlBlockOpenTable(); end

  def _HtmlBlockOpenTbody(); end

  def _HtmlBlockOpenTd(); end

  def _HtmlBlockOpenTfoot(); end

  def _HtmlBlockOpenTh(); end

  def _HtmlBlockOpenThead(); end

  def _HtmlBlockOpenTr(); end

  def _HtmlBlockOpenUl(); end

  def _HtmlBlockP(); end

  def _HtmlBlockPre(); end

  def _HtmlBlockScript(); end

  def _HtmlBlockSelfClosing(); end

  def _HtmlBlockTable(); end

  def _HtmlBlockTbody(); end

  def _HtmlBlockTd(); end

  def _HtmlBlockTfoot(); end

  def _HtmlBlockTh(); end

  def _HtmlBlockThead(); end

  def _HtmlBlockTr(); end

  def _HtmlBlockType(); end

  def _HtmlBlockUl(); end

  def _HtmlCloseAnchor(); end

  def _HtmlComment(); end

  def _HtmlOpenAnchor(); end

  def _HtmlTag(); end

  def _HtmlUnclosed(); end

  def _HtmlUnclosedType(); end

  def _Image(); end

  def _InStyleTags(); end

  def _Indent(); end

  def _IndentedLine(); end

  def _Inline(); end

  def _InlineNote(); end

  def _Inlines(); end

  def _Label(); end

  def _Line(); end

  def _LineBreak(); end

  def _Link(); end

  def _ListBlock(); end

  def _ListBlockLine(); end

  def _ListContinuationBlock(); end

  def _ListItem(); end

  def _ListItemTight(); end

  def _ListLoose(); end

  def _ListTight(); end

  def _Newline(); end

  def _NonblankIndentedLine(); end

  def _NonindentSpace(); end

  def _Nonspacechar(); end

  def _NormalChar(); end

  def _NormalEndline(); end

  def _Note(); end

  def _NoteReference(); end

  def _Notes(); end

  def _OptionallyIndentedLine(); end

  def _OrderedList(); end

  def _Para(); end

  def _Plain(); end

  def _Quoted(); end

  def _RawHtml(); end

  def _RawLine(); end

  def _RawNoteBlock(); end

  def _RawNoteReference(); end

  def _RefSrc(); end

  def _RefTitle(); end

  def _RefTitleDouble(); end

  def _RefTitleParens(); end

  def _RefTitleSingle(); end

  def _Reference(); end

  def _ReferenceLink(); end

  def _ReferenceLinkDouble(); end

  def _ReferenceLinkSingle(); end

  def _References(); end

  def _SetextBottom1(); end

  def _SetextBottom2(); end

  def _SetextHeading(); end

  def _SetextHeading1(); end

  def _SetextHeading2(); end

  def _SkipBlock(); end

  def _Source(); end

  def _SourceContents(); end

  def _Sp(); end

  def _Space(); end

  def _Spacechar(); end

  def _SpecialChar(); end

  def _Spnl(); end

  def _StarLine(); end

  def _StartList(); end

  def _Str(); end

  def _StrChunk(); end

  def _Strike(); end

  def _Strong(); end

  def _StrongStar(); end

  def _StrongUl(); end

  def _StyleBlock(); end

  def _StyleClose(); end

  def _StyleOpen(); end

  def _Symbol(); end

  def _TerminalEndline(); end

  def _Ticks1(); end

  def _Ticks2(); end

  def _Ticks3(); end

  def _Ticks4(); end

  def _Ticks5(); end

  def _Title(); end

  def _TitleDouble(); end

  def _TitleSingle(); end

  def _UlLine(); end

  def _UlOrStarLine(); end

  def _Verbatim(); end

  def _VerbatimChunk(); end

  def _Whitespace(); end

  def _root(); end

  def apply(rule); end

  def apply_with_args(rule, *args); end

  def break_on_newline=(enable); end

  def break_on_newline?(); end

  def css=(enable); end

  def css?(); end

  def current_column(target=T.unsafe(nil)); end

  def current_line(target=T.unsafe(nil)); end

  def definition_lists=(enable); end

  def definition_lists?(); end

  def emphasis(text); end

  def extension(name, enable); end

  def extension?(name); end

  def external_invoke(other, rule, *args); end

  def failed_rule(); end

  def failing_rule_offset(); end

  def failure_caret(); end

  def failure_character(); end

  def failure_info(); end

  def failure_oneline(); end

  def get_byte(); end

  def get_text(start); end

  def github=(enable); end

  def github?(); end

  def grow_lr(rule, args, start_pos, m); end

  def html=(enable); end

  def html?(); end

  def initialize(extensions=T.unsafe(nil), debug=T.unsafe(nil)); end

  def inner_parse(text); end

  def lines(); end

  def link_to(content, label=T.unsafe(nil), text=T.unsafe(nil)); end

  def list_item_from(unparsed); end

  def match_string(str); end

  def note(label); end

  def note_for(ref); end

  def notes=(enable); end

  def notes?(); end

  def paragraph(parts); end

  def parse(markdown); end

  def peg_parse(rule=T.unsafe(nil)); end

  def pos(); end

  def pos=(pos); end

  def raise_error(); end

  def reference(label, link); end

  def result(); end

  def result=(result); end

  def scan(reg); end

  def set_failed_rule(name); end

  def set_string(string, pos); end

  def setup_foreign_grammar(); end

  def setup_parser(str, debug=T.unsafe(nil)); end

  def show_error(io=T.unsafe(nil)); end

  def show_pos(); end

  def strike(text); end

  def strike=(enable); end

  def strike?(); end

  def string(); end

  def strong(text); end
  DEFAULT_EXTENSIONS = ::T.let(nil, ::T.untyped)
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  HTML_ENTITIES = ::T.let(nil, ::T.untyped)
  Rules = ::T.let(nil, ::T.untyped)
end

class RDoc::Markdown::Literals
  def _Alphanumeric(); end

  def _AlphanumericAscii(); end

  def _BOM(); end

  def _Newline(); end

  def _NonAlphanumeric(); end

  def _Spacechar(); end

  def apply(rule); end

  def apply_with_args(rule, *args); end

  def current_column(target=T.unsafe(nil)); end

  def current_line(target=T.unsafe(nil)); end

  def external_invoke(other, rule, *args); end

  def failed_rule(); end

  def failing_rule_offset(); end

  def failure_caret(); end

  def failure_character(); end

  def failure_info(); end

  def failure_oneline(); end

  def get_byte(); end

  def get_text(start); end

  def grow_lr(rule, args, start_pos, m); end

  def initialize(str, debug=T.unsafe(nil)); end

  def lines(); end

  def match_string(str); end

  def parse(rule=T.unsafe(nil)); end

  def pos(); end

  def pos=(pos); end

  def raise_error(); end

  def result(); end

  def result=(result); end

  def scan(reg); end

  def set_failed_rule(name); end

  def set_string(string, pos); end

  def setup_foreign_grammar(); end

  def setup_parser(str, debug=T.unsafe(nil)); end

  def show_error(io=T.unsafe(nil)); end

  def show_pos(); end

  def string(); end
  Rules = ::T.let(nil, ::T.untyped)
end

class RDoc::Markdown::Literals::MemoEntry
  def ans(); end

  def initialize(ans, pos); end

  def left_rec(); end

  def left_rec=(left_rec); end

  def move!(ans, pos, result); end

  def pos(); end

  def result(); end

  def set(); end
end

class RDoc::Markdown::Literals::MemoEntry
end

class RDoc::Markdown::Literals::ParseError
end

class RDoc::Markdown::Literals::ParseError
end

class RDoc::Markdown::Literals::RuleInfo
  def initialize(name, rendered); end

  def name(); end

  def rendered(); end
end

class RDoc::Markdown::Literals::RuleInfo
end

class RDoc::Markdown::Literals
  def self.rule_info(name, rendered); end
end

class RDoc::Markdown::MemoEntry
  def ans(); end

  def initialize(ans, pos); end

  def left_rec(); end

  def left_rec=(left_rec); end

  def move!(ans, pos, result); end

  def pos(); end

  def result(); end

  def set(); end
end

class RDoc::Markdown::MemoEntry
end

class RDoc::Markdown::ParseError
end

class RDoc::Markdown::ParseError
end

class RDoc::Markdown::RuleInfo
  def initialize(name, rendered); end

  def name(); end

  def rendered(); end
end

class RDoc::Markdown::RuleInfo
end

class RDoc::Markdown
  def self.extension(name); end

  def self.parse(markdown); end

  def self.rule_info(name, rendered); end
end

class RDoc::Markup
  def add_html(tag, name); end

  def add_regexp_handling(pattern, name); end

  def add_word_pair(start, stop, name); end

  def attribute_manager(); end

  def convert(input, formatter); end

  def initialize(attribute_manager=T.unsafe(nil)); end
end

class RDoc::Markup::AttrChanger
  def turn_off(); end

  def turn_off=(_); end

  def turn_on(); end

  def turn_on=(_); end
end

class RDoc::Markup::AttrChanger
  def self.[](*_); end

  def self.members(); end
end

class RDoc::Markup::AttrSpan
  def [](n); end

  def initialize(length); end

  def set_attrs(start, length, bits); end
end

class RDoc::Markup::AttrSpan
end

class RDoc::Markup::AttributeManager
  def add_html(tag, name); end

  def add_regexp_handling(pattern, name); end

  def add_word_pair(start, stop, name); end

  def attribute(turn_on, turn_off); end

  def attributes(); end

  def change_attribute(current, new); end

  def changed_attribute_by_name(current_set, new_set); end

  def convert_attrs(str, attrs); end

  def convert_html(str, attrs); end

  def convert_regexp_handlings(str, attrs); end

  def copy_string(start_pos, end_pos); end

  def display_attributes(); end

  def flow(str); end

  def html_tags(); end

  def mask_protected_sequences(); end

  def matching_word_pairs(); end

  def protectable(); end

  def regexp_handlings(); end

  def split_into_flow(); end

  def unmask_protected_sequences(); end

  def word_pair_map(); end
  A_PROTECT = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
  PROTECT_ATTR = ::T.let(nil, ::T.untyped)
end

class RDoc::Markup::AttributeManager
end

class RDoc::Markup::Attributes
  def as_string(bitmap); end

  def bitmap_for(name); end

  def each_name_of(bitmap); end

  def regexp_handling(); end
end

class RDoc::Markup::Attributes
end

class RDoc::Markup::BlankLine
  def accept(visitor); end
end

class RDoc::Markup::BlankLine
  def self.new(); end
end

class RDoc::Markup::BlockQuote
end

class RDoc::Markup::BlockQuote
end

class RDoc::Markup::Document
  include ::Enumerable
  def <<(part); end

  def ==(other); end

  def accept(visitor); end

  def concat(parts); end

  def each(&block); end

  def empty?(); end

  def file(); end

  def file=(location); end

  def initialize(*parts); end

  def merge(other); end

  def merged?(); end

  def omit_headings_below(); end

  def omit_headings_below=(omit_headings_below); end

  def parts(); end

  def push(*parts); end

  def table_of_contents(); end
end

class RDoc::Markup::Document
end

class RDoc::Markup::Formatter
  def accept_document(document); end

  def add_regexp_handling_RDOCLINK(); end

  def add_regexp_handling_TIDYLINK(); end

  def add_tag(name, start, stop); end

  def annotate(tag); end

  def convert(content); end

  def convert_flow(flow); end

  def convert_regexp_handling(target); end

  def convert_string(string); end

  def ignore(*node); end

  def in_tt?(); end

  def initialize(options, markup=T.unsafe(nil)); end

  def off_tags(res, item); end

  def on_tags(res, item); end

  def parse_url(url); end

  def tt?(tag); end
end

class RDoc::Markup::Formatter::InlineTag
  def bit(); end

  def bit=(_); end

  def off(); end

  def off=(_); end

  def on(); end

  def on=(_); end
end

class RDoc::Markup::Formatter::InlineTag
  def self.[](*_); end

  def self.members(); end
end

class RDoc::Markup::Formatter
  def self.gen_relative_url(path, target); end
end

class RDoc::Markup::HardBreak
  def ==(other); end

  def accept(visitor); end
end

class RDoc::Markup::HardBreak
  def self.new(); end
end

class RDoc::Markup::Heading
  def accept(visitor); end

  def aref(); end

  def label(context=T.unsafe(nil)); end

  def level(); end

  def level=(_); end

  def plain_html(); end

  def text(); end

  def text=(_); end
end

class RDoc::Markup::Heading
  def self.[](*_); end

  def self.members(); end

  def self.to_html(); end

  def self.to_label(); end
end

class RDoc::Markup::Include
  def ==(other); end

  def file(); end

  def include_path(); end

  def initialize(file, include_path); end
end

class RDoc::Markup::Include
end

class RDoc::Markup::IndentedParagraph
  def indent(); end

  def initialize(indent, *parts); end

  def text(hard_break=T.unsafe(nil)); end
end

class RDoc::Markup::IndentedParagraph
end

class RDoc::Markup::List
  def <<(item); end

  def ==(other); end

  def accept(visitor); end

  def empty?(); end

  def initialize(type=T.unsafe(nil), *items); end

  def items(); end

  def last(); end

  def push(*items); end

  def type(); end

  def type=(type); end
end

class RDoc::Markup::List
end

class RDoc::Markup::ListItem
  def <<(part); end

  def ==(other); end

  def accept(visitor); end

  def empty?(); end

  def initialize(label=T.unsafe(nil), *parts); end

  def label(); end

  def label=(label); end

  def length(); end

  def parts(); end

  def push(*parts); end
end

class RDoc::Markup::ListItem
end

class RDoc::Markup::Paragraph
  def text(hard_break=T.unsafe(nil)); end
end

class RDoc::Markup::Paragraph
end

class RDoc::Markup::Parser
  include ::RDoc::Text
  def build_heading(level); end

  def build_list(margin); end

  def build_paragraph(margin); end

  def build_verbatim(margin); end

  def char_pos(byte_offset); end

  def debug(); end

  def debug=(debug); end

  def get(); end

  def parse(parent, indent=T.unsafe(nil)); end

  def parse_text(parent, indent); end

  def peek_token(); end

  def setup_scanner(input); end

  def skip(token_type, error=T.unsafe(nil)); end

  def token_pos(byte_offset); end

  def tokenize(input); end

  def tokens(); end

  def unget(); end
  LIST_TOKENS = ::T.let(nil, ::T.untyped)
end

class RDoc::Markup::Parser::Error
end

class RDoc::Markup::Parser::Error
end

class RDoc::Markup::Parser::ParseError
end

class RDoc::Markup::Parser::ParseError
end

class RDoc::Markup::Parser
  def self.parse(str); end

  def self.tokenize(str); end
end

class RDoc::Markup::PreProcess
  def find_include_file(name); end

  def handle(text, code_object=T.unsafe(nil), &block); end

  def handle_directive(prefix, directive, param, code_object=T.unsafe(nil), encoding=T.unsafe(nil)); end

  def include_file(name, indent, encoding); end

  def initialize(input_file_name, include_path); end

  def options(); end

  def options=(options); end
end

class RDoc::Markup::PreProcess
  def self.post_process(&block); end

  def self.post_processors(); end

  def self.register(directive, &block); end

  def self.registered(); end

  def self.reset(); end
end

class RDoc::Markup::Raw
  def <<(text); end

  def ==(other); end

  def accept(visitor); end

  def initialize(*parts); end

  def merge(other); end

  def parts(); end

  def push(*texts); end

  def text(); end
end

class RDoc::Markup::Raw
end

class RDoc::Markup::RegexpHandling
  def ==(o); end

  def initialize(type, text); end

  def text(); end

  def text=(text); end

  def type(); end
end

class RDoc::Markup::RegexpHandling
end

class RDoc::Markup::Rule
  def accept(visitor); end
end

class RDoc::Markup::Rule
end

class RDoc::Markup::ToAnsi
end

class RDoc::Markup::ToAnsi
end

class RDoc::Markup::ToBs
end

class RDoc::Markup::ToBs
end

class RDoc::Markup::ToHtml
  include ::RDoc::Text
  def accept_blank_line(blank_line); end

  def accept_block_quote(block_quote); end

  def accept_heading(heading); end

  def accept_list_end(list); end

  def accept_list_item_end(list_item); end

  def accept_list_item_start(list_item); end

  def accept_list_start(list); end

  def accept_paragraph(paragraph); end

  def accept_raw(raw); end

  def accept_rule(rule); end

  def accept_verbatim(verbatim); end

  def code_object(); end

  def code_object=(code_object); end

  def convert_string(text); end

  def end_accepting(); end

  def from_path(); end

  def from_path=(from_path); end

  def gen_url(url, text); end

  def handle_RDOCLINK(url); end

  def handle_regexp_HARD_BREAK(target); end

  def handle_regexp_HYPERLINK(target); end

  def handle_regexp_RDOCLINK(target); end

  def handle_regexp_TIDYLINK(target); end

  def html_list_name(list_type, open_tag); end

  def in_list_entry(); end

  def init_tags(); end

  def list(); end

  def list_end_for(list_type); end

  def list_item_start(list_item, list_type); end

  def parseable?(text); end

  def res(); end

  def start_accepting(); end

  def to_html(item); end
  LIST_TYPE_TO_HTML = ::T.let(nil, ::T.untyped)
end

class RDoc::Markup::ToHtml
end

class RDoc::Markup::ToHtmlCrossref
  def context(); end

  def context=(context); end

  def cross_reference(name, text=T.unsafe(nil), code=T.unsafe(nil)); end

  def handle_regexp_CROSSREF(target); end

  def initialize(options, from_path, context, markup=T.unsafe(nil)); end

  def link(name, text, code=T.unsafe(nil)); end

  def show_hash(); end

  def show_hash=(show_hash); end
  ALL_CROSSREF_REGEXP = ::T.let(nil, ::T.untyped)
  CLASS_REGEXP_STR = ::T.let(nil, ::T.untyped)
  CROSSREF_REGEXP = ::T.let(nil, ::T.untyped)
  METHOD_REGEXP_STR = ::T.let(nil, ::T.untyped)
end

class RDoc::Markup::ToHtmlCrossref
end

class RDoc::Markup::ToHtmlSnippet
  def accept_raw(*node); end

  def accept_rule(*node); end

  def add_paragraph(); end

  def character_limit(); end

  def characters(); end

  def handle_regexp_CROSSREF(target); end

  def initialize(options, characters=T.unsafe(nil), paragraphs=T.unsafe(nil), markup=T.unsafe(nil)); end

  def mask(); end

  def paragraph_limit(); end

  def paragraphs(); end

  def truncate(text); end
end

class RDoc::Markup::ToHtmlSnippet
end

class RDoc::Markup::ToJoinedParagraph
  def accept_block_quote(*node); end

  def accept_heading(*node); end

  def accept_list_end(*node); end

  def accept_list_item_end(*node); end

  def accept_list_item_start(*node); end

  def accept_list_start(*node); end

  def accept_paragraph(paragraph); end

  def accept_raw(*node); end

  def accept_rule(*node); end

  def accept_verbatim(*node); end

  def end_accepting(); end

  def initialize(); end

  def start_accepting(); end
end

class RDoc::Markup::ToJoinedParagraph
end

class RDoc::Markup::ToLabel
  def accept_blank_line(*node); end

  def accept_block_quote(*node); end

  def accept_heading(*node); end

  def accept_list_end(*node); end

  def accept_list_item_end(*node); end

  def accept_list_item_start(*node); end

  def accept_list_start(*node); end

  def accept_paragraph(*node); end

  def accept_raw(*node); end

  def accept_rule(*node); end

  def accept_verbatim(*node); end

  def convert(text); end

  def end_accepting(*node); end

  def handle_regexp_CROSSREF(target); end

  def handle_regexp_HARD_BREAK(*node); end

  def handle_regexp_TIDYLINK(target); end

  def initialize(markup=T.unsafe(nil)); end

  def res(); end

  def start_accepting(*node); end
end

class RDoc::Markup::ToLabel
end

class RDoc::Markup::ToMarkdown
  def gen_url(url, text); end

  def handle_rdoc_link(url); end

  def handle_regexp_RDOCLINK(target); end

  def handle_regexp_TIDYLINK(target); end
end

class RDoc::Markup::ToMarkdown
end

class RDoc::Markup::ToRdoc
  def accept_blank_line(blank_line); end

  def accept_block_quote(block_quote); end

  def accept_heading(heading); end

  def accept_indented_paragraph(paragraph); end

  def accept_list_end(list); end

  def accept_list_item_end(list_item); end

  def accept_list_item_start(list_item); end

  def accept_list_start(list); end

  def accept_paragraph(paragraph); end

  def accept_raw(raw); end

  def accept_rule(rule); end

  def accept_verbatim(verbatim); end

  def attributes(text); end

  def end_accepting(); end

  def handle_regexp_HARD_BREAK(target); end

  def handle_regexp_SUPPRESSED_CROSSREF(target); end

  def indent(); end

  def indent=(indent); end

  def init_tags(); end

  def initialize(markup=T.unsafe(nil)); end

  def list_index(); end

  def list_type(); end

  def list_width(); end

  def prefix(); end

  def res(); end

  def start_accepting(); end

  def use_prefix(); end

  def width(); end

  def width=(width); end

  def wrap(text); end
end

class RDoc::Markup::ToRdoc
end

class RDoc::Markup::ToTableOfContents
  def accept_blank_line(*node); end

  def accept_block_quote(*node); end

  def accept_heading(heading); end

  def accept_list_end(*node); end

  def accept_list_end_bullet(*node); end

  def accept_list_item_end(*node); end

  def accept_list_item_start(*node); end

  def accept_list_start(*node); end

  def accept_paragraph(*node); end

  def accept_raw(*node); end

  def accept_rule(*node); end

  def accept_verbatim(*node); end

  def end_accepting(); end

  def initialize(); end

  def omit_headings_below(); end

  def omit_headings_below=(omit_headings_below); end

  def res(); end

  def start_accepting(); end

  def suppressed?(heading); end
end

class RDoc::Markup::ToTableOfContents
  def self.to_toc(); end
end

class RDoc::Markup::ToTest
  def accept_blank_line(blank_line); end

  def accept_heading(heading); end

  def accept_list_end(list); end

  def accept_list_item_end(list_item); end

  def accept_list_item_start(list_item); end

  def accept_list_start(list); end

  def accept_paragraph(paragraph); end

  def accept_raw(raw); end

  def accept_rule(rule); end

  def accept_verbatim(verbatim); end

  def end_accepting(); end

  def start_accepting(); end
end

class RDoc::Markup::ToTest
end

class RDoc::Markup::ToTtOnly
  def accept_blank_line(markup_item); end

  def accept_block_quote(block_quote); end

  def accept_heading(markup_item); end

  def accept_list_end(list); end

  def accept_list_item_end(markup_item); end

  def accept_list_item_start(list_item); end

  def accept_list_start(list); end

  def accept_paragraph(paragraph); end

  def accept_raw(markup_item); end

  def accept_rule(markup_item); end

  def accept_verbatim(markup_item); end

  def do_nothing(markup_item); end

  def end_accepting(); end

  def initialize(markup=T.unsafe(nil)); end

  def list_type(); end

  def res(); end

  def start_accepting(); end

  def tt_sections(text); end
end

class RDoc::Markup::ToTtOnly
end

class RDoc::Markup::Verbatim
  def format(); end

  def format=(format); end

  def normalize(); end

  def ruby?(); end
end

class RDoc::Markup::Verbatim
end

class RDoc::Markup
  def self.parse(str); end
end

class RDoc::MetaMethod
end

class RDoc::MetaMethod
end

class RDoc::MethodAttr
  include ::Comparable
  def ==(other); end

  def add_alias(an_alias, context); end

  def add_line_numbers(src); end

  def aliases(); end

  def aref(); end

  def aref_prefix(); end

  def arglists(); end

  def block_params(); end

  def block_params=(value); end

  def call_seq(); end

  def call_seq=(call_seq); end

  def find_method_or_attribute(name); end

  def find_see(); end

  def full_name(); end

  def html_name(); end

  def initialize(text, name); end

  def is_alias_for(); end

  def is_alias_for=(is_alias_for); end

  def markup_code(); end

  def name(); end

  def name=(name); end

  def name_prefix(); end

  def output_name(context); end

  def param_seq(); end

  def params(); end

  def params=(params); end

  def path(); end

  def pretty_name(); end

  def search_record(); end

  def see(); end

  def singleton(); end

  def singleton=(singleton); end

  def text(); end

  def type(); end

  def visibility(); end

  def visibility=(visibility); end
end

class RDoc::MethodAttr
end

class RDoc::Mixin
  def ==(other); end

  def eql?(other); end

  def full_name(); end

  def initialize(name, comment); end

  def module(); end

  def name(); end

  def name=(name); end
end

class RDoc::Mixin
end

class RDoc::NormalClass
  def definition(); end
end

class RDoc::NormalClass
end

class RDoc::NormalModule
  def definition(); end
end

class RDoc::NormalModule
end

class RDoc::Options
  DEPRECATED = ::T.let(nil, ::T.untyped)
  Directory = ::T.let(nil, ::T.untyped)
  Path = ::T.let(nil, ::T.untyped)
  PathArray = ::T.let(nil, ::T.untyped)
  SPECIAL = ::T.let(nil, ::T.untyped)
  Template = ::T.let(nil, ::T.untyped)
end

class RDoc::Parser
  def file_name(); end

  def initialize(top_level, file_name, content, options, stats); end
end

class RDoc::Parser::C
  include ::RDoc::Text
  def classes(); end

  def content(); end

  def content=(content); end

  def deduplicate_call_seq(); end

  def deduplicate_method_name(class_obj, method_name); end

  def do_aliases(); end

  def do_attrs(); end

  def do_boot_defclass(); end

  def do_classes(); end

  def do_constants(); end

  def do_define_class(); end

  def do_define_class_under(); end

  def do_define_module(); end

  def do_define_module_under(); end

  def do_includes(); end

  def do_methods(); end

  def do_missing(); end

  def do_modules(); end

  def do_singleton_class(); end

  def do_struct_define_without_accessor(); end

  def enclosure_dependencies(); end

  def find_alias_comment(class_name, new_name, old_name); end

  def find_attr_comment(var_name, attr_name, read=T.unsafe(nil), write=T.unsafe(nil)); end

  def find_body(class_name, meth_name, meth_obj, file_content, quiet=T.unsafe(nil)); end

  def find_class(raw_name, name); end

  def find_class_comment(class_name, class_mod); end

  def find_const_comment(type, const_name, class_name=T.unsafe(nil)); end

  def find_modifiers(comment, meth_obj); end

  def find_override_comment(class_name, meth_obj); end

  def gen_body_table(file_content); end

  def gen_const_table(file_content); end

  def handle_attr(var_name, attr_name, read, write); end

  def handle_class_module(var_name, type, class_name, parent, in_module); end

  def handle_constants(type, var_name, const_name, definition); end

  def handle_ifdefs_in(body); end

  def handle_method(type, var_name, meth_name, function, param_count, source_file=T.unsafe(nil)); end

  def handle_singleton(sclass_var, class_var); end

  def handle_tab_width(body); end

  def known_classes(); end

  def load_variable_map(map_name); end

  def look_for_directives_in(context, comment); end

  def missing_dependencies(); end

  def rb_scan_args(method_body); end

  def remove_commented_out_lines(); end

  def scan(); end

  def singleton_classes(); end

  def top_level(); end
end

class RDoc::Parser::C
end

class RDoc::Parser::ChangeLog
  include ::RDoc::Parser::Text
  def continue_entry_body(entry_body, continuation); end

  def create_document(groups); end

  def create_entries(entries); end

  def create_items(items); end

  def group_entries(entries); end

  def parse_entries(); end

  def scan(); end
end

class RDoc::Parser::ChangeLog
end

class RDoc::Parser::Markdown
  include ::RDoc::Parser::Text
  def scan(); end
end

class RDoc::Parser::Markdown
end

class RDoc::Parser::RD
  include ::RDoc::Parser::Text
  def scan(); end
end

class RDoc::Parser::RD
end

class RDoc::Parser::RipperStateLex
  def get_squashed_tk(); end

  def initialize(code); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_ARG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_BEG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_CMDARG = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_ENDARG = ::T.let(nil, ::T.untyped)
  EXPR_ENDFN = ::T.let(nil, ::T.untyped)
  EXPR_END_ANY = ::T.let(nil, ::T.untyped)
  EXPR_FITEM = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_LABEL = ::T.let(nil, ::T.untyped)
  EXPR_LABELED = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  EXPR_NONE = ::T.let(nil, ::T.untyped)
  EXPR_VALUE = ::T.let(nil, ::T.untyped)
  RIPPER_HAS_LEX_STATE = ::T.let(nil, ::T.untyped)
end

class RDoc::Parser::RipperStateLex::InnerStateLex
  def initialize(code); end

  def on_default(event, tok, data); end
end

class RDoc::Parser::RipperStateLex::InnerStateLex
end

class RDoc::Parser::RipperStateLex::Token
  def char_no(); end

  def char_no=(_); end

  def kind(); end

  def kind=(_); end

  def line_no(); end

  def line_no=(_); end

  def state(); end

  def state=(_); end

  def text(); end

  def text=(_); end
end

class RDoc::Parser::RipperStateLex::Token
  def self.[](*_); end

  def self.members(); end
end

class RDoc::Parser::RipperStateLex
  def self.end?(token); end

  def self.parse(code); end
end

class RDoc::Parser::Ruby
  include ::RDoc::TokenStream
  include ::RDoc::Parser::RubyTools
  def collect_first_comment(); end

  def consume_trailing_spaces(); end

  def create_attr(container, single, name, rw, comment); end

  def create_module_alias(container, constant, rhs_name); end

  def error(msg); end

  def get_bool(); end

  def get_class_or_module(container, ignore_constants=T.unsafe(nil)); end

  def get_class_specification(); end

  def get_constant(); end

  def get_end_token(tk); end

  def get_included_module_with_optional_parens(); end

  def get_method_container(container, name_t); end

  def get_symbol_or_name(); end

  def get_tkread_clean(pattern, replacement); end

  def get_visibility_information(tk, single); end

  def look_for_directives_in(container, comment); end

  def make_message(message); end

  def new_comment(comment); end

  def parse_alias(context, single, tk, comment); end

  def parse_attr(context, single, tk, comment); end

  def parse_attr_accessor(context, single, tk, comment); end

  def parse_call_parameters(tk); end

  def parse_class(container, single, tk, comment); end

  def parse_class_regular(container, declaration_context, single, name_t, given_name, comment); end

  def parse_class_singleton(container, name, comment); end

  def parse_comment(container, tk, comment); end

  def parse_comment_attr(container, type, name, comment); end

  def parse_comment_ghost(container, text, name, column, line_no, comment); end

  def parse_comment_tomdoc(container, tk, comment); end

  def parse_constant(container, tk, comment, ignore_constants=T.unsafe(nil)); end

  def parse_constant_body(container, constant, is_array_or_hash); end

  def parse_constant_visibility(container, single, tk); end

  def parse_extend_or_include(klass, container, comment); end

  def parse_identifier(container, single, tk, comment); end

  def parse_meta_attr(context, single, tk, comment); end

  def parse_meta_method(container, single, tk, comment); end

  def parse_meta_method_name(comment, tk); end

  def parse_meta_method_params(container, single, meth, tk, comment); end

  def parse_method(container, single, tk, comment); end

  def parse_method_dummy(container); end

  def parse_method_name(container); end

  def parse_method_name_regular(container, name_t); end

  def parse_method_name_singleton(container, name_t); end

  def parse_method_or_yield_parameters(method=T.unsafe(nil), modifiers=T.unsafe(nil)); end

  def parse_method_parameters(method); end

  def parse_method_params_and_body(container, single, meth, added_container); end

  def parse_module(container, single, tk, comment); end

  def parse_require(context, comment); end

  def parse_rescue(); end

  def parse_statements(container, single=T.unsafe(nil), current_method=T.unsafe(nil), comment=T.unsafe(nil)); end

  def parse_symbol_arg(no=T.unsafe(nil)); end

  def parse_symbol_arg_paren(no); end

  def parse_symbol_arg_space(no, tk); end

  def parse_symbol_in_arg(); end

  def parse_top_level_statements(container); end

  def parse_visibility(container, single, tk); end

  def parse_yield(context, single, tk, method); end

  def read_directive(allowed); end

  def read_documentation_modifiers(context, allowed); end

  def record_location(container); end

  def retrieve_comment_body(tk); end

  def scan(); end

  def skip_for_variable(); end

  def skip_method(container); end

  def skip_optional_do_after_expression(); end

  def skip_tkspace_comment(skip_nl=T.unsafe(nil)); end

  def suppress_parents(container, ancestor); end

  def tk_nl?(tk); end

  def update_visibility(container, vis_type, vis, singleton); end

  def warn(message); end
  NORMAL = ::T.let(nil, ::T.untyped)
  SINGLE = ::T.let(nil, ::T.untyped)
end

class RDoc::Parser::Ruby
end

module RDoc::Parser::RubyTools
  def add_token_listener(obj); end

  def get_tk(); end

  def get_tk_until(*tokens); end

  def get_tkread(); end

  def peek_read(); end

  def peek_tk(); end

  def remove_token_listener(obj); end

  def reset(); end

  def skip_tkspace(); end

  def skip_tkspace_without_nl(); end

  def token_listener(obj); end

  def unget_tk(tk); end
end

module RDoc::Parser::RubyTools
  extend ::T::Sig
end

class RDoc::Parser::Simple
  include ::RDoc::Parser::Text
  def content(); end

  def remove_coding_comment(text); end

  def remove_private_comment(comment); end

  def scan(); end
end

class RDoc::Parser::Simple
end

module RDoc::Parser::Text
end

module RDoc::Parser::Text
  extend ::T::Sig
end

class RDoc::Parser
  def self.alias_extension(old_ext, new_ext); end

  def self.binary?(file); end

  def self.can_parse(file_name); end

  def self.can_parse_by_name(file_name); end

  def self.check_modeline(file_name); end

  def self.for(top_level, file_name, content, options, stats); end

  def self.parse_files_matching(regexp); end

  def self.parsers(); end

  def self.remove_modeline(content); end

  def self.use_markup(content); end

  def self.zip?(file); end
end

class RDoc::RD
end

class RDoc::RD::BlockParser
  def _reduce_1(val, _values, result); end

  def _reduce_10(val, _values, result); end

  def _reduce_11(val, _values, result); end

  def _reduce_12(val, _values, result); end

  def _reduce_13(val, _values, result); end

  def _reduce_14(val, _values, result); end

  def _reduce_15(val, _values, result); end

  def _reduce_16(val, _values, result); end

  def _reduce_17(val, _values, result); end

  def _reduce_18(val, _values, result); end

  def _reduce_19(val, _values, result); end

  def _reduce_2(val, _values, result); end

  def _reduce_20(val, _values, result); end

  def _reduce_21(val, _values, result); end

  def _reduce_22(val, _values, result); end

  def _reduce_27(val, _values, result); end

  def _reduce_28(val, _values, result); end

  def _reduce_29(val, _values, result); end

  def _reduce_3(val, _values, result); end

  def _reduce_30(val, _values, result); end

  def _reduce_31(val, _values, result); end

  def _reduce_32(val, _values, result); end

  def _reduce_33(val, _values, result); end

  def _reduce_34(val, _values, result); end

  def _reduce_35(val, _values, result); end

  def _reduce_36(val, _values, result); end

  def _reduce_37(val, _values, result); end

  def _reduce_38(val, _values, result); end

  def _reduce_39(val, _values, result); end

  def _reduce_4(val, _values, result); end

  def _reduce_40(val, _values, result); end

  def _reduce_41(val, _values, result); end

  def _reduce_42(val, _values, result); end

  def _reduce_43(val, _values, result); end

  def _reduce_44(val, _values, result); end

  def _reduce_45(val, _values, result); end

  def _reduce_46(val, _values, result); end

  def _reduce_47(val, _values, result); end

  def _reduce_48(val, _values, result); end

  def _reduce_49(val, _values, result); end

  def _reduce_5(val, _values, result); end

  def _reduce_50(val, _values, result); end

  def _reduce_51(val, _values, result); end

  def _reduce_52(val, _values, result); end

  def _reduce_54(val, _values, result); end

  def _reduce_55(val, _values, result); end

  def _reduce_57(val, _values, result); end

  def _reduce_6(val, _values, result); end

  def _reduce_62(val, _values, result); end

  def _reduce_63(val, _values, result); end

  def _reduce_64(val, _values, result); end

  def _reduce_65(val, _values, result); end

  def _reduce_66(val, _values, result); end

  def _reduce_67(val, _values, result); end

  def _reduce_68(val, _values, result); end

  def _reduce_69(val, _values, result); end

  def _reduce_71(val, _values, result); end

  def _reduce_72(val, _values, result); end

  def _reduce_8(val, _values, result); end

  def _reduce_9(val, _values, result); end

  def _reduce_none(val, _values, result); end

  def add_footnote(content); end

  def add_label(label); end

  def content(values); end

  def footnotes(); end

  def include_path(); end

  def include_path=(include_path); end

  def labels(); end

  def line_index(); end

  def on_error(et, ev, _values); end

  def paragraph(value); end

  def parse(src); end
  MARK_TO_LEVEL = ::T.let(nil, ::T.untyped)
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
  TMPFILE = ::T.let(nil, ::T.untyped)
end

class RDoc::RD::BlockParser
end

class RDoc::RD::Inline
  def ==(other); end

  def append(more); end

  def initialize(rdoc, reference); end

  def rdoc(); end

  def reference(); end
end

class RDoc::RD::Inline
  def self.new(rdoc, reference=T.unsafe(nil)); end
end

class RDoc::RD::InlineParser
  def _reduce_101(val, _values, result); end

  def _reduce_102(val, _values, result); end

  def _reduce_109(val, _values, result); end

  def _reduce_111(val, _values, result); end

  def _reduce_113(val, _values, result); end

  def _reduce_114(val, _values, result); end

  def _reduce_115(val, _values, result); end

  def _reduce_13(val, _values, result); end

  def _reduce_136(val, _values, result); end

  def _reduce_14(val, _values, result); end

  def _reduce_15(val, _values, result); end

  def _reduce_16(val, _values, result); end

  def _reduce_17(val, _values, result); end

  def _reduce_18(val, _values, result); end

  def _reduce_19(val, _values, result); end

  def _reduce_2(val, _values, result); end

  def _reduce_20(val, _values, result); end

  def _reduce_21(val, _values, result); end

  def _reduce_22(val, _values, result); end

  def _reduce_23(val, _values, result); end

  def _reduce_24(val, _values, result); end

  def _reduce_25(val, _values, result); end

  def _reduce_26(val, _values, result); end

  def _reduce_27(val, _values, result); end

  def _reduce_29(val, _values, result); end

  def _reduce_3(val, _values, result); end

  def _reduce_30(val, _values, result); end

  def _reduce_31(val, _values, result); end

  def _reduce_32(val, _values, result); end

  def _reduce_33(val, _values, result); end

  def _reduce_34(val, _values, result); end

  def _reduce_36(val, _values, result); end

  def _reduce_37(val, _values, result); end

  def _reduce_38(val, _values, result); end

  def _reduce_39(val, _values, result); end

  def _reduce_40(val, _values, result); end

  def _reduce_41(val, _values, result); end

  def _reduce_43(val, _values, result); end

  def _reduce_44(val, _values, result); end

  def _reduce_45(val, _values, result); end

  def _reduce_46(val, _values, result); end

  def _reduce_57(val, _values, result); end

  def _reduce_58(val, _values, result); end

  def _reduce_59(val, _values, result); end

  def _reduce_60(val, _values, result); end

  def _reduce_62(val, _values, result); end

  def _reduce_64(val, _values, result); end

  def _reduce_78(val, _values, result); end

  def _reduce_none(val, _values, result); end

  def initialize(block_parser); end

  def inline(rdoc, reference=T.unsafe(nil)); end

  def next_words_on_error(); end

  def on_error(et, ev, values); end

  def parse(inline); end

  def prev_words_on_error(ev); end
  BACK_SLASH = ::T.let(nil, ::T.untyped)
  BACK_SLASH_RE = ::T.let(nil, ::T.untyped)
  BAR = ::T.let(nil, ::T.untyped)
  BAR_RE = ::T.let(nil, ::T.untyped)
  CODE_CLOSE = ::T.let(nil, ::T.untyped)
  CODE_CLOSE_RE = ::T.let(nil, ::T.untyped)
  CODE_OPEN = ::T.let(nil, ::T.untyped)
  CODE_OPEN_RE = ::T.let(nil, ::T.untyped)
  EM_CLOSE = ::T.let(nil, ::T.untyped)
  EM_CLOSE_RE = ::T.let(nil, ::T.untyped)
  EM_OPEN = ::T.let(nil, ::T.untyped)
  EM_OPEN_RE = ::T.let(nil, ::T.untyped)
  FOOTNOTE_CLOSE = ::T.let(nil, ::T.untyped)
  FOOTNOTE_CLOSE_RE = ::T.let(nil, ::T.untyped)
  FOOTNOTE_OPEN = ::T.let(nil, ::T.untyped)
  FOOTNOTE_OPEN_RE = ::T.let(nil, ::T.untyped)
  INDEX_CLOSE = ::T.let(nil, ::T.untyped)
  INDEX_CLOSE_RE = ::T.let(nil, ::T.untyped)
  INDEX_OPEN = ::T.let(nil, ::T.untyped)
  INDEX_OPEN_RE = ::T.let(nil, ::T.untyped)
  KBD_CLOSE = ::T.let(nil, ::T.untyped)
  KBD_CLOSE_RE = ::T.let(nil, ::T.untyped)
  KBD_OPEN = ::T.let(nil, ::T.untyped)
  KBD_OPEN_RE = ::T.let(nil, ::T.untyped)
  OTHER_RE = ::T.let(nil, ::T.untyped)
  QUOTE = ::T.let(nil, ::T.untyped)
  QUOTE_RE = ::T.let(nil, ::T.untyped)
  REF_CLOSE = ::T.let(nil, ::T.untyped)
  REF_CLOSE_RE = ::T.let(nil, ::T.untyped)
  REF_OPEN = ::T.let(nil, ::T.untyped)
  REF_OPEN_RE = ::T.let(nil, ::T.untyped)
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
  SLASH_RE = ::T.let(nil, ::T.untyped)
  URL = ::T.let(nil, ::T.untyped)
  URL_RE = ::T.let(nil, ::T.untyped)
  VAR_CLOSE = ::T.let(nil, ::T.untyped)
  VAR_CLOSE_RE = ::T.let(nil, ::T.untyped)
  VAR_OPEN = ::T.let(nil, ::T.untyped)
  VAR_OPEN_RE = ::T.let(nil, ::T.untyped)
  VERB_CLOSE = ::T.let(nil, ::T.untyped)
  VERB_CLOSE_RE = ::T.let(nil, ::T.untyped)
  VERB_OPEN = ::T.let(nil, ::T.untyped)
  VERB_OPEN_RE = ::T.let(nil, ::T.untyped)
end

class RDoc::RD::InlineParser
end

class RDoc::RD
  def self.parse(rd); end
end

class RDoc::RDoc
  def document(options); end

  def error(msg); end

  def gather_files(files); end

  def generate(); end

  def generator(); end

  def generator=(generator); end

  def handle_pipe(); end

  def install_siginfo_handler(); end

  def last_modified(); end

  def list_files_in_directory(dir); end

  def load_options(); end

  def normalized_file_list(relative_files, force_doc=T.unsafe(nil), exclude_pattern=T.unsafe(nil)); end

  def options(); end

  def options=(options); end

  def output_flag_file(op_dir); end

  def parse_dot_doc_file(in_dir, filename); end

  def parse_file(filename); end

  def parse_files(files); end

  def remove_siginfo_handler(); end

  def remove_unparseable(files); end

  def setup_output_dir(dir, force); end

  def stats(); end

  def store(); end

  def store=(store); end

  def update_output_dir(op_dir, time, last=T.unsafe(nil)); end
  GENERATORS = ::T.let(nil, ::T.untyped)
end

class RDoc::RDoc
  def self.add_generator(klass); end

  def self.current(); end

  def self.current=(rdoc); end
end

module RDoc::RI
end

class RDoc::RI::Driver
  def add_also_in(out, also_in); end

  def add_class(out, name, classes); end

  def add_extends(out, extends); end

  def add_extension_modules(out, type, extensions); end

  def add_extension_modules_multiple(out, store, modules); end

  def add_extension_modules_single(out, store, include); end

  def add_from(out, store); end

  def add_includes(out, includes); end

  def add_method(out, name); end

  def add_method_documentation(out, klass); end

  def add_method_list(out, methods, name); end

  def ancestors_of(klass); end

  def check_did_you_mean(); end

  def class_cache(); end

  def class_document(name, found, klasses, includes, extends); end

  def class_document_comment(out, comment); end

  def class_document_constants(out, klass); end

  def classes(); end

  def classes_and_includes_and_extends_for(name); end

  def complete(name); end

  def complete_klass(name, klass, selector, method, completions); end

  def complete_method(name, klass, selector, completions); end

  def display(document); end

  def display_class(name); end

  def display_method(name); end

  def display_name(name); end

  def display_names(names); end

  def display_page(name); end

  def display_page_list(store, pages=T.unsafe(nil), search=T.unsafe(nil)); end

  def expand_class(klass); end

  def expand_name(name); end

  def filter_methods(found, name); end

  def find_methods(name); end

  def find_pager_jruby(pager); end

  def find_store(name); end

  def formatter(io); end

  def in_path?(file); end

  def initialize(initial_options=T.unsafe(nil)); end

  def interactive(); end

  def list_known_classes(names=T.unsafe(nil)); end

  def list_methods_matching(name); end

  def load_method(store, cache, klass, type, name); end

  def load_methods_matching(name); end

  def lookup_method(name); end

  def method_document(name, filtered); end

  def method_type(selector); end

  def name_regexp(name); end

  def page(); end

  def paging?(); end

  def parse_name(name); end

  def render_class(out, store, klass, also_in); end

  def render_method(out, store, method, name); end

  def render_method_arguments(out, arglists); end

  def render_method_comment(out, method, alias_for=T.unsafe(nil)); end

  def render_method_superclass(out, method); end

  def run(); end

  def setup_pager(); end

  def show_all(); end

  def show_all=(show_all); end

  def start_server(); end

  def stores(); end

  def stores=(stores); end

  def use_stdout(); end

  def use_stdout=(use_stdout); end
end

class RDoc::RI::Driver::Error
end

class RDoc::RI::Driver::Error
end

class RDoc::RI::Driver::NotFoundError
  def initialize(klass, suggestions=T.unsafe(nil)); end

  def name(); end
end

class RDoc::RI::Driver::NotFoundError
end

class RDoc::RI::Driver
  def self.default_options(); end

  def self.dump(data_path); end

  def self.process_args(argv); end

  def self.run(argv=T.unsafe(nil)); end
end

class RDoc::RI::Error
end

class RDoc::RI::Error
end

module RDoc::RI::Paths
  BASE = ::T.let(nil, ::T.untyped)
  HOMEDIR = ::T.let(nil, ::T.untyped)
end

module RDoc::RI::Paths
  extend ::T::Sig
  def self.each(system=T.unsafe(nil), site=T.unsafe(nil), home=T.unsafe(nil), gems=T.unsafe(nil), *extra_dirs, &blk); end

  def self.gem_dir(name, version); end

  def self.gemdirs(filter=T.unsafe(nil)); end

  def self.home_dir(); end

  def self.path(system=T.unsafe(nil), site=T.unsafe(nil), home=T.unsafe(nil), gems=T.unsafe(nil), *extra_dirs); end

  def self.raw_path(system, site, home, gems, *extra_dirs); end

  def self.site_dir(); end

  def self.system_dir(); end
end

RDoc::RI::Store = RDoc::Store

module RDoc::RI
  extend ::T::Sig
end

class RDoc::Require
  def initialize(name, comment); end

  def name(); end

  def name=(name); end

  def top_level(); end
end

class RDoc::Require
end

class RDoc::Servlet
  def asset(generator_name, req, res); end

  def asset_dirs(); end

  def documentation_page(store, generator, path, req, res); end

  def documentation_search(store, generator, req, res); end

  def documentation_source(path); end

  def error(exception, req, res); end

  def generator_for(store); end

  def if_modified_since(req, res, path=T.unsafe(nil)); end

  def initialize(server, stores, cache, mount_path=T.unsafe(nil), extra_doc_dirs=T.unsafe(nil)); end

  def installed_docs(); end

  def not_found(generator, req, res, message=T.unsafe(nil)); end

  def options(); end

  def ri_paths(&block); end

  def root(req, res); end

  def root_search(req, res); end

  def show_documentation(req, res); end

  def store_for(source_name); end
end

class RDoc::Servlet
end

class RDoc::SingleClass
  def definition(); end
end

class RDoc::SingleClass
end

class RDoc::Stats
  include ::RDoc::Text
  def add_alias(as); end

  def add_attribute(attribute); end

  def add_class(klass); end

  def add_constant(constant); end

  def add_file(file); end

  def add_method(method); end

  def add_module(mod); end

  def begin_adding(); end

  def calculate(); end

  def coverage_level(); end

  def coverage_level=(level); end

  def doc_stats(collection); end

  def done_adding(); end

  def files_so_far(); end

  def fully_documented?(); end

  def great_job(); end

  def initialize(store, num_files, verbosity=T.unsafe(nil)); end

  def num_files(); end

  def percent_doc(); end

  def report(); end

  def report_attributes(cm); end

  def report_class_module(cm); end

  def report_constants(cm); end

  def report_methods(cm); end

  def summary(); end

  def undoc_params(method); end
end

class RDoc::Stats::Normal
  def begin_adding(); end

  def done_adding(); end

  def print_file(files_so_far, filename); end
end

class RDoc::Stats::Normal
end

class RDoc::Stats::Quiet
  def begin_adding(*_); end

  def done_adding(*_); end

  def initialize(num_files); end

  def print_alias(*_); end

  def print_attribute(*_); end

  def print_class(*_); end

  def print_constant(*_); end

  def print_file(*_); end

  def print_method(*_); end

  def print_module(*_); end
end

class RDoc::Stats::Quiet
end

class RDoc::Stats::Verbose
  def nodoc(co); end

  def print_alias(as); end

  def print_attribute(attribute); end

  def print_class(klass); end

  def print_constant(constant); end

  def print_file(files_so_far, file); end

  def print_method(method); end

  def print_module(mod); end
end

class RDoc::Stats::Verbose
end

class RDoc::Stats
end

class RDoc::Store
  def add_c_enclosure(variable, namespace); end

  def add_c_variables(c_parser); end

  def add_file(absolute_name, relative_name: T.unsafe(nil), parser: T.unsafe(nil)); end

  def all_classes(); end

  def all_classes_and_modules(); end

  def all_files(); end

  def all_modules(); end

  def ancestors(); end

  def attributes(); end

  def c_class_variables(); end

  def c_enclosure_classes(); end

  def c_enclosure_names(); end

  def c_singleton_class_variables(); end

  def cache(); end

  def cache_path(); end

  def class_file(klass_name); end

  def class_methods(); end

  def class_path(klass_name); end

  def classes_hash(); end

  def clean_cache_collection(collection); end

  def complete(min_visibility); end

  def dry_run(); end

  def dry_run=(dry_run); end

  def encoding(); end

  def encoding=(encoding); end

  def files_hash(); end

  def find_c_enclosure(variable); end

  def find_class_named(name); end

  def find_class_named_from(name, from); end

  def find_class_or_module(name); end

  def find_file_named(name); end

  def find_module_named(name); end

  def find_text_page(file_name); end

  def find_unique(all_hash); end

  def fix_basic_object_inheritance(); end

  def friendly_path(); end

  def initialize(path=T.unsafe(nil), type=T.unsafe(nil)); end

  def instance_methods(); end

  def load_all(); end

  def load_cache(); end

  def load_class(klass_name); end

  def load_class_data(klass_name); end

  def load_method(klass_name, method_name); end

  def load_page(page_name); end

  def main(); end

  def main=(page); end

  def make_variable_map(variables); end

  def method_file(klass_name, method_name); end

  def module_names(); end

  def modules_hash(); end

  def page(name); end

  def page_file(page_name); end

  def path(); end

  def path=(path); end

  def rdoc(); end

  def rdoc=(rdoc); end

  def remove_nodoc(all_hash); end

  def save(); end

  def save_cache(); end

  def save_class(klass); end

  def save_method(klass, method); end

  def save_page(page); end

  def source(); end

  def title(); end

  def title=(title); end

  def type(); end

  def type=(type); end

  def unique_classes(); end

  def unique_classes_and_modules(); end

  def unique_modules(); end

  def unmatched_constant_alias(); end

  def update_parser_of_file(absolute_name, parser); end
end

class RDoc::Store::Error
end

class RDoc::Store::Error
end

class RDoc::Store::MissingFileError
  def file(); end

  def initialize(store, file, name); end

  def name(); end

  def store(); end
end

class RDoc::Store::MissingFileError
end

class RDoc::Store
end

class RDoc::Task
  def before_running_rdoc(&block); end

  def check_names(names); end

  def clobber_task_description(); end

  def defaults(); end

  def define(); end

  def external(); end

  def external=(external); end

  def generator(); end

  def generator=(generator); end

  def initialize(name=T.unsafe(nil)); end

  def inline_source(); end

  def inline_source=(value); end

  def main(); end

  def main=(main); end

  def markup(); end

  def markup=(markup); end

  def name(); end

  def name=(name); end

  def option_list(); end

  def options(); end

  def options=(options); end

  def rdoc_dir(); end

  def rdoc_dir=(rdoc_dir); end

  def rdoc_files(); end

  def rdoc_files=(rdoc_files); end

  def rdoc_task_description(); end

  def rerdoc_task_description(); end

  def template(); end

  def template=(template); end

  def title(); end

  def title=(title); end
end

class RDoc::Task
end

module RDoc::Text
  def expand_tabs(text); end

  def flush_left(text); end

  def markup(text); end

  def normalize_comment(text); end

  def parse(text, format=T.unsafe(nil)); end

  def snippet(text, limit=T.unsafe(nil)); end

  def strip_hashes(text); end

  def strip_newlines(text); end

  def strip_stars(text); end

  def to_html(text); end

  def wrap(txt, line_len=T.unsafe(nil)); end
  MARKUP_FORMAT = ::T.let(nil, ::T.untyped)
  TO_HTML_CHARACTERS = ::T.let(nil, ::T.untyped)
end

module RDoc::Text
  extend ::T::Sig
  def self.encode_fallback(character, encoding, fallback); end
end

module RDoc::TokenStream
  def add_token(*tokens); end

  def add_tokens(*tokens); end

  def collect_tokens(); end

  def pop_token(); end

  def start_collecting_tokens(); end

  def token_stream(); end

  def tokens_to_s(); end
end

module RDoc::TokenStream
  extend ::T::Sig
  def self.to_html(token_stream); end
end

class RDoc::TomDoc
  def tokenize(text); end
end

class RDoc::TomDoc
  def self.add_post_processor(); end

  def self.parse(text); end

  def self.signature(comment); end
end

class RDoc::TopLevel
  def ==(other); end

  def absolute_name(); end

  def absolute_name=(absolute_name); end

  def add_to_classes_or_modules(mod); end

  def base_name(); end

  def classes_or_modules(); end

  def cvs_url(); end

  def diagram(); end

  def diagram=(diagram); end

  def eql?(other); end

  def file_stat(); end

  def file_stat=(file_stat); end

  def find_class_or_module(name); end

  def initialize(absolute_name, relative_name=T.unsafe(nil)); end

  def last_modified(); end

  def marshal_dump(); end

  def marshal_load(array); end

  def object_class(); end

  def page_name(); end

  def parser(); end

  def parser=(val); end

  def path(); end

  def relative_name(); end

  def relative_name=(relative_name); end

  def search_record(); end

  def text?(); end
  MARSHAL_VERSION = ::T.let(nil, ::T.untyped)
end

class RDoc::TopLevel
end

module RDoc
  extend ::T::Sig
end

module REXML
  COPYRIGHT = ::T.let(nil, ::T.untyped)
  Copyright = ::T.let(nil, ::T.untyped)
  DATE = ::T.let(nil, ::T.untyped)
  REVISION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class REXML::AttlistDecl
  include ::Enumerable
  def [](key); end

  def each(&block); end

  def element_name(); end

  def include?(key); end

  def initialize(source); end

  def node_type(); end

  def write(out, indent=T.unsafe(nil)); end
end

class REXML::AttlistDecl
end

class REXML::Attribute
  include ::REXML::Node
  include ::REXML::Namespace
  include ::REXML::XMLTokens
  def ==(other); end

  def clone(); end

  def doctype(); end

  def element(); end

  def element=(element); end

  def initialize(first, second=T.unsafe(nil), parent=T.unsafe(nil)); end

  def namespace(arg=T.unsafe(nil)); end

  def node_type(); end

  def normalized=(normalized); end

  def remove(); end

  def to_s(); end

  def to_string(); end

  def value(); end

  def write(output, indent=T.unsafe(nil)); end

  def xpath(); end
  NEEDS_A_SECOND_CHECK = ::T.let(nil, ::T.untyped)
  PATTERN = ::T.let(nil, ::T.untyped)
end

class REXML::Attribute
end

class REXML::Attributes
  def <<(attribute); end

  def [](name); end

  def []=(name, value); end

  def add(attribute); end

  def delete(attribute); end

  def delete_all(name); end

  def each_attribute(); end

  def get_attribute(name); end

  def get_attribute_ns(namespace, name); end

  def initialize(element); end

  def namespaces(); end

  def prefixes(); end
end

class REXML::Attributes
end

class REXML::CData
  def initialize(first, whitespace=T.unsafe(nil), parent=T.unsafe(nil)); end

  def write(output=T.unsafe(nil), indent=T.unsafe(nil), transitive=T.unsafe(nil), ie_hack=T.unsafe(nil)); end
  ILLEGAL = ::T.let(nil, ::T.untyped)
  START = ::T.let(nil, ::T.untyped)
  STOP = ::T.let(nil, ::T.untyped)
end

class REXML::CData
end

class REXML::Child
  include ::REXML::Node
  def bytes(); end

  def document(); end

  def initialize(parent=T.unsafe(nil)); end

  def next_sibling(); end

  def next_sibling=(other); end

  def parent(); end

  def parent=(other); end

  def previous_sibling(); end

  def previous_sibling=(other); end

  def remove(); end

  def replace_with(child); end
end

class REXML::Child
end

class REXML::Comment
  include ::Comparable
  def ==(other); end

  def clone(); end

  def initialize(first, second=T.unsafe(nil)); end

  def node_type(); end

  def string(); end

  def string=(string); end

  def to_s(); end

  def write(output, indent=T.unsafe(nil), transitive=T.unsafe(nil), ie_hack=T.unsafe(nil)); end
  START = ::T.let(nil, ::T.untyped)
  STOP = ::T.let(nil, ::T.untyped)
end

class REXML::Comment
end

class REXML::Declaration
  def initialize(src); end

  def to_s(); end

  def write(output, indent); end
end

class REXML::Declaration
end

class REXML::DocType
  include ::REXML::XMLTokens
  def add(child); end

  def attribute_of(element, attribute); end

  def attributes_of(element); end

  def clone(); end

  def context(); end

  def entities(); end

  def entity(name); end

  def external_id(); end

  def initialize(first, parent=T.unsafe(nil)); end

  def name(); end

  def namespaces(); end

  def node_type(); end

  def notation(name); end

  def notations(); end

  def public(); end

  def system(); end

  def write(output, indent=T.unsafe(nil), transitive=T.unsafe(nil), ie_hack=T.unsafe(nil)); end
  DEFAULT_ENTITIES = ::T.let(nil, ::T.untyped)
  PUBLIC = ::T.let(nil, ::T.untyped)
  START = ::T.let(nil, ::T.untyped)
  STOP = ::T.let(nil, ::T.untyped)
  SYSTEM = ::T.let(nil, ::T.untyped)
end

class REXML::DocType
end

class REXML::Document
  def <<(child); end

  def add(child); end

  def add_element(arg=T.unsafe(nil), arg2=T.unsafe(nil)); end

  def doctype(); end

  def encoding(); end

  def entity_expansion_count(); end

  def initialize(source=T.unsafe(nil), context=T.unsafe(nil)); end

  def record_entity_expansion(); end

  def stand_alone?(); end

  def version(); end

  def write(*arguments); end

  def xml_decl(); end
  DECLARATION = ::T.let(nil, ::T.untyped)
end

class REXML::Document
  def self.entity_expansion_limit(); end

  def self.entity_expansion_limit=(val); end

  def self.entity_expansion_text_limit(); end

  def self.entity_expansion_text_limit=(val); end

  def self.parse_stream(source, listener); end
end

class REXML::Element
  include ::REXML::Namespace
  include ::REXML::XMLTokens
  def [](name_or_index); end

  def add_attribute(key, value=T.unsafe(nil)); end

  def add_attributes(hash); end

  def add_element(element, attrs=T.unsafe(nil)); end

  def add_namespace(prefix, uri=T.unsafe(nil)); end

  def add_text(text); end

  def attribute(name, namespace=T.unsafe(nil)); end

  def attributes(); end

  def cdatas(); end

  def clone(); end

  def comments(); end

  def context(); end

  def context=(context); end

  def delete_attribute(key); end

  def delete_element(element); end

  def delete_namespace(namespace=T.unsafe(nil)); end

  def each_element(xpath=T.unsafe(nil), &block); end

  def each_element_with_attribute(key, value=T.unsafe(nil), max=T.unsafe(nil), name=T.unsafe(nil), &block); end

  def each_element_with_text(text=T.unsafe(nil), max=T.unsafe(nil), name=T.unsafe(nil), &block); end

  def elements(); end

  def get_elements(xpath); end

  def get_text(path=T.unsafe(nil)); end

  def has_attributes?(); end

  def has_elements?(); end

  def has_text?(); end

  def ignore_whitespace_nodes(); end

  def initialize(arg=T.unsafe(nil), parent=T.unsafe(nil), context=T.unsafe(nil)); end

  def instructions(); end

  def namespace(prefix=T.unsafe(nil)); end

  def namespaces(); end

  def next_element(); end

  def node_type(); end

  def prefixes(); end

  def previous_element(); end

  def raw(); end

  def root(); end

  def root_node(); end

  def text(path=T.unsafe(nil)); end

  def text=(text); end

  def texts(); end

  def whitespace(); end

  def write(output=T.unsafe(nil), indent=T.unsafe(nil), transitive=T.unsafe(nil), ie_hack=T.unsafe(nil)); end

  def xpath(); end
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

class REXML::Element
end

class REXML::ElementDecl
end

class REXML::ElementDecl
end

class REXML::Elements
  include ::Enumerable
  def <<(element=T.unsafe(nil)); end

  def [](index, name=T.unsafe(nil)); end

  def []=(index, element); end

  def add(element=T.unsafe(nil)); end

  def collect(xpath=T.unsafe(nil)); end

  def delete(element); end

  def delete_all(xpath); end

  def each(xpath=T.unsafe(nil), &blk); end

  def empty?(); end

  def index(element); end

  def initialize(parent); end

  def inject(xpath=T.unsafe(nil), initial=T.unsafe(nil)); end

  def size(); end

  def to_a(xpath=T.unsafe(nil)); end
end

class REXML::Elements
end

module REXML::Encoding
  def decode(string); end

  def encode(string); end

  def encoding(); end

  def encoding=(encoding); end
end

module REXML::Encoding
  extend ::T::Sig
end

class REXML::Entity
  include ::REXML::XMLTokens
  def external(); end

  def initialize(stream, value=T.unsafe(nil), parent=T.unsafe(nil), reference=T.unsafe(nil)); end

  def name(); end

  def ndata(); end

  def normalized(); end

  def pubid(); end

  def ref(); end

  def to_s(); end

  def unnormalized(); end

  def value(); end

  def write(out, indent=T.unsafe(nil)); end
  ENTITYDECL = ::T.let(nil, ::T.untyped)
  ENTITYDEF = ::T.let(nil, ::T.untyped)
  ENTITYVALUE = ::T.let(nil, ::T.untyped)
  EXTERNALID = ::T.let(nil, ::T.untyped)
  GEDECL = ::T.let(nil, ::T.untyped)
  NDATADECL = ::T.let(nil, ::T.untyped)
  PEDECL = ::T.let(nil, ::T.untyped)
  PEDEF = ::T.let(nil, ::T.untyped)
  PEREFERENCE = ::T.let(nil, ::T.untyped)
  PEREFERENCE_RE = ::T.let(nil, ::T.untyped)
  PUBIDCHAR = ::T.let(nil, ::T.untyped)
  PUBIDLITERAL = ::T.let(nil, ::T.untyped)
  SYSTEMLITERAL = ::T.let(nil, ::T.untyped)
end

class REXML::Entity
  def self.matches?(string); end
end

module REXML::EntityConst
  AMP = ::T.let(nil, ::T.untyped)
  APOS = ::T.let(nil, ::T.untyped)
  GT = ::T.let(nil, ::T.untyped)
  LT = ::T.let(nil, ::T.untyped)
  QUOT = ::T.let(nil, ::T.untyped)
end

module REXML::EntityConst
  extend ::T::Sig
end

class REXML::ExternalEntity
  def initialize(src); end

  def to_s(); end

  def write(output, indent); end
end

class REXML::ExternalEntity
end

module REXML::Formatters
end

class REXML::Formatters::Default
  def initialize(ie_hack=T.unsafe(nil)); end

  def write(node, output); end

  def write_cdata(node, output); end

  def write_comment(node, output); end

  def write_document(node, output); end

  def write_element(node, output); end

  def write_instruction(node, output); end

  def write_text(node, output); end
end

class REXML::Formatters::Default
end

class REXML::Formatters::Pretty
  def compact(); end

  def compact=(compact); end

  def initialize(indentation=T.unsafe(nil), ie_hack=T.unsafe(nil)); end

  def width(); end

  def width=(width); end
end

class REXML::Formatters::Pretty
end

module REXML::Formatters
  extend ::T::Sig
end

module REXML::Functions
  INTERNAL_METHODS = ::T.let(nil, ::T.untyped)
end

module REXML::Functions
  extend ::T::Sig
  def self.boolean(object=T.unsafe(nil)); end

  def self.ceiling(number); end

  def self.compare_language(lang1, lang2); end

  def self.concat(*objects); end

  def self.contains(string, test); end

  def self.context=(value); end

  def self.count(node_set); end

  def self.false(); end

  def self.floor(number); end

  def self.get_namespace(node_set=T.unsafe(nil)); end

  def self.id(object); end

  def self.lang(language); end

  def self.last(); end

  def self.local_name(node_set=T.unsafe(nil)); end

  def self.name(node_set=T.unsafe(nil)); end

  def self.namespace_context(); end

  def self.namespace_context=(x); end

  def self.namespace_uri(node_set=T.unsafe(nil)); end

  def self.normalize_space(string=T.unsafe(nil)); end

  def self.not(object); end

  def self.number(object=T.unsafe(nil)); end

  def self.position(); end

  def self.processing_instruction(node); end

  def self.round(number); end

  def self.send(name, *args); end

  def self.singleton_method_added(name); end

  def self.starts_with(string, test); end

  def self.string(object=T.unsafe(nil)); end

  def self.string_length(string); end

  def self.string_value(o); end

  def self.substring(string, start, length=T.unsafe(nil)); end

  def self.substring_after(string, test); end

  def self.substring_before(string, test); end

  def self.sum(nodes); end

  def self.text(); end

  def self.translate(string, tr1, tr2); end

  def self.true(); end

  def self.variables(); end

  def self.variables=(x); end
end

class REXML::IOSource
  def initialize(arg, block_size=T.unsafe(nil), encoding=T.unsafe(nil)); end
end

class REXML::IOSource
end

class REXML::Instruction
  def ==(other); end

  def clone(); end

  def content(); end

  def content=(content); end

  def initialize(target, content=T.unsafe(nil)); end

  def node_type(); end

  def target(); end

  def target=(target); end

  def write(writer, indent=T.unsafe(nil), transitive=T.unsafe(nil), ie_hack=T.unsafe(nil)); end
  START = ::T.let(nil, ::T.untyped)
  STOP = ::T.let(nil, ::T.untyped)
end

class REXML::Instruction
end

module REXML::Light
end

class REXML::Light::Node
  def <<(element); end

  def =~(path); end

  def [](reference, ns=T.unsafe(nil)); end

  def []=(reference, ns, value=T.unsafe(nil)); end

  def children(); end

  def each(&blk); end

  def has_name?(name, namespace=T.unsafe(nil)); end

  def initialize(node=T.unsafe(nil)); end

  def local_name(); end

  def local_name=(name_str); end

  def name(); end

  def name=(name_str, ns=T.unsafe(nil)); end

  def namespace(prefix=T.unsafe(nil)); end

  def namespace=(namespace); end

  def node_type(); end

  def parent(); end

  def parent=(node); end

  def prefix(namespace=T.unsafe(nil)); end

  def root(); end

  def size(); end

  def text=(foo); end
  NAMESPLIT = ::T.let(nil, ::T.untyped)
  PARENTS = ::T.let(nil, ::T.untyped)
end

class REXML::Light::Node
end

module REXML::Light
  extend ::T::Sig
end

module REXML::Namespace
  include ::REXML::XMLTokens
  def expanded_name(); end

  def fully_expanded_name(); end

  def has_name?(other, ns=T.unsafe(nil)); end

  def local_name(); end

  def name(); end

  def name=(name); end

  def prefix(); end

  def prefix=(prefix); end
  NAMESPLIT = ::T.let(nil, ::T.untyped)
end

module REXML::Namespace
  extend ::T::Sig
end

module REXML::Node
  def each_recursive(&block); end

  def find_first_recursive(&block); end

  def indent(to, ind); end

  def index_in_parent(); end

  def next_sibling_node(); end

  def parent?(); end

  def previous_sibling_node(); end

  def to_s(indent=T.unsafe(nil)); end
end

module REXML::Node
  extend ::T::Sig
end

class REXML::NotationDecl
  def initialize(name, middle, pub, sys); end

  def name(); end

  def public(); end

  def public=(public); end

  def system(); end

  def system=(system); end

  def to_s(); end

  def write(output, indent=T.unsafe(nil)); end
end

class REXML::NotationDecl
end

class REXML::Output
  include ::REXML::Encoding
  def <<(content); end

  def initialize(real_IO, encd=T.unsafe(nil)); end
end

class REXML::Output
end

class REXML::Parent
  include ::Enumerable
  def <<(object); end

  def [](index); end

  def []=(*args); end

  def add(object); end

  def children(); end

  def deep_clone(); end

  def delete(object); end

  def delete_at(index); end

  def delete_if(&block); end

  def each(&block); end

  def each_child(&block); end

  def each_index(&block); end

  def index(child); end

  def insert_after(child1, child2); end

  def insert_before(child1, child2); end

  def length(); end

  def push(object); end

  def replace_child(to_replace, replacement); end

  def size(); end

  def to_a(); end

  def unshift(object); end
end

class REXML::Parent
end

class REXML::ParseException
  def context(); end

  def continued_exception(); end

  def continued_exception=(continued_exception); end

  def initialize(message, source=T.unsafe(nil), parser=T.unsafe(nil), exception=T.unsafe(nil)); end

  def line(); end

  def parser(); end

  def parser=(parser); end

  def position(); end

  def source(); end

  def source=(source); end
end

class REXML::ParseException
end

module REXML::Parsers
end

class REXML::Parsers::BaseParser
  def add_listener(listener); end

  def empty?(); end

  def entity(reference, entities); end

  def has_next?(); end

  def initialize(source); end

  def normalize(input, entities=T.unsafe(nil), entity_filter=T.unsafe(nil)); end

  def peek(depth=T.unsafe(nil)); end

  def position(); end

  def pull(); end

  def source(); end

  def stream=(source); end

  def unnormalize(string, entities=T.unsafe(nil), filter=T.unsafe(nil)); end

  def unshift(token); end
  ATTDEF = ::T.let(nil, ::T.untyped)
  ATTDEF_RE = ::T.let(nil, ::T.untyped)
  ATTLISTDECL_PATTERN = ::T.let(nil, ::T.untyped)
  ATTLISTDECL_START = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_PATTERN = ::T.let(nil, ::T.untyped)
  ATTTYPE = ::T.let(nil, ::T.untyped)
  ATTVALUE = ::T.let(nil, ::T.untyped)
  CDATA_END = ::T.let(nil, ::T.untyped)
  CDATA_PATTERN = ::T.let(nil, ::T.untyped)
  CDATA_START = ::T.let(nil, ::T.untyped)
  CLOSE_MATCH = ::T.let(nil, ::T.untyped)
  COMBININGCHAR = ::T.let(nil, ::T.untyped)
  COMMENT_PATTERN = ::T.let(nil, ::T.untyped)
  COMMENT_START = ::T.let(nil, ::T.untyped)
  DEFAULTDECL = ::T.let(nil, ::T.untyped)
  DEFAULT_ENTITIES = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  DOCTYPE_END = ::T.let(nil, ::T.untyped)
  DOCTYPE_PATTERN = ::T.let(nil, ::T.untyped)
  DOCTYPE_START = ::T.let(nil, ::T.untyped)
  ELEMENTDECL_PATTERN = ::T.let(nil, ::T.untyped)
  ELEMENTDECL_START = ::T.let(nil, ::T.untyped)
  ENCODING = ::T.let(nil, ::T.untyped)
  ENTITYDECL = ::T.let(nil, ::T.untyped)
  ENTITYDEF = ::T.let(nil, ::T.untyped)
  ENTITYVALUE = ::T.let(nil, ::T.untyped)
  ENTITY_START = ::T.let(nil, ::T.untyped)
  ENUMERATEDTYPE = ::T.let(nil, ::T.untyped)
  ENUMERATION = ::T.let(nil, ::T.untyped)
  EREFERENCE = ::T.let(nil, ::T.untyped)
  EXTENDER = ::T.let(nil, ::T.untyped)
  EXTERNALID = ::T.let(nil, ::T.untyped)
  GEDECL = ::T.let(nil, ::T.untyped)
  IDENTITY = ::T.let(nil, ::T.untyped)
  INSTRUCTION_PATTERN = ::T.let(nil, ::T.untyped)
  INSTRUCTION_START = ::T.let(nil, ::T.untyped)
  LETTER = ::T.let(nil, ::T.untyped)
  MISSING_ATTRIBUTE_QUOTES = ::T.let(nil, ::T.untyped)
  NAME = ::T.let(nil, ::T.untyped)
  NAMECHAR = ::T.let(nil, ::T.untyped)
  NAME_STR = ::T.let(nil, ::T.untyped)
  NCNAME_STR = ::T.let(nil, ::T.untyped)
  NDATADECL = ::T.let(nil, ::T.untyped)
  NMTOKEN = ::T.let(nil, ::T.untyped)
  NMTOKENS = ::T.let(nil, ::T.untyped)
  NOTATIONDECL_START = ::T.let(nil, ::T.untyped)
  NOTATIONTYPE = ::T.let(nil, ::T.untyped)
  PEDECL = ::T.let(nil, ::T.untyped)
  PEDEF = ::T.let(nil, ::T.untyped)
  PEREFERENCE = ::T.let(nil, ::T.untyped)
  PUBIDCHAR = ::T.let(nil, ::T.untyped)
  PUBIDLITERAL = ::T.let(nil, ::T.untyped)
  PUBLIC = ::T.let(nil, ::T.untyped)
  REFERENCE = ::T.let(nil, ::T.untyped)
  REFERENCE_RE = ::T.let(nil, ::T.untyped)
  STANDALONE = ::T.let(nil, ::T.untyped)
  SYSTEM = ::T.let(nil, ::T.untyped)
  SYSTEMENTITY = ::T.let(nil, ::T.untyped)
  SYSTEMLITERAL = ::T.let(nil, ::T.untyped)
  TAG_MATCH = ::T.let(nil, ::T.untyped)
  TEXT_PATTERN = ::T.let(nil, ::T.untyped)
  UNAME_STR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  XMLDECL_PATTERN = ::T.let(nil, ::T.untyped)
  XMLDECL_START = ::T.let(nil, ::T.untyped)
end

class REXML::Parsers::BaseParser
end

class REXML::Parsers::StreamParser
  def add_listener(listener); end

  def initialize(source, listener); end

  def parse(); end
end

class REXML::Parsers::StreamParser
end

class REXML::Parsers::TreeParser
  def add_listener(listener); end

  def initialize(source, build_context=T.unsafe(nil)); end

  def parse(); end
end

class REXML::Parsers::TreeParser
end

class REXML::Parsers::XPathParser
  include ::REXML::XMLTokens
  def abbreviate(path); end

  def expand(path); end

  def namespaces=(namespaces); end

  def parse(path); end

  def predicate(path); end

  def predicate_to_string(path, &block); end
  AXIS = ::T.let(nil, ::T.untyped)
  LITERAL = ::T.let(nil, ::T.untyped)
  NCNAMETEST = ::T.let(nil, ::T.untyped)
  NODE_TYPE = ::T.let(nil, ::T.untyped)
  NT = ::T.let(nil, ::T.untyped)
  NUMBER = ::T.let(nil, ::T.untyped)
  PI = ::T.let(nil, ::T.untyped)
  QNAME = ::T.let(nil, ::T.untyped)
  VARIABLE_REFERENCE = ::T.let(nil, ::T.untyped)
end

class REXML::Parsers::XPathParser
end

module REXML::Parsers
  extend ::T::Sig
end

module REXML::Security
end

module REXML::Security
  extend ::T::Sig
  def self.entity_expansion_limit(); end

  def self.entity_expansion_limit=(val); end

  def self.entity_expansion_text_limit(); end

  def self.entity_expansion_text_limit=(val); end
end

class REXML::Source
  include ::REXML::Encoding
  def buffer(); end

  def consume(pattern); end

  def current_line(); end

  def empty?(); end

  def encoding=(enc); end

  def initialize(arg, encoding=T.unsafe(nil)); end

  def line(); end

  def match(pattern, cons=T.unsafe(nil)); end

  def match_to(char, pattern); end

  def match_to_consume(char, pattern); end

  def position(); end

  def read(); end

  def scan(pattern, cons=T.unsafe(nil)); end
end

class REXML::Source
end

class REXML::SourceFactory
end

class REXML::SourceFactory
  def self.create_from(arg); end
end

class REXML::SyncEnumerator
  include ::Enumerable
  def each(&blk); end

  def initialize(*enums); end

  def length(); end

  def size(); end
end

class REXML::SyncEnumerator
end

class REXML::Text
  include ::Comparable
  def <<(to_append); end

  def clone(); end

  def doctype(); end

  def empty?(); end

  def indent_text(string, level=T.unsafe(nil), style=T.unsafe(nil), indentfirstline=T.unsafe(nil)); end

  def initialize(arg, respect_whitespace=T.unsafe(nil), parent=T.unsafe(nil), raw=T.unsafe(nil), entity_filter=T.unsafe(nil), illegal=T.unsafe(nil)); end

  def node_type(); end

  def parent=(parent); end

  def raw(); end

  def raw=(raw); end

  def to_s(); end

  def value(); end

  def value=(val); end

  def wrap(string, width, addnewline=T.unsafe(nil)); end

  def write(writer, indent=T.unsafe(nil), transitive=T.unsafe(nil), ie_hack=T.unsafe(nil)); end

  def write_with_substitution(out, input); end

  def xpath(); end
  EREFERENCE = ::T.let(nil, ::T.untyped)
  NEEDS_A_SECOND_CHECK = ::T.let(nil, ::T.untyped)
  NUMERICENTITY = ::T.let(nil, ::T.untyped)
  REFERENCE = ::T.let(nil, ::T.untyped)
  SETUTITSBUS = ::T.let(nil, ::T.untyped)
  SLAICEPS = ::T.let(nil, ::T.untyped)
  SPECIALS = ::T.let(nil, ::T.untyped)
  SUBSTITUTES = ::T.let(nil, ::T.untyped)
  VALID_CHAR = ::T.let(nil, ::T.untyped)
  VALID_XML_CHARS = ::T.let(nil, ::T.untyped)
end

class REXML::Text
  def self.check(string, pattern, doctype); end

  def self.expand(ref, doctype, filter); end

  def self.normalize(input, doctype=T.unsafe(nil), entity_filter=T.unsafe(nil)); end

  def self.read_with_substitution(input, illegal=T.unsafe(nil)); end

  def self.unnormalize(string, doctype=T.unsafe(nil), filter=T.unsafe(nil), illegal=T.unsafe(nil)); end
end

class REXML::UndefinedNamespaceException
  def initialize(prefix, source, parser); end
end

class REXML::UndefinedNamespaceException
end

module REXML::Validation
end

class REXML::Validation::ValidationException
  def initialize(msg); end
end

class REXML::Validation::ValidationException
end

module REXML::Validation
  extend ::T::Sig
end

class REXML::XMLDecl
  include ::REXML::Encoding
  def ==(other); end

  def clone(); end

  def dowrite(); end

  def encoding=(enc); end

  def initialize(version=T.unsafe(nil), encoding=T.unsafe(nil), standalone=T.unsafe(nil)); end

  def node_type(); end

  def nowrite(); end

  def old_enc=(encoding); end

  def stand_alone?(); end

  def standalone(); end

  def standalone=(standalone); end

  def version(); end

  def version=(version); end

  def write(writer, indent=T.unsafe(nil), transitive=T.unsafe(nil), ie_hack=T.unsafe(nil)); end

  def writeencoding(); end

  def writethis(); end

  def xmldecl(version, encoding, standalone); end
  DEFAULT_ENCODING = ::T.let(nil, ::T.untyped)
  DEFAULT_STANDALONE = ::T.let(nil, ::T.untyped)
  DEFAULT_VERSION = ::T.let(nil, ::T.untyped)
  START = ::T.let(nil, ::T.untyped)
  STOP = ::T.let(nil, ::T.untyped)
end

class REXML::XMLDecl
  def self.default(); end
end

module REXML::XMLTokens
  NAME = ::T.let(nil, ::T.untyped)
  NAMECHAR = ::T.let(nil, ::T.untyped)
  NAME_CHAR = ::T.let(nil, ::T.untyped)
  NAME_START_CHAR = ::T.let(nil, ::T.untyped)
  NAME_STR = ::T.let(nil, ::T.untyped)
  NCNAME_STR = ::T.let(nil, ::T.untyped)
  NMTOKEN = ::T.let(nil, ::T.untyped)
  NMTOKENS = ::T.let(nil, ::T.untyped)
  REFERENCE = ::T.let(nil, ::T.untyped)
end

module REXML::XMLTokens
  extend ::T::Sig
end

class REXML::XPath
  include ::REXML::Functions
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
end

class REXML::XPath
  def self.each(element, path=T.unsafe(nil), namespaces=T.unsafe(nil), variables=T.unsafe(nil), &block); end

  def self.first(element, path=T.unsafe(nil), namespaces=T.unsafe(nil), variables=T.unsafe(nil)); end

  def self.match(element, path=T.unsafe(nil), namespaces=T.unsafe(nil), variables=T.unsafe(nil)); end
end

class REXML::XPathParser
  include ::REXML::XMLTokens
  def []=(variable_name, value); end

  def first(path_stack, node); end

  def get_first(path, nodeset); end

  def match(path_stack, nodeset); end

  def namespaces=(namespaces=T.unsafe(nil)); end

  def parse(path, nodeset); end

  def predicate(path, nodeset); end

  def variables=(vars=T.unsafe(nil)); end
  ALL = ::T.let(nil, ::T.untyped)
  ELEMENTS = ::T.let(nil, ::T.untyped)
  LITERAL = ::T.let(nil, ::T.untyped)
end

class REXML::XPathParser
end

module REXML
  extend ::T::Sig
end

RSPEC_CONFIGURER = RSpec

RSPEC_NAMESPACE = RSpec

module RSpec
  MODULES_TO_AUTOLOAD = ::T.let(nil, ::T.untyped)
end

class RSpec::CallerFilter
  ADDITIONAL_TOP_LEVEL_FILES = ::T.let(nil, ::T.untyped)
  IGNORE_REGEX = ::T.let(nil, ::T.untyped)
  LIB_REGEX = ::T.let(nil, ::T.untyped)
  RSPEC_LIBS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Configuration
  DEFAULT_FORMATTER = ::T.let(nil, ::T.untyped)
  FAILED_STATUS = ::T.let(nil, ::T.untyped)
  MOCKING_ADAPTERS = ::T.let(nil, ::T.untyped)
  PASSED_STATUS = ::T.let(nil, ::T.untyped)
  PENDING_STATUS = ::T.let(nil, ::T.untyped)
  RAISE_ERROR_WARNING_NOTIFIER = ::T.let(nil, ::T.untyped)
  UNKNOWN_STATUS = ::T.let(nil, ::T.untyped)
  VALID_STATUSES = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Configuration::ExposeCurrentExample
  extend ::T::Sig
end

module RSpec::Core::Configuration::Readers
  extend ::T::Sig
end

class RSpec::Core::ConfigurationOptions
  OPTIONS_ORDER = ::T.let(nil, ::T.untyped)
  UNFORCED_OPTIONS = ::T.let(nil, ::T.untyped)
  UNPROCESSABLE_OPTIONS = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::DSL
  extend ::T::Sig
end

RSpec::Core::Example::AllExceptionsExcludingDangerousOnesOnRubiesThatAllowIt = RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue

class RSpec::Core::ExampleGroup
  INSTANCE_VARIABLE_TO_IGNORE = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::ExampleStatusPersister
  def initialize(examples, file_name); end

  def persist(); end
end

class RSpec::Core::ExampleStatusPersister
  def self.load_from(file_name); end

  def self.persist(examples, file_name); end
end

RSpec::Core::ExclusionRules = RSpec::Core::FilterRules

class RSpec::Core::FilterRules
  PROC_HEX_NUMBER = ::T.let(nil, ::T.untyped)
  PROJECT_DIR = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::FilterableItemRepository
  extend ::T::Sig
end

module RSpec::Core::FlatMap
  extend ::T::Sig
end

class RSpec::Core::Formatters::BaseBisectFormatter
  def example_failed(notification); end

  def example_finished(notification); end

  def initialize(expected_failures); end

  def start_dump(_notification); end
end

class RSpec::Core::Formatters::BaseBisectFormatter
  def self.inherited(formatter); end
end

class RSpec::Core::Formatters::BaseTextFormatter
  def dump_failures(notification); end

  def dump_pending(notification); end

  def dump_summary(summary); end

  def message(notification); end

  def seed(notification); end
end

class RSpec::Core::Formatters::BaseTextFormatter
end

class RSpec::Core::Formatters::BisectDRbFormatter
  def initialize(_output); end

  def notify_results(results); end
end

class RSpec::Core::Formatters::BisectDRbFormatter
end

module RSpec::Core::Formatters::ConsoleCodes
  VT100_CODES = ::T.let(nil, ::T.untyped)
  VT100_CODE_VALUES = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Formatters::ConsoleCodes
  extend ::T::Sig
end

class RSpec::Core::Formatters::DeprecationFormatter
  DEPRECATION_STREAM_NOTICE = ::T.let(nil, ::T.untyped)
  RAISE_ERROR_CONFIG_NOTICE = ::T.let(nil, ::T.untyped)
  TOO_MANY_WARNINGS_NOTICE = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter
  TOO_MANY_USES_LIMIT = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::DocumentationFormatter
  def example_failed(failure); end

  def example_group_finished(_notification); end

  def example_passed(passed); end

  def example_pending(pending); end
end

class RSpec::Core::Formatters::DocumentationFormatter
end

class RSpec::Core::Formatters::ExceptionPresenter
  PENDING_DETAIL_FORMATTER = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Formatters::ExceptionPresenter::Factory::EmptyBacktraceFormatter
  extend ::T::Sig
end

class RSpec::Core::Formatters::FallbackMessageFormatter
  def initialize(output); end

  def message(notification); end

  def output(); end
end

class RSpec::Core::Formatters::FallbackMessageFormatter
end

module RSpec::Core::Formatters::Helpers
  DEFAULT_PRECISION = ::T.let(nil, ::T.untyped)
  SUB_SECOND_PRECISION = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Formatters::Helpers
  extend ::T::Sig
end

class RSpec::Core::Formatters::HtmlFormatter
  def dump_summary(summary); end

  def example_failed(failure); end

  def example_passed(passed); end

  def example_pending(pending); end

  def example_started(_notification); end

  def start_dump(_notification); end
end

class RSpec::Core::Formatters::HtmlFormatter
end

class RSpec::Core::Formatters::JsonFormatter
  def dump_profile(profile); end

  def dump_profile_slowest_example_groups(profile); end

  def dump_profile_slowest_examples(profile); end

  def dump_summary(summary); end

  def message(notification); end

  def output_hash(); end

  def seed(notification); end

  def stop(notification); end
end

class RSpec::Core::Formatters::JsonFormatter
end

class RSpec::Core::Formatters::ProfileFormatter
  def dump_profile(profile); end

  def initialize(output); end

  def output(); end
end

class RSpec::Core::Formatters::ProfileFormatter
end

class RSpec::Core::Formatters::ProgressFormatter
  def example_failed(_notification); end

  def example_passed(_notification); end

  def example_pending(_notification); end

  def start_dump(_notification); end
end

class RSpec::Core::Formatters::ProgressFormatter
end

module RSpec::Core::Formatters::SyntaxHighlighter::CodeRayImplementation
  RESET_CODE = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Formatters::SyntaxHighlighter::CodeRayImplementation
  extend ::T::Sig
end

module RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation
  extend ::T::Sig
end

RSpec::Core::Formatters::SyntaxHighlighter::WindowsImplementation = RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation

module RSpec::Core::Formatters
  extend ::T::Sig
end

module RSpec::Core::HashImitatable::ClassMethods
  extend ::T::Sig
end

module RSpec::Core::HashImitatable
  extend ::T::Sig
end

class RSpec::Core::Hooks::HookCollections
  EMPTY_HOOK_ARRAY = ::T.let(nil, ::T.untyped)
  HOOK_TYPES = ::T.let(nil, ::T.untyped)
  SCOPES = ::T.let(nil, ::T.untyped)
  SCOPE_ALIASES = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Hooks
  extend ::T::Sig
end

module RSpec::Core::Invocations
  extend ::T::Sig
end

module RSpec::Core::MemoizedHelpers::ClassMethods
  extend ::T::Sig
end

module RSpec::Core::MemoizedHelpers
  extend ::T::Sig
end

module RSpec::Core::Metadata
  RESERVED_KEYS = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Metadata
  extend ::T::Sig
end

module RSpec::Core::MetadataFilter
  extend ::T::Sig
end

module RSpec::Core::MultipleExceptionError::InterfaceTag
  extend ::T::Sig
end

module RSpec::Core::Notifications::NullColorizer
  extend ::T::Sig
end

module RSpec::Core::Notifications
  extend ::T::Sig
end

class RSpec::Core::Ordering::Random
  MAX_32_BIT = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Ordering
  extend ::T::Sig
end

module RSpec::Core::Pending
  NOT_YET_IMPLEMENTED = ::T.let(nil, ::T.untyped)
  NO_REASON_GIVEN = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Pending
  extend ::T::Sig
end

class RSpec::Core::Profiler
  def example_group_finished(notification); end

  def example_group_started(notification); end

  def example_groups(); end

  def example_started(notification); end
  NOTIFICATIONS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Profiler
end

class RSpec::Core::Reporter
  RSPEC_NOTIFICATIONS = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::RubyProject
  extend ::T::Sig
end

module RSpec::Core::SharedContext
  def __shared_context_recordings(); end

  def after(*args, &block); end

  def append_after(*args, &block); end

  def append_before(*args, &block); end

  def around(*args, &block); end

  def before(*args, &block); end

  def context(*args, &block); end

  def describe(*args, &block); end

  def hooks(*args, &block); end

  def included(group); end

  def let(*args, &block); end

  def let!(*args, &block); end

  def prepend_after(*args, &block); end

  def prepend_before(*args, &block); end

  def subject(*args, &block); end

  def subject!(*args, &block); end
end

class RSpec::Core::SharedContext::Recording
  def args(); end

  def args=(_); end

  def block(); end

  def block=(_); end

  def method_name(); end

  def method_name=(_); end

  def playback_onto(group); end
end

class RSpec::Core::SharedContext::Recording
  def self.[](*_); end

  def self.members(); end
end

module RSpec::Core::SharedContext
  extend ::T::Sig
  def self.record(methods); end
end

module RSpec::Core::SharedExampleGroup::TopLevelDSL
  extend ::T::Sig
end

module RSpec::Core::SharedExampleGroup
  extend ::T::Sig
end

module RSpec::Core::ShellEscape
  SHELLS_ALLOWING_UNQUOTED_IDS = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::ShellEscape
  extend ::T::Sig
end

module RSpec::Core::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Version
  extend ::T::Sig
end

module RSpec::Core::Warnings
  extend ::T::Sig
end

module RSpec::Core::World::Null
  extend ::T::Sig
end

module RSpec::Core
  extend ::T::Sig
end

module RSpec::ExampleGroups
  extend ::T::Sig
end

class RSpec::Expectations::BlockSnippetExtractor
  def body_content_lines(); end

  def initialize(proc, method_name); end

  def method_name(); end
end

class RSpec::Expectations::BlockSnippetExtractor::AmbiguousTargetError
end

class RSpec::Expectations::BlockSnippetExtractor::AmbiguousTargetError
end

class RSpec::Expectations::BlockSnippetExtractor::BlockLocator
  def beginning_line_number(); end

  def beginning_line_number=(_); end

  def body_content_locations(); end

  def method_call_location(); end

  def method_name(); end

  def method_name=(_); end

  def source(); end

  def source=(_); end
end

class RSpec::Expectations::BlockSnippetExtractor::BlockLocator
  def self.[](*_); end

  def self.members(); end
end

class RSpec::Expectations::BlockSnippetExtractor::BlockTokenExtractor
  def beginning_line_number(); end

  def beginning_line_number=(_); end

  def body_tokens(); end

  def method_name(); end

  def method_name=(_); end

  def source(); end

  def source=(_); end

  def state(); end
end

class RSpec::Expectations::BlockSnippetExtractor::BlockTokenExtractor
  def self.[](*_); end

  def self.members(); end
end

class RSpec::Expectations::BlockSnippetExtractor::Error
end

class RSpec::Expectations::BlockSnippetExtractor::Error
end

class RSpec::Expectations::BlockSnippetExtractor::TargetNotFoundError
end

class RSpec::Expectations::BlockSnippetExtractor::TargetNotFoundError
end

class RSpec::Expectations::BlockSnippetExtractor
  def self.try_extracting_single_line_body_of(proc, method_name); end
end

class RSpec::Expectations::Configuration
  FALSE_POSITIVE_BEHAVIOURS = ::T.let(nil, ::T.untyped)
end

module RSpec::Expectations::Configuration::NullBacktraceFormatter
  extend ::T::Sig
end

module RSpec::Expectations::ExpectationHelper
  extend ::T::Sig
end

module RSpec::Expectations::ExpectationTarget::InstanceMethods
  extend ::T::Sig
end

module RSpec::Expectations::ExpectationTarget::UndefinedValue
  extend ::T::Sig
end

class RSpec::Expectations::FailureAggregator
  def aggregate(); end

  def block_label(); end

  def call(failure, options); end

  def failures(); end

  def initialize(block_label, metadata); end

  def metadata(); end

  def other_errors(); end
end

class RSpec::Expectations::FailureAggregator
end

RSpec::Expectations::LegacyMacherAdapter = RSpec::Expectations::LegacyMatcherAdapter

class RSpec::Expectations::MultipleExpectationsNotMetError
  include ::RSpec::Core::MultipleExceptionError::InterfaceTag
  def aggregation_block_label(); end

  def aggregation_metadata(); end

  def all_exceptions(); end

  def exception_count_description(); end

  def failures(); end

  def initialize(failure_aggregator); end

  def other_errors(); end

  def summary(); end
end

module RSpec::Expectations::Syntax
  extend ::T::Sig
end

module RSpec::Expectations::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Expectations::Version
  extend ::T::Sig
end

module RSpec::Expectations
  extend ::T::Sig
end

module RSpec::Matchers
  BE_PREDICATE_REGEX = ::T.let(nil, ::T.untyped)
  DYNAMIC_MATCHER_REGEX = ::T.let(nil, ::T.untyped)
  HAS_REGEX = ::T.let(nil, ::T.untyped)
end

RSpec::Matchers::AliasedNegatedMatcher::DefaultFailureMessages = RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages

class RSpec::Matchers::BuiltIn::All
  def does_not_match?(_actual); end

  def failed_objects(); end

  def initialize(matcher); end

  def matcher(); end
end

class RSpec::Matchers::BuiltIn::All
end

class RSpec::Matchers::BuiltIn::BaseMatcher
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

module RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages
  extend ::T::Sig
end

module RSpec::Matchers::BuiltIn::BaseMatcher::HashFormatting
  extend ::T::Sig
end

class RSpec::Matchers::BuiltIn::Be
  include ::RSpec::Matchers::BuiltIn::BeHelpers
  def <(operand); end

  def <=(operand); end

  def ==(operand); end

  def ===(operand); end

  def =~(operand); end

  def >(operand); end

  def >=(operand); end

  def initialize(*args); end
end

class RSpec::Matchers::BuiltIn::Be
end

class RSpec::Matchers::BuiltIn::BeAKindOf
end

class RSpec::Matchers::BuiltIn::BeAKindOf
end

class RSpec::Matchers::BuiltIn::BeAnInstanceOf
end

class RSpec::Matchers::BuiltIn::BeAnInstanceOf
end

class RSpec::Matchers::BuiltIn::BeBetween
  def exclusive(); end

  def inclusive(); end

  def initialize(min, max); end
end

class RSpec::Matchers::BuiltIn::BeBetween
end

class RSpec::Matchers::BuiltIn::BeComparedTo
  include ::RSpec::Matchers::BuiltIn::BeHelpers
  def initialize(operand, operator); end
end

class RSpec::Matchers::BuiltIn::BeComparedTo
end

class RSpec::Matchers::BuiltIn::BeFalsey
end

class RSpec::Matchers::BuiltIn::BeFalsey
end

module RSpec::Matchers::BuiltIn::BeHelpers
end

module RSpec::Matchers::BuiltIn::BeHelpers
  extend ::T::Sig
end

class RSpec::Matchers::BuiltIn::BeNil
end

class RSpec::Matchers::BuiltIn::BeNil
end

class RSpec::Matchers::BuiltIn::BePredicate
  include ::RSpec::Matchers::BuiltIn::BeHelpers
  def does_not_match?(actual, &block); end

  def initialize(*args, &block); end

  def matches?(actual, &block); end
end

class RSpec::Matchers::BuiltIn::BePredicate
end

class RSpec::Matchers::BuiltIn::BeTruthy
end

class RSpec::Matchers::BuiltIn::BeTruthy
end

class RSpec::Matchers::BuiltIn::BeWithin
  def initialize(delta); end

  def of(expected); end

  def percent_of(expected); end
end

class RSpec::Matchers::BuiltIn::BeWithin
end

class RSpec::Matchers::BuiltIn::Change
  def by(expected_delta); end

  def by_at_least(minimum); end

  def by_at_most(maximum); end

  def does_not_match?(event_proc); end

  def from(value); end

  def initialize(receiver=T.unsafe(nil), message=T.unsafe(nil), &block); end

  def matches?(event_proc); end

  def to(value); end
end

class RSpec::Matchers::BuiltIn::Change
end

class RSpec::Matchers::BuiltIn::Compound
  def diffable_matcher_list(); end

  def does_not_match?(_actual); end

  def evaluator(); end

  def initialize(matcher_1, matcher_2); end

  def matcher_1(); end

  def matcher_2(); end
end

class RSpec::Matchers::BuiltIn::Compound::And
end

class RSpec::Matchers::BuiltIn::Compound::And
end

class RSpec::Matchers::BuiltIn::Compound::NestedEvaluator
  def initialize(actual, matcher_1, matcher_2); end

  def matcher_matches?(matcher); end
end

class RSpec::Matchers::BuiltIn::Compound::NestedEvaluator
  def self.matcher_expects_call_stack_jump?(matcher); end
end

class RSpec::Matchers::BuiltIn::Compound::Or
end

class RSpec::Matchers::BuiltIn::Compound::Or
end

class RSpec::Matchers::BuiltIn::Compound::SequentialEvaluator
  def initialize(actual, *_); end

  def matcher_matches?(matcher); end
end

class RSpec::Matchers::BuiltIn::Compound::SequentialEvaluator
end

class RSpec::Matchers::BuiltIn::Compound
end

class RSpec::Matchers::BuiltIn::ContainExactly
end

class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer
  def actual_to_expected_matched_indexes(); end

  def expected_to_actual_matched_indexes(); end

  def find_best_solution(); end

  def initialize(expected_to_actual_matched_indexes, actual_to_expected_matched_indexes); end

  def solution(); end
end

class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer::NullSolution
end

class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer::NullSolution
  def self.worse_than?(_other); end
end

class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer::Solution
  def +(derived_candidate_solution); end

  def candidate?(); end

  def ideal?(); end

  def indeterminate_actual_indexes(); end

  def indeterminate_actual_indexes=(_); end

  def indeterminate_expected_indexes(); end

  def indeterminate_expected_indexes=(_); end

  def unmatched_actual_indexes(); end

  def unmatched_actual_indexes=(_); end

  def unmatched_expected_indexes(); end

  def unmatched_expected_indexes=(_); end

  def unmatched_item_count(); end

  def worse_than?(other); end
end

class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer::Solution
  def self.[](*_); end

  def self.members(); end
end

class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer
end

class RSpec::Matchers::BuiltIn::ContainExactly
end

class RSpec::Matchers::BuiltIn::Cover
  def does_not_match?(range); end

  def initialize(*expected); end

  def matches?(range); end
end

class RSpec::Matchers::BuiltIn::Cover
end

class RSpec::Matchers::BuiltIn::EndWith
end

class RSpec::Matchers::BuiltIn::EndWith
end

class RSpec::Matchers::BuiltIn::Eq
end

class RSpec::Matchers::BuiltIn::Eq
end

class RSpec::Matchers::BuiltIn::Eql
end

class RSpec::Matchers::BuiltIn::Eql
end

class RSpec::Matchers::BuiltIn::Equal
  LITERAL_SINGLETONS = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::BuiltIn::Equal
end

class RSpec::Matchers::BuiltIn::Exist
  def does_not_match?(actual); end

  def initialize(*expected); end
end

class RSpec::Matchers::BuiltIn::Exist::ExistenceTest
  def actual_exists?(); end

  def valid_test?(); end

  def validity_message(); end
end

class RSpec::Matchers::BuiltIn::Exist::ExistenceTest
end

class RSpec::Matchers::BuiltIn::Exist
end

class RSpec::Matchers::BuiltIn::Has
  def does_not_match?(actual, &block); end

  def initialize(method_name, *args, &block); end

  def matches?(actual, &block); end
end

class RSpec::Matchers::BuiltIn::Has
end

class RSpec::Matchers::BuiltIn::HaveAttributes
  def does_not_match?(actual); end

  def initialize(expected); end

  def respond_to_failed(); end
end

class RSpec::Matchers::BuiltIn::HaveAttributes
end

class RSpec::Matchers::BuiltIn::Include
  def does_not_match?(actual); end

  def expecteds(); end

  def initialize(*expecteds); end
end

class RSpec::Matchers::BuiltIn::Include
end

class RSpec::Matchers::BuiltIn::Match
  def initialize(expected); end

  def with_captures(*captures); end
end

class RSpec::Matchers::BuiltIn::Match
end

class RSpec::Matchers::BuiltIn::NegativeOperatorMatcher
  def __delegate_operator(actual, operator, expected); end
end

class RSpec::Matchers::BuiltIn::NegativeOperatorMatcher
end

class RSpec::Matchers::BuiltIn::OperatorMatcher
  def !=(_expected); end

  def !~(_expected); end

  def <(expected); end

  def <=(expected); end

  def ==(expected); end

  def ===(expected); end

  def =~(expected); end

  def >(expected); end

  def >=(expected); end

  def description(); end

  def fail_with_message(message); end

  def initialize(actual); end
end

class RSpec::Matchers::BuiltIn::OperatorMatcher
  def self.get(klass, operator); end

  def self.register(klass, operator, matcher); end

  def self.registry(); end

  def self.unregister(klass, operator); end

  def self.use_custom_matcher_or_delegate(operator); end
end

class RSpec::Matchers::BuiltIn::Output
  def does_not_match?(block); end

  def initialize(expected); end

  def matches?(block); end

  def to_stderr(); end

  def to_stderr_from_any_process(); end

  def to_stdout(); end

  def to_stdout_from_any_process(); end
end

class RSpec::Matchers::BuiltIn::Output
end

class RSpec::Matchers::BuiltIn::PositiveOperatorMatcher
  def __delegate_operator(actual, operator, expected); end
end

class RSpec::Matchers::BuiltIn::PositiveOperatorMatcher
end

class RSpec::Matchers::BuiltIn::RaiseError
  include ::RSpec::Matchers::Composable
  def description(); end

  def does_not_match?(given_proc); end

  def expects_call_stack_jump?(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(expected_error_or_message=T.unsafe(nil), expected_message=T.unsafe(nil), &block); end

  def matches?(given_proc, negative_expectation=T.unsafe(nil), &block); end

  def supports_block_expectations?(); end

  def with_message(expected_message); end
end

class RSpec::Matchers::BuiltIn::RaiseError
end

class RSpec::Matchers::BuiltIn::RespondTo
  def and_any_keywords(); end

  def and_keywords(*keywords); end

  def and_unlimited_arguments(); end

  def argument(); end

  def arguments(); end

  def does_not_match?(actual); end

  def initialize(*names); end

  def with(n); end

  def with_any_keywords(); end

  def with_keywords(*keywords); end

  def with_unlimited_arguments(); end
end

class RSpec::Matchers::BuiltIn::RespondTo
end

class RSpec::Matchers::BuiltIn::Satisfy
  def initialize(description=T.unsafe(nil), &block); end

  def matches?(actual, &block); end
end

class RSpec::Matchers::BuiltIn::Satisfy
end

class RSpec::Matchers::BuiltIn::StartOrEndWith
  def initialize(*expected); end
end

class RSpec::Matchers::BuiltIn::StartOrEndWith
end

class RSpec::Matchers::BuiltIn::StartWith
end

class RSpec::Matchers::BuiltIn::StartWith
end

class RSpec::Matchers::BuiltIn::ThrowSymbol
  include ::RSpec::Matchers::Composable
  def description(); end

  def does_not_match?(given_proc); end

  def expects_call_stack_jump?(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(expected_symbol=T.unsafe(nil), expected_arg=T.unsafe(nil)); end

  def matches?(given_proc); end

  def supports_block_expectations?(); end
end

class RSpec::Matchers::BuiltIn::ThrowSymbol
end

class RSpec::Matchers::BuiltIn::YieldControl
  def at_least(number); end

  def at_most(number); end

  def does_not_match?(block); end

  def exactly(number); end

  def initialize(); end

  def matches?(block); end

  def once(); end

  def thrice(); end

  def times(); end

  def twice(); end
end

class RSpec::Matchers::BuiltIn::YieldControl
end

class RSpec::Matchers::BuiltIn::YieldSuccessiveArgs
  def does_not_match?(block); end

  def initialize(*args); end

  def matches?(block); end
end

class RSpec::Matchers::BuiltIn::YieldSuccessiveArgs
end

class RSpec::Matchers::BuiltIn::YieldWithArgs
  def does_not_match?(block); end

  def initialize(*args); end

  def matches?(block); end
end

class RSpec::Matchers::BuiltIn::YieldWithArgs
end

class RSpec::Matchers::BuiltIn::YieldWithNoArgs
  def does_not_match?(block); end

  def matches?(block); end
end

class RSpec::Matchers::BuiltIn::YieldWithNoArgs
end

module RSpec::Matchers::BuiltIn
  extend ::T::Sig
end

module RSpec::Matchers::Composable
  extend ::T::Sig
end

module RSpec::Matchers::DSL::DefaultImplementations
  extend ::T::Sig
end

module RSpec::Matchers::DSL::Macros
  RAISE_NOTIFIER = ::T.let(nil, ::T.untyped)
end

module RSpec::Matchers::DSL::Macros::Deprecated
  extend ::T::Sig
end

module RSpec::Matchers::DSL::Macros
  extend ::T::Sig
end

module RSpec::Matchers::DSL
  extend ::T::Sig
end

module RSpec::Matchers::EnglishPhrasing
  extend ::T::Sig
end

class RSpec::Matchers::ExpectedsForMultipleDiffs
  DEFAULT_DIFF_LABEL = ::T.let(nil, ::T.untyped)
  DESCRIPTION_MAX_LENGTH = ::T.let(nil, ::T.untyped)
end

module RSpec::Matchers
  extend ::T::Sig
end

module RSpec::Rails::FeatureCheck
  extend ::T::Sig
end

module RSpec::Rails
  extend ::T::Sig
end

RSpec::SharedContext = RSpec::Core::SharedContext

module RSpec::Support
  DEFAULT_FAILURE_NOTIFIER = ::T.let(nil, ::T.untyped)
  DEFAULT_WARNING_NOTIFIER = ::T.let(nil, ::T.untyped)
  KERNEL_METHOD_METHOD = ::T.let(nil, ::T.untyped)
end

module RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue
  AVOID_RESCUING = ::T.let(nil, ::T.untyped)
end

module RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue
  extend ::T::Sig
end

class RSpec::Support::BlockSignature
end

class RSpec::Support::BlockSignature
end

class RSpec::Support::Differ
  def color?(); end

  def diff(actual, expected); end

  def diff_as_object(actual, expected); end

  def diff_as_string(actual, expected); end

  def initialize(opts=T.unsafe(nil)); end
end

class RSpec::Support::Differ
end

class RSpec::Support::EncodedString
  ENCODE_NO_CONVERTER = ::T.let(nil, ::T.untyped)
  ENCODE_UNCONVERTABLE_BYTES = ::T.let(nil, ::T.untyped)
  REPLACE = ::T.let(nil, ::T.untyped)
  US_ASCII = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
end

module RSpec::Support::FuzzyMatcher
  extend ::T::Sig
end

class RSpec::Support::LooseSignatureVerifier
end

class RSpec::Support::LooseSignatureVerifier::SignatureWithKeywordArgumentsMatcher
  def has_kw_args_in?(args); end

  def initialize(signature); end

  def invalid_kw_args_from(_kw_args); end

  def missing_kw_args_from(_kw_args); end

  def non_kw_args_arity_description(); end

  def valid_non_kw_args?(*args); end
end

class RSpec::Support::LooseSignatureVerifier::SignatureWithKeywordArgumentsMatcher
end

class RSpec::Support::LooseSignatureVerifier
end

class RSpec::Support::MethodSignature
  def arbitrary_kw_args?(); end

  def classify_arity(arity=T.unsafe(nil)); end

  def classify_parameters(); end

  def could_contain_kw_args?(args); end

  def description(); end

  def has_kw_args_in?(args); end

  def initialize(method); end

  def invalid_kw_args_from(given_kw_args); end

  def max_non_kw_args(); end

  def min_non_kw_args(); end

  def missing_kw_args_from(given_kw_args); end

  def non_kw_args_arity_description(); end

  def optional_kw_args(); end

  def required_kw_args(); end

  def unlimited_args?(); end

  def valid_non_kw_args?(positional_arg_count, optional_max_arg_count=T.unsafe(nil)); end
  INFINITY = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::MethodSignature
end

class RSpec::Support::MethodSignatureExpectation
  def empty?(); end

  def expect_arbitrary_keywords(); end

  def expect_arbitrary_keywords=(expect_arbitrary_keywords); end

  def expect_unlimited_arguments(); end

  def expect_unlimited_arguments=(expect_unlimited_arguments); end

  def keywords(); end

  def keywords=(values); end

  def max_count(); end

  def max_count=(number); end

  def min_count(); end

  def min_count=(number); end
end

class RSpec::Support::MethodSignatureExpectation
end

class RSpec::Support::MethodSignatureVerifier
  def error_message(); end

  def initialize(signature, args=T.unsafe(nil)); end

  def kw_args(); end

  def max_non_kw_args(); end

  def min_non_kw_args(); end

  def non_kw_args(); end

  def valid?(); end

  def with_expectation(expectation); end
end

class RSpec::Support::MethodSignatureVerifier
end

RSpec::Support::Mutex = Thread::Mutex

module RSpec::Support::OS
  extend ::T::Sig
end

class RSpec::Support::ObjectFormatter
  ELLIPSIS = ::T.let(nil, ::T.untyped)
  INSPECTOR_CLASSES = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::DateTimeInspector
  FORMAT = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::TimeInspector
  FORMAT = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::UninspectableObjectInspector
  OBJECT_ID_FORMAT = ::T.let(nil, ::T.untyped)
end

module RSpec::Support::RecursiveConstMethods
  extend ::T::Sig
end

module RSpec::Support::Ruby
  extend ::T::Sig
end

module RSpec::Support::RubyFeatures
  extend ::T::Sig
end

RSpec::Support::StrictSignatureVerifier = RSpec::Support::MethodSignatureVerifier

module RSpec::Support::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Support::Version
  extend ::T::Sig
end

module RSpec::Support::Warnings
  extend ::T::Sig
end

module RSpec::Support
  extend ::T::Sig
end

module RSpec::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Version
  extend ::T::Sig
end

module RSpec
  extend ::T::Sig
end

class RSpecJUnitFormatter
  DISCOURAGED_REGEXP = ::T.let(nil, ::T.untyped)
  DISCOURAGED_REPLACEMENTS = ::T.let(nil, ::T.untyped)
  ILLEGAL_REGEXP = ::T.let(nil, ::T.untyped)
  ILLEGAL_REPLACEMENT = ::T.let(nil, ::T.untyped)
  STRIP_DIFF_COLORS_BLOCK_REGEXP = ::T.let(nil, ::T.untyped)
  STRIP_DIFF_COLORS_CODES_REGEXP = ::T.let(nil, ::T.untyped)
end

module RabbitMQHelpers
  def test_queue(); end

  def test_queue=(obj); end
end

module RabbitMQHelpers
  extend ::T::Sig
  def self.test_queue(); end

  def self.test_queue=(obj); end
end

class RabbitmqBus
  def connection(); end

  def connection=(obj); end

  def exchange(); end

  def exchange=(obj); end

  def failed(); end

  def failed=(obj); end
end

class RabbitmqBus
  def self.connection(); end

  def self.connection=(obj); end

  def self.exchange(); end

  def self.exchange=(obj); end

  def self.failed(); end

  def self.failed=(obj); end
end

module Racc
  Racc_No_Extensions = ::T.let(nil, ::T.untyped)
end

class Racc::CparseParams
end

class Racc::CparseParams
end

class Racc::ParseError
  extend ::T::Sig
end

class Racc::Parser
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  Racc_Main_Parsing_Routine = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Id_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Revision = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Revision_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Revision_R = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_R = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Revision = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Type = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Version = ::T.let(nil, ::T.untyped)
  Racc_YY_Parse_Method = ::T.let(nil, ::T.untyped)
end

class Racc::Parser
  extend ::T::Sig
end

module Racc
  extend ::T::Sig
end

module Rack
  CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DELETE = ::T.let(nil, ::T.untyped)
  ETAG = ::T.let(nil, ::T.untyped)
  GET = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTP_COOKIE = ::T.let(nil, ::T.untyped)
  HTTP_HOST = ::T.let(nil, ::T.untyped)
  HTTP_VERSION = ::T.let(nil, ::T.untyped)
  LINK = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  POST = ::T.let(nil, ::T.untyped)
  PUT = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_ERRORS = ::T.let(nil, ::T.untyped)
  RACK_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_HIJACK_IO = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_IS_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_LOGGER = ::T.let(nil, ::T.untyped)
  RACK_METHODOVERRIDE_ORIGINAL_METHOD = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  RACK_MULTIPROCESS = ::T.let(nil, ::T.untyped)
  RACK_MULTITHREAD = ::T.let(nil, ::T.untyped)
  RACK_RECURSIVE_INCLUDE = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_STRING = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_INPUT = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_VARS = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_RUNONCE = ::T.let(nil, ::T.untyped)
  RACK_SESSION = ::T.let(nil, ::T.untyped)
  RACK_SESSION_OPTIONS = ::T.let(nil, ::T.untyped)
  RACK_SESSION_UNPACKED_COOKIE_DATA = ::T.let(nil, ::T.untyped)
  RACK_SHOWSTATUS_DETAIL = ::T.let(nil, ::T.untyped)
  RACK_TEMPFILES = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  RACK_VERSION = ::T.let(nil, ::T.untyped)
  RELEASE = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_PATH = ::T.let(nil, ::T.untyped)
  SCRIPT_NAME = ::T.let(nil, ::T.untyped)
  SERVER_ADDR = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_PORT = ::T.let(nil, ::T.untyped)
  SERVER_PROTOCOL = ::T.let(nil, ::T.untyped)
  SET_COOKIE = ::T.let(nil, ::T.untyped)
  TRACE = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  UNLINK = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::AbstractHandler
  def initialize(app, realm=T.unsafe(nil), &authenticator); end

  def realm(); end

  def realm=(realm); end
end

class Rack::Auth::AbstractHandler
end

class Rack::Auth::AbstractRequest
  def initialize(env); end

  def params(); end

  def parts(); end

  def provided?(); end

  def request(); end

  def scheme(); end

  def valid?(); end
  AUTHORIZATION_KEYS = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::AbstractRequest
end

class Rack::Auth::Basic
  def call(env); end
end

class Rack::Auth::Basic::Request
  def basic?(); end

  def credentials(); end

  def username(); end
end

class Rack::Auth::Basic::Request
end

class Rack::Auth::Basic
end

class Rack::Auth::Digest::MD5
  def call(env); end

  def initialize(app, realm=T.unsafe(nil), opaque=T.unsafe(nil), &authenticator); end

  def opaque(); end

  def opaque=(opaque); end

  def passwords_hashed=(passwords_hashed); end

  def passwords_hashed?(); end
  QOP = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::Digest::MD5
end

class Rack::Auth::Digest::Nonce
  def digest(); end

  def fresh?(); end

  def initialize(timestamp=T.unsafe(nil), given_digest=T.unsafe(nil)); end

  def stale?(); end

  def valid?(); end
end

class Rack::Auth::Digest::Nonce
  def self.parse(string); end

  def self.private_key(); end

  def self.private_key=(private_key); end

  def self.time_limit(); end

  def self.time_limit=(time_limit); end
end

class Rack::Auth::Digest::Params
  def [](k); end

  def []=(k, v); end

  def initialize(); end

  def quote(str); end
  UNQUOTED = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::Digest::Params
  def self.dequote(str); end

  def self.parse(str); end

  def self.split_header_value(str); end
end

class Rack::Auth::Digest::Request
  def correct_uri?(); end

  def digest?(); end

  def method(); end

  def method_missing(sym, *args); end

  def nonce(); end

  def respond_to?(sym, *_); end
end

class Rack::Auth::Digest::Request
end

module Rack::Auth::Digest
  extend ::T::Sig
end

module Rack::Auth
  extend ::T::Sig
end

class Rack::Cascade
  def <<(app); end

  def add(app); end

  def apps(); end

  def call(env); end

  def include?(app); end

  def initialize(apps, catch=T.unsafe(nil)); end
  NotFound = ::T.let(nil, ::T.untyped)
end

class Rack::Cascade
end

class Rack::Chunked::Body
  TAIL = ::T.let(nil, ::T.untyped)
  TERM = ::T.let(nil, ::T.untyped)
end

class Rack::CommonLogger
  def call(env); end

  def initialize(app, logger=T.unsafe(nil)); end
  FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::CommonLogger
end

class Rack::Config
  def call(env); end

  def initialize(app, &block); end
end

class Rack::Config
end

class Rack::ContentLength
  include ::Rack::Utils
  def call(env); end

  def initialize(app); end
end

class Rack::ContentLength
end

class Rack::ContentType
  include ::Rack::Utils
  def call(env); end

  def initialize(app, content_type=T.unsafe(nil)); end
end

class Rack::ContentType
end

class Rack::Directory
  def call(env); end

  def check_bad_request(path_info); end

  def check_forbidden(path_info); end

  def entity_not_found(path_info); end

  def filesize_format(int); end

  def get(env); end

  def initialize(root, app=T.unsafe(nil)); end

  def list_directory(path_info, path, script_name); end

  def list_path(env, path, path_info, script_name); end

  def path(); end

  def root(); end

  def stat(node); end
  DIR_FILE = ::T.let(nil, ::T.untyped)
  DIR_PAGE = ::T.let(nil, ::T.untyped)
  FILESIZE_FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::Directory::DirectoryBody
end

class Rack::Directory::DirectoryBody
end

class Rack::Directory
end

class Rack::ETag
  DEFAULT_CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  ETAG_STRING = ::T.let(nil, ::T.untyped)
end

class Rack::File
  ALLOWED_VERBS = ::T.let(nil, ::T.untyped)
  ALLOW_HEADER = ::T.let(nil, ::T.untyped)
end

class Rack::ForwardRequest
  def env(); end

  def initialize(url, env=T.unsafe(nil)); end

  def url(); end
end

class Rack::ForwardRequest
end

module Rack::Handler
end

class Rack::Handler::CGI
end

class Rack::Handler::CGI
  def self.run(app, options=T.unsafe(nil)); end

  def self.send_body(body); end

  def self.send_headers(status, headers); end

  def self.serve(app); end
end

class Rack::Handler::WEBrick
  def initialize(server, app); end
end

class Rack::Handler::WEBrick
  def self.run(app, options=T.unsafe(nil)); end

  def self.shutdown(); end

  def self.valid_options(); end
end

module Rack::Handler
  extend ::T::Sig
  def self.default(); end

  def self.get(server); end

  def self.pick(server_names); end

  def self.register(server, klass); end

  def self.try_require(prefix, const_name); end
end

module Rack::Lint::Assertion
  extend ::T::Sig
end

class Rack::Lint::HijackWrapper
  REQUIRED_METHODS = ::T.let(nil, ::T.untyped)
end

class Rack::Logger
  def call(env); end

  def initialize(app, level=T.unsafe(nil)); end
end

class Rack::Logger
end

class Rack::MediaType
  SPLIT_PATTERN = ::T.let(nil, ::T.untyped)
end

class Rack::MethodOverride
  ALLOWED_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_OVERRIDE_HEADER = ::T.let(nil, ::T.untyped)
  METHOD_OVERRIDE_PARAM_KEY = ::T.let(nil, ::T.untyped)
end

module Rack::Mime
  MIME_TYPES = ::T.let(nil, ::T.untyped)
end

module Rack::Mime
  extend ::T::Sig
end

class Rack::MockRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

module Rack::Multipart
  ATTRIBUTE = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_CHAR = ::T.let(nil, ::T.untyped)
  BROKEN_QUOTED = ::T.let(nil, ::T.untyped)
  BROKEN_UNQUOTED = ::T.let(nil, ::T.untyped)
  CONDISP = ::T.let(nil, ::T.untyped)
  DISPPARM = ::T.let(nil, ::T.untyped)
  EOL = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_NAME = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_PARAMETER = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_VALUE = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_NAME = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_PARAMETER = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_VALUE = ::T.let(nil, ::T.untyped)
  EXTENDED_PARAMETER = ::T.let(nil, ::T.untyped)
  MULTIPART = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_DISPOSITION = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_ID = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  REGULAR_PARAMETER = ::T.let(nil, ::T.untyped)
  REGULAR_PARAMETER_NAME = ::T.let(nil, ::T.untyped)
  RFC2183 = ::T.let(nil, ::T.untyped)
  SECTION = ::T.let(nil, ::T.untyped)
  TOKEN = ::T.let(nil, ::T.untyped)
  VALUE = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::Generator
  def dump(); end

  def initialize(params, first=T.unsafe(nil)); end
end

class Rack::Multipart::Generator
end

class Rack::Multipart::MultipartPartLimitError
end

class Rack::Multipart::MultipartPartLimitError
end

class Rack::Multipart::Parser
  def initialize(boundary, tempfile, bufsize, query_parser); end

  def on_read(content); end

  def result(); end

  def state(); end
  BUFSIZE = ::T.let(nil, ::T.untyped)
  CHARSET = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  TEXT_PLAIN = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::Parser::BoundedIO
  def initialize(io, content_length); end

  def read(size); end

  def rewind(); end
end

class Rack::Multipart::Parser::BoundedIO
end

class Rack::Multipart::Parser::Collector
  include ::Enumerable
  def each(&blk); end

  def initialize(tempfile); end

  def on_mime_body(mime_index, content); end

  def on_mime_finish(mime_index); end

  def on_mime_head(mime_index, head, filename, content_type, name); end
end

class Rack::Multipart::Parser::Collector::BufferPart
  def close(); end

  def file?(); end
end

class Rack::Multipart::Parser::Collector::BufferPart
end

class Rack::Multipart::Parser::Collector::MimePart
  def get_data(); end
end

class Rack::Multipart::Parser::Collector::MimePart
end

class Rack::Multipart::Parser::Collector::TempfilePart
  def close(); end

  def file?(); end
end

class Rack::Multipart::Parser::Collector::TempfilePart
end

class Rack::Multipart::Parser::Collector
end

class Rack::Multipart::Parser::MultipartInfo
  def params(); end

  def params=(_); end

  def tmp_files(); end

  def tmp_files=(_); end
end

class Rack::Multipart::Parser::MultipartInfo
  def self.[](*_); end

  def self.members(); end
end

class Rack::Multipart::Parser
  def self.parse(io, content_length, content_type, tmpfile, bufsize, qp); end

  def self.parse_boundary(content_type); end
end

class Rack::Multipart::UploadedFile
  def content_type(); end

  def content_type=(content_type); end

  def initialize(path, content_type=T.unsafe(nil), binary=T.unsafe(nil)); end

  def local_path(); end

  def method_missing(method_name, *args, &block); end

  def original_filename(); end

  def path(); end

  def respond_to?(*args); end
end

class Rack::Multipart::UploadedFile
end

module Rack::Multipart
  extend ::T::Sig
  def self.build_multipart(params, first=T.unsafe(nil)); end

  def self.extract_multipart(req, params=T.unsafe(nil)); end

  def self.parse_multipart(env, params=T.unsafe(nil)); end
end

class Rack::NullLogger
  def <<(msg); end

  def add(severity, message=T.unsafe(nil), progname=T.unsafe(nil), &block); end

  def call(env); end

  def close(); end

  def datetime_format(); end

  def datetime_format=(datetime_format); end

  def debug(progname=T.unsafe(nil), &block); end

  def debug?(); end

  def error(progname=T.unsafe(nil), &block); end

  def error?(); end

  def fatal(progname=T.unsafe(nil), &block); end

  def fatal?(); end

  def formatter(); end

  def formatter=(formatter); end

  def info(progname=T.unsafe(nil), &block); end

  def info?(); end

  def initialize(app); end

  def level(); end

  def level=(level); end

  def progname(); end

  def progname=(progname); end

  def sev_threshold(); end

  def sev_threshold=(sev_threshold); end

  def unknown(progname=T.unsafe(nil), &block); end

  def warn(progname=T.unsafe(nil), &block); end

  def warn?(); end
end

class Rack::NullLogger
end

class Rack::QueryParser
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
end

class Rack::Recursive
  def _call(env); end

  def call(env); end

  def include(env, path); end

  def initialize(app); end
end

class Rack::Recursive
end

class Rack::Reloader
  def call(env); end

  def initialize(app, cooldown=T.unsafe(nil), backend=T.unsafe(nil)); end

  def reload!(stderr=T.unsafe(nil)); end

  def safe_load(file, mtime, stderr=T.unsafe(nil)); end
end

module Rack::Reloader::Stat
  def figure_path(file, paths); end

  def rotation(); end

  def safe_stat(file); end
end

module Rack::Reloader::Stat
  extend ::T::Sig
end

class Rack::Reloader
end

class Rack::Request
  SCHEME_WHITELIST = ::T.let(nil, ::T.untyped)
end

module Rack::Request::Env
  extend ::T::Sig
end

module Rack::Request::Helpers
  DEFAULT_PORTS = ::T.let(nil, ::T.untyped)
  FORM_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_HOST = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PORT = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PROTO = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SCHEME = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SSL = ::T.let(nil, ::T.untyped)
  PARSEABLE_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
end

module Rack::Request::Helpers
  extend ::T::Sig
end

class Rack::Response
  CHUNKED = ::T.let(nil, ::T.untyped)
end

module Rack::Response::Helpers
  extend ::T::Sig
end

class Rack::Runtime
  FORMAT_STRING = ::T.let(nil, ::T.untyped)
  HEADER_NAME = ::T.let(nil, ::T.untyped)
end

class Rack::Server
  def app(); end

  def default_options(); end

  def initialize(options=T.unsafe(nil)); end

  def middleware(); end

  def options(); end

  def options=(options); end

  def server(); end

  def start(&blk); end
end

class Rack::Server::Options
  def handler_opts(options); end

  def parse!(args); end
end

class Rack::Server::Options
end

class Rack::Server
  def self.default_middleware_by_environment(); end

  def self.logging_middleware(); end

  def self.middleware(); end

  def self.start(options=T.unsafe(nil)); end
end

class Rack::Session::Abstract::Persisted
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Abstract::SessionHash
  Unspecified = ::T.let(nil, ::T.untyped)
end

module Rack::Session::Abstract
  extend ::T::Sig
end

class Rack::Session::Dalli
  def destroy_session(env, session_id, options); end

  def find_session(req, sid); end

  def get_session(env, sid); end

  def mutex(); end

  def pool(); end

  def set_session(env, session_id, new_session, options); end
  DEFAULT_DALLI_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Dalli
end

class Rack::Session::Pool
  def delete_session(req, session_id, options); end

  def find_session(req, sid); end

  def generate_sid(); end

  def mutex(); end

  def pool(); end

  def with_lock(req); end

  def write_session(req, session_id, new_session, options); end
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Pool
end

module Rack::Session
  extend ::T::Sig
end

class Rack::ShowExceptions
  def call(env); end

  def dump_exception(exception); end

  def h(obj); end

  def initialize(app); end

  def prefers_plaintext?(env); end

  def pretty(env, exception); end
  CONTEXT = ::T.let(nil, ::T.untyped)
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Rack::ShowExceptions
end

class Rack::ShowStatus
  def call(env); end

  def h(obj); end

  def initialize(app); end
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Rack::ShowStatus
end

class Rack::Static
  def add_index_root?(path); end

  def applicable_rules(path); end

  def call(env); end

  def can_serve(path); end

  def initialize(app, options=T.unsafe(nil)); end

  def overwrite_file_path(path); end

  def route_file(path); end
end

class Rack::Static
end

module Rack::Test
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Test::CookieJar
  DELIMITER = ::T.let(nil, ::T.untyped)
end

module Rack::Test::Methods
  METHODS = ::T.let(nil, ::T.untyped)
end

module Rack::Test::Methods
  extend ::T::Sig
end

module Rack::Test::Utils
  extend ::T::Sig
end

module Rack::Test
  extend ::T::Sig
end

class Rack::URLMap
  INFINITY = ::T.let(nil, ::T.untyped)
  NEGATIVE_INFINITY = ::T.let(nil, ::T.untyped)
end

module Rack::Utils
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
  ESCAPE_HTML = ::T.let(nil, ::T.untyped)
  ESCAPE_HTML_PATTERN = ::T.let(nil, ::T.untyped)
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  NULL_BYTE = ::T.let(nil, ::T.untyped)
  PATH_SEPS = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
  SYMBOL_TO_STATUS_CODE = ::T.let(nil, ::T.untyped)
end

Rack::Utils::InvalidParameterError = Rack::QueryParser::InvalidParameterError

Rack::Utils::KeySpaceConstrainedParams = Rack::QueryParser::Params

Rack::Utils::ParameterTypeError = Rack::QueryParser::ParameterTypeError

module Rack::Utils
  extend ::T::Sig
end

module Rack
  extend ::T::Sig
end

class Rails::Application
  INITIAL_VARIABLES = ::T.let(nil, ::T.untyped)
end

class Rails::ApplicationController
end

class Rails::ApplicationController
end

module Rails::Command
  HELP_MAPPINGS = ::T.let(nil, ::T.untyped)
end

module Rails::Command::Actions
  def load_generators(); end

  def load_tasks(); end

  def require_application!(); end

  def require_application_and_environment!(); end

  def require_environment!(); end

  def set_application_directory!(); end
end

module Rails::Command::Actions
  extend ::T::Sig
end

class Rails::Command::Base
  include ::Rails::Command::Actions
  def help(); end
end

class Rails::Command::Base::Error
end

class Rails::Command::Base::Error
end

class Rails::Command::Base
  def self.banner(*_); end

  def self.base_name(); end

  def self.command_name(); end

  def self.default_command_root(); end

  def self.desc(usage=T.unsafe(nil), description=T.unsafe(nil), options=T.unsafe(nil)); end

  def self.engine?(); end

  def self.executable(); end

  def self.hide_command!(); end

  def self.inherited(base); end

  def self.perform(command, args, config); end

  def self.printing_commands(); end

  def self.usage_path(); end
end

module Rails::Command::Behavior::ClassMethods
  extend ::T::Sig
end

module Rails::Command::Behavior
  extend ::T::Sig
end

module Rails::Command
  extend ::T::Sig
end

module Rails::Configuration
  extend ::T::Sig
end

module Rails::Controller::Testing
  VERSION = ::T.let(nil, ::T.untyped)
end

module Rails::Controller::Testing::Integration
  extend ::T::Sig
end

module Rails::Controller::Testing::TemplateAssertions
  RENDER_TEMPLATE_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
end

module Rails::Controller::Testing::TemplateAssertions
  extend ::T::Sig
end

module Rails::Controller::Testing::TestProcess
  extend ::T::Sig
end

module Rails::Controller::Testing
  extend ::T::Sig
end

module Rails::Controller
  extend ::T::Sig
end

module Rails::Dom::Testing::Assertions::DomAssertions
  extend ::T::Sig
end

module Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  extend ::T::Sig
end

module Rails::Dom::Testing::Assertions::SelectorAssertions
  extend ::T::Sig
end

module Rails::Dom::Testing::Assertions
  extend ::T::Sig
end

module Rails::Dom::Testing
  extend ::T::Sig
end

module Rails::Dom
  extend ::T::Sig
end

module Rails::Generators
  DEFAULT_ALIASES = ::T.let(nil, ::T.untyped)
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rails::Generators::Actions::CreateMigration
  def existing_migration(); end

  def migration_dir(); end

  def migration_file_name(); end

  def relative_existing_migration(); end
end

class Rails::Generators::Actions::CreateMigration
end

module Rails::Generators::Actions
  extend ::T::Sig
end

class Rails::Generators::ActiveModel
  def destroy(); end

  def errors(); end

  def initialize(name); end

  def name(); end

  def save(); end

  def update(params=T.unsafe(nil)); end
end

class Rails::Generators::ActiveModel
  def self.all(klass); end

  def self.build(klass, params=T.unsafe(nil)); end

  def self.find(klass, params=T.unsafe(nil)); end
end

class Rails::Generators::GeneratedAttribute
  INDEX_OPTIONS = ::T.let(nil, ::T.untyped)
  UNIQ_INDEX_OPTIONS = ::T.let(nil, ::T.untyped)
end

module Rails::Generators::Migration
  def create_migration(destination, data, config=T.unsafe(nil), &block); end

  def migration_class_name(); end

  def migration_file_name(); end

  def migration_number(); end

  def migration_template(source, destination, config=T.unsafe(nil)); end

  def set_migration_assigns!(destination); end
end

module Rails::Generators::Migration::ClassMethods
  def current_migration_number(dirname); end

  def migration_exists?(dirname, file_name); end

  def migration_lookup_at(dirname); end

  def next_migration_number(dirname); end
end

module Rails::Generators::Migration::ClassMethods
  extend ::T::Sig
end

module Rails::Generators::Migration
  extend ::ActiveSupport::Concern
  extend ::T::Sig
end

class Rails::Generators::NamedBase
  include ::Coffee::Rails::JsHook
  def file_name(); end

  def initialize(args, *options); end

  def js_template(source, destination); end

  def name(); end

  def name=(name); end
end

module Rails::Generators::ResourceHelpers
  def controller_file_name(); end

  def controller_name(); end

  def initialize(*args); end
end

module Rails::Generators::ResourceHelpers
  extend ::T::Sig
  def self.included(base); end
end

class Rails::Generators::TestCase
  include ::FileUtils::StreamUtils_
end

module Rails::Generators::Testing::Assertions
  extend ::T::Sig
end

module Rails::Generators::Testing::Behaviour
  extend ::T::Sig
end

module Rails::Generators::Testing::SetupAndTeardown
  extend ::T::Sig
end

module Rails::Generators::Testing
  extend ::T::Sig
end

module Rails::Generators
  extend ::T::Sig
end

module Rails::Html
  XPATHS_TO_REMOVE = ::T.let(nil, ::T.untyped)
end

class Rails::Html::Sanitizer
  VERSION = ::T.let(nil, ::T.untyped)
end

module Rails::Html
  extend ::T::Sig
end

module Rails::Info
  def properties(); end

  def properties=(obj); end
end

module Rails::Info
  extend ::T::Sig
  def self.properties(); end

  def self.properties=(obj); end

  def self.property(name, value=T.unsafe(nil)); end

  def self.to_html(); end
end

class Rails::InfoController
  def _layout_from_proc(); end

  def index(); end

  def properties(); end

  def routes(); end
end

class Rails::InfoController
end

module Rails::Initializable
  extend ::T::Sig
end

module Rails::LineFiltering
  extend ::T::Sig
end

class Rails::MailersController
  def index(); end

  def preview(); end
end

class Rails::MailersController
end

module Rails::Paths
  extend ::T::Sig
end

class Rails::Rack::Logger
  def call(env); end

  def initialize(app, taggers=T.unsafe(nil)); end
end

module Rails::Rack
  extend ::T::Sig
end

class Rails::Railtie
  ABSTRACT_RAILTIES = ::T.let(nil, ::T.untyped)
end

module Rails::TestUnit
  extend ::T::Sig
end

module Rails::Timeago::Helper
  extend ::T::Sig
end

module Rails::Timeago::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  STAGE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

module Rails::Timeago::VERSION
  extend ::T::Sig
end

module Rails::Timeago
  extend ::T::Sig
end

module Rails::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module Rails::VERSION
  extend ::T::Sig
end

class Rails::WelcomeController
  def index(); end
end

class Rails::WelcomeController
end

module Rails
  extend ::T::Sig
end

module RailsTokeninput::Rails
  extend ::T::Sig
end

module RailsTokeninput
  extend ::T::Sig
end

class Rainbow::Color::Named
  NAMES = ::T.let(nil, ::T.untyped)
end

class Rainbow::Presenter
  TERM_EFFECTS = ::T.let(nil, ::T.untyped)
end

module Rainbow::X11ColorNames
  NAMES = ::T.let(nil, ::T.untyped)
end

module Rainbow::X11ColorNames
  extend ::T::Sig
end

module Rainbow
  extend ::T::Sig
end

module Rake
  EARLY = ::T.let(nil, ::T.untyped)
  EMPTY_TASK_ARGS = ::T.let(nil, ::T.untyped)
  LATE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rake::Application
  DEFAULT_RAKEFILES = ::T.let(nil, ::T.untyped)
end

module Rake::Backtrace
  SUPPRESSED_PATHS = ::T.let(nil, ::T.untyped)
  SUPPRESSED_PATHS_RE = ::T.let(nil, ::T.untyped)
  SUPPRESS_PATTERN = ::T.let(nil, ::T.untyped)
  SYS_KEYS = ::T.let(nil, ::T.untyped)
  SYS_PATHS = ::T.let(nil, ::T.untyped)
end

module Rake::Backtrace
  extend ::T::Sig
end

module Rake::Cloneable
  extend ::T::Sig
end

module Rake::DSL
  include ::FileUtils::StreamUtils_
end

module Rake::DSL
  extend ::T::Sig
end

class Rake::FileList
  ARRAY_METHODS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PATTERNS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PROCS = ::T.let(nil, ::T.untyped)
  DELEGATING_METHODS = ::T.let(nil, ::T.untyped)
  GLOB_PATTERN = ::T.let(nil, ::T.untyped)
  MUST_DEFINE = ::T.let(nil, ::T.untyped)
  MUST_NOT_DEFINE = ::T.let(nil, ::T.untyped)
  SPECIAL_RETURN = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  include ::FileUtils::StreamUtils_
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  extend ::FileUtils::StreamUtils_
  extend ::T::Sig
end

class Rake::InvocationChain
  EMPTY = ::T.let(nil, ::T.untyped)
end

module Rake::InvocationExceptionMixin
  extend ::T::Sig
end

class Rake::LinkedList
  EMPTY = ::T.let(nil, ::T.untyped)
end

module Rake::PrivateReader::ClassMethods
  extend ::T::Sig
end

module Rake::PrivateReader
  extend ::T::Sig
end

class Rake::Promise
  NOT_SET = ::T.let(nil, ::T.untyped)
end

Rake::RDocTask = RDoc::Task

class Rake::Scope
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::TaskLib
  include ::Rake::Cloneable
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

class Rake::TaskLib
end

module Rake::TaskManager
  extend ::T::Sig
end

module Rake::TraceOutput
  extend ::T::Sig
end

module Rake::Version
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  NUMBERS = ::T.let(nil, ::T.untyped)
  OTHER = ::T.let(nil, ::T.untyped)
end

module Rake::Version
  extend ::T::Sig
end

module Rake::Win32
  extend ::T::Sig
end

module Rake
  extend ::FileUtils::StreamUtils_
  extend ::T::Sig
end

RakeFileUtils = Rake::FileUtilsExt

class Random
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module Random::Formatter
  def alphanumeric(n=T.unsafe(nil)); end

  ALPHANUMERIC = ::T.let(nil, ::T.untyped)
end

module Random::Formatter
  extend ::T::Sig
end

class Random
  extend ::T::Sig
  def self.urandom(_); end
end

class Range
  include ::ActiveSupport::EachTimeWithZone
  include ::ActiveSupport::IncludeTimeWithZone
  include ::ActiveSupport::CompareWithRange
  include ::ActiveSupport::RangeWithFormat
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Range
  extend ::T::Sig
end

class RangeError
  extend ::T::Sig
end

class Rantly
  INTEGER_MAX = ::T.let(nil, ::T.untyped)
  INTEGER_MIN = ::T.let(nil, ::T.untyped)
end

module Rantly::Chars
  ALNUM = ::T.let(nil, ::T.untyped)
  ALPHA = ::T.let(nil, ::T.untyped)
  ASCII = ::T.let(nil, ::T.untyped)
  BLANK = ::T.let(nil, ::T.untyped)
  CLASSES = ::T.let(nil, ::T.untyped)
  CNTRL = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  GRAPH = ::T.let(nil, ::T.untyped)
  LOWER = ::T.let(nil, ::T.untyped)
  PRINT = ::T.let(nil, ::T.untyped)
  PUNCT = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  UPPER = ::T.let(nil, ::T.untyped)
  XDIGIT = ::T.let(nil, ::T.untyped)
end

module Rantly::Chars
  extend ::T::Sig
end

class Rating
  include ::Rating::GeneratedAssociationMethods
  def autosave_associated_records_for_packages(*args); end

  def autosave_associated_records_for_projects(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module Rating::GeneratedAssociationMethods
  def build_packages(*args, &block); end

  def build_projects(*args, &block); end

  def create_packages(*args, &block); end

  def create_packages!(*args, &block); end

  def create_projects(*args, &block); end

  def create_projects!(*args, &block); end

  def packages(); end

  def packages=(value); end

  def projects(); end

  def projects=(value); end

  def reload_packages(); end

  def reload_projects(); end
end

module Rating::GeneratedAssociationMethods
  extend ::T::Sig
end

class Rational
  def to_d(precision); end
end

class Rational
  extend ::T::Sig
end

module RbConfig
  extend ::T::Sig
  def self.expand(val, config=T.unsafe(nil)); end

  def self.ruby(); end
end

module Readline
  FILENAME_COMPLETION_PROC = ::T.let(nil, ::T.untyped)
  HISTORY = ::T.let(nil, ::T.untyped)
  USERNAME_COMPLETION_PROC = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Readline
  extend ::T::Sig
  def self.basic_quote_characters(); end

  def self.basic_quote_characters=(basic_quote_characters); end

  def self.basic_word_break_characters(); end

  def self.basic_word_break_characters=(basic_word_break_characters); end

  def self.completer_quote_characters(); end

  def self.completer_quote_characters=(completer_quote_characters); end

  def self.completer_word_break_characters(); end

  def self.completer_word_break_characters=(completer_word_break_characters); end

  def self.completion_append_character(); end

  def self.completion_append_character=(completion_append_character); end

  def self.completion_case_fold(); end

  def self.completion_case_fold=(completion_case_fold); end

  def self.completion_proc(); end

  def self.completion_proc=(completion_proc); end

  def self.delete_text(*_); end

  def self.emacs_editing_mode(); end

  def self.emacs_editing_mode?(); end

  def self.filename_quote_characters(); end

  def self.filename_quote_characters=(filename_quote_characters); end

  def self.get_screen_size(); end

  def self.input=(input); end

  def self.insert_text(_); end

  def self.line_buffer(); end

  def self.output=(output); end

  def self.point(); end

  def self.point=(point); end

  def self.pre_input_hook(); end

  def self.pre_input_hook=(pre_input_hook); end

  def self.quoting_detection_proc(); end

  def self.quoting_detection_proc=(quoting_detection_proc); end

  def self.redisplay(); end

  def self.refresh_line(); end

  def self.set_screen_size(_, _1); end

  def self.special_prefixes(); end

  def self.special_prefixes=(special_prefixes); end

  def self.vi_editing_mode(); end

  def self.vi_editing_mode?(); end
end

module Redcarpet
  VERSION = ::T.let(nil, ::T.untyped)
end

module Redcarpet::Render::SmartyPants
  extend ::T::Sig
end

module Redcarpet::Render
  extend ::T::Sig
end

module Redcarpet
  extend ::T::Sig
end

class RedcarpetCompat
  EXTENSION_MAP = ::T.let(nil, ::T.untyped)
  RENDERER_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Regexp
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def match?(*_); end
  TOKEN_KEYS = ::T.let(nil, ::T.untyped)
end

Regexp::Expression::Alternation::OPERAND = Regexp::Expression::Alternative

Regexp::Expression::Anchor::BOL = Regexp::Expression::Anchor::BeginningOfLine

Regexp::Expression::Anchor::BOS = Regexp::Expression::Anchor::BeginningOfString

Regexp::Expression::Anchor::EOL = Regexp::Expression::Anchor::EndOfLine

Regexp::Expression::Anchor::EOS = Regexp::Expression::Anchor::EndOfString

Regexp::Expression::Anchor::EOSobEOL = Regexp::Expression::Anchor::EndOfStringOrBeforeEndOfLine

module Regexp::Expression::Anchor
  extend ::T::Sig
end

module Regexp::Expression::Assertion
  extend ::T::Sig
end

module Regexp::Expression::Backreference
  extend ::T::Sig
end

Regexp::Expression::CharacterSet::Intersection::OPERAND = Regexp::Expression::CharacterSet::IntersectedSequence

module Regexp::Expression::CharacterType
  extend ::T::Sig
end

module Regexp::Expression::Conditional
  extend ::T::Sig
end

module Regexp::Expression::EscapeSequence
  extend ::T::Sig
end

module Regexp::Expression::Group
  extend ::T::Sig
end

module Regexp::Expression::Keep
  extend ::T::Sig
end

Regexp::Expression::MatchLength = Regexp::MatchLength

class Regexp::Expression::Quantifier
  MODES = ::T.let(nil, ::T.untyped)
end

module Regexp::Expression::UnicodeProperty::Codepoint
  extend ::T::Sig
end

module Regexp::Expression::UnicodeProperty::Letter
  extend ::T::Sig
end

module Regexp::Expression::UnicodeProperty::Mark
  extend ::T::Sig
end

module Regexp::Expression::UnicodeProperty::Number
  extend ::T::Sig
end

module Regexp::Expression::UnicodeProperty::Punctuation
  extend ::T::Sig
end

module Regexp::Expression::UnicodeProperty::Separator
  extend ::T::Sig
end

module Regexp::Expression::UnicodeProperty::Symbol
  extend ::T::Sig
end

module Regexp::Expression::UnicodeProperty
  extend ::T::Sig
end

module Regexp::Expression
  extend ::T::Sig
end

class Regexp::Lexer
  CLOSING_TOKENS = ::T.let(nil, ::T.untyped)
  OPENING_TOKENS = ::T.let(nil, ::T.untyped)
end

class Regexp::Parser
  ENC_FLAGS = ::T.let(nil, ::T.untyped)
  MOD_FLAGS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Regexp::Scanner
  PROP_MAPS_DIR = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax
  VERSION_CONST_REGEXP = ::T.let(nil, ::T.untyped)
  VERSION_FORMAT = ::T.let(nil, ::T.untyped)
  VERSION_REGEXP = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token
  All = ::T.let(nil, ::T.untyped)
  Map = ::T.let(nil, ::T.untyped)
  Types = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Anchor
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  MatchStart = ::T.let(nil, ::T.untyped)
  String = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Anchor
  extend ::T::Sig
end

module Regexp::Syntax::Token::Assertion
  All = ::T.let(nil, ::T.untyped)
  Lookahead = ::T.let(nil, ::T.untyped)
  Lookbehind = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Assertion
  extend ::T::Sig
end

module Regexp::Syntax::Token::Backreference
  All = ::T.let(nil, ::T.untyped)
  Name = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
  RecursionLevel = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Backreference
  extend ::T::Sig
end

module Regexp::Syntax::Token::CharacterSet
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::CharacterSet
  extend ::T::Sig
end

module Regexp::Syntax::Token::CharacterType
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Clustered = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Hex = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::CharacterType
  extend ::T::Sig
end

module Regexp::Syntax::Token::Conditional
  All = ::T.let(nil, ::T.untyped)
  Condition = ::T.let(nil, ::T.untyped)
  Delimiters = ::T.let(nil, ::T.untyped)
  Separator = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Conditional
  extend ::T::Sig
end

module Regexp::Syntax::Token::Escape
  ASCII = ::T.let(nil, ::T.untyped)
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Control = ::T.let(nil, ::T.untyped)
  Hex = ::T.let(nil, ::T.untyped)
  Meta = ::T.let(nil, ::T.untyped)
  Octal = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  Unicode = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Escape
  extend ::T::Sig
end

module Regexp::Syntax::Token::FreeSpace
  All = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::FreeSpace
  extend ::T::Sig
end

module Regexp::Syntax::Token::Group
  All = ::T.let(nil, ::T.untyped)
  Atomic = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Comment = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Named = ::T.let(nil, ::T.untyped)
  Passive = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  V1_8_6 = ::T.let(nil, ::T.untyped)
  V2_4_1 = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Group
  extend ::T::Sig
end

module Regexp::Syntax::Token::Keep
  All = ::T.let(nil, ::T.untyped)
  Mark = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Keep
  extend ::T::Sig
end

module Regexp::Syntax::Token::Literal
  All = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Literal
  extend ::T::Sig
end

module Regexp::Syntax::Token::Meta
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Meta
  extend ::T::Sig
end

module Regexp::Syntax::Token::PosixClass
  All = ::T.let(nil, ::T.untyped)
  Extensions = ::T.let(nil, ::T.untyped)
  NonType = ::T.let(nil, ::T.untyped)
  Standard = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::PosixClass
  extend ::T::Sig
end

module Regexp::Syntax::Token::Quantifier
  All = ::T.let(nil, ::T.untyped)
  Greedy = ::T.let(nil, ::T.untyped)
  Interval = ::T.let(nil, ::T.untyped)
  IntervalAll = ::T.let(nil, ::T.untyped)
  IntervalPossessive = ::T.let(nil, ::T.untyped)
  IntervalReluctant = ::T.let(nil, ::T.untyped)
  Possessive = ::T.let(nil, ::T.untyped)
  Reluctant = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Quantifier
  extend ::T::Sig
end

module Regexp::Syntax::Token::SubexpressionCall
  All = ::T.let(nil, ::T.untyped)
  Name = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::SubexpressionCall
  extend ::T::Sig
end

module Regexp::Syntax::Token::UnicodeProperty
  Age = ::T.let(nil, ::T.untyped)
  Age_V1_9_3 = ::T.let(nil, ::T.untyped)
  Age_V2_0_0 = ::T.let(nil, ::T.untyped)
  Age_V2_2_0 = ::T.let(nil, ::T.untyped)
  Age_V2_3_0 = ::T.let(nil, ::T.untyped)
  Age_V2_4_0 = ::T.let(nil, ::T.untyped)
  Age_V2_5_0 = ::T.let(nil, ::T.untyped)
  Age_V2_6_0 = ::T.let(nil, ::T.untyped)
  Age_V2_6_2 = ::T.let(nil, ::T.untyped)
  Age_V2_6_3 = ::T.let(nil, ::T.untyped)
  All = ::T.let(nil, ::T.untyped)
  CharType_V1_9_0 = ::T.let(nil, ::T.untyped)
  CharType_V2_5_0 = ::T.let(nil, ::T.untyped)
  Derived = ::T.let(nil, ::T.untyped)
  Derived_V1_9_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_0_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_4_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_5_0 = ::T.let(nil, ::T.untyped)
  Emoji = ::T.let(nil, ::T.untyped)
  Emoji_V2_5_0 = ::T.let(nil, ::T.untyped)
  NonType = ::T.let(nil, ::T.untyped)
  POSIX = ::T.let(nil, ::T.untyped)
  Script = ::T.let(nil, ::T.untyped)
  Script_V1_9_0 = ::T.let(nil, ::T.untyped)
  Script_V1_9_3 = ::T.let(nil, ::T.untyped)
  Script_V2_0_0 = ::T.let(nil, ::T.untyped)
  Script_V2_2_0 = ::T.let(nil, ::T.untyped)
  Script_V2_3_0 = ::T.let(nil, ::T.untyped)
  Script_V2_4_0 = ::T.let(nil, ::T.untyped)
  Script_V2_5_0 = ::T.let(nil, ::T.untyped)
  Script_V2_6_0 = ::T.let(nil, ::T.untyped)
  Script_V2_6_2 = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  UnicodeBlock = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V1_9_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_0_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_2_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_3_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_4_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_5_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_6_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_6_2 = ::T.let(nil, ::T.untyped)
  V1_9_0 = ::T.let(nil, ::T.untyped)
  V1_9_3 = ::T.let(nil, ::T.untyped)
  V2_0_0 = ::T.let(nil, ::T.untyped)
  V2_2_0 = ::T.let(nil, ::T.untyped)
  V2_3_0 = ::T.let(nil, ::T.untyped)
  V2_4_0 = ::T.let(nil, ::T.untyped)
  V2_5_0 = ::T.let(nil, ::T.untyped)
  V2_6_0 = ::T.let(nil, ::T.untyped)
  V2_6_2 = ::T.let(nil, ::T.untyped)
  V2_6_3 = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::UnicodeProperty::Category
  All = ::T.let(nil, ::T.untyped)
  Codepoint = ::T.let(nil, ::T.untyped)
  Letter = ::T.let(nil, ::T.untyped)
  Mark = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
  Punctuation = ::T.let(nil, ::T.untyped)
  Separator = ::T.let(nil, ::T.untyped)
  Symbol = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::UnicodeProperty::Category
  extend ::T::Sig
end

module Regexp::Syntax::Token::UnicodeProperty
  extend ::T::Sig
end

module Regexp::Syntax::Token
  extend ::T::Sig
end

module Regexp::Syntax
  extend ::T::Sig
end

class Regexp
  extend ::T::Sig
  def self.union(*_); end
end

class RegexpError
  extend ::T::Sig
end

class Relationship
  include ::Relationship::GeneratedAssociationMethods
  def after_add_for_groups_users(); end

  def after_add_for_groups_users=(val); end

  def after_add_for_groups_users?(); end

  def after_remove_for_groups_users(); end

  def after_remove_for_groups_users=(val); end

  def after_remove_for_groups_users?(); end

  def autosave_associated_records_for_group(*args); end

  def autosave_associated_records_for_groups_users(*args); end

  def autosave_associated_records_for_package(*args); end

  def autosave_associated_records_for_project(*args); end

  def autosave_associated_records_for_role(*args); end

  def autosave_associated_records_for_user(*args); end

  def before_add_for_groups_users(); end

  def before_add_for_groups_users=(val); end

  def before_add_for_groups_users?(); end

  def before_remove_for_groups_users(); end

  def before_remove_for_groups_users=(val); end

  def before_remove_for_groups_users?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_groups_users(*args); end
end

module Relationship::GeneratedAssociationMethods
  def build_group(*args, &block); end

  def build_package(*args, &block); end

  def build_project(*args, &block); end

  def build_role(*args, &block); end

  def build_user(*args, &block); end

  def create_group(*args, &block); end

  def create_group!(*args, &block); end

  def create_package(*args, &block); end

  def create_package!(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def create_role(*args, &block); end

  def create_role!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def group(); end

  def group=(value); end

  def groups_user_ids(); end

  def groups_user_ids=(ids); end

  def groups_users(); end

  def groups_users=(value); end

  def package(); end

  def package=(value); end

  def project(); end

  def project=(value); end

  def reload_group(); end

  def reload_package(); end

  def reload_project(); end

  def reload_role(); end

  def reload_user(); end

  def role(); end

  def role=(value); end

  def user(); end

  def user=(value); end
end

module Relationship::GeneratedAssociationMethods
  extend ::T::Sig
end

class Relationship
  def self.after_add_for_groups_users(); end

  def self.after_add_for_groups_users=(val); end

  def self.after_add_for_groups_users?(); end

  def self.after_remove_for_groups_users(); end

  def self.after_remove_for_groups_users=(val); end

  def self.after_remove_for_groups_users?(); end

  def self.before_add_for_groups_users(); end

  def self.before_add_for_groups_users=(val); end

  def self.before_add_for_groups_users?(); end

  def self.before_remove_for_groups_users(); end

  def self.before_remove_for_groups_users=(val); end

  def self.before_remove_for_groups_users?(); end

  def self.groups(*args); end

  def self.maintainers(*args); end

  def self.packages(*args); end

  def self.projects(*args); end

  def self.users(*args); end

  def self.with_groups_and_roles_query(*args); end

  def self.with_users_and_roles_query(*args); end
end

class ReleaseTarget
  include ::ReleaseTarget::GeneratedAssociationMethods
  def autosave_associated_records_for_repository(*args); end

  def autosave_associated_records_for_target_repository(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module ReleaseTarget::GeneratedAssociationMethods
  def build_repository(*args, &block); end

  def build_target_repository(*args, &block); end

  def create_repository(*args, &block); end

  def create_repository!(*args, &block); end

  def create_target_repository(*args, &block); end

  def create_target_repository!(*args, &block); end

  def reload_repository(); end

  def reload_target_repository(); end

  def repository(); end

  def repository=(value); end

  def target_repository(); end

  def target_repository=(value); end
end

module ReleaseTarget::GeneratedAssociationMethods
  extend ::T::Sig
end

class RemoteProject
  include ::RemoteProject::GeneratedAssociationMethods
end

module RemoteProject::GeneratedAssociationMethods
end

module RemoteProject::GeneratedAssociationMethods
  extend ::T::Sig
end

class Repository
  include ::Repository::GeneratedAssociationMethods
  def after_add_for_architectures(); end

  def after_add_for_architectures=(val); end

  def after_add_for_architectures?(); end

  def after_add_for_binary_releases(); end

  def after_add_for_binary_releases=(val); end

  def after_add_for_binary_releases?(); end

  def after_add_for_channel_targets(); end

  def after_add_for_channel_targets=(val); end

  def after_add_for_channel_targets?(); end

  def after_add_for_download_repositories(); end

  def after_add_for_download_repositories=(val); end

  def after_add_for_download_repositories?(); end

  def after_add_for_links(); end

  def after_add_for_links=(val); end

  def after_add_for_links?(); end

  def after_add_for_path_elements(); end

  def after_add_for_path_elements=(val); end

  def after_add_for_path_elements?(); end

  def after_add_for_product_medium(); end

  def after_add_for_product_medium=(val); end

  def after_add_for_product_medium?(); end

  def after_add_for_product_update_repositories(); end

  def after_add_for_product_update_repositories=(val); end

  def after_add_for_product_update_repositories?(); end

  def after_add_for_release_targets(); end

  def after_add_for_release_targets=(val); end

  def after_add_for_release_targets?(); end

  def after_add_for_repository_architectures(); end

  def after_add_for_repository_architectures=(val); end

  def after_add_for_repository_architectures?(); end

  def after_add_for_status_reports(); end

  def after_add_for_status_reports=(val); end

  def after_add_for_status_reports?(); end

  def after_add_for_targetlinks(); end

  def after_add_for_targetlinks=(val); end

  def after_add_for_targetlinks?(); end

  def after_remove_for_architectures(); end

  def after_remove_for_architectures=(val); end

  def after_remove_for_architectures?(); end

  def after_remove_for_binary_releases(); end

  def after_remove_for_binary_releases=(val); end

  def after_remove_for_binary_releases?(); end

  def after_remove_for_channel_targets(); end

  def after_remove_for_channel_targets=(val); end

  def after_remove_for_channel_targets?(); end

  def after_remove_for_download_repositories(); end

  def after_remove_for_download_repositories=(val); end

  def after_remove_for_download_repositories?(); end

  def after_remove_for_links(); end

  def after_remove_for_links=(val); end

  def after_remove_for_links?(); end

  def after_remove_for_path_elements(); end

  def after_remove_for_path_elements=(val); end

  def after_remove_for_path_elements?(); end

  def after_remove_for_product_medium(); end

  def after_remove_for_product_medium=(val); end

  def after_remove_for_product_medium?(); end

  def after_remove_for_product_update_repositories(); end

  def after_remove_for_product_update_repositories=(val); end

  def after_remove_for_product_update_repositories?(); end

  def after_remove_for_release_targets(); end

  def after_remove_for_release_targets=(val); end

  def after_remove_for_release_targets?(); end

  def after_remove_for_repository_architectures(); end

  def after_remove_for_repository_architectures=(val); end

  def after_remove_for_repository_architectures?(); end

  def after_remove_for_status_reports(); end

  def after_remove_for_status_reports=(val); end

  def after_remove_for_status_reports?(); end

  def after_remove_for_targetlinks(); end

  def after_remove_for_targetlinks=(val); end

  def after_remove_for_targetlinks?(); end

  def autosave_associated_records_for_architectures(*args); end

  def autosave_associated_records_for_binary_releases(*args); end

  def autosave_associated_records_for_channel_targets(*args); end

  def autosave_associated_records_for_download_repositories(*args); end

  def autosave_associated_records_for_hostsystem(); end

  def autosave_associated_records_for_links(*args); end

  def autosave_associated_records_for_path_elements(*args); end

  def autosave_associated_records_for_product_medium(*args); end

  def autosave_associated_records_for_product_update_repositories(*args); end

  def autosave_associated_records_for_project(*args); end

  def autosave_associated_records_for_release_targets(*args); end

  def autosave_associated_records_for_repository_architectures(*args); end

  def autosave_associated_records_for_status_reports(*args); end

  def autosave_associated_records_for_targetlinks(*args); end

  def before_add_for_architectures(); end

  def before_add_for_architectures=(val); end

  def before_add_for_architectures?(); end

  def before_add_for_binary_releases(); end

  def before_add_for_binary_releases=(val); end

  def before_add_for_binary_releases?(); end

  def before_add_for_channel_targets(); end

  def before_add_for_channel_targets=(val); end

  def before_add_for_channel_targets?(); end

  def before_add_for_download_repositories(); end

  def before_add_for_download_repositories=(val); end

  def before_add_for_download_repositories?(); end

  def before_add_for_links(); end

  def before_add_for_links=(val); end

  def before_add_for_links?(); end

  def before_add_for_path_elements(); end

  def before_add_for_path_elements=(val); end

  def before_add_for_path_elements?(); end

  def before_add_for_product_medium(); end

  def before_add_for_product_medium=(val); end

  def before_add_for_product_medium?(); end

  def before_add_for_product_update_repositories(); end

  def before_add_for_product_update_repositories=(val); end

  def before_add_for_product_update_repositories?(); end

  def before_add_for_release_targets(); end

  def before_add_for_release_targets=(val); end

  def before_add_for_release_targets?(); end

  def before_add_for_repository_architectures(); end

  def before_add_for_repository_architectures=(val); end

  def before_add_for_repository_architectures?(); end

  def before_add_for_status_reports(); end

  def before_add_for_status_reports=(val); end

  def before_add_for_status_reports?(); end

  def before_add_for_targetlinks(); end

  def before_add_for_targetlinks=(val); end

  def before_add_for_targetlinks?(); end

  def before_remove_for_architectures(); end

  def before_remove_for_architectures=(val); end

  def before_remove_for_architectures?(); end

  def before_remove_for_binary_releases(); end

  def before_remove_for_binary_releases=(val); end

  def before_remove_for_binary_releases?(); end

  def before_remove_for_channel_targets(); end

  def before_remove_for_channel_targets=(val); end

  def before_remove_for_channel_targets?(); end

  def before_remove_for_download_repositories(); end

  def before_remove_for_download_repositories=(val); end

  def before_remove_for_download_repositories?(); end

  def before_remove_for_links(); end

  def before_remove_for_links=(val); end

  def before_remove_for_links?(); end

  def before_remove_for_path_elements(); end

  def before_remove_for_path_elements=(val); end

  def before_remove_for_path_elements?(); end

  def before_remove_for_product_medium(); end

  def before_remove_for_product_medium=(val); end

  def before_remove_for_product_medium?(); end

  def before_remove_for_product_update_repositories(); end

  def before_remove_for_product_update_repositories=(val); end

  def before_remove_for_product_update_repositories?(); end

  def before_remove_for_release_targets(); end

  def before_remove_for_release_targets=(val); end

  def before_remove_for_release_targets?(); end

  def before_remove_for_repository_architectures(); end

  def before_remove_for_repository_architectures=(val); end

  def before_remove_for_repository_architectures?(); end

  def before_remove_for_status_reports(); end

  def before_remove_for_status_reports=(val); end

  def before_remove_for_status_reports?(); end

  def before_remove_for_targetlinks(); end

  def before_remove_for_targetlinks=(val); end

  def before_remove_for_targetlinks?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_architectures(*args); end

  def validate_associated_records_for_binary_releases(*args); end

  def validate_associated_records_for_channel_targets(*args); end

  def validate_associated_records_for_download_repositories(*args); end

  def validate_associated_records_for_links(*args); end

  def validate_associated_records_for_path_elements(*args); end

  def validate_associated_records_for_product_medium(*args); end

  def validate_associated_records_for_product_update_repositories(*args); end

  def validate_associated_records_for_release_targets(*args); end

  def validate_associated_records_for_repository_architectures(*args); end

  def validate_associated_records_for_status_reports(*args); end

  def validate_associated_records_for_targetlinks(*args); end
end

module Repository::GeneratedAssociationMethods
  def architecture_ids(); end

  def architecture_ids=(ids); end

  def architectures(); end

  def architectures=(value); end

  def binary_release_ids(); end

  def binary_release_ids=(ids); end

  def binary_releases(); end

  def binary_releases=(value); end

  def build_hostsystem(*args, &block); end

  def build_project(*args, &block); end

  def channel_target_ids(); end

  def channel_target_ids=(ids); end

  def channel_targets(); end

  def channel_targets=(value); end

  def create_hostsystem(*args, &block); end

  def create_hostsystem!(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def download_repositories(); end

  def download_repositories=(value); end

  def download_repository_ids(); end

  def download_repository_ids=(ids); end

  def hostsystem(); end

  def hostsystem=(value); end

  def link_ids(); end

  def link_ids=(ids); end

  def links(); end

  def links=(value); end

  def path_element_ids(); end

  def path_element_ids=(ids); end

  def path_elements(); end

  def path_elements=(value); end

  def product_medium(); end

  def product_medium=(value); end

  def product_medium_ids(); end

  def product_medium_ids=(ids); end

  def product_update_repositories(); end

  def product_update_repositories=(value); end

  def product_update_repository_ids(); end

  def product_update_repository_ids=(ids); end

  def project(); end

  def project=(value); end

  def release_target_ids(); end

  def release_target_ids=(ids); end

  def release_targets(); end

  def release_targets=(value); end

  def reload_hostsystem(); end

  def reload_project(); end

  def repository_architecture_ids(); end

  def repository_architecture_ids=(ids); end

  def repository_architectures(); end

  def repository_architectures=(value); end

  def status_report_ids(); end

  def status_report_ids=(ids); end

  def status_reports(); end

  def status_reports=(value); end

  def targetlink_ids(); end

  def targetlink_ids=(ids); end

  def targetlinks(); end

  def targetlinks=(value); end
end

module Repository::GeneratedAssociationMethods
  extend ::T::Sig
end

class Repository
  def self.after_add_for_architectures(); end

  def self.after_add_for_architectures=(val); end

  def self.after_add_for_architectures?(); end

  def self.after_add_for_binary_releases(); end

  def self.after_add_for_binary_releases=(val); end

  def self.after_add_for_binary_releases?(); end

  def self.after_add_for_channel_targets(); end

  def self.after_add_for_channel_targets=(val); end

  def self.after_add_for_channel_targets?(); end

  def self.after_add_for_download_repositories(); end

  def self.after_add_for_download_repositories=(val); end

  def self.after_add_for_download_repositories?(); end

  def self.after_add_for_links(); end

  def self.after_add_for_links=(val); end

  def self.after_add_for_links?(); end

  def self.after_add_for_path_elements(); end

  def self.after_add_for_path_elements=(val); end

  def self.after_add_for_path_elements?(); end

  def self.after_add_for_product_medium(); end

  def self.after_add_for_product_medium=(val); end

  def self.after_add_for_product_medium?(); end

  def self.after_add_for_product_update_repositories(); end

  def self.after_add_for_product_update_repositories=(val); end

  def self.after_add_for_product_update_repositories?(); end

  def self.after_add_for_release_targets(); end

  def self.after_add_for_release_targets=(val); end

  def self.after_add_for_release_targets?(); end

  def self.after_add_for_repository_architectures(); end

  def self.after_add_for_repository_architectures=(val); end

  def self.after_add_for_repository_architectures?(); end

  def self.after_add_for_status_reports(); end

  def self.after_add_for_status_reports=(val); end

  def self.after_add_for_status_reports?(); end

  def self.after_add_for_targetlinks(); end

  def self.after_add_for_targetlinks=(val); end

  def self.after_add_for_targetlinks?(); end

  def self.after_remove_for_architectures(); end

  def self.after_remove_for_architectures=(val); end

  def self.after_remove_for_architectures?(); end

  def self.after_remove_for_binary_releases(); end

  def self.after_remove_for_binary_releases=(val); end

  def self.after_remove_for_binary_releases?(); end

  def self.after_remove_for_channel_targets(); end

  def self.after_remove_for_channel_targets=(val); end

  def self.after_remove_for_channel_targets?(); end

  def self.after_remove_for_download_repositories(); end

  def self.after_remove_for_download_repositories=(val); end

  def self.after_remove_for_download_repositories?(); end

  def self.after_remove_for_links(); end

  def self.after_remove_for_links=(val); end

  def self.after_remove_for_links?(); end

  def self.after_remove_for_path_elements(); end

  def self.after_remove_for_path_elements=(val); end

  def self.after_remove_for_path_elements?(); end

  def self.after_remove_for_product_medium(); end

  def self.after_remove_for_product_medium=(val); end

  def self.after_remove_for_product_medium?(); end

  def self.after_remove_for_product_update_repositories(); end

  def self.after_remove_for_product_update_repositories=(val); end

  def self.after_remove_for_product_update_repositories?(); end

  def self.after_remove_for_release_targets(); end

  def self.after_remove_for_release_targets=(val); end

  def self.after_remove_for_release_targets?(); end

  def self.after_remove_for_repository_architectures(); end

  def self.after_remove_for_repository_architectures=(val); end

  def self.after_remove_for_repository_architectures?(); end

  def self.after_remove_for_status_reports(); end

  def self.after_remove_for_status_reports=(val); end

  def self.after_remove_for_status_reports?(); end

  def self.after_remove_for_targetlinks(); end

  def self.after_remove_for_targetlinks=(val); end

  def self.after_remove_for_targetlinks?(); end

  def self.before_add_for_architectures(); end

  def self.before_add_for_architectures=(val); end

  def self.before_add_for_architectures?(); end

  def self.before_add_for_binary_releases(); end

  def self.before_add_for_binary_releases=(val); end

  def self.before_add_for_binary_releases?(); end

  def self.before_add_for_channel_targets(); end

  def self.before_add_for_channel_targets=(val); end

  def self.before_add_for_channel_targets?(); end

  def self.before_add_for_download_repositories(); end

  def self.before_add_for_download_repositories=(val); end

  def self.before_add_for_download_repositories?(); end

  def self.before_add_for_links(); end

  def self.before_add_for_links=(val); end

  def self.before_add_for_links?(); end

  def self.before_add_for_path_elements(); end

  def self.before_add_for_path_elements=(val); end

  def self.before_add_for_path_elements?(); end

  def self.before_add_for_product_medium(); end

  def self.before_add_for_product_medium=(val); end

  def self.before_add_for_product_medium?(); end

  def self.before_add_for_product_update_repositories(); end

  def self.before_add_for_product_update_repositories=(val); end

  def self.before_add_for_product_update_repositories?(); end

  def self.before_add_for_release_targets(); end

  def self.before_add_for_release_targets=(val); end

  def self.before_add_for_release_targets?(); end

  def self.before_add_for_repository_architectures(); end

  def self.before_add_for_repository_architectures=(val); end

  def self.before_add_for_repository_architectures?(); end

  def self.before_add_for_status_reports(); end

  def self.before_add_for_status_reports=(val); end

  def self.before_add_for_status_reports?(); end

  def self.before_add_for_targetlinks(); end

  def self.before_add_for_targetlinks=(val); end

  def self.before_add_for_targetlinks?(); end

  def self.before_remove_for_architectures(); end

  def self.before_remove_for_architectures=(val); end

  def self.before_remove_for_architectures?(); end

  def self.before_remove_for_binary_releases(); end

  def self.before_remove_for_binary_releases=(val); end

  def self.before_remove_for_binary_releases?(); end

  def self.before_remove_for_channel_targets(); end

  def self.before_remove_for_channel_targets=(val); end

  def self.before_remove_for_channel_targets?(); end

  def self.before_remove_for_download_repositories(); end

  def self.before_remove_for_download_repositories=(val); end

  def self.before_remove_for_download_repositories?(); end

  def self.before_remove_for_links(); end

  def self.before_remove_for_links=(val); end

  def self.before_remove_for_links?(); end

  def self.before_remove_for_path_elements(); end

  def self.before_remove_for_path_elements=(val); end

  def self.before_remove_for_path_elements?(); end

  def self.before_remove_for_product_medium(); end

  def self.before_remove_for_product_medium=(val); end

  def self.before_remove_for_product_medium?(); end

  def self.before_remove_for_product_update_repositories(); end

  def self.before_remove_for_product_update_repositories=(val); end

  def self.before_remove_for_product_update_repositories?(); end

  def self.before_remove_for_release_targets(); end

  def self.before_remove_for_release_targets=(val); end

  def self.before_remove_for_release_targets?(); end

  def self.before_remove_for_repository_architectures(); end

  def self.before_remove_for_repository_architectures=(val); end

  def self.before_remove_for_repository_architectures?(); end

  def self.before_remove_for_status_reports(); end

  def self.before_remove_for_status_reports=(val); end

  def self.before_remove_for_status_reports?(); end

  def self.before_remove_for_targetlinks(); end

  def self.before_remove_for_targetlinks=(val); end

  def self.before_remove_for_targetlinks?(); end

  def self.not_remote(*args); end

  def self.remote(*args); end
end

class RepositoryArchitecture
  include ::RepositoryArchitecture::GeneratedAssociationMethods
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def after_add_for_status_reports(); end

  def after_add_for_status_reports=(val); end

  def after_add_for_status_reports?(); end

  def after_remove_for_status_reports(); end

  def after_remove_for_status_reports=(val); end

  def after_remove_for_status_reports?(); end

  def autosave_associated_records_for_architecture(*args); end

  def autosave_associated_records_for_repository(*args); end

  def autosave_associated_records_for_status_reports(*args); end

  def before_add_for_status_reports(); end

  def before_add_for_status_reports=(val); end

  def before_add_for_status_reports?(); end

  def before_remove_for_status_reports(); end

  def before_remove_for_status_reports=(val); end

  def before_remove_for_status_reports?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def connection(*args, &block); end

  def destroyed_via_scope?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end

  def validate_associated_records_for_status_reports(*args); end
end

module RepositoryArchitecture::GeneratedAssociationMethods
  def architecture(); end

  def architecture=(value); end

  def build_architecture(*args, &block); end

  def build_repository(*args, &block); end

  def create_architecture(*args, &block); end

  def create_architecture!(*args, &block); end

  def create_repository(*args, &block); end

  def create_repository!(*args, &block); end

  def reload_architecture(); end

  def reload_repository(); end

  def repository(); end

  def repository=(value); end

  def status_report_ids(); end

  def status_report_ids=(ids); end

  def status_reports(); end

  def status_reports=(value); end
end

module RepositoryArchitecture::GeneratedAssociationMethods
  extend ::T::Sig
end

class RepositoryArchitecture
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self.acts_as_list_top(); end

  def self.after_add_for_status_reports(); end

  def self.after_add_for_status_reports=(val); end

  def self.after_add_for_status_reports?(); end

  def self.after_remove_for_status_reports(); end

  def self.after_remove_for_status_reports=(val); end

  def self.after_remove_for_status_reports?(); end

  def self.before_add_for_status_reports(); end

  def self.before_add_for_status_reports=(val); end

  def self.before_add_for_status_reports?(); end

  def self.before_remove_for_status_reports(); end

  def self.before_remove_for_status_reports=(val); end

  def self.before_remove_for_status_reports?(); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.update_all_with_touch(updates); end
end

module RequestStore
  VERSION = ::T.let(nil, ::T.untyped)
end

module RequestStore
  extend ::T::Sig
end

class Resolv::DNS
  def extract_resources(msg, name, typeclass); end

  def fetch_resource(name, typeclass); end

  def lazy_initialize(); end

  def make_tcp_requester(host, port); end

  def make_udp_requester(); end
  RequestID = ::T.let(nil, ::T.untyped)
  RequestIDMutex = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Config
  def generate_candidates(name); end

  def generate_timeouts(); end

  def initialize(config_info=T.unsafe(nil)); end

  def lazy_initialize(); end

  def nameserver_port(); end

  def resolv(name); end

  def single?(); end

  def timeouts=(values); end
  InitialTimeout = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Config::NXDomain
end

class Resolv::DNS::Config::NXDomain
end

class Resolv::DNS::Config::OtherResolvError
end

class Resolv::DNS::Config::OtherResolvError
end

class Resolv::DNS::Config
  def self.default_config_hash(filename=T.unsafe(nil)); end

  def self.parse_resolv_conf(filename); end
end

module Resolv::DNS::Label
end

class Resolv::DNS::Label::Str
  def ==(other); end

  def downcase(); end

  def eql?(other); end

  def initialize(string); end

  def string(); end
end

class Resolv::DNS::Label::Str
end

module Resolv::DNS::Label
  extend ::T::Sig
  def self.split(arg); end
end

class Resolv::DNS::Message
  def ==(other); end

  def aa(); end

  def aa=(aa); end

  def add_additional(name, ttl, data); end

  def add_answer(name, ttl, data); end

  def add_authority(name, ttl, data); end

  def add_question(name, typeclass); end

  def additional(); end

  def answer(); end

  def authority(); end

  def each_additional(); end

  def each_answer(); end

  def each_authority(); end

  def each_question(); end

  def each_resource(); end

  def encode(); end

  def id(); end

  def id=(id); end

  def initialize(id=T.unsafe(nil)); end

  def opcode(); end

  def opcode=(opcode); end

  def qr(); end

  def qr=(qr); end

  def question(); end

  def ra(); end

  def ra=(ra); end

  def rcode(); end

  def rcode=(rcode); end

  def rd(); end

  def rd=(rd); end

  def tc(); end

  def tc=(tc); end
end

class Resolv::DNS::Message::MessageDecoder
  def get_bytes(len=T.unsafe(nil)); end

  def get_label(); end

  def get_labels(); end

  def get_length16(); end

  def get_name(); end

  def get_question(); end

  def get_rr(); end

  def get_string(); end

  def get_string_list(); end

  def get_unpack(template); end

  def initialize(data); end
end

class Resolv::DNS::Message::MessageDecoder
end

class Resolv::DNS::Message::MessageEncoder
  def put_bytes(d); end

  def put_label(d); end

  def put_labels(d); end

  def put_length16(); end

  def put_name(d); end

  def put_pack(template, *d); end

  def put_string(d); end

  def put_string_list(ds); end
end

class Resolv::DNS::Message::MessageEncoder
end

class Resolv::DNS::Message
  def self.decode(m); end
end

class Resolv::DNS::Name
  def ==(other); end

  def [](i); end

  def eql?(other); end

  def length(); end

  def to_a(); end
end

module Resolv::DNS::OpCode
  IQuery = ::T.let(nil, ::T.untyped)
  Notify = ::T.let(nil, ::T.untyped)
  Query = ::T.let(nil, ::T.untyped)
  Status = ::T.let(nil, ::T.untyped)
  Update = ::T.let(nil, ::T.untyped)
end

module Resolv::DNS::OpCode
  extend ::T::Sig
end

class Resolv::DNS::Query
  def encode_rdata(msg); end
end

class Resolv::DNS::Query
  def self.decode_rdata(msg); end
end

module Resolv::DNS::RCode
  BADALG = ::T.let(nil, ::T.untyped)
  BADKEY = ::T.let(nil, ::T.untyped)
  BADMODE = ::T.let(nil, ::T.untyped)
  BADNAME = ::T.let(nil, ::T.untyped)
  BADSIG = ::T.let(nil, ::T.untyped)
  BADTIME = ::T.let(nil, ::T.untyped)
  BADVERS = ::T.let(nil, ::T.untyped)
  FormErr = ::T.let(nil, ::T.untyped)
  NXDomain = ::T.let(nil, ::T.untyped)
  NXRRSet = ::T.let(nil, ::T.untyped)
  NoError = ::T.let(nil, ::T.untyped)
  NotAuth = ::T.let(nil, ::T.untyped)
  NotImp = ::T.let(nil, ::T.untyped)
  NotZone = ::T.let(nil, ::T.untyped)
  Refused = ::T.let(nil, ::T.untyped)
  ServFail = ::T.let(nil, ::T.untyped)
  YXDomain = ::T.let(nil, ::T.untyped)
  YXRRSet = ::T.let(nil, ::T.untyped)
end

module Resolv::DNS::RCode
  extend ::T::Sig
end

class Resolv::DNS::Requester
  def close(); end

  def request(sender, tout); end

  def sender_for(addr, msg); end
end

class Resolv::DNS::Requester::ConnectedUDP
  def initialize(host, port=T.unsafe(nil)); end

  def lazy_initialize(); end

  def recv_reply(readable_socks); end

  def sender(msg, data, host=T.unsafe(nil), port=T.unsafe(nil)); end
end

class Resolv::DNS::Requester::ConnectedUDP::Sender
  def data(); end

  def send(); end
end

class Resolv::DNS::Requester::ConnectedUDP::Sender
end

class Resolv::DNS::Requester::ConnectedUDP
end

class Resolv::DNS::Requester::MDNSOneShot
end

class Resolv::DNS::Requester::MDNSOneShot
end

class Resolv::DNS::Requester::RequestError
end

class Resolv::DNS::Requester::RequestError
end

class Resolv::DNS::Requester::Sender
  def initialize(msg, data, sock); end
end

class Resolv::DNS::Requester::Sender
end

class Resolv::DNS::Requester::TCP
  def initialize(host, port=T.unsafe(nil)); end

  def recv_reply(readable_socks); end

  def sender(msg, data, host=T.unsafe(nil), port=T.unsafe(nil)); end
end

class Resolv::DNS::Requester::TCP::Sender
  def data(); end

  def send(); end
end

class Resolv::DNS::Requester::TCP::Sender
end

class Resolv::DNS::Requester::TCP
end

class Resolv::DNS::Requester::UnconnectedUDP
  def initialize(*nameserver_port); end

  def lazy_initialize(); end

  def recv_reply(readable_socks); end

  def sender(msg, data, host, port=T.unsafe(nil)); end
end

class Resolv::DNS::Requester::UnconnectedUDP::Sender
  def data(); end

  def initialize(msg, data, sock, host, port); end

  def send(); end
end

class Resolv::DNS::Requester::UnconnectedUDP::Sender
end

class Resolv::DNS::Requester::UnconnectedUDP
end

class Resolv::DNS::Requester
end

class Resolv::DNS::Resource
  def ==(other); end

  def eql?(other); end
  ClassHash = ::T.let(nil, ::T.untyped)
  ClassInsensitiveTypes = ::T.let(nil, ::T.untyped)
  ClassValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::ANY
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::CNAME
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::Generic
  def self.create(type_value, class_value); end
end

class Resolv::DNS::Resource::HINFO
  TypeValue = ::T.let(nil, ::T.untyped)
end

module Resolv::DNS::Resource::IN
  ClassValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::A
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::AAAA
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::ANY
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::ANY
end

class Resolv::DNS::Resource::IN::CNAME
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::CNAME
end

class Resolv::DNS::Resource::IN::HINFO
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::HINFO
end

class Resolv::DNS::Resource::IN::LOC
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::LOC
end

class Resolv::DNS::Resource::IN::MINFO
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::MINFO
end

class Resolv::DNS::Resource::IN::MX
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::MX
end

class Resolv::DNS::Resource::IN::NS
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::NS
end

class Resolv::DNS::Resource::IN::PTR
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::PTR
end

class Resolv::DNS::Resource::IN::SOA
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::SOA
end

class Resolv::DNS::Resource::IN::SRV
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::TXT
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::TXT
end

class Resolv::DNS::Resource::IN::WKS
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

module Resolv::DNS::Resource::IN
  extend ::T::Sig
end

class Resolv::DNS::Resource::LOC
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::MINFO
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::MX
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::NS
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::PTR
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::SOA
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::TXT
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource
  def self.get_class(type_value, class_value); end
end

class Resolv::DNS
  def self.allocate_request_id(host, port); end

  def self.bind_random_port(udpsock, bind_host=T.unsafe(nil)); end

  def self.free_request_id(host, port, id); end

  def self.random(arg); end

  def self.rangerand(range); end
end

class Resolv::Hosts
  def lazy_initialize(); end
end

class Resolv::IPv4
  def ==(other); end

  def eql?(other); end
end

class Resolv::IPv6
  def ==(other); end

  def eql?(other); end
end

class Resolv::LOC::Alt
  def ==(other); end

  def eql?(other); end
end

class Resolv::LOC::Coord
  def ==(other); end

  def eql?(other); end
end

class Resolv::LOC::Size
  def ==(other); end

  def eql?(other); end
end

module Resolv::LOC
  extend ::T::Sig
end

module Responders::CollectionResponder
  def navigation_location(); end
end

module Responders::CollectionResponder
  extend ::T::Sig
end

module Responders::ControllerMethod
  extend ::T::Sig
end

module Responders::FlashResponder
  extend ::T::Sig
end

module Responders::HttpCacheResponder
  def do_http_cache!(); end

  def do_http_cache?(); end

  def initialize(controller, resources, options=T.unsafe(nil)); end

  def persisted?(); end

  def to_format(); end
end

module Responders::HttpCacheResponder
  extend ::T::Sig
end

module Responders::LocationResponder
end

module Responders::LocationResponder
  extend ::T::Sig
  def self.included(_base); end
end

module Responders
  extend ::T::Sig
end

class Review
  include ::Review::GeneratedAssociationMethods
  def after_add_for_history_elements(); end

  def after_add_for_history_elements=(val); end

  def after_add_for_history_elements?(); end

  def after_add_for_history_elements_assigned(); end

  def after_add_for_history_elements_assigned=(val); end

  def after_add_for_history_elements_assigned?(); end

  def after_remove_for_history_elements(); end

  def after_remove_for_history_elements=(val); end

  def after_remove_for_history_elements?(); end

  def after_remove_for_history_elements_assigned(); end

  def after_remove_for_history_elements_assigned=(val); end

  def after_remove_for_history_elements_assigned?(); end

  def autosave_associated_records_for_bs_request(*args); end

  def autosave_associated_records_for_group(*args); end

  def autosave_associated_records_for_history_elements(*args); end

  def autosave_associated_records_for_history_elements_assigned(*args); end

  def autosave_associated_records_for_package(*args); end

  def autosave_associated_records_for_project(*args); end

  def autosave_associated_records_for_review_assigned_from(*args); end

  def autosave_associated_records_for_review_assigned_to(); end

  def autosave_associated_records_for_user(*args); end

  def before_add_for_history_elements(); end

  def before_add_for_history_elements=(val); end

  def before_add_for_history_elements?(); end

  def before_add_for_history_elements_assigned(); end

  def before_add_for_history_elements_assigned=(val); end

  def before_add_for_history_elements_assigned?(); end

  def before_remove_for_history_elements(); end

  def before_remove_for_history_elements=(val); end

  def before_remove_for_history_elements?(); end

  def before_remove_for_history_elements_assigned(); end

  def before_remove_for_history_elements_assigned=(val); end

  def before_remove_for_history_elements_assigned?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_history_elements(*args); end

  def validate_associated_records_for_history_elements_assigned(*args); end
end

module Review::GeneratedAssociationMethods
  def bs_request(); end

  def bs_request=(value); end

  def build_bs_request(*args, &block); end

  def build_group(*args, &block); end

  def build_package(*args, &block); end

  def build_project(*args, &block); end

  def build_review_assigned_from(*args, &block); end

  def build_review_assigned_to(*args, &block); end

  def build_user(*args, &block); end

  def create_bs_request(*args, &block); end

  def create_bs_request!(*args, &block); end

  def create_group(*args, &block); end

  def create_group!(*args, &block); end

  def create_package(*args, &block); end

  def create_package!(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def create_review_assigned_from(*args, &block); end

  def create_review_assigned_from!(*args, &block); end

  def create_review_assigned_to(*args, &block); end

  def create_review_assigned_to!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def group(); end

  def group=(value); end

  def history_element_ids(); end

  def history_element_ids=(ids); end

  def history_elements(); end

  def history_elements=(value); end

  def history_elements_assigned(); end

  def history_elements_assigned=(value); end

  def history_elements_assigned_ids(); end

  def history_elements_assigned_ids=(ids); end

  def package(); end

  def package=(value); end

  def project(); end

  def project=(value); end

  def reload_bs_request(); end

  def reload_group(); end

  def reload_package(); end

  def reload_project(); end

  def reload_review_assigned_from(); end

  def reload_review_assigned_to(); end

  def reload_user(); end

  def review_assigned_from(); end

  def review_assigned_from=(value); end

  def review_assigned_to(); end

  def review_assigned_to=(value); end

  def user(); end

  def user=(value); end
end

module Review::GeneratedAssociationMethods
  extend ::T::Sig
end

class Review
  def self.after_add_for_history_elements(); end

  def self.after_add_for_history_elements=(val); end

  def self.after_add_for_history_elements?(); end

  def self.after_add_for_history_elements_assigned(); end

  def self.after_add_for_history_elements_assigned=(val); end

  def self.after_add_for_history_elements_assigned?(); end

  def self.after_remove_for_history_elements(); end

  def self.after_remove_for_history_elements=(val); end

  def self.after_remove_for_history_elements?(); end

  def self.after_remove_for_history_elements_assigned(); end

  def self.after_remove_for_history_elements_assigned=(val); end

  def self.after_remove_for_history_elements_assigned?(); end

  def self.assigned(*args); end

  def self.before_add_for_history_elements(); end

  def self.before_add_for_history_elements=(val); end

  def self.before_add_for_history_elements?(); end

  def self.before_add_for_history_elements_assigned(); end

  def self.before_add_for_history_elements_assigned=(val); end

  def self.before_add_for_history_elements_assigned?(); end

  def self.before_remove_for_history_elements(); end

  def self.before_remove_for_history_elements=(val); end

  def self.before_remove_for_history_elements?(); end

  def self.before_remove_for_history_elements_assigned(); end

  def self.before_remove_for_history_elements_assigned=(val); end

  def self.before_remove_for_history_elements_assigned?(); end

  def self.bs_request_ids_of_involved_groups(*args); end

  def self.bs_request_ids_of_involved_packages(*args); end

  def self.bs_request_ids_of_involved_projects(*args); end

  def self.bs_request_ids_of_involved_users(*args); end

  def self.declined(*args); end

  def self.unassigned(*args); end
end

class Riddle::Client
  AttributeHandlers = ::T.let(nil, ::T.untyped)
  AttributeTypes = ::T.let(nil, ::T.untyped)
  Commands = ::T.let(nil, ::T.untyped)
  FilterTypes = ::T.let(nil, ::T.untyped)
  GroupFunctions = ::T.let(nil, ::T.untyped)
  MatchModes = ::T.let(nil, ::T.untyped)
  RankModes = ::T.let(nil, ::T.untyped)
  SortModes = ::T.let(nil, ::T.untyped)
  Statuses = ::T.let(nil, ::T.untyped)
  Versions = ::T.let(nil, ::T.untyped)
end

module Riddle::Configuration::IndexSettings
  extend ::T::Sig
end

class Riddle::Configuration::Parser
  INDEX_CLASSES = ::T.let(nil, ::T.untyped)
  SOURCE_CLASSES = ::T.let(nil, ::T.untyped)
end

class Riddle::Configuration::Parser::InnerParser
  SETTING_PATTERN = ::T.let(nil, ::T.untyped)
end

Riddle::Configuration::Searchd::NUMBER = Integer

class Riddle::Controller
  DEFAULT_MERGE_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Riddle::ExecuteCommand
  WINDOWS = ::T.let(nil, ::T.untyped)
end

module Riddle::Query
  ESCAPE_CHARACTERS = ::T.let(nil, ::T.untyped)
  ESCAPE_WORDS = ::T.let(nil, ::T.untyped)
  MYSQL2_ESCAPE = ::T.let(nil, ::T.untyped)
end

module Riddle::Query
  extend ::T::Sig
end

module Riddle
  extend ::T::Sig
end

class Ripper
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def column(); end

  def encoding(); end

  def end_seen?(); end

  def error?(); end

  def filename(); end

  def initialize(*_); end

  def lineno(); end

  def parse(); end

  def state(); end

  def yydebug(); end

  def yydebug=(yydebug); end
  EVENTS = ::T.let(nil, ::T.untyped)
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_ARG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_BEG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_CMDARG = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_ENDARG = ::T.let(nil, ::T.untyped)
  EXPR_ENDFN = ::T.let(nil, ::T.untyped)
  EXPR_END_ANY = ::T.let(nil, ::T.untyped)
  EXPR_FITEM = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_LABEL = ::T.let(nil, ::T.untyped)
  EXPR_LABELED = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  EXPR_VALUE = ::T.let(nil, ::T.untyped)
  PARSER_EVENTS = ::T.let(nil, ::T.untyped)
  PARSER_EVENT_TABLE = ::T.let(nil, ::T.untyped)
  SCANNER_EVENTS = ::T.let(nil, ::T.untyped)
  SCANNER_EVENT_TABLE = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Ripper::Filter
  def column(); end

  def filename(); end

  def initialize(src, filename=T.unsafe(nil), lineno=T.unsafe(nil)); end

  def lineno(); end

  def parse(init=T.unsafe(nil)); end

  def state(); end
end

class Ripper::Filter
end

class Ripper::Lexer
  def lex(); end

  def tokenize(); end
end

class Ripper::Lexer::Elem
  def event(); end

  def event=(_); end

  def initialize(pos, event, tok, state); end

  def pos(); end

  def pos=(_); end

  def state(); end

  def state=(_); end

  def tok(); end

  def tok=(_); end
end

class Ripper::Lexer::Elem
  def self.[](*_); end

  def self.members(); end
end

class Ripper::Lexer::State
  def &(i); end

  def ==(i); end

  def allbits?(i); end

  def anybits?(i); end

  def initialize(i); end

  def nobits?(i); end

  def to_i(); end

  def to_int(); end

  def to_int=(_); end

  def to_s=(_); end

  def |(i); end
end

class Ripper::Lexer::State
  def self.[](*_); end

  def self.members(); end
end

class Ripper::Lexer
end

class Ripper::SexpBuilder
  def on_BEGIN(*args); end

  def on_CHAR(tok); end

  def on_END(*args); end

  def on___end__(tok); end

  def on_alias(*args); end

  def on_alias_error(*args); end

  def on_aref(*args); end

  def on_aref_field(*args); end

  def on_arg_ambiguous(*args); end

  def on_arg_paren(*args); end

  def on_args_add(*args); end

  def on_args_add_block(*args); end

  def on_args_add_star(*args); end

  def on_args_new(*args); end

  def on_array(*args); end

  def on_assign(*args); end

  def on_assign_error(*args); end

  def on_assoc_new(*args); end

  def on_assoc_splat(*args); end

  def on_assoclist_from_args(*args); end

  def on_backref(tok); end

  def on_backtick(tok); end

  def on_bare_assoc_hash(*args); end

  def on_begin(*args); end

  def on_binary(*args); end

  def on_block_var(*args); end

  def on_blockarg(*args); end

  def on_bodystmt(*args); end

  def on_brace_block(*args); end

  def on_break(*args); end

  def on_call(*args); end

  def on_case(*args); end

  def on_class(*args); end

  def on_class_name_error(*args); end

  def on_comma(tok); end

  def on_command(*args); end

  def on_command_call(*args); end

  def on_comment(tok); end

  def on_const(tok); end

  def on_const_path_field(*args); end

  def on_const_path_ref(*args); end

  def on_const_ref(*args); end

  def on_cvar(tok); end

  def on_def(*args); end

  def on_defined(*args); end

  def on_defs(*args); end

  def on_do_block(*args); end

  def on_dot2(*args); end

  def on_dot3(*args); end

  def on_dyna_symbol(*args); end

  def on_else(*args); end

  def on_elsif(*args); end

  def on_embdoc(tok); end

  def on_embdoc_beg(tok); end

  def on_embdoc_end(tok); end

  def on_embexpr_beg(tok); end

  def on_embexpr_end(tok); end

  def on_embvar(tok); end

  def on_ensure(*args); end

  def on_excessed_comma(*args); end

  def on_fcall(*args); end

  def on_field(*args); end

  def on_float(tok); end

  def on_for(*args); end

  def on_gvar(tok); end

  def on_hash(*args); end

  def on_heredoc_beg(tok); end

  def on_heredoc_end(tok); end

  def on_ident(tok); end

  def on_if(*args); end

  def on_if_mod(*args); end

  def on_ifop(*args); end

  def on_ignored_nl(tok); end

  def on_ignored_sp(tok); end

  def on_imaginary(tok); end

  def on_int(tok); end

  def on_ivar(tok); end

  def on_kw(tok); end

  def on_kwrest_param(*args); end

  def on_label(tok); end

  def on_label_end(tok); end

  def on_lambda(*args); end

  def on_lbrace(tok); end

  def on_lbracket(tok); end

  def on_lparen(tok); end

  def on_magic_comment(*args); end

  def on_massign(*args); end

  def on_method_add_arg(*args); end

  def on_method_add_block(*args); end

  def on_mlhs_add(*args); end

  def on_mlhs_add_post(*args); end

  def on_mlhs_add_star(*args); end

  def on_mlhs_new(*args); end

  def on_mlhs_paren(*args); end

  def on_module(*args); end

  def on_mrhs_add(*args); end

  def on_mrhs_add_star(*args); end

  def on_mrhs_new(*args); end

  def on_mrhs_new_from_args(*args); end

  def on_next(*args); end

  def on_nl(tok); end

  def on_op(tok); end

  def on_opassign(*args); end

  def on_operator_ambiguous(*args); end

  def on_param_error(*args); end

  def on_params(*args); end

  def on_paren(*args); end

  def on_parse_error(*args); end

  def on_period(tok); end

  def on_program(*args); end

  def on_qsymbols_add(*args); end

  def on_qsymbols_beg(tok); end

  def on_qsymbols_new(*args); end

  def on_qwords_add(*args); end

  def on_qwords_beg(tok); end

  def on_qwords_new(*args); end

  def on_rational(tok); end

  def on_rbrace(tok); end

  def on_rbracket(tok); end

  def on_redo(*args); end

  def on_regexp_add(*args); end

  def on_regexp_beg(tok); end

  def on_regexp_end(tok); end

  def on_regexp_literal(*args); end

  def on_regexp_new(*args); end

  def on_rescue(*args); end

  def on_rescue_mod(*args); end

  def on_rest_param(*args); end

  def on_retry(*args); end

  def on_return(*args); end

  def on_return0(*args); end

  def on_rparen(tok); end

  def on_sclass(*args); end

  def on_semicolon(tok); end

  def on_sp(tok); end

  def on_stmts_add(*args); end

  def on_stmts_new(*args); end

  def on_string_add(*args); end

  def on_string_concat(*args); end

  def on_string_content(*args); end

  def on_string_dvar(*args); end

  def on_string_embexpr(*args); end

  def on_string_literal(*args); end

  def on_super(*args); end

  def on_symbeg(tok); end

  def on_symbol(*args); end

  def on_symbol_literal(*args); end

  def on_symbols_add(*args); end

  def on_symbols_beg(tok); end

  def on_symbols_new(*args); end

  def on_tlambda(tok); end

  def on_tlambeg(tok); end

  def on_top_const_field(*args); end

  def on_top_const_ref(*args); end

  def on_tstring_beg(tok); end

  def on_tstring_content(tok); end

  def on_tstring_end(tok); end

  def on_unary(*args); end

  def on_undef(*args); end

  def on_unless(*args); end

  def on_unless_mod(*args); end

  def on_until(*args); end

  def on_until_mod(*args); end

  def on_var_alias(*args); end

  def on_var_field(*args); end

  def on_var_ref(*args); end

  def on_vcall(*args); end

  def on_void_stmt(*args); end

  def on_when(*args); end

  def on_while(*args); end

  def on_while_mod(*args); end

  def on_word_add(*args); end

  def on_word_new(*args); end

  def on_words_add(*args); end

  def on_words_beg(tok); end

  def on_words_new(*args); end

  def on_words_sep(tok); end

  def on_xstring_add(*args); end

  def on_xstring_literal(*args); end

  def on_xstring_new(*args); end

  def on_yield(*args); end

  def on_yield0(*args); end

  def on_zsuper(*args); end
end

class Ripper::SexpBuilder
end

class Ripper::SexpBuilderPP
end

class Ripper::SexpBuilderPP
end

class Ripper::TokenPattern
  def initialize(pattern); end

  def match(str); end

  def match_list(tokens); end
  MAP = ::T.let(nil, ::T.untyped)
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::MatchData
  def initialize(tokens, match); end

  def string(n=T.unsafe(nil)); end
end

class Ripper::TokenPattern::MatchData
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern
  def self.compile(*_); end
end

class Ripper
  extend ::T::Sig
  def self.dedent_string(_, _1); end

  def self.lex(src, filename=T.unsafe(nil), lineno=T.unsafe(nil)); end

  def self.lex_state_name(_); end

  def self.parse(src, filename=T.unsafe(nil), lineno=T.unsafe(nil)); end

  def self.token_match(src, pattern); end
end

class Role
  include ::Role::GeneratedAssociationMethods
  def after_add_for_groups(); end

  def after_add_for_groups=(val); end

  def after_add_for_groups?(); end

  def after_add_for_roles_groups(); end

  def after_add_for_roles_groups=(val); end

  def after_add_for_roles_groups?(); end

  def after_add_for_roles_static_permissions(); end

  def after_add_for_roles_static_permissions=(val); end

  def after_add_for_roles_static_permissions?(); end

  def after_add_for_roles_users(); end

  def after_add_for_roles_users=(val); end

  def after_add_for_roles_users?(); end

  def after_add_for_static_permissions(); end

  def after_add_for_static_permissions=(val); end

  def after_add_for_static_permissions?(); end

  def after_add_for_users(); end

  def after_add_for_users=(val); end

  def after_add_for_users?(); end

  def after_remove_for_groups(); end

  def after_remove_for_groups=(val); end

  def after_remove_for_groups?(); end

  def after_remove_for_roles_groups(); end

  def after_remove_for_roles_groups=(val); end

  def after_remove_for_roles_groups?(); end

  def after_remove_for_roles_static_permissions(); end

  def after_remove_for_roles_static_permissions=(val); end

  def after_remove_for_roles_static_permissions?(); end

  def after_remove_for_roles_users(); end

  def after_remove_for_roles_users=(val); end

  def after_remove_for_roles_users?(); end

  def after_remove_for_static_permissions(); end

  def after_remove_for_static_permissions=(val); end

  def after_remove_for_static_permissions?(); end

  def after_remove_for_users(); end

  def after_remove_for_users=(val); end

  def after_remove_for_users?(); end

  def autosave_associated_records_for_attrib_type_modifiable_bies(*args); end

  def autosave_associated_records_for_groups(*args); end

  def autosave_associated_records_for_groups_roles(*args); end

  def autosave_associated_records_for_relationships(*args); end

  def autosave_associated_records_for_roles_groups(*args); end

  def autosave_associated_records_for_roles_static_permissions(*args); end

  def autosave_associated_records_for_roles_users(*args); end

  def autosave_associated_records_for_static_permissions(*args); end

  def autosave_associated_records_for_users(*args); end

  def before_add_for_groups(); end

  def before_add_for_groups=(val); end

  def before_add_for_groups?(); end

  def before_add_for_roles_groups(); end

  def before_add_for_roles_groups=(val); end

  def before_add_for_roles_groups?(); end

  def before_add_for_roles_static_permissions(); end

  def before_add_for_roles_static_permissions=(val); end

  def before_add_for_roles_static_permissions?(); end

  def before_add_for_roles_users(); end

  def before_add_for_roles_users=(val); end

  def before_add_for_roles_users?(); end

  def before_add_for_static_permissions(); end

  def before_add_for_static_permissions=(val); end

  def before_add_for_static_permissions?(); end

  def before_add_for_users(); end

  def before_add_for_users=(val); end

  def before_add_for_users?(); end

  def before_remove_for_groups(); end

  def before_remove_for_groups=(val); end

  def before_remove_for_groups?(); end

  def before_remove_for_roles_groups(); end

  def before_remove_for_roles_groups=(val); end

  def before_remove_for_roles_groups?(); end

  def before_remove_for_roles_static_permissions(); end

  def before_remove_for_roles_static_permissions=(val); end

  def before_remove_for_roles_static_permissions?(); end

  def before_remove_for_roles_users(); end

  def before_remove_for_roles_users=(val); end

  def before_remove_for_roles_users?(); end

  def before_remove_for_static_permissions(); end

  def before_remove_for_static_permissions=(val); end

  def before_remove_for_static_permissions?(); end

  def before_remove_for_users(); end

  def before_remove_for_users=(val); end

  def before_remove_for_users?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_groups(*args); end

  def validate_associated_records_for_roles_groups(*args); end

  def validate_associated_records_for_roles_static_permissions(*args); end

  def validate_associated_records_for_roles_users(*args); end

  def validate_associated_records_for_static_permissions(*args); end

  def validate_associated_records_for_users(*args); end
end

module Role::GeneratedAssociationMethods
  def attrib_type_modifiable_bies(); end

  def attrib_type_modifiable_bies=(value); end

  def build_attrib_type_modifiable_bies(*args, &block); end

  def build_groups_roles(*args, &block); end

  def build_relationships(*args, &block); end

  def build_roles_static_permissions(*args, &block); end

  def build_roles_users(*args, &block); end

  def create_attrib_type_modifiable_bies(*args, &block); end

  def create_attrib_type_modifiable_bies!(*args, &block); end

  def create_groups_roles(*args, &block); end

  def create_groups_roles!(*args, &block); end

  def create_relationships(*args, &block); end

  def create_relationships!(*args, &block); end

  def create_roles_static_permissions(*args, &block); end

  def create_roles_static_permissions!(*args, &block); end

  def create_roles_users(*args, &block); end

  def create_roles_users!(*args, &block); end

  def group_ids(); end

  def group_ids=(ids); end

  def groups(); end

  def groups=(value); end

  def groups_roles(); end

  def groups_roles=(value); end

  def relationships(); end

  def relationships=(value); end

  def reload_attrib_type_modifiable_bies(); end

  def reload_groups_roles(); end

  def reload_relationships(); end

  def reload_roles_static_permissions(); end

  def reload_roles_users(); end

  def roles_static_permissions(); end

  def roles_static_permissions=(value); end

  def roles_users(); end

  def roles_users=(value); end

  def static_permission_ids(); end

  def static_permission_ids=(ids); end

  def static_permissions(); end

  def static_permissions=(value); end

  def user_ids(); end

  def user_ids=(ids); end

  def users(); end

  def users=(value); end
end

module Role::GeneratedAssociationMethods
  extend ::T::Sig
end

class Role
  def self.after_add_for_groups(); end

  def self.after_add_for_groups=(val); end

  def self.after_add_for_groups?(); end

  def self.after_add_for_roles_groups(); end

  def self.after_add_for_roles_groups=(val); end

  def self.after_add_for_roles_groups?(); end

  def self.after_add_for_roles_static_permissions(); end

  def self.after_add_for_roles_static_permissions=(val); end

  def self.after_add_for_roles_static_permissions?(); end

  def self.after_add_for_roles_users(); end

  def self.after_add_for_roles_users=(val); end

  def self.after_add_for_roles_users?(); end

  def self.after_add_for_static_permissions(); end

  def self.after_add_for_static_permissions=(val); end

  def self.after_add_for_static_permissions?(); end

  def self.after_add_for_users(); end

  def self.after_add_for_users=(val); end

  def self.after_add_for_users?(); end

  def self.after_remove_for_groups(); end

  def self.after_remove_for_groups=(val); end

  def self.after_remove_for_groups?(); end

  def self.after_remove_for_roles_groups(); end

  def self.after_remove_for_roles_groups=(val); end

  def self.after_remove_for_roles_groups?(); end

  def self.after_remove_for_roles_static_permissions(); end

  def self.after_remove_for_roles_static_permissions=(val); end

  def self.after_remove_for_roles_static_permissions?(); end

  def self.after_remove_for_roles_users(); end

  def self.after_remove_for_roles_users=(val); end

  def self.after_remove_for_roles_users?(); end

  def self.after_remove_for_static_permissions(); end

  def self.after_remove_for_static_permissions=(val); end

  def self.after_remove_for_static_permissions?(); end

  def self.after_remove_for_users(); end

  def self.after_remove_for_users=(val); end

  def self.after_remove_for_users?(); end

  def self.before_add_for_groups(); end

  def self.before_add_for_groups=(val); end

  def self.before_add_for_groups?(); end

  def self.before_add_for_roles_groups(); end

  def self.before_add_for_roles_groups=(val); end

  def self.before_add_for_roles_groups?(); end

  def self.before_add_for_roles_static_permissions(); end

  def self.before_add_for_roles_static_permissions=(val); end

  def self.before_add_for_roles_static_permissions?(); end

  def self.before_add_for_roles_users(); end

  def self.before_add_for_roles_users=(val); end

  def self.before_add_for_roles_users?(); end

  def self.before_add_for_static_permissions(); end

  def self.before_add_for_static_permissions=(val); end

  def self.before_add_for_static_permissions?(); end

  def self.before_add_for_users(); end

  def self.before_add_for_users=(val); end

  def self.before_add_for_users?(); end

  def self.before_remove_for_groups(); end

  def self.before_remove_for_groups=(val); end

  def self.before_remove_for_groups?(); end

  def self.before_remove_for_roles_groups(); end

  def self.before_remove_for_roles_groups=(val); end

  def self.before_remove_for_roles_groups?(); end

  def self.before_remove_for_roles_static_permissions(); end

  def self.before_remove_for_roles_static_permissions=(val); end

  def self.before_remove_for_roles_static_permissions?(); end

  def self.before_remove_for_roles_users(); end

  def self.before_remove_for_roles_users=(val); end

  def self.before_remove_for_roles_users?(); end

  def self.before_remove_for_static_permissions(); end

  def self.before_remove_for_static_permissions=(val); end

  def self.before_remove_for_static_permissions?(); end

  def self.before_remove_for_users(); end

  def self.before_remove_for_users=(val); end

  def self.before_remove_for_users?(); end

  def self.global(*args); end
end

class RolesStaticPermission
  include ::RolesStaticPermission::GeneratedAssociationMethods
  def autosave_associated_records_for_role(*args); end

  def autosave_associated_records_for_static_permission(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module RolesStaticPermission::GeneratedAssociationMethods
  def build_role(*args, &block); end

  def build_static_permission(*args, &block); end

  def create_role(*args, &block); end

  def create_role!(*args, &block); end

  def create_static_permission(*args, &block); end

  def create_static_permission!(*args, &block); end

  def reload_role(); end

  def reload_static_permission(); end

  def role(); end

  def role=(value); end

  def static_permission(); end

  def static_permission=(value); end
end

module RolesStaticPermission::GeneratedAssociationMethods
  extend ::T::Sig
end

class RolesUser
  include ::RolesUser::GeneratedAssociationMethods
  def autosave_associated_records_for_role(*args); end

  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module RolesUser::GeneratedAssociationMethods
  def build_role(*args, &block); end

  def build_user(*args, &block); end

  def create_role(*args, &block); end

  def create_role!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_role(); end

  def reload_user(); end

  def role(); end

  def role=(value); end

  def user(); end

  def user=(value); end
end

module RolesUser::GeneratedAssociationMethods
  extend ::T::Sig
end

RspecJunitFormatter = RSpecJUnitFormatter

class RuboCop::AST::ArrayNode
  PERCENT_LITERAL_TYPES = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::BasicLiteralNode
  extend ::T::Sig
end

module RuboCop::AST::BinaryOperatorNode
  extend ::T::Sig
end

class RuboCop::AST::BlockNode
  VOID_CONTEXT_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::Builder
  NODE_MAP = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::CollectionNode
  ARRAY_METHODS = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::CollectionNode
  extend ::T::Sig
end

module RuboCop::AST::ConditionalNode
  extend ::T::Sig
end

module RuboCop::AST::HashElementNode
  extend ::T::Sig
end

class RuboCop::AST::KeywordSplatNode
  DOUBLE_SPLAT = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::MethodDispatchNode
  ARITHMETIC_OPERATORS = ::T.let(nil, ::T.untyped)
  SPECIAL_MODIFIERS = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::MethodDispatchNode
  extend ::T::Sig
end

module RuboCop::AST::MethodIdentifierPredicates
  ENUMERATOR_METHODS = ::T.let(nil, ::T.untyped)
  OPERATOR_METHODS = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::MethodIdentifierPredicates
  extend ::T::Sig
end

module RuboCop::AST::ModifierNode
  extend ::T::Sig
end

class RuboCop::AST::Node
  ASSIGNMENTS = ::T.let(nil, ::T.untyped)
  BASIC_CONDITIONALS = ::T.let(nil, ::T.untyped)
  BASIC_LITERALS = ::T.let(nil, ::T.untyped)
  COMPARISON_OPERATORS = ::T.let(nil, ::T.untyped)
  COMPOSITE_LITERALS = ::T.let(nil, ::T.untyped)
  CONDITIONALS = ::T.let(nil, ::T.untyped)
  EQUALS_ASSIGNMENTS = ::T.let(nil, ::T.untyped)
  FALSEY_LITERALS = ::T.let(nil, ::T.untyped)
  IMMUTABLE_LITERALS = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  LITERALS = ::T.let(nil, ::T.untyped)
  MUTABLE_LITERALS = ::T.let(nil, ::T.untyped)
  OPERATOR_KEYWORDS = ::T.let(nil, ::T.untyped)
  REFERENCES = ::T.let(nil, ::T.untyped)
  SHORTHAND_ASSIGNMENTS = ::T.let(nil, ::T.untyped)
  SPECIAL_KEYWORDS = ::T.let(nil, ::T.untyped)
  TRUTHY_LITERALS = ::T.let(nil, ::T.untyped)
  VARIABLES = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::NumericNode
  SIGN_REGEX = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::NumericNode
  extend ::T::Sig
end

class RuboCop::AST::PairNode
  COLON = ::T.let(nil, ::T.untyped)
  HASH_ROCKET = ::T.let(nil, ::T.untyped)
  SPACED_COLON = ::T.let(nil, ::T.untyped)
  SPACED_HASH_ROCKET = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::ParameterizedNode
  extend ::T::Sig
end

module RuboCop::AST::PredicateOperatorNode
  LOGICAL_AND = ::T.let(nil, ::T.untyped)
  LOGICAL_OR = ::T.let(nil, ::T.untyped)
  SEMANTIC_AND = ::T.let(nil, ::T.untyped)
  SEMANTIC_OR = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::PredicateOperatorNode
  extend ::T::Sig
end

class RuboCop::AST::RegexpNode
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::Sexp
  extend ::T::Sig
end

module RuboCop::AST::Traversal
  MANY_CHILD_NODES = ::T.let(nil, ::T.untyped)
  NO_CHILD_NODES = ::T.let(nil, ::T.untyped)
  ONE_CHILD_NODE = ::T.let(nil, ::T.untyped)
  SECOND_CHILD_ONLY = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::Traversal
  extend ::T::Sig
end

module RuboCop::AST
  extend ::T::Sig
end

class RuboCop::CLI
  PHASE_1 = ::T.let(nil, ::T.untyped)
  PHASE_1_DISABLED = ::T.let(nil, ::T.untyped)
  PHASE_1_OVERRIDDEN = ::T.let(nil, ::T.untyped)
  PHASE_2 = ::T.let(nil, ::T.untyped)
  STATUS_ERROR = ::T.let(nil, ::T.untyped)
  STATUS_INTERRUPTED = ::T.let(nil, ::T.untyped)
  STATUS_OFFENSES = ::T.let(nil, ::T.untyped)
  STATUS_SUCCESS = ::T.let(nil, ::T.untyped)
end

class RuboCop::CommentConfig
  COMMENT_DIRECTIVE_REGEXP = ::T.let(nil, ::T.untyped)
  COPS_PATTERN = ::T.let(nil, ::T.untyped)
  COP_NAMES_PATTERN = ::T.let(nil, ::T.untyped)
  COP_NAME_PATTERN = ::T.let(nil, ::T.untyped)
  UNNEEDED_DISABLE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Config
  COMMON_PARAMS = ::T.let(nil, ::T.untyped)
  DEFAULT_RAILS_VERSION = ::T.let(nil, ::T.untyped)
  DEFAULT_RUBY_VERSION = ::T.let(nil, ::T.untyped)
  INTERNAL_PARAMS = ::T.let(nil, ::T.untyped)
  KNOWN_RUBIES = ::T.let(nil, ::T.untyped)
  OBSOLETE_COPS = ::T.let(nil, ::T.untyped)
  OBSOLETE_ENFORCED_STYLES = ::T.let(nil, ::T.untyped)
  OBSOLETE_PARAMETERS = ::T.let(nil, ::T.untyped)
  OBSOLETE_RUBIES = ::T.let(nil, ::T.untyped)
  RUBY_VERSION_FILENAME = ::T.let(nil, ::T.untyped)
end

class RuboCop::ConfigLoader
  AUTO_GENERATED_FILE = ::T.let(nil, ::T.untyped)
  DEFAULT_FILE = ::T.let(nil, ::T.untyped)
  DOTFILE = ::T.let(nil, ::T.untyped)
  RUBOCOP_HOME = ::T.let(nil, ::T.untyped)
  XDG_CONFIG = ::T.let(nil, ::T.untyped)
end

class RuboCop::ConfigLoader
  extend ::RuboCop::FileFinder
end

module RuboCop::Cop::Alignment
  SPACE = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Alignment
  extend ::T::Sig
end

class RuboCop::Cop::AmbiguousCopName
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::ArrayMinSize
  extend ::T::Sig
end

module RuboCop::Cop::ArraySyntax
  extend ::T::Sig
end

module RuboCop::Cop::AutocorrectLogic
  extend ::T::Sig
end

class RuboCop::Cop::Badge::InvalidBadge
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Bundler::DuplicatedGem
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Bundler::GemComment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Bundler::InsecureProtocolSource
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Bundler::OrderedGems
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Bundler
  extend ::T::Sig
end

module RuboCop::Cop::CheckAssignment
  extend ::T::Sig
end

module RuboCop::Cop::CheckLineBreakable
  extend ::T::Sig
end

module RuboCop::Cop::ClassishLength
  extend ::T::Sig
end

module RuboCop::Cop::CodeLength
  extend ::T::Sig
end

module RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::T::Sig
end

module RuboCop::Cop::ConfigurableFormatting
  extend ::T::Sig
end

module RuboCop::Cop::ConfigurableMax
  extend ::T::Sig
end

module RuboCop::Cop::ConfigurableNaming
  FORMATS = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::ConfigurableNaming
  extend ::T::Sig
end

module RuboCop::Cop::ConfigurableNumbering
  FORMATS = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::ConfigurableNumbering
  extend ::T::Sig
end

module RuboCop::Cop::DefNode
  NON_PUBLIC_MODIFIERS = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::DefNode
  extend ::T::Sig
end

module RuboCop::Cop::DocumentationComment
  extend ::T::Sig
end

module RuboCop::Cop::Duplication
  extend ::T::Sig
end

class RuboCop::Cop::EachToForCorrector
  CORRECTION_WITHOUT_ARGUMENTS = ::T.let(nil, ::T.untyped)
  CORRECTION_WITH_ARGUMENTS = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::EmptyParameter
  extend ::T::Sig
end

module RuboCop::Cop::EndKeywordAlignment
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::EndKeywordAlignment
  extend ::T::Sig
end

module RuboCop::Cop::EnforceSuperclass
  extend ::T::Sig
end

module RuboCop::Cop::FirstElementLineBreak
  extend ::T::Sig
end

class RuboCop::Cop::ForToEachCorrector
  CORRECTION = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::FrozenStringLiteral
  FROZEN_STRING_LITERAL = ::T.let(nil, ::T.untyped)
  FROZEN_STRING_LITERAL_ENABLED = ::T.let(nil, ::T.untyped)
  FROZEN_STRING_LITERAL_TYPES = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::FrozenStringLiteral
  extend ::T::Sig
end

class RuboCop::Cop::Gemspec::DuplicatedAssignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Gemspec::OrderedDependencies
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Gemspec::RequiredRubyVersion
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Gemspec::RubyVersionGlobalsUsage
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Gemspec
  extend ::T::Sig
end

class RuboCop::Cop::Generator
  CONFIGURATION_ADDED_MESSAGE = ::T.let(nil, ::T.untyped)
  SOURCE_TEMPLATE = ::T.let(nil, ::T.untyped)
  SPEC_TEMPLATE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Generator::ConfigurationInjector
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Generator::RequireFileInjector
  REQUIRE_PATH = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::HashAlignment::ValueAlignment
  extend ::T::Sig
end

module RuboCop::Cop::HashAlignment
  extend ::T::Sig
end

module RuboCop::Cop::Heredoc
  OPENING_DELIMITER = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Heredoc
  extend ::T::Sig
end

module RuboCop::Cop::IgnoredMethodPatterns
  extend ::T::Sig
end

module RuboCop::Cop::IgnoredMethods
  extend ::T::Sig
end

module RuboCop::Cop::IgnoredNode
  extend ::T::Sig
end

module RuboCop::Cop::IgnoredPattern
  extend ::T::Sig
end

module RuboCop::Cop::IntegerNode
  extend ::T::Sig
end

class RuboCop::Cop::Layout::AccessModifierIndentation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::AlignArguments
  ALIGN_PARAMS_MSG = ::T.let(nil, ::T.untyped)
  FIXED_INDENT_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::AlignArray
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::AlignHash
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::AlignParameters
  ALIGN_PARAMS_MSG = ::T.let(nil, ::T.untyped)
  FIXED_INDENT_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::BlockAlignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::BlockEndNewline
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::CaseIndentation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::ClassStructure
  HUMANIZED_NODE_TYPE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  VISIBILITY_SCOPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::ClosingHeredocIndentation
  MSG = ::T.let(nil, ::T.untyped)
  MSG_ARG = ::T.let(nil, ::T.untyped)
  SIMPLE_HEREDOC = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::ClosingParenthesisIndentation
  MSG_ALIGN = ::T.let(nil, ::T.untyped)
  MSG_INDENT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::CommentIndentation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::ConditionPosition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::DefEndAlignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::ElseAlignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyComment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLineAfterGuardClause
  END_OF_HEREDOC_LINE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLineAfterMagicComment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLineBetweenDefs
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLines
  LINE_OFFSET = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier
  MSG_AFTER = ::T.let(nil, ::T.untyped)
  MSG_AFTER_FOR_ONLY_BEFORE = ::T.let(nil, ::T.untyped)
  MSG_BEFORE_AND_AFTER = ::T.let(nil, ::T.untyped)
  MSG_BEFORE_FOR_ONLY_BEFORE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundArguments
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundBeginBody
  KIND = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundBlockBody
  KIND = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Layout::EmptyLinesAroundBody
  MSG_DEFERRED = ::T.let(nil, ::T.untyped)
  MSG_EXTRA = ::T.let(nil, ::T.untyped)
  MSG_MISSING = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Layout::EmptyLinesAroundBody
  extend ::T::Sig
end

class RuboCop::Cop::Layout::EmptyLinesAroundClassBody
  KIND = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundExceptionHandlingKeywords
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundMethodBody
  KIND = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundModuleBody
  KIND = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EndOfLine
  MSG_DETECTED = ::T.let(nil, ::T.untyped)
  MSG_MISSING = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::ExtraSpacing
  MSG_UNALIGNED_ASGN = ::T.let(nil, ::T.untyped)
  MSG_UNNECESSARY = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::FirstArrayElementLineBreak
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::FirstHashElementLineBreak
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::FirstMethodArgumentLineBreak
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::FirstMethodParameterLineBreak
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::HeredocArgumentClosingParenthesis
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentAssignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentFirstArgument
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentFirstArrayElement
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentFirstHashElement
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentFirstParameter
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentHeredoc
  LIBRARY_MSG = ::T.let(nil, ::T.untyped)
  RUBY23_TYPE_MSG = ::T.let(nil, ::T.untyped)
  RUBY23_WIDTH_MSG = ::T.let(nil, ::T.untyped)
  STRIP_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentationConsistency
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentationWidth
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::InitialIndentation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::LeadingBlankLines
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::LeadingCommentSpace
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineArrayBraceLayout
  ALWAYS_NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  ALWAYS_SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineArrayLineBreaks
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineAssignmentLayout
  NEW_LINE_OFFENSE = ::T.let(nil, ::T.untyped)
  SAME_LINE_OFFENSE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineBlockLayout
  ARG_MSG = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineHashBraceLayout
  ALWAYS_NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  ALWAYS_SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineHashKeyLineBreaks
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineMethodArgumentLineBreaks
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineMethodCallBraceLayout
  ALWAYS_NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  ALWAYS_SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineMethodDefinitionBraceLayout
  ALWAYS_NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  ALWAYS_SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::RescueEnsureAlignment
  ALTERNATIVE_ACCESS_MODIFIERS = ::T.let(nil, ::T.untyped)
  ANCESTOR_TYPES = ::T.let(nil, ::T.untyped)
  ANCESTOR_TYPES_WITH_ACCESS_MODIFIERS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  RUBY_2_5_ANCESTOR_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceAfterColon
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceAfterMethodName
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceAfterNot
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceAroundEqualsInParameterDefault
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceAroundKeyword
  ACCEPT_LEFT_PAREN = ::T.let(nil, ::T.untyped)
  ACCEPT_LEFT_SQUARE_BRACKET = ::T.let(nil, ::T.untyped)
  DO = ::T.let(nil, ::T.untyped)
  MSG_AFTER = ::T.let(nil, ::T.untyped)
  MSG_BEFORE = ::T.let(nil, ::T.untyped)
  SAFE_NAVIGATION = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceAroundOperators
  EXCESSIVE_SPACE = ::T.let(nil, ::T.untyped)
  IRREGULAR_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceBeforeBlockBraces
  DETECTED_MSG = ::T.let(nil, ::T.untyped)
  MISSING_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceBeforeComment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceBeforeFirstArg
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInLambdaLiteral
  MSG_REQUIRE_NO_SPACE = ::T.let(nil, ::T.untyped)
  MSG_REQUIRE_SPACE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideArrayLiteralBrackets
  EMPTY_MSG = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideArrayPercentLiteral
  MSG = ::T.let(nil, ::T.untyped)
  MULTIPLE_SPACES_BETWEEN_ITEMS_REGEX = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideParens
  MSG = ::T.let(nil, ::T.untyped)
  MSG_SPACE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsidePercentLiteralDelimiters
  BEGIN_REGEX = ::T.let(nil, ::T.untyped)
  END_REGEX = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideRangeLiteral
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideReferenceBrackets
  BRACKET_METHODS = ::T.let(nil, ::T.untyped)
  EMPTY_MSG = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideStringInterpolation
  NO_SPACE_MSG = ::T.let(nil, ::T.untyped)
  SPACE_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::Tab
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::TrailingWhitespace
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Layout
  extend ::T::Sig
end

class RuboCop::Cop::Lint::AmbiguousBlockAssociation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::AmbiguousOperator
  AMBIGUITIES = ::T.let(nil, ::T.untyped)
  MSG_FORMAT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::AmbiguousRegexpLiteral
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::AssignmentInCondition
  ASGN_TYPES = ::T.let(nil, ::T.untyped)
  MSG_WITHOUT_SAFE_ASSIGNMENT_ALLOWED = ::T.let(nil, ::T.untyped)
  MSG_WITH_SAFE_ASSIGNMENT_ALLOWED = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::BigDecimalNew
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::BooleanSymbol
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::CircularArgumentReference
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::Debugger
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::DeprecatedClassMethods
  DEPRECATED_METHODS_OBJECT = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::DisjunctiveAssignmentInConstructor
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::DuplicateCaseCondition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::DuplicateMethods
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::DuplicatedKey
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EachWithObjectArgument
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ElseLayout
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EmptyEnsure
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EmptyExpression
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EmptyInterpolation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EmptyWhen
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EndInMethod
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EnsureReturn
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ErbNewArguments
  MESSAGES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::FlipFlop
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::FloatOutOfRange
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::FormatParameterMismatch
  DIGIT_DOLLAR_FLAG = ::T.let(nil, ::T.untyped)
  FIELD_REGEX = ::T.let(nil, ::T.untyped)
  KERNEL = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  NAMED_FIELD_REGEX = ::T.let(nil, ::T.untyped)
  NAMED_INTERPOLATION = ::T.let(nil, ::T.untyped)
  PERCENT = ::T.let(nil, ::T.untyped)
  PERCENT_PERCENT = ::T.let(nil, ::T.untyped)
  SHOVEL = ::T.let(nil, ::T.untyped)
  STRING_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::HandleExceptions
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::HeredocMethodCallPosition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ImplicitStringConcatenation
  FOR_ARRAY = ::T.let(nil, ::T.untyped)
  FOR_METHOD = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::IneffectiveAccessModifier
  ALTERNATIVE_PRIVATE = ::T.let(nil, ::T.untyped)
  ALTERNATIVE_PROTECTED = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::InheritException
  ILLEGAL_CLASSES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  PREFERRED_BASE_CLASS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::InterpolationCheck
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::LiteralAsCondition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::LiteralInInterpolation
  COMPOSITE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::Loop
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::MissingCopEnableDirective
  MSG = ::T.let(nil, ::T.untyped)
  MSG_BOUND = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::MultipleCompare
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::NestedMethodDefinition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::NestedPercentLiteral
  MSG = ::T.let(nil, ::T.untyped)
  PERCENT_LITERAL_TYPES = ::T.let(nil, ::T.untyped)
  REGEXES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::NextWithoutAccumulator
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::NonLocalExitFromIterator
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::NumberConversion
  CONVERSION_METHOD_CLASS_MAPPING = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::OrderedMagicComments
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ParenthesesAsGroupedExpression
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::PercentStringArray
  LEADING_QUOTE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  QUOTES_AND_COMMAS = ::T.let(nil, ::T.untyped)
  TRAILING_QUOTE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::PercentSymbolArray
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RandOne
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RedundantWithIndex
  MSG_EACH_WITH_INDEX = ::T.let(nil, ::T.untyped)
  MSG_WITH_INDEX = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RedundantWithObject
  MSG_EACH_WITH_OBJECT = ::T.let(nil, ::T.untyped)
  MSG_WITH_OBJECT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RegexpAsCondition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RequireParentheses
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RescueException
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RescueType
  INVALID_TYPES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ReturnInVoidContext
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::SafeNavigationChain
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::SafeNavigationConsistency
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::SafeNavigationWithEmpty
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ScriptPermission
  MSG = ::T.let(nil, ::T.untyped)
  SHEBANG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ShadowedArgument
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ShadowedException
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ShadowingOuterLocalVariable
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::StringConversionInInterpolation
  MSG_DEFAULT = ::T.let(nil, ::T.untyped)
  MSG_SELF = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::Syntax
  ERROR_SOURCE_RANGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ToJSON
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnderscorePrefixedVariableName
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnifiedInteger
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnneededCopDisableDirective
  COP_NAME = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnneededCopEnableDirective
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnneededRequireStatement
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnneededSplatExpansion
  ARRAY_PARAM_MSG = ::T.let(nil, ::T.untyped)
  ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  PERCENT_CAPITAL_I = ::T.let(nil, ::T.untyped)
  PERCENT_CAPITAL_W = ::T.let(nil, ::T.untyped)
  PERCENT_I = ::T.let(nil, ::T.untyped)
  PERCENT_W = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnreachableCode
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Lint::UnusedArgument
  extend ::T::Sig
end

class RuboCop::Cop::Lint::UriEscapeUnescape
  ALTERNATE_METHODS_OF_URI_ESCAPE = ::T.let(nil, ::T.untyped)
  ALTERNATE_METHODS_OF_URI_UNESCAPE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UriRegexp
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UselessAccessModifier
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UselessAssignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UselessComparison
  MSG = ::T.let(nil, ::T.untyped)
  OPS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UselessElseWithoutRescue
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UselessSetterCall
  ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::Void
  BINARY_OPERATORS = ::T.let(nil, ::T.untyped)
  DEFINED_MSG = ::T.let(nil, ::T.untyped)
  LIT_MSG = ::T.let(nil, ::T.untyped)
  NONMUTATING_METHODS = ::T.let(nil, ::T.untyped)
  NONMUTATING_MSG = ::T.let(nil, ::T.untyped)
  OPERATORS = ::T.let(nil, ::T.untyped)
  OP_MSG = ::T.let(nil, ::T.untyped)
  SELF_MSG = ::T.let(nil, ::T.untyped)
  UNARY_OPERATORS = ::T.let(nil, ::T.untyped)
  VAR_MSG = ::T.let(nil, ::T.untyped)
  VOID_CONTEXT_TYPES = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Lint
  extend ::T::Sig
end

module RuboCop::Cop::MatchRange
  extend ::T::Sig
end

module RuboCop::Cop::MethodComplexity
  extend ::T::Sig
end

module RuboCop::Cop::MethodPreference
  extend ::T::Sig
end

class RuboCop::Cop::Metrics::AbcSize
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::BlockLength
  LABEL = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::BlockNesting
  NESTING_BLOCKS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::CyclomaticComplexity
  COUNTED_NODES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::LineLength
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::MethodLength
  LABEL = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::ParameterLists
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::PerceivedComplexity
  COUNTED_NODES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::Utils::AbcSizeCalculator
  BRANCH_NODES = ::T.let(nil, ::T.untyped)
  CONDITION_NODES = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Metrics::Utils
  extend ::T::Sig
end

module RuboCop::Cop::Metrics
  extend ::T::Sig
end

module RuboCop::Cop::MinBodyLength
  extend ::T::Sig
end

module RuboCop::Cop::MultilineElementIndentation
  extend ::T::Sig
end

module RuboCop::Cop::MultilineElementLineBreaks
  extend ::T::Sig
end

module RuboCop::Cop::MultilineExpressionIndentation
  ASSIGNMENT_MESSAGE_TAIL = ::T.let(nil, ::T.untyped)
  DEFAULT_MESSAGE_TAIL = ::T.let(nil, ::T.untyped)
  KEYWORD_ANCESTOR_TYPES = ::T.let(nil, ::T.untyped)
  KEYWORD_MESSAGE_TAIL = ::T.let(nil, ::T.untyped)
  UNALIGNED_RHS_TYPES = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::MultilineExpressionIndentation
  extend ::T::Sig
end

module RuboCop::Cop::MultilineLiteralBraceLayout
  extend ::T::Sig
end

class RuboCop::Cop::Naming::AccessorMethodName
  MSG_READER = ::T.let(nil, ::T.untyped)
  MSG_WRITER = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::AsciiIdentifiers
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::BinaryOperatorParameterName
  BLACKLISTED = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  OP_LIKE_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::ClassAndModuleCamelCase
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::ConstantName
  MSG = ::T.let(nil, ::T.untyped)
  SNAKE_CASE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::FileName
  MSG_NO_DEFINITION = ::T.let(nil, ::T.untyped)
  MSG_REGEX = ::T.let(nil, ::T.untyped)
  MSG_SNAKE_CASE = ::T.let(nil, ::T.untyped)
  SNAKE_CASE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::HeredocDelimiterCase
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::HeredocDelimiterNaming
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::MemoizedInstanceVariableName
  MSG = ::T.let(nil, ::T.untyped)
  UNDERSCORE_REQUIRED = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::MethodName
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::RescuedExceptionsVariableName
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::VariableName
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::VariableNumber
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Naming
  extend ::T::Sig
end

module RuboCop::Cop::NegativeConditional
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::NegativeConditional
  extend ::T::Sig
end

module RuboCop::Cop::NilMethods
  extend ::T::Sig
end

class RuboCop::Cop::Offense
  COMPARISON_ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::OnNormalIfUnless
  extend ::T::Sig
end

module RuboCop::Cop::OrderedGemNode
  extend ::T::Sig
end

module RuboCop::Cop::Parentheses
  extend ::T::Sig
end

module RuboCop::Cop::ParserDiagnostic
  extend ::T::Sig
end

module RuboCop::Cop::PercentArray
  extend ::T::Sig
end

module RuboCop::Cop::PercentLiteral
  extend ::T::Sig
end

class RuboCop::Cop::Performance::Caller
  MSG_BRACE = ::T.let(nil, ::T.untyped)
  MSG_FIRST = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::CaseWhenSplat
  ARRAY_MSG = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::Casecmp
  CASE_METHODS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::ChainArrayAllocation
  ALWAYS_RETURNS_NEW_ARRAY = ::T.let(nil, ::T.untyped)
  HAS_MUTATION_ALTERNATIVE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  RETURNS_NEW_ARRAY_WHEN_NO_BLOCK = ::T.let(nil, ::T.untyped)
  RETURN_NEW_ARRAY_WHEN_ARGS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::CompareWithBlock
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::Count
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::Detect
  MSG = ::T.let(nil, ::T.untyped)
  REVERSE_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::DoubleStartEndWith
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::EndWith
  MSG = ::T.let(nil, ::T.untyped)
  SINGLE_QUOTE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::FixedSize
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::FlatMap
  FLATTEN_MULTIPLE_LEVELS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::OpenStruct
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::RangeInclude
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::RedundantBlockCall
  CLOSE_PAREN = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  OPEN_PAREN = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  YIELD = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::RedundantMatch
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::RedundantMerge
  AREF_ASGN = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  WITH_MODIFIER_CORRECTION = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::RegexpMatch
  MATCH_NODE_PATTERN = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  TYPES_IMPLEMENTING_MATCH = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::ReverseEach
  MSG = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::Size
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::StartWith
  MSG = ::T.let(nil, ::T.untyped)
  SINGLE_QUOTE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::StringReplacement
  BANG = ::T.let(nil, ::T.untyped)
  DELETE = ::T.let(nil, ::T.untyped)
  DETERMINISTIC_REGEX = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  SINGLE_QUOTE = ::T.let(nil, ::T.untyped)
  TR = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::TimesMap
  MESSAGE = ::T.let(nil, ::T.untyped)
  MESSAGE_ONLY_IF = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::UnfreezeString
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Performance::UriDefaultParser
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Performance
  extend ::T::Sig
end

module RuboCop::Cop::PrecedingFollowingAlignment
  extend ::T::Sig
end

class RuboCop::Cop::PreferredDelimiters
  PERCENT_LITERAL_TYPES = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::RangeHelp
  BYTE_ORDER_MARK = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::RangeHelp
  extend ::T::Sig
end

module RuboCop::Cop::RescueNode
  extend ::T::Sig
end

module RuboCop::Cop::SafeAssignment
  extend ::T::Sig
end

module RuboCop::Cop::SafeMode
  extend ::T::Sig
end

class RuboCop::Cop::Security::Eval
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Security::JSONLoad
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Security::MarshalLoad
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Security::Open
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Security::YAMLLoad
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Security
  extend ::T::Sig
end

class RuboCop::Cop::Severity
  CODE_TABLE = ::T.let(nil, ::T.untyped)
  NAMES = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::SpaceAfterPunctuation
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::SpaceAfterPunctuation
  extend ::T::Sig
end

module RuboCop::Cop::SpaceBeforePunctuation
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::SpaceBeforePunctuation
  extend ::T::Sig
end

module RuboCop::Cop::StatementModifier
  extend ::T::Sig
end

module RuboCop::Cop::StringHelp
  extend ::T::Sig
end

module RuboCop::Cop::StringLiteralsHelp
  extend ::T::Sig
end

class RuboCop::Cop::Style::AccessModifierDeclarations
  GROUP_STYLE_MESSAGE = ::T.let(nil, ::T.untyped)
  INLINE_STYLE_MESSAGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Alias
  MSG_ALIAS = ::T.let(nil, ::T.untyped)
  MSG_ALIAS_METHOD = ::T.let(nil, ::T.untyped)
  MSG_SYMBOL_ARGS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::AndOr
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Style::AnnotationComment
  extend ::T::Sig
end

class RuboCop::Cop::Style::ArrayJoin
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::AsciiComments
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Attr
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::AutoResourceCleanup
  MSG = ::T.let(nil, ::T.untyped)
  TARGET_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::BarePercentLiterals
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::BeginBlock
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::BlockComments
  BEGIN_LENGTH = ::T.let(nil, ::T.untyped)
  END_LENGTH = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::BlockDelimiters
  ALWAYS_BRACES_MESSAGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::BracesAroundHashParameters
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::CaseCorrector
  extend ::RuboCop::Cop::Style::ConditionalAssignmentHelper
  extend ::RuboCop::Cop::Style::ConditionalCorrectorHelper
end

class RuboCop::Cop::Style::CaseEquality
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::CharacterLiteral
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ClassAndModuleChildren
  COMPACT_MSG = ::T.let(nil, ::T.untyped)
  NESTED_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ClassCheck
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ClassMethods
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ClassVars
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::CollectionMethods
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ColonMethodCall
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ColonMethodDefinition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::CommandLiteral
  MSG_USE_BACKTICKS = ::T.let(nil, ::T.untyped)
  MSG_USE_PERCENT_X = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::CommentAnnotation
  MISSING_NOTE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::CommentedKeyword
  ALLOWED_COMMENTS = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ConditionalAssignment
  ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  ASSIGN_TO_CONDITION_MSG = ::T.let(nil, ::T.untyped)
  ENABLED = ::T.let(nil, ::T.untyped)
  INDENTATION_WIDTH = ::T.let(nil, ::T.untyped)
  LINE_LENGTH = ::T.let(nil, ::T.untyped)
  MAX = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  SINGLE_LINE_CONDITIONS_ONLY = ::T.let(nil, ::T.untyped)
  VARIABLE_ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  WIDTH = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Style::ConditionalAssignmentHelper
  ALIGN_WITH = ::T.let(nil, ::T.untyped)
  END_ALIGNMENT = ::T.let(nil, ::T.untyped)
  EQUAL = ::T.let(nil, ::T.untyped)
  KEYWORD = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Style::ConditionalAssignmentHelper
  extend ::T::Sig
end

module RuboCop::Cop::Style::ConditionalCorrectorHelper
  extend ::T::Sig
end

class RuboCop::Cop::Style::ConstantVisibility
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Copyright
  AUTOCORRECT_EMPTY_WARNING = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::DateTime
  CLASS_MSG = ::T.let(nil, ::T.untyped)
  COERCION_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::DefWithParentheses
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Dir
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Documentation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::DocumentationMethod
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::DoubleCopDisableDirective
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::DoubleNegation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EachForSimpleLoop
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EachWithObject
  METHODS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EmptyBlockParameter
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EmptyCaseCondition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EmptyElse
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EmptyLambdaParameter
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EmptyLiteral
  ARR_MSG = ::T.let(nil, ::T.untyped)
  HASH_MSG = ::T.let(nil, ::T.untyped)
  STR_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EmptyMethod
  MSG_COMPACT = ::T.let(nil, ::T.untyped)
  MSG_EXPANDED = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Encoding
  ENCODING_PATTERN = ::T.let(nil, ::T.untyped)
  MSG_UNNECESSARY = ::T.let(nil, ::T.untyped)
  SHEBANG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EndBlock
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EvalWithLocation
  MSG = ::T.let(nil, ::T.untyped)
  MSG_INCORRECT_LINE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EvenOdd
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ExpandPathArguments
  MSG = ::T.let(nil, ::T.untyped)
  PATHNAME_MSG = ::T.let(nil, ::T.untyped)
  PATHNAME_NEW_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::For
  EACH_LENGTH = ::T.let(nil, ::T.untyped)
  PREFER_EACH = ::T.let(nil, ::T.untyped)
  PREFER_FOR = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::FormatString
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::FormatStringToken
  FIELD_CHARACTERS = ::T.let(nil, ::T.untyped)
  FORMAT_STRING_METHODS = ::T.let(nil, ::T.untyped)
  STYLE_PATTERNS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::FrozenStringLiteralComment
  MSG = ::T.let(nil, ::T.untyped)
  MSG_UNNECESSARY = ::T.let(nil, ::T.untyped)
  SHEBANG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::GlobalVars
  BUILT_IN_VARS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::GuardClause
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::HashSyntax
  MSG_19 = ::T.let(nil, ::T.untyped)
  MSG_HASH_ROCKETS = ::T.let(nil, ::T.untyped)
  MSG_NO_MIXED_KEYS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::IdenticalConditionalBranches
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::IfCorrector
  extend ::RuboCop::Cop::Style::ConditionalAssignmentHelper
  extend ::RuboCop::Cop::Style::ConditionalCorrectorHelper
end

class RuboCop::Cop::Style::IfInsideElse
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::IfUnlessModifier
  ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::IfUnlessModifierOfIfUnless
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::IfWithSemicolon
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ImplicitRuntimeError
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::InfiniteLoop
  LEADING_SPACE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::InlineComment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::InverseMethods
  CAMEL_CASE = ::T.let(nil, ::T.untyped)
  CLASS_COMPARISON_METHODS = ::T.let(nil, ::T.untyped)
  EQUALITY_METHODS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  NEGATED_EQUALITY_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::IpAddresses
  IPV6_MAX_SIZE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Lambda
  LITERAL_MESSAGE = ::T.let(nil, ::T.untyped)
  METHOD_MESSAGE = ::T.let(nil, ::T.untyped)
  OFFENDING_SELECTORS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::LineEndConcatenation
  COMPLEX_STRING_EDGE_TOKEN_TYPES = ::T.let(nil, ::T.untyped)
  CONCAT_TOKEN_TYPES = ::T.let(nil, ::T.untyped)
  HIGH_PRECEDENCE_OP_TOKEN_TYPES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  QUOTE_DELIMITERS = ::T.let(nil, ::T.untyped)
  SIMPLE_STRING_TOKEN_TYPE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MethodCallWithArgsParentheses
  TRAILING_WHITESPACE_REGEX = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MethodCallWithoutArgsParentheses
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MethodCalledOnDoEndBlock
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MethodDefParentheses
  MSG_MISSING = ::T.let(nil, ::T.untyped)
  MSG_PRESENT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MethodMissingSuper
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MinMax
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MissingElse
  MSG = ::T.let(nil, ::T.untyped)
  MSG_EMPTY = ::T.let(nil, ::T.untyped)
  MSG_NIL = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MissingRespondToMissing
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MixinGrouping
  MIXIN_METHODS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MixinUsage
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ModuleFunction
  EXTEND_SELF_MSG = ::T.let(nil, ::T.untyped)
  MODULE_FUNCTION_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineBlockChain
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineIfModifier
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineIfThen
  MSG = ::T.let(nil, ::T.untyped)
  NON_MODIFIER_THEN = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineMemoization
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineMethodSignature
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineTernaryOperator
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineWhenThen
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultipleComparison
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MutableConstant
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NestedModifier
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NestedParenthesizedCalls
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NestedTernaryOperator
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Next
  EXIT_TYPES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NilComparison
  EXPLICIT_MSG = ::T.let(nil, ::T.untyped)
  PREDICATE_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Not
  MSG = ::T.let(nil, ::T.untyped)
  OPPOSITE_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NumericLiteralPrefix
  BINARY_MSG = ::T.let(nil, ::T.untyped)
  BINARY_REGEX = ::T.let(nil, ::T.untyped)
  DECIMAL_MSG = ::T.let(nil, ::T.untyped)
  DECIMAL_REGEX = ::T.let(nil, ::T.untyped)
  HEX_MSG = ::T.let(nil, ::T.untyped)
  HEX_REGEX = ::T.let(nil, ::T.untyped)
  OCTAL_MSG = ::T.let(nil, ::T.untyped)
  OCTAL_REGEX = ::T.let(nil, ::T.untyped)
  OCTAL_ZERO_ONLY_MSG = ::T.let(nil, ::T.untyped)
  OCTAL_ZERO_ONLY_REGEX = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NumericLiterals
  DELIMITER_REGEXP = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NumericPredicate
  MSG = ::T.let(nil, ::T.untyped)
  REPLACEMENTS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::OneLineConditional
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::OptionHash
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::OptionalArguments
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::OrAssignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ParallelAssignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::PercentQLiterals
  LOWER_CASE_Q_MSG = ::T.let(nil, ::T.untyped)
  UPPER_CASE_Q_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::PerlBackrefs
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::PreferredHashMethods
  MSG = ::T.let(nil, ::T.untyped)
  OFFENDING_SELECTORS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Proc
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RaiseArgs
  COMPACT_MSG = ::T.let(nil, ::T.untyped)
  EXPLODED_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RandomWithOffset
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantBegin
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantConditional
  COMPARISON_OPERATORS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantException
  MSG_1 = ::T.let(nil, ::T.untyped)
  MSG_2 = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantFreeze
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantReturn
  MSG = ::T.let(nil, ::T.untyped)
  MULTI_RETURN_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantSelf
  KERNEL_METHODS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantSortBy
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RegexpLiteral
  MSG_USE_PERCENT_R = ::T.let(nil, ::T.untyped)
  MSG_USE_SLASHES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RescueModifier
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RescueStandardError
  MSG_EXPLICIT = ::T.let(nil, ::T.untyped)
  MSG_IMPLICIT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ReturnNil
  RETURN_MSG = ::T.let(nil, ::T.untyped)
  RETURN_NIL_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SafeNavigation
  LOGIC_JUMP_KEYWORDS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Sample
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SelfAssignment
  MSG = ::T.let(nil, ::T.untyped)
  OPS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Semicolon
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Send
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SignalException
  FAIL_MSG = ::T.let(nil, ::T.untyped)
  RAISE_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SingleLineBlockParams
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SingleLineMethods
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SpecialGlobalVars
  ENGLISH_VARS = ::T.let(nil, ::T.untyped)
  MSG_BOTH = ::T.let(nil, ::T.untyped)
  MSG_ENGLISH = ::T.let(nil, ::T.untyped)
  MSG_REGULAR = ::T.let(nil, ::T.untyped)
  NON_ENGLISH_VARS = ::T.let(nil, ::T.untyped)
  PERL_VARS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::StabbyLambdaParentheses
  MSG_NO_REQUIRE = ::T.let(nil, ::T.untyped)
  MSG_REQUIRE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::StderrPuts
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::StringHashKeys
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::StringLiterals
  MSG_INCONSISTENT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::StringMethods
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Strip
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::StructInheritance
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SymbolArray
  ARRAY_MSG = ::T.let(nil, ::T.untyped)
  PERCENT_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SymbolLiteral
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SymbolProc
  MSG = ::T.let(nil, ::T.untyped)
  SUPER_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TernaryCorrector
  extend ::RuboCop::Cop::Style::ConditionalAssignmentHelper
  extend ::RuboCop::Cop::Style::ConditionalCorrectorHelper
end

class RuboCop::Cop::Style::TernaryParentheses
  MSG = ::T.let(nil, ::T.untyped)
  MSG_COMPLEX = ::T.let(nil, ::T.untyped)
  NON_COMPLEX_TYPES = ::T.let(nil, ::T.untyped)
  VARIABLE_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TrailingBodyOnClass
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TrailingBodyOnMethodDefinition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TrailingBodyOnModule
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TrailingMethodEndStatement
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TrailingUnderscoreVariable
  MSG = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TrivialAccessors
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnlessElse
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnneededCapitalW
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnneededCondition
  MSG = ::T.let(nil, ::T.untyped)
  UNNEEDED_CONDITION = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnneededInterpolation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnneededPercentQ
  DYNAMIC_MSG = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ESCAPED_NON_BACKSLASH = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  PERCENT_CAPITAL_Q = ::T.let(nil, ::T.untyped)
  PERCENT_Q = ::T.let(nil, ::T.untyped)
  QUOTE = ::T.let(nil, ::T.untyped)
  SINGLE_QUOTE = ::T.let(nil, ::T.untyped)
  STRING_INTERPOLATION_REGEXP = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnneededSort
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnpackFirst
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::VariableInterpolation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::WhenThen
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::WhileUntilDo
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::WhileUntilModifier
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::WordArray
  ARRAY_MSG = ::T.let(nil, ::T.untyped)
  PERCENT_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::YodaCondition
  EQUALITY_OPERATORS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  NONCOMMUTATIVE_OPERATORS = ::T.let(nil, ::T.untyped)
  REVERSE_COMPARISON = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ZeroLengthPredicate
  NONZERO_MSG = ::T.let(nil, ::T.untyped)
  ZERO_MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Style
  extend ::T::Sig
end

module RuboCop::Cop::SurroundingSpace
  NO_SPACE_COMMAND = ::T.let(nil, ::T.untyped)
  SPACE_COMMAND = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::SurroundingSpace
  extend ::T::Sig
end

module RuboCop::Cop::TargetRubyVersion
  extend ::T::Sig
end

class RuboCop::Cop::Team
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::TooManyLines
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::TooManyLines
  extend ::T::Sig
end

module RuboCop::Cop::TrailingBody
  extend ::T::Sig
end

module RuboCop::Cop::TrailingComma
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::TrailingComma
  extend ::T::Sig
end

module RuboCop::Cop::UncommunicativeName
  CASE_MSG = ::T.let(nil, ::T.untyped)
  FORBIDDEN_MSG = ::T.let(nil, ::T.untyped)
  LENGTH_MSG = ::T.let(nil, ::T.untyped)
  NUM_MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::UncommunicativeName
  extend ::T::Sig
end

module RuboCop::Cop::Util
  LITERAL_REGEX = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Util
  extend ::T::Sig
end

class RuboCop::Cop::VariableForce
  ARGUMENT_DECLARATION_TYPES = ::T.let(nil, ::T.untyped)
  LOGICAL_OPERATOR_ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  LOOP_TYPES = ::T.let(nil, ::T.untyped)
  MULTIPLE_ASSIGNMENT_TYPE = ::T.let(nil, ::T.untyped)
  OPERATOR_ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  POST_CONDITION_LOOP_TYPES = ::T.let(nil, ::T.untyped)
  REGEXP_NAMED_CAPTURE_TYPE = ::T.let(nil, ::T.untyped)
  RESCUE_TYPE = ::T.let(nil, ::T.untyped)
  SCOPE_TYPES = ::T.let(nil, ::T.untyped)
  SEND_TYPE = ::T.let(nil, ::T.untyped)
  TWISTED_SCOPE_TYPES = ::T.let(nil, ::T.untyped)
  VARIABLE_ASSIGNMENT_TYPE = ::T.let(nil, ::T.untyped)
  VARIABLE_ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  VARIABLE_REFERENCE_TYPE = ::T.let(nil, ::T.untyped)
  ZERO_ARITY_SUPER_TYPE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::VariableForce::Assignment
  MULTIPLE_LEFT_HAND_SIDE_TYPE = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::VariableForce::Branch
  CLASSES_BY_TYPE = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::VariableForce::Branch::ExceptionHandler
  extend ::T::Sig
end

module RuboCop::Cop::VariableForce::Branch::LogicalOperator
  extend ::T::Sig
end

module RuboCop::Cop::VariableForce::Branch::SimpleConditional
  extend ::T::Sig
end

module RuboCop::Cop::VariableForce::Branch
  extend ::T::Sig
end

module RuboCop::Cop::VariableForce::Branchable
  extend ::T::Sig
end

class RuboCop::Cop::VariableForce::Reference
  VARIABLE_REFERENCE_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::VariableForce::Scope
  OUTER_SCOPE_CHILD_INDICES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::VariableForce::Variable
  VARIABLE_DECLARATION_TYPES = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop
  extend ::T::Sig
end

module RuboCop::FileFinder
  extend ::T::Sig
end

class RuboCop::Formatter::ClangStyleFormatter
  ELLIPSES = ::T.let(nil, ::T.untyped)
end

module RuboCop::Formatter::Colorizable
  extend ::T::Sig
end

class RuboCop::Formatter::DisabledConfigFormatter
  HEADING = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::FormatterSet
  BUILTIN_FORMATTERS_FOR_KEYS = ::T.let(nil, ::T.untyped)
  FORMATTER_APIS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::FuubarStyleFormatter
  RESET_SEQUENCE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::HTMLFormatter
  ELLIPSES = ::T.let(nil, ::T.untyped)
  TEMPLATE_PATH = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::HTMLFormatter::ERBContext
  LOGO_IMAGE_PATH = ::T.let(nil, ::T.untyped)
  SEVERITY_COLORS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::ProgressFormatter
  DOT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::SimpleTextFormatter
  COLOR_FOR_SEVERITY = ::T.let(nil, ::T.untyped)
end

module RuboCop::Formatter::TextUtil
  extend ::T::Sig
end

module RuboCop::Formatter
  extend ::T::Sig
end

class RuboCop::MagicComment
  TOKEN = ::T.let(nil, ::T.untyped)
end

class RuboCop::MagicComment::EmacsComment
  FORMAT = ::T.let(nil, ::T.untyped)
  OPERATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR = ::T.let(nil, ::T.untyped)
end

class RuboCop::MagicComment::VimComment
  FORMAT = ::T.let(nil, ::T.untyped)
  OPERATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR = ::T.let(nil, ::T.untyped)
end

module RuboCop::NameSimilarity
  MINIMUM_SIMILARITY_TO_SUGGEST = ::T.let(nil, ::T.untyped)
end

module RuboCop::NameSimilarity
  extend ::T::Sig
end

module RuboCop::NodePattern::Macros
  extend ::T::Sig
end

class RuboCop::Options
  DEFAULT_MAXIMUM_EXCLUSION_ITEMS = ::T.let(nil, ::T.untyped)
  EXITING_OPTIONS = ::T.let(nil, ::T.untyped)
  E_STDIN_NO_PATH = ::T.let(nil, ::T.untyped)
end

module RuboCop::OptionsHelp
  MAX_EXCL = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
end

module RuboCop::OptionsHelp
  extend ::T::Sig
end

module RuboCop::PathUtil
  extend ::T::Sig
end

module RuboCop::Performance
  CONFIG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Performance::Inject
  extend ::T::Sig
end

module RuboCop::Performance::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RuboCop::Performance::Version
  extend ::T::Sig
end

module RuboCop::Performance
  extend ::T::Sig
end

module RuboCop::Platform
  extend ::T::Sig
end

class RuboCop::ProcessedSource
  STRING_SOURCE_NAME = ::T.let(nil, ::T.untyped)
end

class RuboCop::RemoteConfig
  CACHE_LIFETIME = ::T.let(nil, ::T.untyped)
end

class RuboCop::ResultCache
  NON_CHANGING = ::T.let(nil, ::T.untyped)
end

class RuboCop::Runner
  MAX_ITERATIONS = ::T.let(nil, ::T.untyped)
end

class RuboCop::StringInterpreter
  STRING_ESCAPES = ::T.let(nil, ::T.untyped)
  STRING_ESCAPE_REGEX = ::T.let(nil, ::T.untyped)
end

module RuboCop::StringUtil
  extend ::T::Sig
end

module RuboCop::Version
  MSG = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

module RuboCop::Version
  extend ::T::Sig
end

module RuboCop::YAMLDuplicationChecker
  extend ::T::Sig
end

module RuboCop
  extend ::T::Sig
end

class RubyLex
  include ::RubyToken
  def Fail(err=T.unsafe(nil), *rest); end

  def Raise(err=T.unsafe(nil), *rest); end

  def char_no(); end

  def each_top_level_statement(); end

  def eof?(); end

  def exception_on_syntax_error(); end

  def exception_on_syntax_error=(exception_on_syntax_error); end

  def get_readed(); end

  def getc(); end

  def getc_of_rests(); end

  def gets(); end

  def identify_comment(); end

  def identify_gvar(); end

  def identify_here_document(); end

  def identify_identifier(); end

  def identify_number(); end

  def identify_quotation(); end

  def identify_string(ltype, quoted=T.unsafe(nil)); end

  def identify_string_dvar(); end

  def indent(); end

  def initialize_input(); end

  def lex(); end

  def lex_init(); end

  def lex_int2(); end

  def line_no(); end

  def peek(i=T.unsafe(nil)); end

  def peek_equal?(str); end

  def peek_match?(regexp); end

  def prompt(); end

  def read_escape(); end

  def readed_auto_clean_up(); end

  def readed_auto_clean_up=(readed_auto_clean_up); end

  def seek(); end

  def set_input(io, p=T.unsafe(nil), &block); end

  def set_prompt(p=T.unsafe(nil), &block); end

  def skip_space(); end

  def skip_space=(skip_space); end

  def token(); end

  def ungetc(c=T.unsafe(nil)); end
  DEINDENT_CLAUSE = ::T.let(nil, ::T.untyped)
  DLtype2Token = ::T.let(nil, ::T.untyped)
  ENINDENT_CLAUSE = ::T.let(nil, ::T.untyped)
  Ltype2Token = ::T.let(nil, ::T.untyped)
  PERCENT_LTYPE = ::T.let(nil, ::T.untyped)
  PERCENT_PAREN = ::T.let(nil, ::T.untyped)
end

class RubyLex::AlreadyDefinedToken
end

class RubyLex::AlreadyDefinedToken
end

class RubyLex::SyntaxError
end

class RubyLex::SyntaxError
end

class RubyLex::TerminateLineInput
end

class RubyLex::TerminateLineInput
end

class RubyLex::TkReading2TokenDuplicateError
end

class RubyLex::TkReading2TokenDuplicateError
end

class RubyLex::TkReading2TokenNoKey
end

class RubyLex::TkReading2TokenNoKey
end

class RubyLex::TkSymbol2TokenNoKey
end

class RubyLex::TkSymbol2TokenNoKey
end

class RubyLex
  extend ::Exception2MessageMapper
  def self.debug?(); end

  def self.debug_level(); end

  def self.debug_level=(debug_level); end

  def self.included(mod); end
end

module RubyToken
  def Token(token, value=T.unsafe(nil)); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  TkReading2Token = ::T.let(nil, ::T.untyped)
  TkSymbol2Token = ::T.let(nil, ::T.untyped)
  TokenDefinitions = ::T.let(nil, ::T.untyped)
end

class RubyToken::TkALIAS
end

class RubyToken::TkALIAS
end

class RubyToken::TkAMPER
end

class RubyToken::TkAMPER
end

class RubyToken::TkAND
end

class RubyToken::TkAND
end

class RubyToken::TkANDOP
end

class RubyToken::TkANDOP
end

class RubyToken::TkAREF
end

class RubyToken::TkAREF
end

class RubyToken::TkASET
end

class RubyToken::TkASET
end

class RubyToken::TkASSIGN
end

class RubyToken::TkASSIGN
end

class RubyToken::TkASSOC
end

class RubyToken::TkASSOC
end

class RubyToken::TkAT
end

class RubyToken::TkAT
end

class RubyToken::TkBACKQUOTE
end

class RubyToken::TkBACKQUOTE
end

class RubyToken::TkBACKSLASH
end

class RubyToken::TkBACKSLASH
end

class RubyToken::TkBACK_REF
end

class RubyToken::TkBACK_REF
end

class RubyToken::TkBEGIN
end

class RubyToken::TkBEGIN
end

class RubyToken::TkBITAND
end

class RubyToken::TkBITAND
end

class RubyToken::TkBITNOT
end

class RubyToken::TkBITNOT
end

class RubyToken::TkBITOR
end

class RubyToken::TkBITOR
end

class RubyToken::TkBITXOR
end

class RubyToken::TkBITXOR
end

class RubyToken::TkBREAK
end

class RubyToken::TkBREAK
end

class RubyToken::TkCASE
end

class RubyToken::TkCASE
end

class RubyToken::TkCLASS
end

class RubyToken::TkCLASS
end

class RubyToken::TkCMP
end

class RubyToken::TkCMP
end

class RubyToken::TkCOLON
end

class RubyToken::TkCOLON
end

class RubyToken::TkCOLON2
end

class RubyToken::TkCOLON2
end

class RubyToken::TkCOLON3
end

class RubyToken::TkCOLON3
end

class RubyToken::TkCOMMA
end

class RubyToken::TkCOMMA
end

class RubyToken::TkCOMMENT
end

class RubyToken::TkCOMMENT
end

class RubyToken::TkCONSTANT
end

class RubyToken::TkCONSTANT
end

class RubyToken::TkCVAR
end

class RubyToken::TkCVAR
end

class RubyToken::TkDEF
end

class RubyToken::TkDEF
end

class RubyToken::TkDEFINED
end

class RubyToken::TkDEFINED
end

class RubyToken::TkDIV
end

class RubyToken::TkDIV
end

class RubyToken::TkDO
end

class RubyToken::TkDO
end

class RubyToken::TkDOLLAR
end

class RubyToken::TkDOLLAR
end

class RubyToken::TkDOT
end

class RubyToken::TkDOT
end

class RubyToken::TkDOT2
end

class RubyToken::TkDOT2
end

class RubyToken::TkDOT3
end

class RubyToken::TkDOT3
end

class RubyToken::TkDREGEXP
end

class RubyToken::TkDREGEXP
end

class RubyToken::TkDSTRING
end

class RubyToken::TkDSTRING
end

class RubyToken::TkDXSTRING
end

class RubyToken::TkDXSTRING
end

class RubyToken::TkELSE
end

class RubyToken::TkELSE
end

class RubyToken::TkELSIF
end

class RubyToken::TkELSIF
end

class RubyToken::TkEND
end

class RubyToken::TkEND
end

class RubyToken::TkEND_OF_SCRIPT
end

class RubyToken::TkEND_OF_SCRIPT
end

class RubyToken::TkENSURE
end

class RubyToken::TkENSURE
end

class RubyToken::TkEQ
end

class RubyToken::TkEQ
end

class RubyToken::TkEQQ
end

class RubyToken::TkEQQ
end

class RubyToken::TkError
end

class RubyToken::TkError
end

class RubyToken::TkFALSE
end

class RubyToken::TkFALSE
end

class RubyToken::TkFID
end

class RubyToken::TkFID
end

class RubyToken::TkFLOAT
end

class RubyToken::TkFLOAT
end

class RubyToken::TkFOR
end

class RubyToken::TkFOR
end

class RubyToken::TkGEQ
end

class RubyToken::TkGEQ
end

class RubyToken::TkGT
end

class RubyToken::TkGT
end

class RubyToken::TkGVAR
end

class RubyToken::TkGVAR
end

class RubyToken::TkIDENTIFIER
end

class RubyToken::TkIDENTIFIER
end

class RubyToken::TkIF
end

class RubyToken::TkIF
end

class RubyToken::TkIF_MOD
end

class RubyToken::TkIF_MOD
end

class RubyToken::TkIN
end

class RubyToken::TkIN
end

class RubyToken::TkINTEGER
end

class RubyToken::TkINTEGER
end

class RubyToken::TkIVAR
end

class RubyToken::TkIVAR
end

class RubyToken::TkId
  def initialize(seek, line_no, char_no, name); end

  def name(); end
end

class RubyToken::TkId
end

class RubyToken::TkLBRACE
end

class RubyToken::TkLBRACE
end

class RubyToken::TkLBRACK
end

class RubyToken::TkLBRACK
end

class RubyToken::TkLEQ
end

class RubyToken::TkLEQ
end

class RubyToken::TkLPAREN
end

class RubyToken::TkLPAREN
end

class RubyToken::TkLSHFT
end

class RubyToken::TkLSHFT
end

class RubyToken::TkLT
end

class RubyToken::TkLT
end

class RubyToken::TkMATCH
end

class RubyToken::TkMATCH
end

class RubyToken::TkMINUS
end

class RubyToken::TkMINUS
end

class RubyToken::TkMOD
end

class RubyToken::TkMOD
end

class RubyToken::TkMODULE
end

class RubyToken::TkMODULE
end

class RubyToken::TkMULT
end

class RubyToken::TkMULT
end

class RubyToken::TkNEQ
end

class RubyToken::TkNEQ
end

class RubyToken::TkNEXT
end

class RubyToken::TkNEXT
end

class RubyToken::TkNIL
end

class RubyToken::TkNIL
end

class RubyToken::TkNL
end

class RubyToken::TkNL
end

class RubyToken::TkNMATCH
end

class RubyToken::TkNMATCH
end

class RubyToken::TkNOT
end

class RubyToken::TkNOT
end

class RubyToken::TkNOTOP
end

class RubyToken::TkNOTOP
end

class RubyToken::TkNTH_REF
end

class RubyToken::TkNTH_REF
end

class RubyToken::TkNode
  def node(); end
end

class RubyToken::TkNode
end

class RubyToken::TkOPASGN
  def initialize(seek, line_no, char_no, op); end

  def op(); end
end

class RubyToken::TkOPASGN
end

class RubyToken::TkOR
end

class RubyToken::TkOR
end

class RubyToken::TkOROP
end

class RubyToken::TkOROP
end

class RubyToken::TkOp
  def name(); end

  def name=(name); end
end

class RubyToken::TkOp
end

class RubyToken::TkPLUS
end

class RubyToken::TkPLUS
end

class RubyToken::TkPOW
end

class RubyToken::TkPOW
end

class RubyToken::TkQUESTION
end

class RubyToken::TkQUESTION
end

class RubyToken::TkRBRACE
end

class RubyToken::TkRBRACE
end

class RubyToken::TkRBRACK
end

class RubyToken::TkRBRACK
end

class RubyToken::TkRD_COMMENT
end

class RubyToken::TkRD_COMMENT
end

class RubyToken::TkREDO
end

class RubyToken::TkREDO
end

class RubyToken::TkREGEXP
end

class RubyToken::TkREGEXP
end

class RubyToken::TkRESCUE
end

class RubyToken::TkRESCUE
end

class RubyToken::TkRETRY
end

class RubyToken::TkRETRY
end

class RubyToken::TkRETURN
end

class RubyToken::TkRETURN
end

class RubyToken::TkRPAREN
end

class RubyToken::TkRPAREN
end

class RubyToken::TkRSHFT
end

class RubyToken::TkRSHFT
end

class RubyToken::TkSELF
end

class RubyToken::TkSELF
end

class RubyToken::TkSEMICOLON
end

class RubyToken::TkSEMICOLON
end

class RubyToken::TkSPACE
end

class RubyToken::TkSPACE
end

class RubyToken::TkSTAR
end

class RubyToken::TkSTAR
end

class RubyToken::TkSTRING
end

class RubyToken::TkSTRING
end

class RubyToken::TkSUPER
end

class RubyToken::TkSUPER
end

class RubyToken::TkSYMBEG
end

class RubyToken::TkSYMBEG
end

class RubyToken::TkSYMBOL
end

class RubyToken::TkSYMBOL
end

class RubyToken::TkTHEN
end

class RubyToken::TkTHEN
end

class RubyToken::TkTRUE
end

class RubyToken::TkTRUE
end

class RubyToken::TkUMINUS
end

class RubyToken::TkUMINUS
end

class RubyToken::TkUNDEF
end

class RubyToken::TkUNDEF
end

class RubyToken::TkUNLESS
end

class RubyToken::TkUNLESS
end

class RubyToken::TkUNLESS_MOD
end

class RubyToken::TkUNLESS_MOD
end

class RubyToken::TkUNTIL
end

class RubyToken::TkUNTIL
end

class RubyToken::TkUNTIL_MOD
end

class RubyToken::TkUNTIL_MOD
end

class RubyToken::TkUPLUS
end

class RubyToken::TkUPLUS
end

class RubyToken::TkUnknownChar
  def initialize(seek, line_no, char_no, id); end

  def name(); end
end

class RubyToken::TkUnknownChar
end

class RubyToken::TkVal
  def initialize(seek, line_no, char_no, value=T.unsafe(nil)); end

  def value(); end
end

class RubyToken::TkVal
end

class RubyToken::TkWHEN
end

class RubyToken::TkWHEN
end

class RubyToken::TkWHILE
end

class RubyToken::TkWHILE
end

class RubyToken::TkWHILE_MOD
end

class RubyToken::TkWHILE_MOD
end

class RubyToken::TkXSTRING
end

class RubyToken::TkXSTRING
end

class RubyToken::TkYIELD
end

class RubyToken::TkYIELD
end

class RubyToken::Tk__FILE__
end

class RubyToken::Tk__FILE__
end

class RubyToken::Tk__LINE__
end

class RubyToken::Tk__LINE__
end

class RubyToken::TkfLBRACE
end

class RubyToken::TkfLBRACE
end

class RubyToken::TkfLBRACK
end

class RubyToken::TkfLBRACK
end

class RubyToken::TkfLPAREN
end

class RubyToken::TkfLPAREN
end

class RubyToken::TklBEGIN
end

class RubyToken::TklBEGIN
end

class RubyToken::TklEND
end

class RubyToken::TklEND
end

class RubyToken::Token
  def char_no(); end

  def initialize(seek, line_no, char_no); end

  def line_no(); end

  def seek(); end
end

class RubyToken::Token
end

module RubyToken
  extend ::T::Sig
  def self.def_token(token_n, super_token=T.unsafe(nil), reading=T.unsafe(nil), *opts); end
end

class RubyVM
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class RubyVM::InstructionSequence
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def absolute_path(); end

  def base_label(); end

  def disasm(); end

  def disassemble(); end

  def each_child(); end

  def eval(); end

  def first_lineno(); end

  def label(); end

  def path(); end

  def to_a(); end

  def to_binary(*_); end

  def trace_points(); end
end

class RubyVM::InstructionSequence
  extend ::T::Sig
  def self.compile(*_); end

  def self.compile_file(*_); end

  def self.compile_option(); end

  def self.compile_option=(compile_option); end

  def self.disasm(_); end

  def self.disassemble(_); end

  def self.load_from_binary(_); end

  def self.load_from_binary_extra_data(_); end

  def self.of(_); end
end

class RubyVM
  extend ::T::Sig
  def self.stat(*_); end
end

class RuntimeError
  extend ::T::Sig
end

class Sanitize
  REGEX_PROTOCOL = ::T.let(nil, ::T.untyped)
  REGEX_UNSUITABLE_CHARS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sanitize::Config
  BASIC = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  RELAXED = ::T.let(nil, ::T.untyped)
  RESTRICTED = ::T.let(nil, ::T.untyped)
end

module Sanitize::Config
  extend ::T::Sig
end

module Sanitize::Transformers
  CleanCDATA = ::T.let(nil, ::T.untyped)
  CleanComment = ::T.let(nil, ::T.untyped)
  CleanDoctype = ::T.let(nil, ::T.untyped)
end

module Sanitize::Transformers::CSS
  extend ::T::Sig
end

class Sanitize::Transformers::CleanElement
  REGEX_DATA_ATTR = ::T.let(nil, ::T.untyped)
  UNSAFE_LIBXML_ATTRS_A = ::T.let(nil, ::T.untyped)
  UNSAFE_LIBXML_ATTRS_GLOBAL = ::T.let(nil, ::T.untyped)
  UNSAFE_LIBXML_ESCAPE_CHARS = ::T.let(nil, ::T.untyped)
  UNSAFE_LIBXML_ESCAPE_REGEX = ::T.let(nil, ::T.untyped)
end

module Sanitize::Transformers
  extend ::T::Sig
end

module SassC
  VERSION = ::T.let(nil, ::T.untyped)
end

class SassC::Engine
  OUTPUT_STYLES = ::T.let(nil, ::T.untyped)
end

module SassC::Native
  SassInputStyle = ::T.let(nil, ::T.untyped)
  SassOutputStyle = ::T.let(nil, ::T.untyped)
  SassSeparator = ::T.let(nil, ::T.untyped)
  SassTag = ::T.let(nil, ::T.untyped)
end

module SassC::Native::LibC
  extend ::T::Sig
end

module SassC::Native
  extend ::T::Sig
end

module SassC::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

class SassC::Rails::Importer
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  GLOB = ::T.let(nil, ::T.untyped)
  PREFIXS = ::T.let(nil, ::T.untyped)
end

module SassC::Rails::SassTemplate::Functions
  extend ::T::Sig
end

module SassC::Rails
  extend ::T::Sig
end

module SassC::Script::Functions
  extend ::T::Sig
end

class SassC::Script::Value::Bool
  FALSE = ::T.let(nil, ::T.untyped)
  TRUE = ::T.let(nil, ::T.untyped)
end

class SassC::Script::Value::Number
  CONVERSION_TABLE = ::T.let(nil, ::T.untyped)
  MUTUALLY_CONVERTIBLE = ::T.let(nil, ::T.untyped)
  NO_UNITS = ::T.let(nil, ::T.untyped)
  OPERATIONS = ::T.let(nil, ::T.untyped)
end

module SassC::Script::ValueConversion
  SEPARATORS = ::T.let(nil, ::T.untyped)
end

module SassC::Script::ValueConversion
  extend ::T::Sig
end

module SassC::Script
  extend ::T::Sig
end

module SassC::Util
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_VERSION_COMPONENTS = ::T.let(nil, ::T.untyped)
end

module SassC::Util
  extend ::T::Sig
end

module SassC
  extend ::T::Sig
end

ScanError = StringScanner::Error

class SchemaTest
  def test_schemas(); end
end

class ScriptError
  extend ::T::Sig
end

module SecureRandom
  BASE58_ALPHABET = ::T.let(nil, ::T.untyped)
end

module SecureRandom
  extend ::Random::Formatter
  extend ::T::Sig
  def self.bytes(n); end
end

class SecurityError
  extend ::T::Sig
end

module Selenium::WebDriver
  VERSION = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Atoms
  extend ::T::Sig
end

module Selenium::WebDriver::BridgeHelper
  extend ::T::Sig
end

module Selenium::WebDriver::Chrome::Bridge
  COMMANDS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Chrome::Bridge
  extend ::T::Sig
end

class Selenium::WebDriver::Chrome::Options
  KEY = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Chrome
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::DownloadsFiles
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::HasAddons
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::HasDebugger
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::HasLocation
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::HasNetworkConditions
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::HasNetworkConnection
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::HasPermissions
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::HasRemoteStatus
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::HasSessionId
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::HasTouchScreen
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::HasWebStorage
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::Rotatable
  ORIENTATIONS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::DriverExtensions::Rotatable
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::TakesScreenshot
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions::UploadsFiles
  extend ::T::Sig
end

module Selenium::WebDriver::DriverExtensions
  extend ::T::Sig
end

module Selenium::WebDriver::Edge
end

module Selenium::WebDriver::Edge::Bridge
  def commands(command); end

  def maximize_window(handle=T.unsafe(nil)); end

  def reposition_window(x, y, handle=T.unsafe(nil)); end

  def resize_window(width, height, handle=T.unsafe(nil)); end

  def send_keys_to_active_element(key); end

  def window_handle(); end

  def window_position(handle=T.unsafe(nil)); end

  def window_size(handle=T.unsafe(nil)); end
end

module Selenium::WebDriver::Edge::Bridge
  extend ::T::Sig
end

class Selenium::WebDriver::Edge::Driver
  include ::Selenium::WebDriver::DriverExtensions::TakesScreenshot
  def initialize(opts=T.unsafe(nil)); end
end

class Selenium::WebDriver::Edge::Driver
end

class Selenium::WebDriver::Edge::Options
  def add_extension_path(path); end

  def as_json(*_); end

  def extension_paths(); end

  def in_private(); end

  def in_private=(in_private); end

  def initialize(**opts); end

  def start_page(); end

  def start_page=(start_page); end
end

class Selenium::WebDriver::Edge::Options
end

class Selenium::WebDriver::Edge::Service
end

class Selenium::WebDriver::Edge::Service
end

module Selenium::WebDriver::Edge
  extend ::T::Sig
  def self.driver_path(); end

  def self.driver_path=(path); end
end

module Selenium::WebDriver::Error
  DEPRECATED_ERRORS = ::T.let(nil, ::T.untyped)
  ERRORS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Error::ServerError
  def initialize(response); end
end

class Selenium::WebDriver::Error::ServerError
end

module Selenium::WebDriver::Error
  extend ::T::Sig
end

module Selenium::WebDriver::FileReaper
  extend ::T::Sig
end

module Selenium::WebDriver::Firefox
  DEFAULT_ASSUME_UNTRUSTED_ISSUER = ::T.let(nil, ::T.untyped)
  DEFAULT_ENABLE_NATIVE_EVENTS = ::T.let(nil, ::T.untyped)
  DEFAULT_LOAD_NO_FOCUS_LIB = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DEFAULT_SECURE_SSL = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Binary
  def quit(); end

  def start_with(profile, profile_path, *args); end

  def wait(); end
  NO_FOCUS_LIBRARIES = ::T.let(nil, ::T.untyped)
  NO_FOCUS_LIBRARY_NAME = ::T.let(nil, ::T.untyped)
  QUIT_TIMEOUT = ::T.let(nil, ::T.untyped)
  WAIT_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Binary
  def self.path(); end

  def self.path=(path); end

  def self.reset_path!(); end

  def self.version(); end
end

module Selenium::WebDriver::Firefox::Driver
end

module Selenium::WebDriver::Firefox::Driver
  extend ::T::Sig
  def self.new(**opts); end
end

class Selenium::WebDriver::Firefox::Extension
  def initialize(path); end

  def write_to(extensions_dir); end
  NAMESPACE = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Extension
end

class Selenium::WebDriver::Firefox::Launcher
  def assert_profile(); end

  def connect_until_stable(); end

  def create_profile(); end

  def fetch_profile(); end

  def find_free_port(); end

  def initialize(binary, port, profile=T.unsafe(nil)); end

  def launch(); end

  def quit(); end

  def socket_lock(); end

  def start(); end

  def url(); end
  SOCKET_LOCK_TIMEOUT = ::T.let(nil, ::T.untyped)
  STABLE_CONNECTION_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Launcher
end

module Selenium::WebDriver::Firefox::Legacy
end

class Selenium::WebDriver::Firefox::Legacy::Driver
  include ::Selenium::WebDriver::DriverExtensions::TakesScreenshot
  def initialize(opts=T.unsafe(nil)); end
end

class Selenium::WebDriver::Firefox::Legacy::Driver
end

module Selenium::WebDriver::Firefox::Legacy
  extend ::T::Sig
end

module Selenium::WebDriver::Firefox::Marionette
end

module Selenium::WebDriver::Firefox::Marionette::Bridge
  def commands(command); end

  def install_addon(path, temporary); end

  def uninstall_addon(id); end
  COMMANDS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Firefox::Marionette::Bridge
  extend ::T::Sig
end

class Selenium::WebDriver::Firefox::Marionette::Driver
  include ::Selenium::WebDriver::DriverExtensions::HasAddons
  include ::Selenium::WebDriver::DriverExtensions::HasWebStorage
  include ::Selenium::WebDriver::DriverExtensions::TakesScreenshot
  def initialize(opts=T.unsafe(nil)); end
end

class Selenium::WebDriver::Firefox::Marionette::Driver
end

module Selenium::WebDriver::Firefox::Marionette
  extend ::T::Sig
end

class Selenium::WebDriver::Firefox::Options
  def add_argument(arg); end

  def add_option(name, value); end

  def add_preference(name, value); end

  def args(); end

  def as_json(*_); end

  def binary(); end

  def binary=(binary); end

  def headless!(); end

  def initialize(**opts); end

  def log_level(); end

  def log_level=(log_level); end

  def options(); end

  def prefs(); end

  def profile(); end

  def profile=(profile); end
  KEY = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Options
end

class Selenium::WebDriver::Firefox::Profile
  include ::Selenium::WebDriver::ProfileHelper
  def []=(key, value); end

  def add_extension(path, name=T.unsafe(nil)); end

  def add_webdriver_extension(); end

  def assume_untrusted_certificate_issuer=(bool); end

  def assume_untrusted_certificate_issuer?(); end

  def encoded(); end

  def initialize(model=T.unsafe(nil)); end

  def layout_on_disk(); end

  def load_no_focus_lib=(load_no_focus_lib); end

  def load_no_focus_lib?(); end

  def log_file(); end

  def log_file=(file); end

  def name(); end

  def native_events=(native_events); end

  def native_events?(); end

  def port=(port); end

  def proxy=(proxy); end

  def secure_ssl=(secure_ssl); end

  def secure_ssl?(); end
  VALID_PREFERENCE_TYPES = ::T.let(nil, ::T.untyped)
  WEBDRIVER_EXTENSION_PATH = ::T.let(nil, ::T.untyped)
  WEBDRIVER_PREFS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Profile
  extend ::Selenium::WebDriver::ProfileHelper::ClassMethods
  def self.default_preferences(); end

  def self.from_name(name); end

  def self.ini(); end
end

class Selenium::WebDriver::Firefox::ProfilesIni
  def [](name); end

  def refresh(); end
end

class Selenium::WebDriver::Firefox::ProfilesIni
end

class Selenium::WebDriver::Firefox::Service
end

class Selenium::WebDriver::Firefox::Service
end

module Selenium::WebDriver::Firefox::Util
end

module Selenium::WebDriver::Firefox::Util
  extend ::T::Sig
  def self.app_data_path(); end

  def self.stringified?(str); end
end

module Selenium::WebDriver::Firefox
  extend ::T::Sig
  def self.driver_path(); end

  def self.driver_path=(path); end

  def self.path=(path); end
end

module Selenium::WebDriver::HTML5::SharedWebStorage
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module Selenium::WebDriver::HTML5::SharedWebStorage
  extend ::T::Sig
end

module Selenium::WebDriver::HTML5
  extend ::T::Sig
end

module Selenium::WebDriver::IE
end

class Selenium::WebDriver::IE::Driver
  include ::Selenium::WebDriver::DriverExtensions::HasWebStorage
  include ::Selenium::WebDriver::DriverExtensions::TakesScreenshot
  def initialize(opts=T.unsafe(nil)); end
end

class Selenium::WebDriver::IE::Driver
end

class Selenium::WebDriver::IE::Options
  def add_argument(arg); end

  def add_option(name, value); end

  def args(); end

  def as_json(*_); end

  def browser_attach_timeout(); end

  def browser_attach_timeout=(value); end

  def element_scroll_behavior(); end

  def element_scroll_behavior=(value); end

  def ensure_clean_session(); end

  def ensure_clean_session=(value); end

  def file_upload_dialog_timeout(); end

  def file_upload_dialog_timeout=(value); end

  def force_create_process_api(); end

  def force_create_process_api=(value); end

  def force_shell_windows_api(); end

  def force_shell_windows_api=(value); end

  def full_page_screenshot(); end

  def full_page_screenshot=(value); end

  def ignore_protected_mode_settings(); end

  def ignore_protected_mode_settings=(value); end

  def ignore_zoom_level(); end

  def ignore_zoom_level=(value); end

  def initial_browser_url(); end

  def initial_browser_url=(value); end

  def initialize(**opts); end

  def native_events(); end

  def native_events=(value); end

  def options(); end

  def persistent_hover(); end

  def persistent_hover=(value); end

  def require_window_focus(); end

  def require_window_focus=(value); end

  def use_per_process_proxy(); end

  def use_per_process_proxy=(value); end

  def validate_cookie_document_type(); end

  def validate_cookie_document_type=(value); end
  CAPABILITIES = ::T.let(nil, ::T.untyped)
  KEY = ::T.let(nil, ::T.untyped)
  SCROLL_BOTTOM = ::T.let(nil, ::T.untyped)
  SCROLL_TOP = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::IE::Options
end

class Selenium::WebDriver::IE::Service
end

class Selenium::WebDriver::IE::Service
end

module Selenium::WebDriver::IE
  extend ::T::Sig
  def self.driver_path(); end

  def self.driver_path=(path); end
end

module Selenium::WebDriver::Interactions
  KEY = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  SOURCE_TYPES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::Interaction
  PAUSE = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::KeyInput
  SUBTYPES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::PointerInput
  KIND = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::PointerMove
  ORIGINS = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  VIEWPORT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::PointerPress
  BUTTONS = ::T.let(nil, ::T.untyped)
  DIRECTIONS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Interactions
  extend ::T::Sig
end

module Selenium::WebDriver::KeyActions
  extend ::T::Sig
end

class Selenium::WebDriver::Keyboard
  MODIFIERS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Keys
  KEYS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Keys
  extend ::T::Sig
end

class Selenium::WebDriver::Manager
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Platform
  extend ::T::Sig
end

module Selenium::WebDriver::PointerActions
  extend ::T::Sig
end

class Selenium::WebDriver::PortProber
  IGNORED_ERRORS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::ProfileHelper::ClassMethods
  extend ::T::Sig
end

module Selenium::WebDriver::ProfileHelper
  extend ::T::Sig
end

class Selenium::WebDriver::Proxy
  ALLOWED = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Remote
end

class Selenium::WebDriver::Remote::Bridge
  include ::Selenium::WebDriver::Atoms
  include ::Selenium::WebDriver::BridgeHelper
  def browser(); end

  def capabilities(); end

  def context(); end

  def context=(context); end

  def create_session(desired_capabilities, options=T.unsafe(nil)); end

  def dialect(); end

  def file_detector(); end

  def file_detector=(file_detector); end

  def http(); end

  def http=(http); end

  def initialize(opts=T.unsafe(nil)); end

  def session_id(); end
  COMMANDS = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Bridge
  def self.handshake(**opts); end
end

class Selenium::WebDriver::Remote::Capabilities
  def ==(other); end

  def [](key); end

  def []=(key, value); end

  def as_json(*_); end

  def browser_name(); end

  def browser_name=(value); end

  def capabilities(); end

  def css_selectors_enabled(); end

  def css_selectors_enabled=(value); end

  def css_selectors_enabled?(); end

  def eql?(other); end

  def firefox_profile(); end

  def firefox_profile=(value); end

  def initialize(opts=T.unsafe(nil)); end

  def javascript_enabled(); end

  def javascript_enabled=(value); end

  def javascript_enabled?(); end

  def merge!(other); end

  def native_events(); end

  def native_events=(value); end

  def native_events?(); end

  def platform(); end

  def platform=(value); end

  def proxy(); end

  def proxy=(proxy); end

  def rotatable(); end

  def rotatable=(value); end

  def rotatable?(); end

  def takes_screenshot(); end

  def takes_screenshot=(value); end

  def takes_screenshot?(); end

  def to_json(*_); end

  def version(); end

  def version=(value); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Capabilities
  def self.chrome(opts=T.unsafe(nil)); end

  def self.edge(opts=T.unsafe(nil)); end

  def self.firefox(opts=T.unsafe(nil)); end

  def self.firefox_legacy(opts=T.unsafe(nil)); end

  def self.htmlunit(opts=T.unsafe(nil)); end

  def self.htmlunitwithjs(opts=T.unsafe(nil)); end

  def self.ie(opts=T.unsafe(nil)); end

  def self.internet_explorer(opts=T.unsafe(nil)); end

  def self.json_create(data); end

  def self.phantomjs(opts=T.unsafe(nil)); end

  def self.safari(opts=T.unsafe(nil)); end
end

class Selenium::WebDriver::Remote::Driver
  include ::Selenium::WebDriver::DriverExtensions::UploadsFiles
  include ::Selenium::WebDriver::DriverExtensions::TakesScreenshot
  include ::Selenium::WebDriver::DriverExtensions::HasSessionId
  include ::Selenium::WebDriver::DriverExtensions::Rotatable
  include ::Selenium::WebDriver::DriverExtensions::HasRemoteStatus
  include ::Selenium::WebDriver::DriverExtensions::HasWebStorage
  def initialize(opts=T.unsafe(nil)); end
end

class Selenium::WebDriver::Remote::Driver
end

module Selenium::WebDriver::Remote::Http
end

class Selenium::WebDriver::Remote::Http::Common
  def call(verb, url, command_hash); end

  def close(); end

  def quit_errors(); end

  def server_url=(server_url); end

  def timeout(); end

  def timeout=(timeout); end
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DEFAULT_HEADERS = ::T.let(nil, ::T.untyped)
  MAX_REDIRECTS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Http::Common
end

class Selenium::WebDriver::Remote::Http::Default
  def initialize(open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil)); end

  def open_timeout(); end

  def open_timeout=(open_timeout); end

  def proxy=(proxy); end

  def read_timeout(); end

  def read_timeout=(read_timeout); end

  def timeout=(value); end
  MAX_RETRIES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Http::Default
end

module Selenium::WebDriver::Remote::Http
  extend ::T::Sig
end

module Selenium::WebDriver::Remote::OSS
end

class Selenium::WebDriver::Remote::OSS::Bridge
  def accept_alert(); end

  def action(); end

  def active_element(); end

  def add_cookie(cookie); end

  def alert=(keys); end

  def alert_text(); end

  def authentication(credentials); end

  def available_log_types(); end

  def clear_element(element); end

  def clear_local_storage(); end

  def clear_session_storage(); end

  def click(); end

  def click_element(element); end

  def close(); end

  def context_click(); end

  def cookies(); end

  def delete_all_cookies(); end

  def delete_cookie(name); end

  def dismiss_alert(); end

  def double_click(); end

  def drag_element(element, right_by, down_by); end

  def element_attribute(element, name); end

  def element_displayed?(element); end

  def element_enabled?(element); end

  def element_location(element); end

  def element_location_once_scrolled_into_view(element); end

  def element_property(element, name); end

  def element_rect(element); end

  def element_selected?(element); end

  def element_size(element); end

  def element_tag_name(element); end

  def element_text(element); end

  def element_value(element); end

  def element_value_of_css_property(element, prop); end

  def execute_async_script(script, *args); end

  def execute_script(script, *args); end

  def find_element_by(how, what, parent=T.unsafe(nil)); end

  def find_elements_by(how, what, parent=T.unsafe(nil)); end

  def get(url); end

  def go_back(); end

  def go_forward(); end

  def implicit_wait_timeout=(milliseconds); end

  def initialize(capabilities, session_id, **opts); end

  def keyboard(); end

  def local_storage_item(key, value=T.unsafe(nil)); end

  def local_storage_keys(); end

  def local_storage_size(); end

  def location(); end

  def log(type); end

  def manage(); end

  def maximize_window(handle=T.unsafe(nil)); end

  def mouse(); end

  def mouse_down(); end

  def mouse_move_to(element, x=T.unsafe(nil), y=T.unsafe(nil)); end

  def mouse_up(); end

  def network_connection(); end

  def network_connection=(type); end

  def page_source(); end

  def quit(); end

  def refresh(); end

  def remove_local_storage_item(key); end

  def remove_session_storage_item(key); end

  def reposition_window(x, y, handle=T.unsafe(nil)); end

  def resize_window(width, height, handle=T.unsafe(nil)); end

  def screen_orientation(); end

  def screen_orientation=(orientation); end

  def screenshot(); end

  def script_timeout=(milliseconds); end

  def send_keys_to_active_element(key); end

  def send_keys_to_element(element, keys); end

  def session_capabilities(); end

  def session_storage_item(key, value=T.unsafe(nil)); end

  def session_storage_keys(); end

  def session_storage_size(); end

  def set_location(lat, lon, alt); end

  def status(); end

  def submit_element(element); end

  def switch_to_active_element(); end

  def switch_to_default_content(); end

  def switch_to_frame(id); end

  def switch_to_parent_frame(); end

  def switch_to_window(name); end

  def timeout(type, milliseconds); end

  def title(); end

  def touch_double_tap(element); end

  def touch_down(x, y); end

  def touch_element_flick(element, right_by, down_by, speed); end

  def touch_flick(xspeed, yspeed); end

  def touch_long_press(element); end

  def touch_move(x, y); end

  def touch_scroll(element, x, y); end

  def touch_single_tap(element); end

  def touch_up(x, y); end

  def upload(local_file); end

  def url(); end

  def window_handle(); end

  def window_handles(); end

  def window_position(handle=T.unsafe(nil)); end

  def window_size(handle=T.unsafe(nil)); end
  COMMANDS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::OSS::Bridge
end

module Selenium::WebDriver::Remote::OSS
  extend ::T::Sig
end

class Selenium::WebDriver::Remote::Response
  def [](key); end

  def code(); end

  def error(); end

  def error_message(); end

  def initialize(code, payload=T.unsafe(nil)); end

  def payload(); end

  def payload=(payload); end
  STACKTRACE_KEY = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Response
end

module Selenium::WebDriver::Remote::W3C
end

class Selenium::WebDriver::Remote::W3C::Bridge
  def accept_alert(); end

  def action(async=T.unsafe(nil)); end

  def actions(async=T.unsafe(nil)); end

  def active_element(); end

  def add_cookie(cookie); end

  def alert=(keys); end

  def alert_text(); end

  def clear_element(element); end

  def clear_local_storage(); end

  def clear_session_storage(); end

  def click_element(element); end

  def close(); end

  def cookie(name); end

  def cookies(); end

  def delete_all_cookies(); end

  def delete_cookie(name); end

  def dismiss_alert(); end

  def drag_element(element, right_by, down_by); end

  def element_attribute(element, name); end

  def element_displayed?(element); end

  def element_enabled?(element); end

  def element_location(element); end

  def element_location_once_scrolled_into_view(element); end

  def element_property(element, name); end

  def element_rect(element); end

  def element_selected?(element); end

  def element_size(element); end

  def element_tag_name(element); end

  def element_text(element); end

  def element_value(element); end

  def element_value_of_css_property(element, prop); end

  def execute_async_script(script, *args); end

  def execute_script(script, *args); end

  def find_element_by(how, what, parent=T.unsafe(nil)); end

  def find_elements_by(how, what, parent=T.unsafe(nil)); end

  def full_screen_window(); end

  def get(url); end

  def go_back(); end

  def go_forward(); end

  def implicit_wait_timeout=(milliseconds); end

  def initialize(capabilities, session_id, **opts); end

  def keyboard(); end

  def local_storage_item(key, value=T.unsafe(nil)); end

  def local_storage_keys(); end

  def local_storage_size(); end

  def location(); end

  def manage(); end

  def maximize_window(handle=T.unsafe(nil)); end

  def minimize_window(); end

  def mouse(); end

  def network_connection(); end

  def network_connection=(_type); end

  def new_window(type); end

  def page_source(); end

  def quit(); end

  def refresh(); end

  def release_actions(); end

  def remove_local_storage_item(key); end

  def remove_session_storage_item(key); end

  def reposition_window(x, y); end

  def resize_window(width, height, handle=T.unsafe(nil)); end

  def screen_orientation(); end

  def screen_orientation=(orientation); end

  def screenshot(); end

  def script_timeout=(milliseconds); end

  def send_actions(data); end

  def send_keys_to_element(element, keys); end

  def session_storage_item(key, value=T.unsafe(nil)); end

  def session_storage_keys(); end

  def session_storage_size(); end

  def set_location(_lat, _lon, _alt); end

  def set_window_rect(x: T.unsafe(nil), y: T.unsafe(nil), width: T.unsafe(nil), height: T.unsafe(nil)); end

  def status(); end

  def submit_element(element); end

  def switch_to_active_element(); end

  def switch_to_default_content(); end

  def switch_to_frame(id); end

  def switch_to_parent_frame(); end

  def switch_to_window(name); end

  def timeout(type, milliseconds); end

  def title(); end

  def touch_double_tap(element); end

  def touch_down(x, y); end

  def touch_element_flick(element, right_by, down_by, speed); end

  def touch_flick(xspeed, yspeed); end

  def touch_long_press(element); end

  def touch_move(x, y); end

  def touch_scroll(element, x, y); end

  def touch_single_tap(element); end

  def touch_up(x, y); end

  def upload(local_file); end

  def url(); end

  def window_handle(); end

  def window_handles(); end

  def window_position(); end

  def window_rect(); end

  def window_size(handle=T.unsafe(nil)); end
  COMMANDS = ::T.let(nil, ::T.untyped)
  ESCAPE_CSS_REGEXP = ::T.let(nil, ::T.untyped)
  QUIT_ERRORS = ::T.let(nil, ::T.untyped)
  UNICODE_CODE_POINT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::W3C::Bridge
end

class Selenium::WebDriver::Remote::W3C::Capabilities
  def ==(other); end

  def [](key); end

  def []=(key, value); end

  def accept_insecure_certs(); end

  def accept_insecure_certs=(value); end

  def accessibility_checks(); end

  def accessibility_checks=(value); end

  def as_json(*_); end

  def browser_name(); end

  def browser_name=(value); end

  def browser_version(); end

  def browser_version=(value); end

  def capabilities(); end

  def device(); end

  def device=(value); end

  def eql?(other); end

  def implicit_timeout(); end

  def implicit_timeout=(value); end

  def initialize(opts=T.unsafe(nil)); end

  def merge!(other); end

  def page_load_strategy(); end

  def page_load_strategy=(value); end

  def page_load_timeout(); end

  def page_load_timeout=(value); end

  def platform(); end

  def platform=(value); end

  def platform_name(); end

  def platform_name=(value); end

  def proxy(); end

  def proxy=(proxy); end

  def remote_session_id(); end

  def remote_session_id=(value); end

  def script_timeout(); end

  def script_timeout=(value); end

  def set_window_rect(); end

  def set_window_rect=(value); end

  def strict_file_interactability(); end

  def strict_file_interactability=(value); end

  def timeouts(); end

  def timeouts=(value); end

  def to_json(*_); end

  def unhandled_prompt_behavior(); end

  def unhandled_prompt_behavior=(value); end

  def version(); end

  def version=(value); end
  EXTENSION_CAPABILITY_PATTERN = ::T.let(nil, ::T.untyped)
  KNOWN = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::W3C::Capabilities
  def self.edge(opts=T.unsafe(nil)); end

  def self.ff(opts=T.unsafe(nil)); end

  def self.firefox(opts=T.unsafe(nil)); end

  def self.from_oss(oss_capabilities); end

  def self.json_create(data); end
end

module Selenium::WebDriver::Remote::W3C
  extend ::T::Sig
end

module Selenium::WebDriver::Remote
  extend ::T::Sig
end

module Selenium::WebDriver::Safari
end

module Selenium::WebDriver::Safari::Bridge
  def attach_debugger(); end

  def commands(command); end

  def permissions(); end

  def permissions=(permissions); end
  COMMANDS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Safari::Bridge
  extend ::T::Sig
end

class Selenium::WebDriver::Safari::Driver
  include ::Selenium::WebDriver::DriverExtensions::HasDebugger
  include ::Selenium::WebDriver::DriverExtensions::HasPermissions
  include ::Selenium::WebDriver::DriverExtensions::TakesScreenshot
  def initialize(opts=T.unsafe(nil)); end
end

class Selenium::WebDriver::Safari::Driver
end

class Selenium::WebDriver::Safari::Options
  def as_json(*_); end

  def automatic_inspection(); end

  def automatic_inspection=(automatic_inspection); end

  def automatic_profiling(); end

  def automatic_profiling=(automatic_profiling); end

  def initialize(**opts); end
end

class Selenium::WebDriver::Safari::Options
end

class Selenium::WebDriver::Safari::Service
end

class Selenium::WebDriver::Safari::Service
end

module Selenium::WebDriver::Safari
  extend ::T::Sig
  def self.driver_path(); end

  def self.driver_path=(path); end

  def self.path(); end

  def self.path=(path); end

  def self.technology_preview(); end

  def self.technology_preview!(); end
end

module Selenium::WebDriver::SearchContext
  FINDERS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::SearchContext
  extend ::T::Sig
end

class Selenium::WebDriver::Service
  SOCKET_LOCK_TIMEOUT = ::T.let(nil, ::T.untyped)
  START_TIMEOUT = ::T.let(nil, ::T.untyped)
  STOP_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::SocketPoller
  CONNECTED_ERRORS = ::T.let(nil, ::T.untyped)
  CONNECT_TIMEOUT = ::T.let(nil, ::T.untyped)
  NOT_CONNECTED_ERRORS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Support
end

class Selenium::WebDriver::Support::AbstractEventListener
  def after_change_value_of(element, driver); end

  def after_click(element, driver); end

  def after_close(driver); end

  def after_execute_script(script, driver); end

  def after_find(by, what, driver); end

  def after_navigate_back(driver); end

  def after_navigate_forward(driver); end

  def after_navigate_to(url, driver); end

  def after_quit(driver); end

  def before_change_value_of(element, driver); end

  def before_click(element, driver); end

  def before_close(driver); end

  def before_execute_script(script, driver); end

  def before_find(by, what, driver); end

  def before_navigate_back(driver); end

  def before_navigate_forward(driver); end

  def before_navigate_to(url, driver); end

  def before_quit(driver); end
end

class Selenium::WebDriver::Support::AbstractEventListener
end

class Selenium::WebDriver::Support::BlockEventListener
  def initialize(callback); end

  def method_missing(meth, *args); end
end

class Selenium::WebDriver::Support::BlockEventListener
end

class Selenium::WebDriver::Support::Color
  def ==(other); end

  def alpha(); end

  def blue(); end

  def eql?(other); end

  def green(); end

  def hex(); end

  def initialize(red, green, blue, alpha=T.unsafe(nil)); end

  def red(); end

  def rgb(); end

  def rgba(); end
  HEX3_PATTERN = ::T.let(nil, ::T.untyped)
  HEX_PATTERN = ::T.let(nil, ::T.untyped)
  HSLA_PATTERN = ::T.let(nil, ::T.untyped)
  HSL_PATTERN = ::T.let(nil, ::T.untyped)
  RGBA_PATTERN = ::T.let(nil, ::T.untyped)
  RGBA_PCT_PATTERN = ::T.let(nil, ::T.untyped)
  RGB_PATTERN = ::T.let(nil, ::T.untyped)
  RGB_PCT_PATTERN = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Support::Color
  def self.from_hsl(h, s, l, a); end

  def self.from_string(str); end

  def self.hue_to_rgb(lum1, lum2, hue); end
end

module Selenium::WebDriver::Support::Escaper
end

module Selenium::WebDriver::Support::Escaper
  extend ::T::Sig
  def self.escape(str); end
end

class Selenium::WebDriver::Support::EventFiringBridge
  def clear_element(ref); end

  def click_element(ref); end

  def close(); end

  def execute_script(script, *args); end

  def find_element_by(how, what, parent=T.unsafe(nil)); end

  def find_elements_by(how, what, parent=T.unsafe(nil)); end

  def get(url); end

  def go_back(); end

  def go_forward(); end

  def initialize(delegate, listener); end

  def quit(); end

  def send_keys_to_element(ref, keys); end
end

class Selenium::WebDriver::Support::EventFiringBridge
end

class Selenium::WebDriver::Support::Select
  def deselect_all(); end

  def deselect_by(how, what); end

  def first_selected_option(); end

  def initialize(element); end

  def multiple?(); end

  def options(); end

  def select_all(); end

  def select_by(how, what); end

  def selected_options(); end
end

class Selenium::WebDriver::Support::Select
end

module Selenium::WebDriver::Support
  extend ::T::Sig
end

class Selenium::WebDriver::TouchScreen
  FLICK_SPEED = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Wait
  DEFAULT_INTERVAL = ::T.let(nil, ::T.untyped)
  DEFAULT_TIMEOUT = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Zipper
  EXTENSIONS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Zipper
  extend ::T::Sig
end

module Selenium::WebDriver
  extend ::T::Sig
end

module Selenium
  extend ::T::Sig
end

class Service
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Service
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

module Services
  extend ::T::Sig
end

class Set
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def ==(other); end

  def ===(o); end

  def compare_by_identity(); end

  def compare_by_identity?(); end

  def divide(&func); end

  def eql?(o); end

  def flatten_merge(set, seen=T.unsafe(nil)); end

  def pretty_print(pp); end

  def pretty_print_cycle(pp); end

  def reset(); end
  InspectKey = ::T.let(nil, ::T.untyped)
end

class Set
  extend ::T::Sig
end

module Shellwords
end

module Shellwords
  extend ::T::Sig
  def self.escape(str); end

  def self.join(array); end

  def self.shellescape(str); end

  def self.shelljoin(array); end

  def self.shellsplit(line); end

  def self.shellwords(line); end

  def self.split(line); end
end

module Shoulda::Matchers
  TERMINAL_MAX_WIDTH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Shoulda::Matchers::ActionController
  extend ::T::Sig
end

module Shoulda::Matchers::ActiveModel
  extend ::T::Sig
end

module Shoulda::Matchers::ActiveRecord
  extend ::T::Sig
end

module Shoulda::Matchers::Doublespeak::DoubleImplementationRegistry
  extend ::T::Sig
end

module Shoulda::Matchers::Doublespeak
  extend ::T::Sig
end

module Shoulda::Matchers::Independent
  extend ::T::Sig
end

module Shoulda::Matchers::Integrations::Inclusion
  extend ::T::Sig
end

class Shoulda::Matchers::Integrations::Libraries::Rails
  SUB_LIBRARIES = ::T.let(nil, ::T.untyped)
end

module Shoulda::Matchers::Integrations::Libraries
  extend ::T::Sig
end

module Shoulda::Matchers::Integrations::Rails
  extend ::T::Sig
end

module Shoulda::Matchers::Integrations::TestFrameworks
  extend ::T::Sig
end

module Shoulda::Matchers::Integrations
  extend ::T::Sig
end

class Shoulda::Matchers::Line
  OFFSETS = ::T.let(nil, ::T.untyped)
end

module Shoulda::Matchers::RailsShim
  extend ::T::Sig
end

module Shoulda::Matchers::Routing
  extend ::T::Sig
end

class Shoulda::Matchers::Text
  LIST_ITEM_REGEXP = ::T.let(nil, ::T.untyped)
end

module Shoulda::Matchers::Util
  extend ::T::Sig
end

module Shoulda::Matchers::WordWrap
  TERMINAL_WIDTH = ::T.let(nil, ::T.untyped)
end

module Shoulda::Matchers::WordWrap
  extend ::T::Sig
end

module Shoulda::Matchers
  extend ::T::Sig
end

module Shoulda
  extend ::T::Sig
end

module Signal
  extend ::T::Sig
end

class SignalException
  def signm(); end

  def signo(); end
end

class SignalException
  extend ::T::Sig
end

module SimpleCov
  VERSION = ::T.let(nil, ::T.untyped)
end

module SimpleCov::CommandGuesser
  extend ::T::Sig
end

module SimpleCov::Configuration
  extend ::T::Sig
end

module SimpleCov::ExitCodes
  EXCEPTION = ::T.let(nil, ::T.untyped)
  MAXIMUM_COVERAGE_DROP = ::T.let(nil, ::T.untyped)
  MINIMUM_COVERAGE = ::T.let(nil, ::T.untyped)
  SUCCESS = ::T.let(nil, ::T.untyped)
end

module SimpleCov::ExitCodes
  extend ::T::Sig
end

class SimpleCov::Formatter::HTMLFormatter
  VERSION = ::T.let(nil, ::T.untyped)
end

module SimpleCov::Formatter::MultiFormatter::InstanceMethods
  extend ::T::Sig
end

module SimpleCov::Formatter
  extend ::T::Sig
end

module SimpleCov::LastRun
  extend ::T::Sig
end

class SimpleCov::LinesClassifier
  COMMENT_LINE = ::T.let(nil, ::T.untyped)
  NOT_RELEVANT = ::T.let(nil, ::T.untyped)
  RELEVANT = ::T.let(nil, ::T.untyped)
  WHITESPACE_LINE = ::T.let(nil, ::T.untyped)
  WHITESPACE_OR_COMMENT_LINE = ::T.let(nil, ::T.untyped)
end

module SimpleCov::RawCoverage
  extend ::T::Sig
end

module SimpleCov::ResultMerger
  extend ::T::Sig
end

module SimpleCov
  extend ::T::Sig
end

class SimpleDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class SimpleDelegator
  extend ::T::Sig
end

module SingleForwardable
  def def_delegator(accessor, method, ali=T.unsafe(nil)); end

  def def_delegators(accessor, *methods); end

  def def_single_delegator(accessor, method, ali=T.unsafe(nil)); end

  def def_single_delegators(accessor, *methods); end

  def delegate(hash); end

  def single_delegate(hash); end
end

module SingleForwardable
  extend ::T::Sig
end

module SingleTest
  CMD_LINE_MATCHER = ::T.let(nil, ::T.untyped)
end

module SingleTest
  extend ::T::Sig
end

module Singleton
  def _dump(depth=T.unsafe(nil)); end

  def clone(); end

  def dup(); end
end

module Singleton::SingletonClassMethods
  def _load(str); end

  def clone(); end
end

module Singleton::SingletonClassMethods
  extend ::T::Sig
end

module Singleton
  extend ::T::Sig
  def self.__init__(klass); end
end

SizedQueue = Thread::SizedQueue

class Socket
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  SO_BPF_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Socket::AncillaryData
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Socket::AncillaryData
  extend ::T::Sig
end

module Socket::Constants
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  SO_BPF_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

module Socket::Constants
  extend ::T::Sig
end

class Socket::Ifaddr
  extend ::T::Sig
end

class Socket::Option
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Socket::Option
  extend ::T::Sig
end

class Socket::UDPSource
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Socket::UDPSource
  extend ::T::Sig
end

class Socket
  extend ::T::Sig
end

class SocketError
  extend ::T::Sig
end

class Sorbet
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Sorbet::Private::ConstantLookupCache
  def all_module_aliases(); end

  def all_module_names(); end

  def all_named_modules(); end

  def class_by_name(name); end

  def name_by_class(klass); end
  DEPRECATED_CONSTANTS = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::ConstantLookupCache::ConstantEntry
  def aliases(); end

  def aliases=(_); end

  def const(); end

  def const=(_); end

  def const_name(); end

  def const_name=(_); end

  def found_name(); end

  def found_name=(_); end

  def owner(); end

  def owner=(_); end

  def primary_name(); end

  def primary_name=(_); end
end

class Sorbet::Private::ConstantLookupCache::ConstantEntry
  def self.[](*_); end

  def self.members(); end
end

class Sorbet::Private::ConstantLookupCache
end

class Sorbet::Private::CreateConfig
  include ::Sorbet::Private::StepInterface
  SORBET_CONFIG_FILE = ::T.let(nil, ::T.untyped)
  SORBET_DIR = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::CreateConfig
  def self.main(); end

  def self.output_file(); end
end

class Sorbet::Private::FetchRBIs
  include ::Sorbet::Private::StepInterface
  HEADER = ::T.let(nil, ::T.untyped)
  RBI_CACHE_DIR = ::T.let(nil, ::T.untyped)
  SORBET_CONFIG_FILE = ::T.let(nil, ::T.untyped)
  SORBET_DIR = ::T.let(nil, ::T.untyped)
  SORBET_RBI_LIST = ::T.let(nil, ::T.untyped)
  SORBET_RBI_SORBET_TYPED = ::T.let(nil, ::T.untyped)
  SORBET_TYPED_REPO = ::T.let(nil, ::T.untyped)
  SORBET_TYPED_REVISION = ::T.let(nil, ::T.untyped)
  XDG_CACHE_HOME = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::FetchRBIs
  def self.fetch_sorbet_typed(); end

  def self.main(); end

  def self.matching_version_directories(root, version); end

  def self.output_file(); end

  def self.paths_for_gem_version(gemspec); end

  def self.paths_for_ruby_version(ruby_version); end

  def self.vendor_rbis_within_paths(vendor_paths); end
end

class Sorbet::Private::FindGemRBIs
  include ::Sorbet::Private::StepInterface
  GEM_DIR = ::T.let(nil, ::T.untyped)
  HEADER = ::T.let(nil, ::T.untyped)
  RBI_CACHE_DIR = ::T.let(nil, ::T.untyped)
  XDG_CACHE_HOME = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::FindGemRBIs
  def self.main(); end

  def self.output_file(); end

  def self.paths_within_gem_sources(gemspec); end
end

module Sorbet::Private::GemGeneratorTracepoint
  include ::Sorbet::Private::StepInterface
  OUTPUT = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::GemGeneratorTracepoint::ClassDefinition
  def defs(); end

  def defs=(_); end

  def id(); end

  def id=(_); end

  def klass(); end

  def klass=(_); end
end

class Sorbet::Private::GemGeneratorTracepoint::ClassDefinition
  def self.[](*_); end

  def self.members(); end
end

class Sorbet::Private::GemGeneratorTracepoint::TracepointSerializer
  def initialize(files:, delegate_classes:); end

  def serialize(output_dir); end
  BAD_METHODS = ::T.let(nil, ::T.untyped)
  HEADER = ::T.let(nil, ::T.untyped)
  SPECIAL_METHOD_NAMES = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::GemGeneratorTracepoint::TracepointSerializer
end

class Sorbet::Private::GemGeneratorTracepoint::Tracer
end

class Sorbet::Private::GemGeneratorTracepoint::Tracer
  def self.add_to_context(item); end

  def self.disable_tracepoints(); end

  def self.finish(); end

  def self.install_tracepoints(); end

  def self.method_added(mod, method, singleton); end

  def self.module_created(mod); end

  def self.module_extended(extended, extender); end

  def self.module_included(included, includer); end

  def self.pre_cache_module_methods(); end

  def self.register_delegate_class(klass, delegate); end

  def self.start(); end

  def self.trace(); end

  def self.trace_results(); end
end

module Sorbet::Private::GemGeneratorTracepoint
  extend ::T::Sig
  def self.main(output_dir=T.unsafe(nil)); end

  def self.output_file(); end
end

class Sorbet::Private::GemLoader
  GEM_LOADER = ::T.let(nil, ::T.untyped)
  NO_GEM = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::GemLoader
  def self.my_require(gem); end

  def self.require_all_gems(); end

  def self.require_gem(gem); end
end

class Sorbet::Private::HiddenMethodFinder
  include ::Sorbet::Private::StepInterface
  def all_modules_and_aliases(); end

  def capture_stderr(); end

  def constant_cache(); end

  def gen_source_rbi(classes, aliases); end

  def looks_like_stub_name(name); end

  def main(); end

  def mk_dir(); end

  def read_constants(); end

  def real_name(mod); end

  def require_everything(); end

  def rm_dir(); end

  def serialize_alias(source_entry, rbi_entry, my_klass, source_symbols, rbi_symbols); end

  def serialize_class(source_entry, rbi_entry, klass, source_symbols, rbi_symbols, source_by_name); end

  def serialize_constants(source, rbi, klass, is_singleton, source_symbols, rbi_symbols); end

  def symbols_id_to_name(entry, prefix); end

  def write_constants(); end

  def write_diff(source, rbi); end
  BLACKLIST = ::T.let(nil, ::T.untyped)
  DIFF_RBI = ::T.let(nil, ::T.untyped)
  ERRORS_RBI = ::T.let(nil, ::T.untyped)
  HEADER = ::T.let(nil, ::T.untyped)
  HIDDEN_RBI = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  RBI_CONSTANTS = ::T.let(nil, ::T.untyped)
  RBI_CONSTANTS_ERR = ::T.let(nil, ::T.untyped)
  SOURCE_CONSTANTS = ::T.let(nil, ::T.untyped)
  SOURCE_CONSTANTS_ERR = ::T.let(nil, ::T.untyped)
  TMP_PATH = ::T.let(nil, ::T.untyped)
  TMP_RBI = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::HiddenMethodFinder
  def self.main(); end

  def self.output_file(); end
end

module Sorbet::Private::Main
end

module Sorbet::Private::Main
  extend ::T::Sig
  def self.cyan(msg); end

  def self.emojify(emoji, msg); end

  def self.init(); end

  def self.main(argv); end

  def self.make_step(step); end

  def self.usage(); end

  def self.yellow(msg); end
end

module Sorbet::Private::RealStdlib
end

module Sorbet::Private::RealStdlib
  extend ::T::Sig
  def self.real_ancestors(mod); end

  def self.real_autoload?(o, klass); end

  def self.real_const_get(obj, const, arg); end

  def self.real_constants(mod); end

  def self.real_eqeq(obj, other); end

  def self.real_hash(o); end

  def self.real_instance_methods(mod, arg); end

  def self.real_is_a?(o, klass); end

  def self.real_name(o); end

  def self.real_object_id(o); end

  def self.real_private_instance_methods(mod, arg); end

  def self.real_singleton_class(obj); end

  def self.real_singleton_methods(mod, arg); end

  def self.real_spaceship(obj, arg); end

  def self.real_superclass(o); end
end

class Sorbet::Private::RequireEverything
end

class Sorbet::Private::RequireEverything
  def self.excluded_rails_files(); end

  def self.load_bundler(); end

  def self.load_rails(); end

  def self.my_require(abs_path, numerator, denominator); end

  def self.patch_kernel(); end

  def self.rails?(); end

  def self.require_all_files(); end

  def self.require_everything(); end
end

class Sorbet::Private::Serialize
  def alias(base, other_name); end

  def ancestor_has_method(method, klass); end

  def blacklisted_method(method); end

  def class_or_module(class_name); end

  def comparable?(value); end

  def constant(const, value); end

  def from_method(method); end

  def initialize(constant_cache); end

  def serialize_method(method, static=T.unsafe(nil), with_sig: T.unsafe(nil)); end

  def serialize_sig(parameters); end

  def to_sig(kind, name); end

  def valid_class_name(name); end

  def valid_method_name(name); end
  BLACKLIST_CONSTANTS = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  SPECIAL_METHOD_NAMES = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::Serialize
  def self.header(typed=T.unsafe(nil), subcommand=T.unsafe(nil)); end
end

module Sorbet::Private::Status
end

module Sorbet::Private::Status
  extend ::T::Sig
  def self.done(); end

  def self.say(message, print_without_tty: T.unsafe(nil)); end
end

module Sorbet::Private::StepInterface
end

module Sorbet::Private::StepInterface
  extend ::T::Sig
  def self.main(); end

  def self.output_file(); end
end

class Sorbet::Private::SuggestTyped
  include ::Sorbet::Private::StepInterface
end

class Sorbet::Private::SuggestTyped
  def self.main(); end

  def self.output_file(); end

  def self.suggest_typed(); end
end

class Sorbet::Private::TodoRBI
  include ::Sorbet::Private::StepInterface
  HEADER = ::T.let(nil, ::T.untyped)
  OUTPUT = ::T.let(nil, ::T.untyped)
end

class Sorbet::Private::TodoRBI
  def self.main(); end

  def self.output_file(); end
end

module Sorbet::Private
  extend ::T::Sig
end

class Sorbet
  extend ::T::Sig
end

class SortedSet
  def initialize(*args, &block); end
end

class SortedSet
  extend ::T::Sig
  def self.setup(); end
end

module Source::Errors
  extend ::T::Sig
end

module Source
  extend ::T::Sig
end

module SphinxHelpers
  extend ::T::Sig
end

module Sprockets
  VERSION = ::T.let(nil, ::T.untyped)
end

Sprockets::Autoload::CoffeeScript = CoffeeScript

Sprockets::Autoload::Uglifier = Uglifier

module Sprockets::Autoload
  extend ::T::Sig
end

class Sprockets::Base
  include ::Sprockets::Dependencies
  include ::Sprockets::Compressing
  include ::Sprockets::Loader
  include ::Sprockets::DigestUtils
  include ::Sprockets::Transformers
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::Processing
  include ::Sprockets::Mime
  include ::Sprockets::Engines
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::ProcessorUtils
end

module Sprockets::Bower
  POSSIBLE_BOWER_JSONS = ::T.let(nil, ::T.untyped)
end

module Sprockets::Bower
  extend ::T::Sig
end

class Sprockets::Cache
  PEEK_SIZE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::FileStore
  DEFAULT_MAX_SIZE = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::MemoryStore
  DEFAULT_MAX_SIZE = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::NullStore
  def get(key); end

  def set(key, value); end
end

class Sprockets::Cache::NullStore
end

class Sprockets::ClosureCompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::CoffeeScriptProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::CoffeeScriptProcessor
  extend ::T::Sig
end

module Sprockets::CoffeeScriptTemplate
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::CoffeeScriptTemplate
  extend ::T::Sig
  def self.cache_key(); end

  def self.call(*args); end
end

module Sprockets::Compressing
  extend ::T::Sig
end

module Sprockets::Configuration
  include ::Sprockets::Dependencies
  include ::Sprockets::Compressing
  include ::Sprockets::Processing
  include ::Sprockets::Transformers
  include ::Sprockets::Engines
  include ::Sprockets::Mime
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::HTTPUtils
  include ::Sprockets::DigestUtils
end

module Sprockets::Configuration
  extend ::T::Sig
end

module Sprockets::Dependencies
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::PathUtils
end

module Sprockets::Dependencies
  extend ::T::Sig
end

module Sprockets::DigestUtils
  DIGEST_SIZES = ::T.let(nil, ::T.untyped)
  HASH_ALGORITHMS = ::T.let(nil, ::T.untyped)
end

module Sprockets::DigestUtils
  extend ::T::Sig
end

class Sprockets::DirectiveProcessor
  DIRECTIVE_PATTERN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::ERBTemplate
  def call(*args); end
end

class Sprockets::ERBTemplate
end

module Sprockets::EcoProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EcoProcessor
  extend ::T::Sig
end

module Sprockets::EcoTemplate
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EcoTemplate
  extend ::T::Sig
  def self.cache_key(); end

  def self.call(*args); end
end

module Sprockets::EjsProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EjsProcessor
  extend ::T::Sig
end

module Sprockets::EjsTemplate
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EjsTemplate
  extend ::T::Sig
  def self.cache_key(); end

  def self.call(*args); end
end

module Sprockets::EncodingUtils
  BOM = ::T.let(nil, ::T.untyped)
  CHARSET_DETECT = ::T.let(nil, ::T.untyped)
  CHARSET_SIZE = ::T.let(nil, ::T.untyped)
  CHARSET_START = ::T.let(nil, ::T.untyped)
end

module Sprockets::EncodingUtils
  extend ::T::Sig
end

module Sprockets::Engines
  extend ::T::Sig
end

module Sprockets::HTTPUtils
  extend ::T::Sig
end

Sprockets::Index = Sprockets::CachedEnvironment

class Sprockets::LegacyProcProcessor
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Sprockets::LegacyTiltProcessor
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Sprockets::Loader
  include ::Sprockets::Transformers
  include ::Sprockets::Resolve
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::Processing
  include ::Sprockets::Mime
  include ::Sprockets::URIUtils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::HTTPUtils
end

module Sprockets::Loader
  extend ::T::Sig
end

module Sprockets::ManifestUtils
  LEGACY_MANIFEST_RE = ::T.let(nil, ::T.untyped)
  MANIFEST_RE = ::T.let(nil, ::T.untyped)
end

module Sprockets::ManifestUtils
  extend ::T::Sig
end

module Sprockets::Mime
  include ::Sprockets::Utils
end

module Sprockets::Mime
  extend ::T::Sig
end

module Sprockets::PathDependencyUtils
  extend ::T::Sig
end

module Sprockets::PathDigestUtils
  include ::Sprockets::PathUtils
end

module Sprockets::PathDigestUtils
  extend ::T::Sig
end

module Sprockets::PathUtils
  SEPARATOR_PATTERN = ::T.let(nil, ::T.untyped)
end

module Sprockets::PathUtils
  extend ::T::Sig
end

module Sprockets::Paths
  include ::Sprockets::Utils
end

module Sprockets::Paths
  extend ::T::Sig
end

module Sprockets::Processing
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
end

module Sprockets::Processing
  extend ::T::Sig
end

module Sprockets::ProcessorUtils
  VALID_METADATA_COMPOUND_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_COMPOUND_TYPES_HASH = ::T.let(nil, ::T.untyped)
  VALID_METADATA_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_VALUE_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_VALUE_TYPES_HASH = ::T.let(nil, ::T.untyped)
end

module Sprockets::ProcessorUtils
  extend ::T::Sig
end

module Sprockets::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::Rails::Context
  extend ::T::Sig
end

module Sprockets::Rails::Helper
  VIEW_ACCESSORS = ::T.let(nil, ::T.untyped)
end

module Sprockets::Rails::Helper
  extend ::T::Sig
end

module Sprockets::Rails::HelperAssetResolvers
  extend ::T::Sig
end

module Sprockets::Rails::RouteWrapper
  extend ::T::Sig
end

module Sprockets::Rails::Utils
  extend ::T::Sig
end

module Sprockets::Rails
  extend ::T::Sig
end

class Sprockets::Railtie
  LOOSE_APP_ASSETS = ::T.let(nil, ::T.untyped)
end

module Sprockets::Resolve
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::URIUtils
end

module Sprockets::Resolve
  extend ::T::Sig
end

class Sprockets::SassCompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

Sprockets::SassFunctions = Sprockets::SassProcessor::Functions

module Sprockets::SassProcessor::Functions
  extend ::T::Sig
end

class Sprockets::SassTemplate
end

class Sprockets::SassTemplate
  def self.call(*args); end
end

class Sprockets::ScssTemplate
end

class Sprockets::ScssTemplate
  def self.call(*args); end
end

module Sprockets::Server
  extend ::T::Sig
end

module Sprockets::Transformers
  include ::Sprockets::Utils
  include ::Sprockets::ProcessorUtils
end

module Sprockets::Transformers
  extend ::T::Sig
end

module Sprockets::URIUtils
  extend ::T::Sig
end

class Sprockets::UglifierCompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::Utils
  UNBOUND_METHODS_BIND_TO_ANY_OBJECT = ::T.let(nil, ::T.untyped)
end

class Sprockets::Utils::Gzip
  COMPRESSABLE_MIME_TYPES = ::T.let(nil, ::T.untyped)
end

module Sprockets::Utils
  extend ::T::Sig
end

class Sprockets::YUICompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets
  extend ::Sprockets::Dependencies
  extend ::Sprockets::Compressing
  extend ::Sprockets::Processing
  extend ::Sprockets::Transformers
  extend ::Sprockets::Engines
  extend ::Sprockets::Mime
  extend ::Sprockets::Utils
  extend ::Sprockets::URIUtils
  extend ::Sprockets::PathDigestUtils
  extend ::Sprockets::HTTPUtils
  extend ::Sprockets::DigestUtils
  extend ::T::Sig
end

class Staging::RequestExcluder
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Staging::RequestExcluder
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class Staging::RequestExclusion
  include ::Staging::RequestExclusion::GeneratedAssociationMethods
  def autosave_associated_records_for_bs_request(*args); end

  def autosave_associated_records_for_staging_workflow(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module Staging::RequestExclusion::GeneratedAssociationMethods
  def bs_request(); end

  def bs_request=(value); end

  def build_bs_request(*args, &block); end

  def build_staging_workflow(*args, &block); end

  def create_bs_request(*args, &block); end

  def create_bs_request!(*args, &block); end

  def create_staging_workflow(*args, &block); end

  def create_staging_workflow!(*args, &block); end

  def reload_bs_request(); end

  def reload_staging_workflow(); end

  def staging_workflow(); end

  def staging_workflow=(value); end
end

module Staging::RequestExclusion::GeneratedAssociationMethods
  extend ::T::Sig
end

class Staging::StageRequests
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Staging::StageRequests
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class Staging::Workflow
  include ::Staging::Workflow::GeneratedAssociationMethods
  def after_add_for_excluded_requests(); end

  def after_add_for_excluded_requests=(val); end

  def after_add_for_excluded_requests?(); end

  def after_add_for_request_exclusions(); end

  def after_add_for_request_exclusions=(val); end

  def after_add_for_request_exclusions?(); end

  def after_add_for_staged_requests(); end

  def after_add_for_staged_requests=(val); end

  def after_add_for_staged_requests?(); end

  def after_add_for_staging_projects(); end

  def after_add_for_staging_projects=(val); end

  def after_add_for_staging_projects?(); end

  def after_add_for_target_of_bs_requests(); end

  def after_add_for_target_of_bs_requests=(val); end

  def after_add_for_target_of_bs_requests?(); end

  def after_remove_for_excluded_requests(); end

  def after_remove_for_excluded_requests=(val); end

  def after_remove_for_excluded_requests?(); end

  def after_remove_for_request_exclusions(); end

  def after_remove_for_request_exclusions=(val); end

  def after_remove_for_request_exclusions?(); end

  def after_remove_for_staged_requests(); end

  def after_remove_for_staged_requests=(val); end

  def after_remove_for_staged_requests?(); end

  def after_remove_for_staging_projects(); end

  def after_remove_for_staging_projects=(val); end

  def after_remove_for_staging_projects?(); end

  def after_remove_for_target_of_bs_requests(); end

  def after_remove_for_target_of_bs_requests=(val); end

  def after_remove_for_target_of_bs_requests?(); end

  def autosave_associated_records_for_excluded_requests(*args); end

  def autosave_associated_records_for_managers_group(*args); end

  def autosave_associated_records_for_project(*args); end

  def autosave_associated_records_for_request_exclusions(*args); end

  def autosave_associated_records_for_staged_requests(*args); end

  def autosave_associated_records_for_staging_projects(*args); end

  def autosave_associated_records_for_target_of_bs_requests(*args); end

  def before_add_for_excluded_requests(); end

  def before_add_for_excluded_requests=(val); end

  def before_add_for_excluded_requests?(); end

  def before_add_for_request_exclusions(); end

  def before_add_for_request_exclusions=(val); end

  def before_add_for_request_exclusions?(); end

  def before_add_for_staged_requests(); end

  def before_add_for_staged_requests=(val); end

  def before_add_for_staged_requests?(); end

  def before_add_for_staging_projects(); end

  def before_add_for_staging_projects=(val); end

  def before_add_for_staging_projects?(); end

  def before_add_for_target_of_bs_requests(); end

  def before_add_for_target_of_bs_requests=(val); end

  def before_add_for_target_of_bs_requests?(); end

  def before_remove_for_excluded_requests(); end

  def before_remove_for_excluded_requests=(val); end

  def before_remove_for_excluded_requests?(); end

  def before_remove_for_request_exclusions(); end

  def before_remove_for_request_exclusions=(val); end

  def before_remove_for_request_exclusions?(); end

  def before_remove_for_staged_requests(); end

  def before_remove_for_staged_requests=(val); end

  def before_remove_for_staged_requests?(); end

  def before_remove_for_staging_projects(); end

  def before_remove_for_staging_projects=(val); end

  def before_remove_for_staging_projects?(); end

  def before_remove_for_target_of_bs_requests(); end

  def before_remove_for_target_of_bs_requests=(val); end

  def before_remove_for_target_of_bs_requests?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_excluded_requests(*args); end

  def validate_associated_records_for_request_exclusions(*args); end

  def validate_associated_records_for_staged_requests(*args); end

  def validate_associated_records_for_staging_projects(*args); end

  def validate_associated_records_for_target_of_bs_requests(*args); end
end

module Staging::Workflow::GeneratedAssociationMethods
  def build_managers_group(*args, &block); end

  def build_project(*args, &block); end

  def create_managers_group(*args, &block); end

  def create_managers_group!(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def excluded_request_ids(); end

  def excluded_request_ids=(ids); end

  def excluded_requests(); end

  def excluded_requests=(value); end

  def managers_group(); end

  def managers_group=(value); end

  def project(); end

  def project=(value); end

  def reload_managers_group(); end

  def reload_project(); end

  def request_exclusion_ids(); end

  def request_exclusion_ids=(ids); end

  def request_exclusions(); end

  def request_exclusions=(value); end

  def staged_request_ids(); end

  def staged_request_ids=(ids); end

  def staged_requests(); end

  def staged_requests=(value); end

  def staging_project_ids(); end

  def staging_project_ids=(ids); end

  def staging_projects(); end

  def staging_projects=(value); end

  def target_of_bs_request_ids(); end

  def target_of_bs_request_ids=(ids); end

  def target_of_bs_requests(); end

  def target_of_bs_requests=(value); end
end

module Staging::Workflow::GeneratedAssociationMethods
  extend ::T::Sig
end

class Staging::Workflow
  def self.after_add_for_excluded_requests(); end

  def self.after_add_for_excluded_requests=(val); end

  def self.after_add_for_excluded_requests?(); end

  def self.after_add_for_request_exclusions(); end

  def self.after_add_for_request_exclusions=(val); end

  def self.after_add_for_request_exclusions?(); end

  def self.after_add_for_staged_requests(); end

  def self.after_add_for_staged_requests=(val); end

  def self.after_add_for_staged_requests?(); end

  def self.after_add_for_staging_projects(); end

  def self.after_add_for_staging_projects=(val); end

  def self.after_add_for_staging_projects?(); end

  def self.after_add_for_target_of_bs_requests(); end

  def self.after_add_for_target_of_bs_requests=(val); end

  def self.after_add_for_target_of_bs_requests?(); end

  def self.after_remove_for_excluded_requests(); end

  def self.after_remove_for_excluded_requests=(val); end

  def self.after_remove_for_excluded_requests?(); end

  def self.after_remove_for_request_exclusions(); end

  def self.after_remove_for_request_exclusions=(val); end

  def self.after_remove_for_request_exclusions?(); end

  def self.after_remove_for_staged_requests(); end

  def self.after_remove_for_staged_requests=(val); end

  def self.after_remove_for_staged_requests?(); end

  def self.after_remove_for_staging_projects(); end

  def self.after_remove_for_staging_projects=(val); end

  def self.after_remove_for_staging_projects?(); end

  def self.after_remove_for_target_of_bs_requests(); end

  def self.after_remove_for_target_of_bs_requests=(val); end

  def self.after_remove_for_target_of_bs_requests?(); end

  def self.before_add_for_excluded_requests(); end

  def self.before_add_for_excluded_requests=(val); end

  def self.before_add_for_excluded_requests?(); end

  def self.before_add_for_request_exclusions(); end

  def self.before_add_for_request_exclusions=(val); end

  def self.before_add_for_request_exclusions?(); end

  def self.before_add_for_staged_requests(); end

  def self.before_add_for_staged_requests=(val); end

  def self.before_add_for_staged_requests?(); end

  def self.before_add_for_staging_projects(); end

  def self.before_add_for_staging_projects=(val); end

  def self.before_add_for_staging_projects?(); end

  def self.before_add_for_target_of_bs_requests(); end

  def self.before_add_for_target_of_bs_requests=(val); end

  def self.before_add_for_target_of_bs_requests?(); end

  def self.before_remove_for_excluded_requests(); end

  def self.before_remove_for_excluded_requests=(val); end

  def self.before_remove_for_excluded_requests?(); end

  def self.before_remove_for_request_exclusions(); end

  def self.before_remove_for_request_exclusions=(val); end

  def self.before_remove_for_request_exclusions?(); end

  def self.before_remove_for_staged_requests(); end

  def self.before_remove_for_staged_requests=(val); end

  def self.before_remove_for_staged_requests?(); end

  def self.before_remove_for_staging_projects(); end

  def self.before_remove_for_staging_projects=(val); end

  def self.before_remove_for_staging_projects?(); end

  def self.before_remove_for_target_of_bs_requests(); end

  def self.before_remove_for_target_of_bs_requests=(val); end

  def self.before_remove_for_target_of_bs_requests?(); end
end

module Staging::WorkflowStagingProjectsAssociationExtension
  def without_staged_requests(); end
end

module Staging::WorkflowStagingProjectsAssociationExtension
  extend ::T::Sig
end

module Staging::WorkflowTargetOfBsRequestsAssociationExtension
  def ready_to_stage(); end

  def stageable(managers_group_title=T.unsafe(nil)); end
end

module Staging::WorkflowTargetOfBsRequestsAssociationExtension
  extend ::T::Sig
end

module Staging
  extend ::T::Sig
end

module StagingProject
  extend ::T::Sig
end

class StandardError
  extend ::T::Sig
end

class StaticPermission
  include ::StaticPermission::GeneratedAssociationMethods
  def after_add_for_roles(); end

  def after_add_for_roles=(val); end

  def after_add_for_roles?(); end

  def after_add_for_roles_static_permissions(); end

  def after_add_for_roles_static_permissions=(val); end

  def after_add_for_roles_static_permissions?(); end

  def after_add_for_staticpermissions_roles(); end

  def after_add_for_staticpermissions_roles=(val); end

  def after_add_for_staticpermissions_roles?(); end

  def after_remove_for_roles(); end

  def after_remove_for_roles=(val); end

  def after_remove_for_roles?(); end

  def after_remove_for_roles_static_permissions(); end

  def after_remove_for_roles_static_permissions=(val); end

  def after_remove_for_roles_static_permissions?(); end

  def after_remove_for_staticpermissions_roles(); end

  def after_remove_for_staticpermissions_roles=(val); end

  def after_remove_for_staticpermissions_roles?(); end

  def autosave_associated_records_for_roles(*args); end

  def autosave_associated_records_for_roles_static_permissions(*args); end

  def autosave_associated_records_for_staticpermissions_roles(*args); end

  def before_add_for_roles(); end

  def before_add_for_roles=(val); end

  def before_add_for_roles?(); end

  def before_add_for_roles_static_permissions(); end

  def before_add_for_roles_static_permissions=(val); end

  def before_add_for_roles_static_permissions?(); end

  def before_add_for_staticpermissions_roles(); end

  def before_add_for_staticpermissions_roles=(val); end

  def before_add_for_staticpermissions_roles?(); end

  def before_remove_for_roles(); end

  def before_remove_for_roles=(val); end

  def before_remove_for_roles?(); end

  def before_remove_for_roles_static_permissions(); end

  def before_remove_for_roles_static_permissions=(val); end

  def before_remove_for_roles_static_permissions?(); end

  def before_remove_for_staticpermissions_roles(); end

  def before_remove_for_staticpermissions_roles=(val); end

  def before_remove_for_staticpermissions_roles?(); end

  def fixtures_name(*args); end

  def fixtures_name=(*args); end

  def fixtures_name?(*args); end

  def fixtures_name_before_last_save(*args); end

  def fixtures_name_before_type_cast(*args); end

  def fixtures_name_came_from_user?(*args); end

  def fixtures_name_change(*args); end

  def fixtures_name_change_to_be_saved(*args); end

  def fixtures_name_changed?(*args); end

  def fixtures_name_in_database(*args); end

  def fixtures_name_previous_change(*args); end

  def fixtures_name_previously_changed?(*args); end

  def fixtures_name_was(*args); end

  def fixtures_name_will_change!(*args); end

  def restore_fixtures_name!(*args); end

  def saved_change_to_fixtures_name(*args); end

  def saved_change_to_fixtures_name?(*args); end

  def validate_associated_records_for_roles(*args); end

  def validate_associated_records_for_roles_static_permissions(*args); end

  def validate_associated_records_for_staticpermissions_roles(*args); end

  def will_save_change_to_fixtures_name?(*args); end
end

module StaticPermission::GeneratedAssociationMethods
  def role_ids(); end

  def role_ids=(ids); end

  def roles(); end

  def roles=(value); end

  def roles_static_permission_ids(); end

  def roles_static_permission_ids=(ids); end

  def roles_static_permissions(); end

  def roles_static_permissions=(value); end
end

module StaticPermission::GeneratedAssociationMethods
  extend ::T::Sig
end

class StaticPermission
  def self.after_add_for_roles(); end

  def self.after_add_for_roles=(val); end

  def self.after_add_for_roles?(); end

  def self.after_add_for_roles_static_permissions(); end

  def self.after_add_for_roles_static_permissions=(val); end

  def self.after_add_for_roles_static_permissions?(); end

  def self.after_add_for_staticpermissions_roles(); end

  def self.after_add_for_staticpermissions_roles=(val); end

  def self.after_add_for_staticpermissions_roles?(); end

  def self.after_remove_for_roles(); end

  def self.after_remove_for_roles=(val); end

  def self.after_remove_for_roles?(); end

  def self.after_remove_for_roles_static_permissions(); end

  def self.after_remove_for_roles_static_permissions=(val); end

  def self.after_remove_for_roles_static_permissions?(); end

  def self.after_remove_for_staticpermissions_roles(); end

  def self.after_remove_for_staticpermissions_roles=(val); end

  def self.after_remove_for_staticpermissions_roles?(); end

  def self.before_add_for_roles(); end

  def self.before_add_for_roles=(val); end

  def self.before_add_for_roles?(); end

  def self.before_add_for_roles_static_permissions(); end

  def self.before_add_for_roles_static_permissions=(val); end

  def self.before_add_for_roles_static_permissions?(); end

  def self.before_add_for_staticpermissions_roles(); end

  def self.before_add_for_staticpermissions_roles=(val); end

  def self.before_add_for_staticpermissions_roles?(); end

  def self.before_remove_for_roles(); end

  def self.before_remove_for_roles=(val); end

  def self.before_remove_for_roles?(); end

  def self.before_remove_for_roles_static_permissions(); end

  def self.before_remove_for_roles_static_permissions=(val); end

  def self.before_remove_for_roles_static_permissions?(); end

  def self.before_remove_for_staticpermissions_roles(); end

  def self.before_remove_for_staticpermissions_roles=(val); end

  def self.before_remove_for_staticpermissions_roles?(); end

  def self.find_by_id(_id); end

  def self.find_by_title(_title); end
end

class Statistics::MaintenanceStatistic
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Statistics::MaintenanceStatistic
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class Statistics::MaintenanceStatisticDecorator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Statistics
  extend ::T::Sig
end

class Status::Check
  include ::Status::Check::GeneratedAssociationMethods
  def autosave_associated_records_for_status_report(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module Status::Check::GeneratedAssociationMethods
  def build_status_report(*args, &block); end

  def create_status_report(*args, &block); end

  def create_status_report!(*args, &block); end

  def reload_status_report(); end

  def status_report(); end

  def status_report=(value); end
end

module Status::Check::GeneratedAssociationMethods
  extend ::T::Sig
end

class Status::Check
  def self.failed(*args); end

  def self.pending(*args); end
end

module Status::Checkable
  extend ::T::Sig
end

module Status::Concerns::SetCheckable
  extend ::T::Sig
end

module Status::Concerns
  extend ::T::Sig
end

class Status::Report
  include ::Status::Report::GeneratedAssociationMethods
  def after_add_for_checks(); end

  def after_add_for_checks=(val); end

  def after_add_for_checks?(); end

  def after_remove_for_checks(); end

  def after_remove_for_checks=(val); end

  def after_remove_for_checks?(); end

  def autosave_associated_records_for_checkable(*args); end

  def autosave_associated_records_for_checks(*args); end

  def before_add_for_checks(); end

  def before_add_for_checks=(val); end

  def before_add_for_checks?(); end

  def before_remove_for_checks(); end

  def before_remove_for_checks=(val); end

  def before_remove_for_checks?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_checks(*args); end
end

module Status::Report::GeneratedAssociationMethods
  def check_ids(); end

  def check_ids=(ids); end

  def checkable(); end

  def checkable=(value); end

  def checks(); end

  def checks=(value); end

  def reload_checkable(); end
end

module Status::Report::GeneratedAssociationMethods
  extend ::T::Sig
end

class Status::Report
  def self.after_add_for_checks(); end

  def self.after_add_for_checks=(val); end

  def self.after_add_for_checks?(); end

  def self.after_remove_for_checks(); end

  def self.after_remove_for_checks=(val); end

  def self.after_remove_for_checks?(); end

  def self.before_add_for_checks(); end

  def self.before_add_for_checks=(val); end

  def self.before_add_for_checks?(); end

  def self.before_remove_for_checks(); end

  def self.before_remove_for_checks=(val); end

  def self.before_remove_for_checks?(); end
end

module Status::RequiredChecksHelper
  extend ::T::Sig
end

module Status
  extend ::T::Sig
end

module StatusHelper
  extend ::T::Sig
end

class StatusHelperTest
  def test_resample(); end
end

class StatusHistory
  include ::StatusHistory::GeneratedAssociationMethods
end

module StatusHistory::GeneratedAssociationMethods
end

module StatusHistory::GeneratedAssociationMethods
  extend ::T::Sig
end

class StatusMessage
  include ::StatusMessage::GeneratedAssociationMethods
  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module StatusMessage::GeneratedAssociationMethods
  def build_user(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module StatusMessage::GeneratedAssociationMethods
  extend ::T::Sig
end

class StatusMessage
  def self.alive(*args); end
end

class StopIteration
  def result(); end
end

class StopIteration
  extend ::T::Sig
end

class String
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::JSON::Ext::Generator::GeneratorMethods::String
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def +@(); end

  def -@(); end

  def []=(*_); end

  def casecmp?(_); end

  def delete_prefix(_); end

  def delete_prefix!(_); end

  def delete_suffix(_); end

  def delete_suffix!(_); end

  def each_grapheme_cluster(); end

  def encode(*_); end

  def encode!(*_); end

  def grapheme_clusters(); end

  def iseuc(); end

  def isjis(); end

  def issjis(); end

  def isutf8(); end

  def kconv(to_enc, from_enc=T.unsafe(nil)); end

  def parse_csv(**options); end

  def reverse!(); end

  def shellescape(); end

  def shellsplit(); end

  def succ!(); end

  def to_d(); end

  def toeuc(); end

  def tojis(); end

  def tolocale(); end

  def tosjis(); end

  def toutf16(); end

  def toutf32(); end

  def toutf8(); end

  def undump(); end

  def unicode_normalize(*_); end

  def unicode_normalize!(*_); end

  def unicode_normalized?(*_); end

  def unpack1(_); end

  BLANK_RE = ::T.let(nil, ::T.untyped)
  ENCODED_BLANKS = ::T.let(nil, ::T.untyped)
end

class String
  extend ::T::Sig
end

class StringIO
  def length(); end

  def truncate(_); end

end

class StringIO
  extend ::T::Sig
end

class StringScanner
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def <<(_); end

  def [](_); end

  def beginning_of_line?(); end

  def bol?(); end

  def captures(); end

  def charpos(); end

  def check(_); end

  def check_until(_); end

  def clear(); end

  def concat(_); end

  def empty?(); end

  def exist?(_); end

  def get_byte(); end

  def getbyte(); end

  def initialize(*_); end

  def match?(_); end

  def matched(); end

  def matched?(); end

  def matched_size(); end

  def peek(_); end

  def peep(_); end

  def pointer(); end

  def pointer=(pointer); end

  def pos(); end

  def pos=(pos); end

  def post_match(); end

  def pre_match(); end

  def reset(); end

  def rest(); end

  def rest?(); end

  def rest_size(); end

  def restsize(); end

  def scan_full(_, _1, _2); end

  def scan_until(_); end

  def search_full(_, _1, _2); end

  def size(); end

  def skip(_); end

  def skip_until(_); end

  def string(); end

  def string=(string); end

  def terminate(); end

  def unscan(); end

  def values_at(*_); end
  Id = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class StringScanner::Error
  extend ::T::Sig
end

class StringScanner
  extend ::T::Sig
  def self.must_C_version(); end
end

class Struct
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def [](_); end

  def []=(_, _1); end

  def dig(*_); end

  def each_pair(); end

  def length(); end

  def members(); end

  def select(*_); end

  def size(); end

  def to_a(); end

  def to_h(); end

  def values(); end

  def values_at(*_); end
end

Struct::Group = Etc::Group

Struct::Passwd = Etc::Passwd

Struct::Tms = Process::Tms

class Struct
  extend ::T::Sig
end

module Suse
  extend ::T::Sig
end

class Symbol
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def casecmp?(_); end

  def match?(*_); end

  def next(); end

end

class Symbol
  extend ::T::Sig
end

class SynchronizedDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class SyntaxError
  extend ::T::Sig
end

class SystemCallError
  def errno(); end
end

class SystemCallError
  extend ::T::Sig
end

class SystemExit
  def status(); end

  def success?(); end
end

class SystemExit
  extend ::T::Sig
end

class SystemStackError
  extend ::T::Sig
end

class TCPServer
  extend ::T::Sig
end

class TCPSocket
  extend ::T::Sig
end

module TDigest
  VERSION = ::T.let(nil, ::T.untyped)
end

class TDigest::TDigest
  SMALL_ENCODING = ::T.let(nil, ::T.untyped)
  VERBOSE_ENCODING = ::T.let(nil, ::T.untyped)
end

module TDigest
  extend ::T::Sig
end

class TSort::Cyclic
  extend ::T::Sig
end

module TSort
  extend ::T::Sig
end

module TZInfo::CountryIndexDefinition::ClassMethods
  extend ::T::Sig
end

module TZInfo::CountryIndexDefinition
  extend ::T::Sig
end

module TZInfo::OffsetRationals
  extend ::T::Sig
end

module TZInfo::RubyCoreSupport
  HALF_DAYS_IN_DAY = ::T.let(nil, ::T.untyped)
end

module TZInfo::RubyCoreSupport
  extend ::T::Sig
end

class TZInfo::RubyDataSource
  REQUIRE_PATH = ::T.let(nil, ::T.untyped)
end

module TZInfo::TimezoneDefinition::ClassMethods
  extend ::T::Sig
end

module TZInfo::TimezoneDefinition
  extend ::T::Sig
end

module TZInfo::TimezoneIndexDefinition::ClassMethods
  extend ::T::Sig
end

module TZInfo::TimezoneIndexDefinition
  extend ::T::Sig
end

class TZInfo::ZoneinfoDataSource
  DEFAULT_ALTERNATE_ISO3166_TAB_SEARCH_PATH = ::T.let(nil, ::T.untyped)
  DEFAULT_SEARCH_PATH = ::T.let(nil, ::T.untyped)
end

class TZInfo::ZoneinfoTimezoneInfo
  MAX_TIMESTAMP = ::T.let(nil, ::T.untyped)
  MIN_TIMESTAMP = ::T.let(nil, ::T.untyped)
end

module TZInfo
  extend ::T::Sig
end

class TempMI
  include ::TempMI::GeneratedAssociationMethods
end

module TempMI::GeneratedAssociationMethods
end

module TempMI::GeneratedAssociationMethods
  extend ::T::Sig
end

class Tempfile
  def _close(); end

  def inspect(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Tempfile::Remover
  def call(*args); end

  def initialize(tmpfile); end
end

class Tempfile::Remover
end

module Temple
  VERSION = ::T.let(nil, ::T.untyped)
end

class Temple::ERB::Engine
end

class Temple::ERB::Engine
end

class Temple::ERB::Parser
  def call(input); end
  ERB_PATTERN = ::T.let(nil, ::T.untyped)
end

class Temple::ERB::Parser
end

class Temple::ERB::Template
end

class Temple::ERB::Template
end

class Temple::ERB::Trimming
end

class Temple::ERB::Trimming
end

module Temple::ERB
  extend ::T::Sig
end

class Temple::FilterError
end

class Temple::FilterError
end

class Temple::Filters::CodeMerger
end

class Temple::Filters::CodeMerger
end

class Temple::Filters::DynamicInliner
end

class Temple::Filters::DynamicInliner
end

class Temple::Filters::Encoding
  def call(s); end
end

class Temple::Filters::Encoding
end

class Temple::Filters::Eraser
  def do?(list, exp); end
end

class Temple::Filters::Eraser
end

class Temple::Filters::Escapable
  def on_dynamic(value); end

  def on_static(value); end
end

class Temple::Filters::Escapable
end

class Temple::Filters::RemoveBOM
  def call(s); end
end

class Temple::Filters::RemoveBOM
end

class Temple::Filters::StaticAnalyzer
  def on_dynamic(code); end
end

class Temple::Filters::StaticAnalyzer
end

class Temple::Filters::StringSplitter
  def on_dynamic(code); end
end

class Temple::Filters::StringSplitter::SyntaxChecker
end

class Temple::Filters::StringSplitter::SyntaxChecker::ParseError
end

class Temple::Filters::StringSplitter::SyntaxChecker::ParseError
end

class Temple::Filters::StringSplitter::SyntaxChecker
  def self.syntax_error?(code); end
end

class Temple::Filters::StringSplitter
  def self.compile(code); end
end

class Temple::Filters::Validator
end

class Temple::Filters::Validator
end

module Temple::Filters
  extend ::T::Sig
end

class Temple::Generator
  include ::Temple::Utils
  include ::Temple::Mixins::CompiledDispatcher
  include ::Temple::Mixins::Options
  def buffer(); end

  def capture_generator(); end

  def concat(str); end

  def create_buffer(); end

  def on(*exp); end

  def on_capture(name, exp); end

  def on_code(code); end

  def on_dynamic(code); end

  def on_multi(*exp); end

  def on_newline(); end

  def on_static(text); end

  def postamble(); end

  def preamble(); end

  def restore_buffer(); end

  def return_buffer(); end

  def save_buffer(); end
end

class Temple::Generator
  extend ::Temple::Mixins::ClassOptions
  extend ::Temple::Mixins::ThreadOptions
end

class Temple::Generators::Array
end

class Temple::Generators::Array
end

class Temple::Generators::ArrayBuffer
end

class Temple::Generators::ArrayBuffer
end

class Temple::Generators::ERB
end

class Temple::Generators::ERB
end

class Temple::Generators::RailsOutputBuffer
end

class Temple::Generators::RailsOutputBuffer
end

class Temple::Generators::StringBuffer
end

class Temple::Generators::StringBuffer
end

module Temple::Generators
  extend ::T::Sig
end

module Temple::Grammar
  Bool = ::T.let(nil, ::T.untyped)
  Case = ::T.let(nil, ::T.untyped)
  Condition = ::T.let(nil, ::T.untyped)
  EmptyExp = ::T.let(nil, ::T.untyped)
  Expression = ::T.let(nil, ::T.untyped)
  HTMLAttr = ::T.let(nil, ::T.untyped)
  HTMLIdentifier = ::T.let(nil, ::T.untyped)
end

module Temple::Grammar
  extend ::Temple::Mixins::GrammarDSL
  extend ::T::Sig
end

class Temple::HTML::AttributeMerger
end

class Temple::HTML::AttributeMerger
end

class Temple::HTML::AttributeRemover
  def on_html_attr(name, value); end
end

class Temple::HTML::AttributeRemover
end

class Temple::HTML::AttributeSorter
end

class Temple::HTML::AttributeSorter
end

module Temple::HTML::Dispatcher
  def on_html_attr(name, content); end

  def on_html_attrs(*attrs); end

  def on_html_comment(content); end

  def on_html_condcomment(condition, content); end

  def on_html_js(content); end

  def on_html_tag(name, attrs, content=T.unsafe(nil)); end
end

module Temple::HTML::Dispatcher
  extend ::T::Sig
end

class Temple::HTML::Fast
  def on_html_attr(name, value); end

  def on_html_doctype(type); end
  DOCTYPES = ::T.let(nil, ::T.untyped)
  HTML_VOID_ELEMENTS = ::T.let(nil, ::T.untyped)
end

class Temple::HTML::Fast
end

class Temple::HTML::Filter
  include ::Temple::HTML::Dispatcher
  def contains_nonempty_static?(exp); end
end

class Temple::HTML::Filter
end

class Temple::HTML::Pretty
  def indent(); end

  def on_dynamic(code); end

  def on_static(content); end

  def preamble(); end

  def tag_indent(name); end
end

class Temple::HTML::Pretty
end

module Temple::HTML
  extend ::T::Sig
end

class Temple::InvalidExpression
end

class Temple::InvalidExpression
end

module Temple::Mixins::ClassOptions
  extend ::T::Sig
end

module Temple::Mixins::CompiledDispatcher
  extend ::T::Sig
end

module Temple::Mixins::ControlFlowDispatcher
  extend ::T::Sig
end

module Temple::Mixins::CoreDispatcher
  extend ::T::Sig
end

module Temple::Mixins::Dispatcher
  extend ::T::Sig
end

module Temple::Mixins::EngineDSL
  extend ::T::Sig
end

module Temple::Mixins::EscapeDispatcher
  extend ::T::Sig
end

module Temple::Mixins::GrammarDSL
  def ===(exp); end

  def =~(exp); end

  def Rule(rule); end

  def Value(value); end

  def const_missing(name); end

  def extended(mod); end

  def match?(exp); end

  def validate!(exp); end
end

class Temple::Mixins::GrammarDSL::Element
  def initialize(grammar, rule); end
end

class Temple::Mixins::GrammarDSL::Element
end

class Temple::Mixins::GrammarDSL::Or
  def <<(rule); end

  def after_copy(source); end

  def initialize(grammar, *children); end

  def match(exp, unmatched); end
end

class Temple::Mixins::GrammarDSL::Or
end

class Temple::Mixins::GrammarDSL::Root
  def initialize(grammar, name); end

  def validate!(exp); end
end

class Temple::Mixins::GrammarDSL::Root
end

class Temple::Mixins::GrammarDSL::Rule
  def ===(exp); end

  def =~(exp); end

  def copy_to(grammar); end

  def initialize(grammar); end

  def match?(exp); end

  def |(rule); end
end

class Temple::Mixins::GrammarDSL::Rule
end

class Temple::Mixins::GrammarDSL::Value
  def initialize(grammar, value); end

  def match(exp, unmatched); end
end

class Temple::Mixins::GrammarDSL::Value
end

module Temple::Mixins::GrammarDSL
  extend ::T::Sig
end

module Temple::Mixins::Options
  extend ::T::Sig
end

module Temple::Mixins::Template
  include ::Temple::Mixins::ClassOptions
  def compile(code, options); end

  def create(engine, options); end

  def register_as(*names); end
end

module Temple::Mixins::Template
  extend ::T::Sig
end

module Temple::Mixins::ThreadOptions
  extend ::T::Sig
end

module Temple::Mixins
  extend ::T::Sig
end

class Temple::Parser
  include ::Temple::Utils
  include ::Temple::Mixins::Options
end

class Temple::Parser
  extend ::Temple::Mixins::ClassOptions
  extend ::Temple::Mixins::ThreadOptions
end

module Temple::StaticAnalyzer
  DYNAMIC_TOKENS = ::T.let(nil, ::T.untyped)
  STATIC_KEYWORDS = ::T.let(nil, ::T.untyped)
  STATIC_OPERATORS = ::T.let(nil, ::T.untyped)
  STATIC_TOKENS = ::T.let(nil, ::T.untyped)
end

module Temple::StaticAnalyzer
  extend ::T::Sig
end

module Temple::Templates
end

class Temple::Templates::Rails
  def call(template, source=T.unsafe(nil)); end

  def supports_streaming?(); end
end

class Temple::Templates::Rails
  extend ::Temple::Mixins::Template
  extend ::Temple::Mixins::ClassOptions
end

class Temple::Templates::Tilt
  def precompiled_template(locals=T.unsafe(nil)); end
end

class Temple::Templates::Tilt
  extend ::Temple::Mixins::Template
  extend ::Temple::Mixins::ClassOptions
  def self.default_mime_type=(mime_type); end
end

module Temple::Templates
  extend ::T::Sig
  def self.method_missing(name, engine, options=T.unsafe(nil)); end
end

module Temple::Utils
  extend ::T::Sig
end

module Temple
  extend ::T::Sig
end

module Test::Unit
  VERSION = ::T.let(nil, ::T.untyped)
end

module Test::Unit::Assertions
  NOT_SPECIFIED = ::T.let(nil, ::T.untyped)
end

class Test::Unit::Assertions::ThrowTagExtractor
  UncaughtThrowPatterns = ::T.let(nil, ::T.untyped)
end

module Test::Unit::Assertions
  extend ::T::Sig
end

module Test::Unit::Attribute::BaseClassMethods
  extend ::T::Sig
end

module Test::Unit::Attribute::ClassMethods
  extend ::T::Sig
end

module Test::Unit::Attribute
  extend ::T::Sig
end

class Test::Unit::AutoRunner
  def base(); end

  def base=(base); end

  def collector=(collector); end

  def color_scheme(); end

  def color_scheme=(color_scheme); end

  def default_test_paths(); end

  def default_test_paths=(default_test_paths); end

  def exclude(); end

  def exclude=(exclude); end

  def filters(); end

  def filters=(filters); end

  def initialize(standalone); end

  def keyword_display(keywords); end

  def listeners(); end

  def listeners=(listeners); end

  def load_config(file); end

  def options(); end

  def pattern(); end

  def pattern=(pattern); end

  def prepare(); end

  def process_args(args=T.unsafe(nil)); end

  def run(); end

  def runner=(runner); end

  def runner_options(); end

  def stop_on_failure=(stop_on_failure); end

  def stop_on_failure?(); end

  def suite(); end

  def to_run(); end

  def to_run=(to_run); end

  def workdir(); end

  def workdir=(workdir); end
  ADDITIONAL_OPTIONS = ::T.let(nil, ::T.untyped)
  COLLECTORS = ::T.let(nil, ::T.untyped)
  PREPARE_HOOKS = ::T.let(nil, ::T.untyped)
  RUNNERS = ::T.let(nil, ::T.untyped)
end

class Test::Unit::AutoRunner::StopOnFailureListener
  def attach_to_mediator(mediator); end
end

class Test::Unit::AutoRunner::StopOnFailureListener
end

class Test::Unit::AutoRunner
  def self.collector(id); end

  def self.default_runner(); end

  def self.default_runner=(id); end

  def self.need_auto_run=(need); end

  def self.need_auto_run?(); end

  def self.prepare(hook=T.unsafe(nil), &block); end

  def self.register_collector(id, collector_builder=T.unsafe(nil), &block); end

  def self.register_color_scheme(id, scheme); end

  def self.register_runner(id, runner_builder=T.unsafe(nil), &block); end

  def self.run(force_standalone=T.unsafe(nil), default_dir=T.unsafe(nil), argv=T.unsafe(nil), &block); end

  def self.runner(id); end

  def self.setup_option(option_builder=T.unsafe(nil), &block); end

  def self.standalone?(); end
end

module Test::Unit::AutoRunnerLoader
  extend ::T::Sig
end

module Test::Unit::Data::ClassMethods
  extend ::T::Sig
end

module Test::Unit::Data
  extend ::T::Sig
end

module Test::Unit::Diff
  extend ::T::Sig
end

class Test::Unit::Error
  LABEL = ::T.let(nil, ::T.untyped)
  SINGLE_CHARACTER = ::T.let(nil, ::T.untyped)
end

module Test::Unit::ErrorHandler
  NOT_PASS_THROUGH_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  NOT_PASS_THROUGH_EXCEPTION_NAMES = ::T.let(nil, ::T.untyped)
  PASS_THROUGH_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  PASS_THROUGH_EXCEPTION_NAMES = ::T.let(nil, ::T.untyped)
end

module Test::Unit::ErrorHandler
  extend ::T::Sig
end

module Test::Unit::ExceptionHandler::ClassMethods
  extend ::T::Sig
end

module Test::Unit::ExceptionHandler
  extend ::T::Sig
end

class Test::Unit::Failure
  LABEL = ::T.let(nil, ::T.untyped)
  SINGLE_CHARACTER = ::T.let(nil, ::T.untyped)
end

module Test::Unit::FailureHandler
  extend ::T::Sig
end

module Test::Unit::Fixture::ClassMethods
  extend ::T::Sig
end

module Test::Unit::Fixture
  extend ::T::Sig
end

class Test::Unit::Notification
  LABEL = ::T.let(nil, ::T.untyped)
  SINGLE_CHARACTER = ::T.let(nil, ::T.untyped)
end

module Test::Unit::NotificationHandler
  extend ::T::Sig
end

class Test::Unit::Omission
  LABEL = ::T.let(nil, ::T.untyped)
  SINGLE_CHARACTER = ::T.let(nil, ::T.untyped)
end

module Test::Unit::OmissionHandler
  extend ::T::Sig
end

class Test::Unit::Pending
  LABEL = ::T.let(nil, ::T.untyped)
  SINGLE_CHARACTER = ::T.let(nil, ::T.untyped)
end

module Test::Unit::PendingHandler
  extend ::T::Sig
end

module Test::Unit::Priority::ClassMethods
  extend ::T::Sig
end

module Test::Unit::Priority
  extend ::T::Sig
end

class Test::Unit::TestCase
  AVAILABLE_ORDERS = ::T.let(nil, ::T.untyped)
  DESCENDANTS = ::T.let(nil, ::T.untyped)
  FINISHED = ::T.let(nil, ::T.untyped)
  FINISHED_OBJECT = ::T.let(nil, ::T.untyped)
  STARTED = ::T.let(nil, ::T.untyped)
  STARTED_OBJECT = ::T.let(nil, ::T.untyped)
end

module Test::Unit::TestCaseNotificationSupport
  extend ::T::Sig
end

module Test::Unit::TestCaseOmissionSupport
  extend ::T::Sig
end

module Test::Unit::TestCasePendingSupport
  extend ::T::Sig
end

module Test::Unit::TestResultErrorSupport
  extend ::T::Sig
end

module Test::Unit::TestResultFailureSupport
  extend ::T::Sig
end

module Test::Unit::TestResultNotificationSupport
  extend ::T::Sig
end

module Test::Unit::TestResultOmissionSupport
  extend ::T::Sig
end

module Test::Unit::TestResultPendingSupport
  extend ::T::Sig
end

class Test::Unit::TestSuite
  FINISHED = ::T.let(nil, ::T.untyped)
  FINISHED_OBJECT = ::T.let(nil, ::T.untyped)
  STARTED = ::T.let(nil, ::T.untyped)
  STARTED_OBJECT = ::T.let(nil, ::T.untyped)
end

module Test::Unit::Util::BacktraceFilter
  POWERASSERT_PREFIX = ::T.let(nil, ::T.untyped)
  TESTUNIT_FILE_SEPARATORS = ::T.let(nil, ::T.untyped)
  TESTUNIT_PREFIX = ::T.let(nil, ::T.untyped)
  TESTUNIT_RB_FILE = ::T.let(nil, ::T.untyped)
end

module Test::Unit::Util::BacktraceFilter
  extend ::T::Sig
end

module Test::Unit::Util::MethodOwnerFinder
  extend ::T::Sig
end

module Test::Unit::Util::Output
  extend ::T::Sig
end

module Test::Unit::Util
  extend ::T::Sig
end

module Test::Unit
  extend ::T::Sig
end

module Test
  extend ::T::Sig
end

module ThinkingSphinx
  MAXIMUM_STATEMENT_LENGTH = ::T.let(nil, ::T.untyped)
end

module ThinkingSphinx::ActiveRecord::AssociationProxy
  extend ::T::Sig
end

class ThinkingSphinx::ActiveRecord::Attribute::SphinxPresenter
  SPHINX_TYPES = ::T.let(nil, ::T.untyped)
end

class ThinkingSphinx::ActiveRecord::Attribute::Type
  UPDATEABLE_TYPES = ::T.let(nil, ::T.untyped)
end

module ThinkingSphinx::ActiveRecord::Base
  extend ::T::Sig
end

class ThinkingSphinx::ActiveRecord::Callbacks::UpdateCallbacks
  CHANGED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

module ThinkingSphinx::ActiveRecord::Callbacks
  extend ::T::Sig
end

module ThinkingSphinx::ActiveRecord::DatabaseAdapters
  extend ::T::Sig
end

module ThinkingSphinx::ActiveRecord::Depolymorph::OverriddenReflection::BuildJoinConstraint
  extend ::T::Sig
end

module ThinkingSphinx::ActiveRecord::Depolymorph::OverriddenReflection::JoinScope
  extend ::T::Sig
end

module ThinkingSphinx::ActiveRecord::Depolymorph
  extend ::T::Sig
end

ThinkingSphinx::ActiveRecord::FilterReflection::ReflectionGenerator = ThinkingSphinx::ActiveRecord::Depolymorph::OverriddenReflection

class ThinkingSphinx::ActiveRecord::LogSubscriber
  def caution(event); end

  def guard(event); end

  def message(event); end

  def query(event); end
end

class ThinkingSphinx::ActiveRecord::SQLSource
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module ThinkingSphinx::ActiveRecord
  extend ::T::Sig
end

module ThinkingSphinx::Commands
  extend ::T::Sig
end

module ThinkingSphinx::Configuration::Defaults
  ADDRESS = ::T.let(nil, ::T.untyped)
  PANES = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
end

module ThinkingSphinx::Configuration::Defaults
  extend ::T::Sig
end

module ThinkingSphinx::Connection
  MAXIMUM_RETRIES = ::T.let(nil, ::T.untyped)
end

module ThinkingSphinx::Connection
  extend ::T::Sig
end

module ThinkingSphinx::Core::Field
  extend ::T::Sig
end

module ThinkingSphinx::Core::Index
  extend ::T::Sig
end

module ThinkingSphinx::Core::Property
  extend ::T::Sig
end

module ThinkingSphinx::Core::Settings
  extend ::T::Sig
end

module ThinkingSphinx::Core
  extend ::T::Sig
end

module ThinkingSphinx::Deltas
  extend ::T::Sig
end

module ThinkingSphinx::Distributed
  extend ::T::Sig
end

class ThinkingSphinx::Excerpter
  DefaultOptions = ::T.let(nil, ::T.untyped)
end

class ThinkingSphinx::FloatFormatter
  PATTERN = ::T.let(nil, ::T.untyped)
end

module ThinkingSphinx::Frameworks
  extend ::T::Sig
end

module ThinkingSphinx::Guard
  extend ::T::Sig
end

module ThinkingSphinx::Hooks
  extend ::T::Sig
end

module ThinkingSphinx::IndexingStrategies
  extend ::T::Sig
end

module ThinkingSphinx::Interfaces
  extend ::T::Sig
end

module ThinkingSphinx::Masks
  extend ::T::Sig
end

module ThinkingSphinx::Middlewares
  BASE_MIDDLEWARES = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  IDS_ONLY = ::T.let(nil, ::T.untyped)
  RAW_ONLY = ::T.let(nil, ::T.untyped)
end

class ThinkingSphinx::Middlewares::ActiveRecordTranslator
  NO_INDEX = ::T.let(nil, ::T.untyped)
  NO_MODEL = ::T.let(nil, ::T.untyped)
end

class ThinkingSphinx::Middlewares::SphinxQL
  SELECT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ThinkingSphinx::Middlewares
  extend ::T::Sig
end

module ThinkingSphinx::Panes
  extend ::T::Sig
end

module ThinkingSphinx::Query
  extend ::T::Sig
end

class ThinkingSphinx::RakeInterface
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ThinkingSphinx::RealTime::Callbacks
  extend ::T::Sig
end

module ThinkingSphinx::RealTime
  extend ::T::Sig
end

module ThinkingSphinx::Scopes::ClassMethods
  extend ::T::Sig
end

module ThinkingSphinx::Scopes
  extend ::T::Sig
end

class ThinkingSphinx::Search
  CORE_METHODS = ::T.let(nil, ::T.untyped)
  DEFAULT_MASKS = ::T.let(nil, ::T.untyped)
  KNOWN_OPTIONS = ::T.let(nil, ::T.untyped)
  SAFE_METHODS = ::T.let(nil, ::T.untyped)
end

class ThinkingSphinx::Settings
  ALWAYS_ABSOLUTE = ::T.let(nil, ::T.untyped)
  DEFAULTS = ::T.let(nil, ::T.untyped)
  FILE_KEYS = ::T.let(nil, ::T.untyped)
end

module ThinkingSphinx::Subscribers
  extend ::T::Sig
end

class ThinkingSphinx::Wildcard
  DEFAULT_TOKEN = ::T.let(nil, ::T.untyped)
end

module ThinkingSphinx::WithOutput
  extend ::T::Sig
end

module ThinkingSphinx
  extend ::T::Sig
end

class Thor
  def help(command=T.unsafe(nil), subcommand=T.unsafe(nil)); end
  Correctable = ::T.let(nil, ::T.untyped)
  HELP_MAPPINGS = ::T.let(nil, ::T.untyped)
  TEMPLATE_EXTNAME = ::T.let(nil, ::T.untyped)
  THOR_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module Thor::Actions
  extend ::T::Sig
end

Thor::AmbiguousTaskError = Thor::AmbiguousCommandError

class Thor::Argument
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Thor::Arguments
  NUMERIC = ::T.let(nil, ::T.untyped)
end

module Thor::Base
  extend ::T::Sig
end

class Thor::Command
  FILE_REGEXP = ::T.let(nil, ::T.untyped)
end

module Thor::CoreExt
  extend ::T::Sig
end

Thor::DynamicTask = Thor::DynamicCommand

class Thor::Group
  def _invoke_for_class_method(klass, command=T.unsafe(nil), *args, &block); end
end

Thor::HiddenTask = Thor::HiddenCommand

module Thor::Invocation
  extend ::T::Sig
end

module Thor::LineEditor
  extend ::T::Sig
end

class Thor::Option
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Thor::Options
  EQ_RE = ::T.let(nil, ::T.untyped)
  LONG_RE = ::T.let(nil, ::T.untyped)
  OPTS_END = ::T.let(nil, ::T.untyped)
  SHORT_NUM = ::T.let(nil, ::T.untyped)
  SHORT_RE = ::T.let(nil, ::T.untyped)
  SHORT_SQ_RE = ::T.let(nil, ::T.untyped)
end

module Thor::RakeCompat
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module Thor::RakeCompat
  extend ::T::Sig
  def self.included(base); end

  def self.rake_classes(); end
end

module Thor::Sandbox
  extend ::T::Sig
end

module Thor::Shell
  SHELL_DELEGATED_METHODS = ::T.let(nil, ::T.untyped)
end

module Thor::Shell
  extend ::T::Sig
end

Thor::Task = Thor::Command

Thor::UndefinedTaskError = Thor::UndefinedCommandError

module Thor::Util
  extend ::T::Sig
end

class Thread
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def abort_on_exception(); end

  def abort_on_exception=(abort_on_exception); end

  def add_trace_func(_); end

  def backtrace(*_); end

  def backtrace_locations(*_); end

  def exit(); end

  def fetch(*_); end

  def group(); end

  def initialize(*_); end

  def join(*_); end

  def key?(_); end

  def keys(); end

  def name(); end

  def name=(name); end

  def pending_interrupt?(*_); end

  def priority(); end

  def priority=(priority); end

  def report_on_exception(); end

  def report_on_exception=(report_on_exception); end

  def run(); end

  def safe_level(); end

  def status(); end

  def stop?(); end

  def terminate(); end

  def thread_variable?(_); end

  def thread_variable_get(_); end

  def thread_variable_set(_, _1); end

  def thread_variables(); end

  def value(); end

  def wakeup(); end
end

class Thread::Backtrace
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Thread::Backtrace::Location
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Thread::Backtrace::Location
  extend ::T::Sig
end

class Thread::Backtrace
  extend ::T::Sig
end

class Thread::ConditionVariable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def broadcast(); end

  def marshal_dump(); end

  def signal(); end

  def wait(*_); end
end

class Thread::ConditionVariable
  extend ::T::Sig
end

class Thread::Mutex
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def lock(); end

  def locked?(); end

  def owned?(); end

  def synchronize(); end

  def try_lock(); end

  def unlock(); end
end

class Thread::Mutex
  extend ::T::Sig
end

class Thread::Queue
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def <<(_); end

  def clear(); end

  def close(); end

  def closed?(); end

  def deq(*_); end

  def empty?(); end

  def enq(_); end

  def length(); end

  def marshal_dump(); end

  def num_waiting(); end

  def pop(*_); end

  def push(_); end

  def shift(*_); end

  def size(); end
end

class Thread::Queue
  extend ::T::Sig
end

class Thread::SizedQueue
  def <<(*_); end

  def enq(*_); end

  def initialize(_); end

  def max(); end

  def max=(max); end

  def push(*_); end
end

class Thread::SizedQueue
  extend ::T::Sig
end

class Thread
  extend ::T::Sig
  def self.abort_on_exception(); end

  def self.abort_on_exception=(abort_on_exception); end

  def self.exclusive(&block); end

  def self.exit(); end

  def self.fork(*_); end

  def self.handle_interrupt(_); end

  def self.kill(_); end

  def self.list(); end

  def self.pass(); end

  def self.pending_interrupt?(*_); end

  def self.report_on_exception(); end

  def self.report_on_exception=(report_on_exception); end

  def self.start(*_); end

  def self.stop(); end
end

class ThreadError
  extend ::T::Sig
end

class ThreadGroup
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def add(_); end

  def enclose(); end

  def enclosed?(); end

  def list(); end
  Default = ::T.let(nil, ::T.untyped)
end

class ThreadGroup
  extend ::T::Sig
end

module ThreadSafe
  NULL = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

ThreadSafe::Array = Array

class ThreadSafe::AtomicReferenceCacheBackend
  def [](key); end

  def []=(key, value); end

  def clear(); end

  def compute(key); end

  def compute_if_absent(key); end

  def compute_if_present(key); end

  def delete(key); end

  def delete_pair(key, value); end

  def each_pair(); end

  def empty?(); end

  def get_and_set(key, value); end

  def get_or_default(key, else_value=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil)); end

  def key?(key); end

  def merge_pair(key, value); end

  def replace_if_exists(key, new_value); end

  def replace_pair(key, old_value, new_value); end

  def size(); end
  DEFAULT_CAPACITY = ::T.let(nil, ::T.untyped)
  HASH_BITS = ::T.let(nil, ::T.untyped)
  LOCKED = ::T.let(nil, ::T.untyped)
  MAX_CAPACITY = ::T.let(nil, ::T.untyped)
  MOVED = ::T.let(nil, ::T.untyped)
  NOW_RESIZING = ::T.let(nil, ::T.untyped)
  TRANSFER_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  WAITING = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::AtomicReferenceCacheBackend::Node
  include ::ThreadSafe::Util::CheapLockable
  def initialize(hash, key, value, next_node=T.unsafe(nil)); end

  def key(); end

  def key?(key); end

  def locked?(); end

  def matches?(key, hash); end

  def pure_hash(); end

  def try_await_lock(table, i); end

  def try_lock_via_hash(node_hash=T.unsafe(nil)); end

  def unlock_via_hash(locked_hash, node_hash); end
  HASH_BITS = ::T.let(nil, ::T.untyped)
  LOCKED = ::T.let(nil, ::T.untyped)
  MOVED = ::T.let(nil, ::T.untyped)
  SPIN_LOCK_ATTEMPTS = ::T.let(nil, ::T.untyped)
  WAITING = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::AtomicReferenceCacheBackend::Node
  extend ::ThreadSafe::Util::Volatile
  def self.locked_hash?(hash); end
end

class ThreadSafe::AtomicReferenceCacheBackend::Table
  def cas_new_node(i, hash, key, value); end

  def delete_node_at(i, node, predecessor_node); end

  def try_lock_via_hash(i, node, node_hash); end

  def try_to_cas_in_computed(i, hash, key); end
end

class ThreadSafe::AtomicReferenceCacheBackend::Table
end

class ThreadSafe::AtomicReferenceCacheBackend
  extend ::ThreadSafe::Util::Volatile
end

ThreadSafe::ConcurrentCacheBackend = ThreadSafe::MriCacheBackend

ThreadSafe::Hash = Hash

class ThreadSafe::MriCacheBackend
  WRITE_LOCK = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::SynchronizedCacheBackend
  include ::Mutex_m
  def lock(); end

  def locked?(); end

  def synchronize(&block); end

  def try_lock(); end

  def unlock(); end
end

class ThreadSafe::SynchronizedCacheBackend
end

module ThreadSafe::Util
  CPU_COUNT = ::T.let(nil, ::T.untyped)
  FIXNUM_BIT_SIZE = ::T.let(nil, ::T.untyped)
  MAX_INT = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::Util::Adder
  def add(x); end

  def decrement(); end

  def increment(); end

  def reset(); end

  def sum(); end
end

class ThreadSafe::Util::Adder
end

class ThreadSafe::Util::AtomicReference
  def compare_and_set(old_value, new_value); end

  def get(); end

  def initialize(value=T.unsafe(nil)); end

  def set(new_value); end

  def value(); end

  def value=(new_value); end
end

class ThreadSafe::Util::AtomicReference
end

module ThreadSafe::Util::CheapLockable
  def cas_mutex(old_value, new_value); end

  def compare_and_set_mutex(old_value, new_value); end

  def lazy_set_mutex(value); end

  def mutex(); end

  def mutex=(value); end
end

module ThreadSafe::Util::CheapLockable
  extend ::ThreadSafe::Util::Volatile
  extend ::T::Sig
end

class ThreadSafe::Util::PowerOfTwoTuple
  def hash_to_index(hash); end

  def next_in_size_table(); end

  def volatile_get_by_hash(hash); end

  def volatile_set_by_hash(hash, value); end
end

class ThreadSafe::Util::PowerOfTwoTuple
end

class ThreadSafe::Util::Striped64
  def busy?(); end

  def initialize(); end

  def retry_update(x, hash_code, was_uncontended); end
  THREAD_LOCAL_KEY = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::Util::Striped64::Cell
  def cas(old_value, new_value); end

  def cas_computed(); end

  def padding_(); end
end

class ThreadSafe::Util::Striped64::Cell
end

class ThreadSafe::Util::Striped64
  extend ::ThreadSafe::Util::Volatile
end

module ThreadSafe::Util::Volatile
  def attr_volatile(*attr_names); end
end

module ThreadSafe::Util::Volatile
  extend ::T::Sig
end

class ThreadSafe::Util::VolatileTuple
  include ::Enumerable
  def cas(i, old_value, new_value); end

  def compare_and_set(i, old_value, new_value); end

  def each(&blk); end

  def initialize(size); end

  def size(); end

  def volatile_get(i); end

  def volatile_set(i, value); end
end

class ThreadSafe::Util::VolatileTuple
end

module ThreadSafe::Util::XorShiftRandom
  def get(); end

  def xorshift(x); end
  MAX_XOR_SHIFTABLE_INT = ::T.let(nil, ::T.untyped)
end

module ThreadSafe::Util::XorShiftRandom
  extend ::ThreadSafe::Util::XorShiftRandom
  extend ::T::Sig
end

module ThreadSafe::Util
  extend ::T::Sig
end

module ThreadSafe
  extend ::T::Sig
end

module Threadsafe
  extend ::T::Sig
end

module Tilt
  LOCK = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Tilt::BuilderTemplate
  def precompiled_postamble(locals); end

  def precompiled_template(locals); end
end

class Tilt::BuilderTemplate
end

class Tilt::CSVTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::CSVTemplate
  def self.engine(); end
end

class Tilt::CoffeeScriptLiterateTemplate
end

class Tilt::CoffeeScriptLiterateTemplate
end

class Tilt::CoffeeScriptTemplate
  def allows_script?(); end
end

class Tilt::CoffeeScriptTemplate
  def self.default_bare(); end

  def self.default_bare=(value); end

  def self.default_no_wrap(); end

  def self.default_no_wrap=(value); end

  def self.literate?(); end
end

module Tilt::CompiledTemplates
  extend ::T::Sig
end

class Tilt::ERBTemplate
  def precompiled(locals); end

  def precompiled_postamble(locals); end

  def precompiled_preamble(locals); end

  def precompiled_template(locals); end
  SUPPORTS_KVARGS = ::T.let(nil, ::T.untyped)
end

class Tilt::ERBTemplate
  def self.default_output_variable(); end

  def self.default_output_variable=(name); end
end

class Tilt::ErubisTemplate
end

class Tilt::ErubisTemplate
end

class Tilt::EtanniTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::EtanniTemplate
end

class Tilt::HamlTemplate
  def precompiled_template(locals); end
end

class Tilt::HamlTemplate
end

class Tilt::Mapping
  AUTOLOAD_IS_BROKEN = ::T.let(nil, ::T.untyped)
  LOCK = ::T.let(nil, ::T.untyped)
end

class Tilt::NokogiriTemplate
  def evaluate(scope, locals); end

  def precompiled_postamble(locals); end

  def precompiled_preamble(locals); end

  def precompiled_template(locals); end
  DOCUMENT_HEADER = ::T.let(nil, ::T.untyped)
end

class Tilt::NokogiriTemplate
end

class Tilt::PlainTemplate
end

class Tilt::PlainTemplate
end

class Tilt::RDocTemplate
  def allows_script?(); end

  def markup(); end
end

class Tilt::RDocTemplate
end

class Tilt::RedcarpetTemplate
  def allows_script?(); end

  def generate_renderer(); end
end

class Tilt::RedcarpetTemplate
end

class Tilt::SassTemplate
  def allows_script?(); end
end

Tilt::SassTemplate::Sass = SassC

class Tilt::SassTemplate
end

class Tilt::ScssTemplate
end

class Tilt::ScssTemplate
end

class Tilt::SigilTemplate
  def allows_script?(); end
end

class Tilt::SigilTemplate
end

class Tilt::StringTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::StringTemplate
end

Tilt::TOPOBJECT = Tilt::CompiledTemplates

class Tilt::YajlTemplate
  def decorate(json); end

  def precompiled_postamble(locals); end

  def precompiled_preamble(locals); end

  def precompiled_template(locals); end
end

class Tilt::YajlTemplate
end

module Tilt
  extend ::T::Sig
end

class Time
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  COMMON_YEAR_DAYS_IN_MONTH = ::T.let(nil, ::T.untyped)
  DATE_FORMATS = ::T.let(nil, ::T.untyped)
end

class Time
  extend ::T::Sig
end

class Timecop
  VERSION = ::T.let(nil, ::T.untyped)
end

class Timeout::Error
  extend ::T::Sig
end

module Timeout
  extend ::T::Sig
end

module TimestampFormatter
  extend ::T::Sig
end

ToRuby = Psych::Visitors::ToRuby

class Token
  include ::Token::GeneratedAssociationMethods
  def autosave_associated_records_for_package(*args); end

  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end

  def regenerate_string(); end
end

module Token::GeneratedAssociationMethods
  def build_package(*args, &block); end

  def build_user(*args, &block); end

  def create_package(*args, &block); end

  def create_package!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def package(); end

  def package=(value); end

  def reload_package(); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module Token::GeneratedAssociationMethods
  extend ::T::Sig
end

class Token::Rebuild
  include ::Token::Rebuild::GeneratedAssociationMethods
end

module Token::Rebuild::GeneratedAssociationMethods
end

module Token::Rebuild::GeneratedAssociationMethods
  extend ::T::Sig
end

class Token::Release
  include ::Token::Release::GeneratedAssociationMethods
end

module Token::Release::GeneratedAssociationMethods
end

module Token::Release::GeneratedAssociationMethods
  extend ::T::Sig
end

class Token::Rss
  include ::Token::Rss::GeneratedAssociationMethods
end

module Token::Rss::GeneratedAssociationMethods
end

module Token::Rss::GeneratedAssociationMethods
  extend ::T::Sig
end

class Token::Service
  include ::Token::Service::GeneratedAssociationMethods
end

module Token::Service::GeneratedAssociationMethods
end

module Token::Service::GeneratedAssociationMethods
  extend ::T::Sig
end

class TracePoint
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def event(); end
end

class TracePoint
  extend ::T::Sig
end

module Trigger::Errors
  extend ::T::Sig
end

module Trigger
  extend ::T::Sig
end

module TriggerControllerService
  extend ::T::Sig
end

class TrueClass
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::JSON::Ext::Generator::GeneratorMethods::TrueClass
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class TrueClass
  extend ::T::Sig
end

class TypeError
  extend ::T::Sig
end

class UDPSocket
  extend ::T::Sig
end

class UNIXServer
  extend ::T::Sig
end

class UNIXSocket
  extend ::T::Sig
end

module URI
  include ::URI::RFC2396_REGEXP
end

class URI::BadURIError
  extend ::T::Sig
end

class URI::Error
  extend ::T::Sig
end

module URI::Escape
  def decode(*arg); end

  def encode(*arg); end

  def escape(*arg); end

  def unescape(*arg); end
end

module URI::Escape
  extend ::T::Sig
end

class URI::FTP
  include ::OpenURI::OpenRead
  def buffer_open(buf, proxy, options); end

  def set_typecode(v); end

  def typecode(); end

  def typecode=(typecode); end
end

class URI::FTP
  extend ::T::Sig
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class URI::GID
  COMPONENT = ::T.let(nil, ::T.untyped)
  PATH_REGEXP = ::T.let(nil, ::T.untyped)
end

class URI::Generic
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def +(oth); end

  def -(oth); end

  def ==(oth); end

  def absolute(); end

  def absolute?(); end

  def coerce(oth); end

  def component(); end

  def component_ary(); end

  def default_port(); end

  def eql?(oth); end

  def find_proxy(env=T.unsafe(nil)); end

  def fragment(); end

  def fragment=(v); end

  def hierarchical?(); end

  def host(); end

  def host=(v); end

  def hostname(); end

  def hostname=(v); end

  def initialize(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser=T.unsafe(nil), arg_check=T.unsafe(nil)); end

  def merge(oth); end

  def merge!(oth); end

  def normalize(); end

  def normalize!(); end

  def opaque(); end

  def opaque=(v); end

  def parser(); end

  def password(); end

  def password=(password); end

  def path(); end

  def path=(v); end

  def port(); end

  def port=(v); end

  def query(); end

  def query=(v); end

  def registry(); end

  def registry=(v); end

  def relative?(); end

  def route_from(oth); end

  def route_to(oth); end

  def scheme(); end

  def scheme=(v); end

  def select(*components); end

  def set_host(v); end

  def set_opaque(v); end

  def set_password(v); end

  def set_path(v); end

  def set_port(v); end

  def set_registry(v); end

  def set_scheme(v); end

  def set_user(v); end

  def set_userinfo(user, password=T.unsafe(nil)); end

  def user(); end

  def user=(user); end

  def userinfo(); end

  def userinfo=(userinfo); end
end

class URI::Generic
  extend ::T::Sig
  def self.build(args); end

  def self.build2(args); end

  def self.component(); end

  def self.default_port(); end

  def self.use_proxy?(hostname, addr, port, no_proxy); end

  def self.use_registry(); end
end

class URI::HTTP
  include ::OpenURI::OpenRead
  def buffer_open(buf, proxy, options); end

  def request_uri(); end
end

class URI::HTTP
  extend ::T::Sig
end

class URI::HTTPS
  extend ::T::Sig
end

class URI::InvalidComponentError
  extend ::T::Sig
end

class URI::InvalidURIError
  extend ::T::Sig
end

class URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
end

class URI::LDAP
  extend ::T::Sig
end

class URI::LDAPS
  extend ::T::Sig
end

class URI::MailTo
  def headers(); end

  def headers=(v); end

  def initialize(*arg); end

  def set_headers(v); end

  def set_to(v); end

  def to(); end

  def to=(v); end

  def to_mailtext(); end

  def to_rfc822text(); end
end

class URI::MailTo
  extend ::T::Sig
end

URI::Parser = URI::RFC2396_Parser

URI::REGEXP = URI::RFC2396_REGEXP

class URI::RFC2396_Parser
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def escape(str, unsafe=T.unsafe(nil)); end

  def extract(str, schemes=T.unsafe(nil)); end

  def initialize(opts=T.unsafe(nil)); end

  def join(*uris); end

  def make_regexp(schemes=T.unsafe(nil)); end

  def parse(uri); end

  def pattern(); end

  def regexp(); end

  def split(uri); end

  def unescape(str, escaped=T.unsafe(nil)); end
end

class URI::RFC2396_Parser
  extend ::T::Sig
end

module URI::RFC2396_REGEXP::PATTERN
  extend ::T::Sig
end

module URI::RFC2396_REGEXP
  extend ::T::Sig
end

class URI::RFC3986_Parser
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def join(*uris); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
end

class URI::RFC3986_Parser
  extend ::T::Sig
end

module URI::Util
  extend ::T::Sig
  def self.make_components_hash(klass, array_hash); end
end

module URI
  extend ::T::Sig
  extend ::URI::Escape
  def self.decode_www_form(str, enc=T.unsafe(nil), separator: T.unsafe(nil), use__charset_: T.unsafe(nil), isindex: T.unsafe(nil)); end

  def self.encode_www_form(enum, enc=T.unsafe(nil)); end

  def self.encode_www_form_component(str, enc=T.unsafe(nil)); end

  def self.get_encoding(label); end
end

class Uglifier
  DEFAULTS = ::T.let(nil, ::T.untyped)
  ES5FallbackPath = ::T.let(nil, ::T.untyped)
  EXTRA_OPTIONS = ::T.let(nil, ::T.untyped)
  HarmonySourcePath = ::T.let(nil, ::T.untyped)
  MANGLE_PROPERTIES_DEFAULTS = ::T.let(nil, ::T.untyped)
  SOURCE_MAP_DEFAULTS = ::T.let(nil, ::T.untyped)
  SourceMapPath = ::T.let(nil, ::T.untyped)
  SourcePath = ::T.let(nil, ::T.untyped)
  SplitFallbackPath = ::T.let(nil, ::T.untyped)
  UglifyJSWrapperPath = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class UnboundMethod
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def clone(); end

  def original_name(); end
end

class UnboundMethod
  extend ::T::Sig
end

class UncaughtThrowError
  def tag(); end

  def value(); end
end

class UncaughtThrowError
  extend ::T::Sig
end

module Unicode::DisplayWidth
  DATA_DIRECTORY = ::T.let(nil, ::T.untyped)
  DEPTHS = ::T.let(nil, ::T.untyped)
  INDEX = ::T.let(nil, ::T.untyped)
  INDEX_FILENAME = ::T.let(nil, ::T.untyped)
  NO_STRING_EXT = ::T.let(nil, ::T.untyped)
  UNICODE_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Unicode::DisplayWidth
  extend ::T::Sig
end

module Unicode
  extend ::T::Sig
end

module UnicodeNormalize
end

module UnicodeNormalize
  extend ::T::Sig
end

class UniformNotifier
  AVAILABLE_NOTIFIERS = ::T.let(nil, ::T.untyped)
  NOTIFIERS = ::T.let(nil, ::T.untyped)
end

class UniformNotifier::Slack
  POSSIBLE_OPTIONS = ::T.let(nil, ::T.untyped)
end

class UnregisteredUser
  include ::UnregisteredUser::GeneratedAssociationMethods
end

module UnregisteredUser::GeneratedAssociationMethods
end

module UnregisteredUser::GeneratedAssociationMethods
  extend ::T::Sig
end

class UpdateNotificationEvents
  def semaphore(); end

  def semaphore=(obj); end
end

class UpdateNotificationEvents
  def self.semaphore(); end

  def self.semaphore=(obj); end
end

class UpdateinfoCounter
  include ::UpdateinfoCounter::GeneratedAssociationMethods
end

module UpdateinfoCounter::GeneratedAssociationMethods
end

module UpdateinfoCounter::GeneratedAssociationMethods
  extend ::T::Sig
end

class User
  include ::User::GeneratedAssociationMethods
  include ::ActiveModel::SecurePassword::InstanceMethodsOnActivation
  def after_add_for_announcements(); end

  def after_add_for_announcements=(val); end

  def after_add_for_announcements?(); end

  def after_add_for_comments(); end

  def after_add_for_comments=(val); end

  def after_add_for_comments?(); end

  def after_add_for_commit_activities(); end

  def after_add_for_commit_activities=(val); end

  def after_add_for_commit_activities?(); end

  def after_add_for_event_subscriptions(); end

  def after_add_for_event_subscriptions=(val); end

  def after_add_for_event_subscriptions?(); end

  def after_add_for_groups(); end

  def after_add_for_groups=(val); end

  def after_add_for_groups?(); end

  def after_add_for_groups_users(); end

  def after_add_for_groups_users=(val); end

  def after_add_for_groups_users?(); end

  def after_add_for_messages(); end

  def after_add_for_messages=(val); end

  def after_add_for_messages?(); end

  def after_add_for_relationships(); end

  def after_add_for_relationships=(val); end

  def after_add_for_relationships?(); end

  def after_add_for_requests_created(); end

  def after_add_for_requests_created=(val); end

  def after_add_for_requests_created?(); end

  def after_add_for_reviews(); end

  def after_add_for_reviews=(val); end

  def after_add_for_reviews?(); end

  def after_add_for_roles(); end

  def after_add_for_roles=(val); end

  def after_add_for_roles?(); end

  def after_add_for_roles_users(); end

  def after_add_for_roles_users=(val); end

  def after_add_for_roles_users?(); end

  def after_add_for_rss_feed_items(); end

  def after_add_for_rss_feed_items=(val); end

  def after_add_for_rss_feed_items?(); end

  def after_add_for_status_messages(); end

  def after_add_for_status_messages=(val); end

  def after_add_for_status_messages?(); end

  def after_add_for_subaccounts(); end

  def after_add_for_subaccounts=(val); end

  def after_add_for_subaccounts?(); end

  def after_add_for_tokens(); end

  def after_add_for_tokens=(val); end

  def after_add_for_tokens?(); end

  def after_add_for_upload_jobs(); end

  def after_add_for_upload_jobs=(val); end

  def after_add_for_upload_jobs?(); end

  def after_add_for_users_announcements(); end

  def after_add_for_users_announcements=(val); end

  def after_add_for_users_announcements?(); end

  def after_add_for_users_groups(); end

  def after_add_for_users_groups=(val); end

  def after_add_for_users_groups?(); end

  def after_add_for_users_roles(); end

  def after_add_for_users_roles=(val); end

  def after_add_for_users_roles?(); end

  def after_add_for_watched_projects(); end

  def after_add_for_watched_projects=(val); end

  def after_add_for_watched_projects?(); end

  def after_remove_for_announcements(); end

  def after_remove_for_announcements=(val); end

  def after_remove_for_announcements?(); end

  def after_remove_for_comments(); end

  def after_remove_for_comments=(val); end

  def after_remove_for_comments?(); end

  def after_remove_for_commit_activities(); end

  def after_remove_for_commit_activities=(val); end

  def after_remove_for_commit_activities?(); end

  def after_remove_for_event_subscriptions(); end

  def after_remove_for_event_subscriptions=(val); end

  def after_remove_for_event_subscriptions?(); end

  def after_remove_for_groups(); end

  def after_remove_for_groups=(val); end

  def after_remove_for_groups?(); end

  def after_remove_for_groups_users(); end

  def after_remove_for_groups_users=(val); end

  def after_remove_for_groups_users?(); end

  def after_remove_for_messages(); end

  def after_remove_for_messages=(val); end

  def after_remove_for_messages?(); end

  def after_remove_for_relationships(); end

  def after_remove_for_relationships=(val); end

  def after_remove_for_relationships?(); end

  def after_remove_for_requests_created(); end

  def after_remove_for_requests_created=(val); end

  def after_remove_for_requests_created?(); end

  def after_remove_for_reviews(); end

  def after_remove_for_reviews=(val); end

  def after_remove_for_reviews?(); end

  def after_remove_for_roles(); end

  def after_remove_for_roles=(val); end

  def after_remove_for_roles?(); end

  def after_remove_for_roles_users(); end

  def after_remove_for_roles_users=(val); end

  def after_remove_for_roles_users?(); end

  def after_remove_for_rss_feed_items(); end

  def after_remove_for_rss_feed_items=(val); end

  def after_remove_for_rss_feed_items?(); end

  def after_remove_for_status_messages(); end

  def after_remove_for_status_messages=(val); end

  def after_remove_for_status_messages?(); end

  def after_remove_for_subaccounts(); end

  def after_remove_for_subaccounts=(val); end

  def after_remove_for_subaccounts?(); end

  def after_remove_for_tokens(); end

  def after_remove_for_tokens=(val); end

  def after_remove_for_tokens?(); end

  def after_remove_for_upload_jobs(); end

  def after_remove_for_upload_jobs=(val); end

  def after_remove_for_upload_jobs?(); end

  def after_remove_for_users_announcements(); end

  def after_remove_for_users_announcements=(val); end

  def after_remove_for_users_announcements?(); end

  def after_remove_for_users_groups(); end

  def after_remove_for_users_groups=(val); end

  def after_remove_for_users_groups?(); end

  def after_remove_for_users_roles(); end

  def after_remove_for_users_roles=(val); end

  def after_remove_for_users_roles?(); end

  def after_remove_for_watched_projects(); end

  def after_remove_for_watched_projects=(val); end

  def after_remove_for_watched_projects?(); end

  def autosave_associated_records_for_announcements(*args); end

  def autosave_associated_records_for_azure_configuration(); end

  def autosave_associated_records_for_comments(*args); end

  def autosave_associated_records_for_commit_activities(*args); end

  def autosave_associated_records_for_ec2_configuration(); end

  def autosave_associated_records_for_event_subscriptions(*args); end

  def autosave_associated_records_for_groups(*args); end

  def autosave_associated_records_for_groups_users(*args); end

  def autosave_associated_records_for_messages(*args); end

  def autosave_associated_records_for_owner(*args); end

  def autosave_associated_records_for_relationships(*args); end

  def autosave_associated_records_for_requests_created(*args); end

  def autosave_associated_records_for_reviews(*args); end

  def autosave_associated_records_for_roles(*args); end

  def autosave_associated_records_for_roles_users(*args); end

  def autosave_associated_records_for_rss_feed_items(*args); end

  def autosave_associated_records_for_rss_token(); end

  def autosave_associated_records_for_status_messages(*args); end

  def autosave_associated_records_for_subaccounts(*args); end

  def autosave_associated_records_for_tokens(*args); end

  def autosave_associated_records_for_upload_jobs(*args); end

  def autosave_associated_records_for_user_registration(); end

  def autosave_associated_records_for_users_announcements(*args); end

  def autosave_associated_records_for_users_groups(*args); end

  def autosave_associated_records_for_users_roles(*args); end

  def autosave_associated_records_for_watched_projects(*args); end

  def before_add_for_announcements(); end

  def before_add_for_announcements=(val); end

  def before_add_for_announcements?(); end

  def before_add_for_comments(); end

  def before_add_for_comments=(val); end

  def before_add_for_comments?(); end

  def before_add_for_commit_activities(); end

  def before_add_for_commit_activities=(val); end

  def before_add_for_commit_activities?(); end

  def before_add_for_event_subscriptions(); end

  def before_add_for_event_subscriptions=(val); end

  def before_add_for_event_subscriptions?(); end

  def before_add_for_groups(); end

  def before_add_for_groups=(val); end

  def before_add_for_groups?(); end

  def before_add_for_groups_users(); end

  def before_add_for_groups_users=(val); end

  def before_add_for_groups_users?(); end

  def before_add_for_messages(); end

  def before_add_for_messages=(val); end

  def before_add_for_messages?(); end

  def before_add_for_relationships(); end

  def before_add_for_relationships=(val); end

  def before_add_for_relationships?(); end

  def before_add_for_requests_created(); end

  def before_add_for_requests_created=(val); end

  def before_add_for_requests_created?(); end

  def before_add_for_reviews(); end

  def before_add_for_reviews=(val); end

  def before_add_for_reviews?(); end

  def before_add_for_roles(); end

  def before_add_for_roles=(val); end

  def before_add_for_roles?(); end

  def before_add_for_roles_users(); end

  def before_add_for_roles_users=(val); end

  def before_add_for_roles_users?(); end

  def before_add_for_rss_feed_items(); end

  def before_add_for_rss_feed_items=(val); end

  def before_add_for_rss_feed_items?(); end

  def before_add_for_status_messages(); end

  def before_add_for_status_messages=(val); end

  def before_add_for_status_messages?(); end

  def before_add_for_subaccounts(); end

  def before_add_for_subaccounts=(val); end

  def before_add_for_subaccounts?(); end

  def before_add_for_tokens(); end

  def before_add_for_tokens=(val); end

  def before_add_for_tokens?(); end

  def before_add_for_upload_jobs(); end

  def before_add_for_upload_jobs=(val); end

  def before_add_for_upload_jobs?(); end

  def before_add_for_users_announcements(); end

  def before_add_for_users_announcements=(val); end

  def before_add_for_users_announcements?(); end

  def before_add_for_users_groups(); end

  def before_add_for_users_groups=(val); end

  def before_add_for_users_groups?(); end

  def before_add_for_users_roles(); end

  def before_add_for_users_roles=(val); end

  def before_add_for_users_roles?(); end

  def before_add_for_watched_projects(); end

  def before_add_for_watched_projects=(val); end

  def before_add_for_watched_projects?(); end

  def before_remove_for_announcements(); end

  def before_remove_for_announcements=(val); end

  def before_remove_for_announcements?(); end

  def before_remove_for_comments(); end

  def before_remove_for_comments=(val); end

  def before_remove_for_comments?(); end

  def before_remove_for_commit_activities(); end

  def before_remove_for_commit_activities=(val); end

  def before_remove_for_commit_activities?(); end

  def before_remove_for_event_subscriptions(); end

  def before_remove_for_event_subscriptions=(val); end

  def before_remove_for_event_subscriptions?(); end

  def before_remove_for_groups(); end

  def before_remove_for_groups=(val); end

  def before_remove_for_groups?(); end

  def before_remove_for_groups_users(); end

  def before_remove_for_groups_users=(val); end

  def before_remove_for_groups_users?(); end

  def before_remove_for_messages(); end

  def before_remove_for_messages=(val); end

  def before_remove_for_messages?(); end

  def before_remove_for_relationships(); end

  def before_remove_for_relationships=(val); end

  def before_remove_for_relationships?(); end

  def before_remove_for_requests_created(); end

  def before_remove_for_requests_created=(val); end

  def before_remove_for_requests_created?(); end

  def before_remove_for_reviews(); end

  def before_remove_for_reviews=(val); end

  def before_remove_for_reviews?(); end

  def before_remove_for_roles(); end

  def before_remove_for_roles=(val); end

  def before_remove_for_roles?(); end

  def before_remove_for_roles_users(); end

  def before_remove_for_roles_users=(val); end

  def before_remove_for_roles_users?(); end

  def before_remove_for_rss_feed_items(); end

  def before_remove_for_rss_feed_items=(val); end

  def before_remove_for_rss_feed_items?(); end

  def before_remove_for_status_messages(); end

  def before_remove_for_status_messages=(val); end

  def before_remove_for_status_messages?(); end

  def before_remove_for_subaccounts(); end

  def before_remove_for_subaccounts=(val); end

  def before_remove_for_subaccounts?(); end

  def before_remove_for_tokens(); end

  def before_remove_for_tokens=(val); end

  def before_remove_for_tokens?(); end

  def before_remove_for_upload_jobs(); end

  def before_remove_for_upload_jobs=(val); end

  def before_remove_for_upload_jobs?(); end

  def before_remove_for_users_announcements(); end

  def before_remove_for_users_announcements=(val); end

  def before_remove_for_users_announcements?(); end

  def before_remove_for_users_groups(); end

  def before_remove_for_users_groups=(val); end

  def before_remove_for_users_groups?(); end

  def before_remove_for_users_roles(); end

  def before_remove_for_users_roles=(val); end

  def before_remove_for_users_roles?(); end

  def before_remove_for_watched_projects(); end

  def before_remove_for_watched_projects=(val); end

  def before_remove_for_watched_projects?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def lookup_strategy(); end

  def lookup_strategy=(obj); end

  def password_confirmation(); end

  def validate_associated_records_for_announcements(*args); end

  def validate_associated_records_for_comments(*args); end

  def validate_associated_records_for_commit_activities(*args); end

  def validate_associated_records_for_event_subscriptions(*args); end

  def validate_associated_records_for_groups(*args); end

  def validate_associated_records_for_groups_users(*args); end

  def validate_associated_records_for_messages(*args); end

  def validate_associated_records_for_relationships(*args); end

  def validate_associated_records_for_requests_created(*args); end

  def validate_associated_records_for_reviews(*args); end

  def validate_associated_records_for_roles(*args); end

  def validate_associated_records_for_roles_users(*args); end

  def validate_associated_records_for_rss_feed_items(*args); end

  def validate_associated_records_for_status_messages(*args); end

  def validate_associated_records_for_subaccounts(*args); end

  def validate_associated_records_for_tokens(*args); end

  def validate_associated_records_for_upload_jobs(*args); end

  def validate_associated_records_for_users_announcements(*args); end

  def validate_associated_records_for_users_groups(*args); end

  def validate_associated_records_for_users_roles(*args); end

  def validate_associated_records_for_watched_projects(*args); end
end

module User::GeneratedAssociationMethods
  def announcement_ids(); end

  def announcement_ids=(ids); end

  def announcements(); end

  def announcements=(value); end

  def azure_configuration(); end

  def azure_configuration=(value); end

  def build_azure_configuration(*args, &block); end

  def build_ec2_configuration(*args, &block); end

  def build_owner(*args, &block); end

  def build_rss_token(*args, &block); end

  def build_user_registration(*args, &block); end

  def comment_ids(); end

  def comment_ids=(ids); end

  def comments(); end

  def comments=(value); end

  def commit_activities(); end

  def commit_activities=(value); end

  def commit_activity_ids(); end

  def commit_activity_ids=(ids); end

  def create_azure_configuration(*args, &block); end

  def create_azure_configuration!(*args, &block); end

  def create_ec2_configuration(*args, &block); end

  def create_ec2_configuration!(*args, &block); end

  def create_owner(*args, &block); end

  def create_owner!(*args, &block); end

  def create_rss_token(*args, &block); end

  def create_rss_token!(*args, &block); end

  def create_user_registration(*args, &block); end

  def create_user_registration!(*args, &block); end

  def ec2_configuration(); end

  def ec2_configuration=(value); end

  def event_subscription_ids(); end

  def event_subscription_ids=(ids); end

  def event_subscriptions(); end

  def event_subscriptions=(value); end

  def group_ids(); end

  def group_ids=(ids); end

  def groups(); end

  def groups=(value); end

  def groups_user_ids(); end

  def groups_user_ids=(ids); end

  def groups_users(); end

  def groups_users=(value); end

  def message_ids(); end

  def message_ids=(ids); end

  def messages(); end

  def messages=(value); end

  def owner(); end

  def owner=(value); end

  def relationship_ids(); end

  def relationship_ids=(ids); end

  def relationships(); end

  def relationships=(value); end

  def reload_azure_configuration(); end

  def reload_ec2_configuration(); end

  def reload_owner(); end

  def reload_rss_token(); end

  def reload_user_registration(); end

  def requests_created(); end

  def requests_created=(value); end

  def requests_created_ids(); end

  def requests_created_ids=(ids); end

  def review_ids(); end

  def review_ids=(ids); end

  def reviews(); end

  def reviews=(value); end

  def role_ids(); end

  def role_ids=(ids); end

  def roles(); end

  def roles=(value); end

  def roles_user_ids(); end

  def roles_user_ids=(ids); end

  def roles_users(); end

  def roles_users=(value); end

  def rss_feed_item_ids(); end

  def rss_feed_item_ids=(ids); end

  def rss_feed_items(); end

  def rss_feed_items=(value); end

  def rss_token(); end

  def rss_token=(value); end

  def status_message_ids(); end

  def status_message_ids=(ids); end

  def status_messages(); end

  def status_messages=(value); end

  def subaccount_ids(); end

  def subaccount_ids=(ids); end

  def subaccounts(); end

  def subaccounts=(value); end

  def token_ids(); end

  def token_ids=(ids); end

  def tokens(); end

  def tokens=(value); end

  def upload_job_ids(); end

  def upload_job_ids=(ids); end

  def upload_jobs(); end

  def upload_jobs=(value); end

  def user_registration(); end

  def user_registration=(value); end

  def watched_project_ids(); end

  def watched_project_ids=(ids); end

  def watched_projects(); end

  def watched_projects=(value); end
end

module User::GeneratedAssociationMethods
  extend ::T::Sig
end

class User
  def self.active(*args); end

  def self.after_add_for_announcements(); end

  def self.after_add_for_announcements=(val); end

  def self.after_add_for_announcements?(); end

  def self.after_add_for_comments(); end

  def self.after_add_for_comments=(val); end

  def self.after_add_for_comments?(); end

  def self.after_add_for_commit_activities(); end

  def self.after_add_for_commit_activities=(val); end

  def self.after_add_for_commit_activities?(); end

  def self.after_add_for_event_subscriptions(); end

  def self.after_add_for_event_subscriptions=(val); end

  def self.after_add_for_event_subscriptions?(); end

  def self.after_add_for_groups(); end

  def self.after_add_for_groups=(val); end

  def self.after_add_for_groups?(); end

  def self.after_add_for_groups_users(); end

  def self.after_add_for_groups_users=(val); end

  def self.after_add_for_groups_users?(); end

  def self.after_add_for_messages(); end

  def self.after_add_for_messages=(val); end

  def self.after_add_for_messages?(); end

  def self.after_add_for_relationships(); end

  def self.after_add_for_relationships=(val); end

  def self.after_add_for_relationships?(); end

  def self.after_add_for_requests_created(); end

  def self.after_add_for_requests_created=(val); end

  def self.after_add_for_requests_created?(); end

  def self.after_add_for_reviews(); end

  def self.after_add_for_reviews=(val); end

  def self.after_add_for_reviews?(); end

  def self.after_add_for_roles(); end

  def self.after_add_for_roles=(val); end

  def self.after_add_for_roles?(); end

  def self.after_add_for_roles_users(); end

  def self.after_add_for_roles_users=(val); end

  def self.after_add_for_roles_users?(); end

  def self.after_add_for_rss_feed_items(); end

  def self.after_add_for_rss_feed_items=(val); end

  def self.after_add_for_rss_feed_items?(); end

  def self.after_add_for_status_messages(); end

  def self.after_add_for_status_messages=(val); end

  def self.after_add_for_status_messages?(); end

  def self.after_add_for_subaccounts(); end

  def self.after_add_for_subaccounts=(val); end

  def self.after_add_for_subaccounts?(); end

  def self.after_add_for_tokens(); end

  def self.after_add_for_tokens=(val); end

  def self.after_add_for_tokens?(); end

  def self.after_add_for_upload_jobs(); end

  def self.after_add_for_upload_jobs=(val); end

  def self.after_add_for_upload_jobs?(); end

  def self.after_add_for_users_announcements(); end

  def self.after_add_for_users_announcements=(val); end

  def self.after_add_for_users_announcements?(); end

  def self.after_add_for_users_groups(); end

  def self.after_add_for_users_groups=(val); end

  def self.after_add_for_users_groups?(); end

  def self.after_add_for_users_roles(); end

  def self.after_add_for_users_roles=(val); end

  def self.after_add_for_users_roles?(); end

  def self.after_add_for_watched_projects(); end

  def self.after_add_for_watched_projects=(val); end

  def self.after_add_for_watched_projects?(); end

  def self.after_remove_for_announcements(); end

  def self.after_remove_for_announcements=(val); end

  def self.after_remove_for_announcements?(); end

  def self.after_remove_for_comments(); end

  def self.after_remove_for_comments=(val); end

  def self.after_remove_for_comments?(); end

  def self.after_remove_for_commit_activities(); end

  def self.after_remove_for_commit_activities=(val); end

  def self.after_remove_for_commit_activities?(); end

  def self.after_remove_for_event_subscriptions(); end

  def self.after_remove_for_event_subscriptions=(val); end

  def self.after_remove_for_event_subscriptions?(); end

  def self.after_remove_for_groups(); end

  def self.after_remove_for_groups=(val); end

  def self.after_remove_for_groups?(); end

  def self.after_remove_for_groups_users(); end

  def self.after_remove_for_groups_users=(val); end

  def self.after_remove_for_groups_users?(); end

  def self.after_remove_for_messages(); end

  def self.after_remove_for_messages=(val); end

  def self.after_remove_for_messages?(); end

  def self.after_remove_for_relationships(); end

  def self.after_remove_for_relationships=(val); end

  def self.after_remove_for_relationships?(); end

  def self.after_remove_for_requests_created(); end

  def self.after_remove_for_requests_created=(val); end

  def self.after_remove_for_requests_created?(); end

  def self.after_remove_for_reviews(); end

  def self.after_remove_for_reviews=(val); end

  def self.after_remove_for_reviews?(); end

  def self.after_remove_for_roles(); end

  def self.after_remove_for_roles=(val); end

  def self.after_remove_for_roles?(); end

  def self.after_remove_for_roles_users(); end

  def self.after_remove_for_roles_users=(val); end

  def self.after_remove_for_roles_users?(); end

  def self.after_remove_for_rss_feed_items(); end

  def self.after_remove_for_rss_feed_items=(val); end

  def self.after_remove_for_rss_feed_items?(); end

  def self.after_remove_for_status_messages(); end

  def self.after_remove_for_status_messages=(val); end

  def self.after_remove_for_status_messages?(); end

  def self.after_remove_for_subaccounts(); end

  def self.after_remove_for_subaccounts=(val); end

  def self.after_remove_for_subaccounts?(); end

  def self.after_remove_for_tokens(); end

  def self.after_remove_for_tokens=(val); end

  def self.after_remove_for_tokens?(); end

  def self.after_remove_for_upload_jobs(); end

  def self.after_remove_for_upload_jobs=(val); end

  def self.after_remove_for_upload_jobs?(); end

  def self.after_remove_for_users_announcements(); end

  def self.after_remove_for_users_announcements=(val); end

  def self.after_remove_for_users_announcements?(); end

  def self.after_remove_for_users_groups(); end

  def self.after_remove_for_users_groups=(val); end

  def self.after_remove_for_users_groups?(); end

  def self.after_remove_for_users_roles(); end

  def self.after_remove_for_users_roles=(val); end

  def self.after_remove_for_users_roles?(); end

  def self.after_remove_for_watched_projects(); end

  def self.after_remove_for_watched_projects=(val); end

  def self.after_remove_for_watched_projects?(); end

  def self.all_without_nobody(*args); end

  def self.before_add_for_announcements(); end

  def self.before_add_for_announcements=(val); end

  def self.before_add_for_announcements?(); end

  def self.before_add_for_comments(); end

  def self.before_add_for_comments=(val); end

  def self.before_add_for_comments?(); end

  def self.before_add_for_commit_activities(); end

  def self.before_add_for_commit_activities=(val); end

  def self.before_add_for_commit_activities?(); end

  def self.before_add_for_event_subscriptions(); end

  def self.before_add_for_event_subscriptions=(val); end

  def self.before_add_for_event_subscriptions?(); end

  def self.before_add_for_groups(); end

  def self.before_add_for_groups=(val); end

  def self.before_add_for_groups?(); end

  def self.before_add_for_groups_users(); end

  def self.before_add_for_groups_users=(val); end

  def self.before_add_for_groups_users?(); end

  def self.before_add_for_messages(); end

  def self.before_add_for_messages=(val); end

  def self.before_add_for_messages?(); end

  def self.before_add_for_relationships(); end

  def self.before_add_for_relationships=(val); end

  def self.before_add_for_relationships?(); end

  def self.before_add_for_requests_created(); end

  def self.before_add_for_requests_created=(val); end

  def self.before_add_for_requests_created?(); end

  def self.before_add_for_reviews(); end

  def self.before_add_for_reviews=(val); end

  def self.before_add_for_reviews?(); end

  def self.before_add_for_roles(); end

  def self.before_add_for_roles=(val); end

  def self.before_add_for_roles?(); end

  def self.before_add_for_roles_users(); end

  def self.before_add_for_roles_users=(val); end

  def self.before_add_for_roles_users?(); end

  def self.before_add_for_rss_feed_items(); end

  def self.before_add_for_rss_feed_items=(val); end

  def self.before_add_for_rss_feed_items?(); end

  def self.before_add_for_status_messages(); end

  def self.before_add_for_status_messages=(val); end

  def self.before_add_for_status_messages?(); end

  def self.before_add_for_subaccounts(); end

  def self.before_add_for_subaccounts=(val); end

  def self.before_add_for_subaccounts?(); end

  def self.before_add_for_tokens(); end

  def self.before_add_for_tokens=(val); end

  def self.before_add_for_tokens?(); end

  def self.before_add_for_upload_jobs(); end

  def self.before_add_for_upload_jobs=(val); end

  def self.before_add_for_upload_jobs?(); end

  def self.before_add_for_users_announcements(); end

  def self.before_add_for_users_announcements=(val); end

  def self.before_add_for_users_announcements?(); end

  def self.before_add_for_users_groups(); end

  def self.before_add_for_users_groups=(val); end

  def self.before_add_for_users_groups?(); end

  def self.before_add_for_users_roles(); end

  def self.before_add_for_users_roles=(val); end

  def self.before_add_for_users_roles?(); end

  def self.before_add_for_watched_projects(); end

  def self.before_add_for_watched_projects=(val); end

  def self.before_add_for_watched_projects?(); end

  def self.before_remove_for_announcements(); end

  def self.before_remove_for_announcements=(val); end

  def self.before_remove_for_announcements?(); end

  def self.before_remove_for_comments(); end

  def self.before_remove_for_comments=(val); end

  def self.before_remove_for_comments?(); end

  def self.before_remove_for_commit_activities(); end

  def self.before_remove_for_commit_activities=(val); end

  def self.before_remove_for_commit_activities?(); end

  def self.before_remove_for_event_subscriptions(); end

  def self.before_remove_for_event_subscriptions=(val); end

  def self.before_remove_for_event_subscriptions?(); end

  def self.before_remove_for_groups(); end

  def self.before_remove_for_groups=(val); end

  def self.before_remove_for_groups?(); end

  def self.before_remove_for_groups_users(); end

  def self.before_remove_for_groups_users=(val); end

  def self.before_remove_for_groups_users?(); end

  def self.before_remove_for_messages(); end

  def self.before_remove_for_messages=(val); end

  def self.before_remove_for_messages?(); end

  def self.before_remove_for_relationships(); end

  def self.before_remove_for_relationships=(val); end

  def self.before_remove_for_relationships?(); end

  def self.before_remove_for_requests_created(); end

  def self.before_remove_for_requests_created=(val); end

  def self.before_remove_for_requests_created?(); end

  def self.before_remove_for_reviews(); end

  def self.before_remove_for_reviews=(val); end

  def self.before_remove_for_reviews?(); end

  def self.before_remove_for_roles(); end

  def self.before_remove_for_roles=(val); end

  def self.before_remove_for_roles?(); end

  def self.before_remove_for_roles_users(); end

  def self.before_remove_for_roles_users=(val); end

  def self.before_remove_for_roles_users?(); end

  def self.before_remove_for_rss_feed_items(); end

  def self.before_remove_for_rss_feed_items=(val); end

  def self.before_remove_for_rss_feed_items?(); end

  def self.before_remove_for_status_messages(); end

  def self.before_remove_for_status_messages=(val); end

  def self.before_remove_for_status_messages?(); end

  def self.before_remove_for_subaccounts(); end

  def self.before_remove_for_subaccounts=(val); end

  def self.before_remove_for_subaccounts?(); end

  def self.before_remove_for_tokens(); end

  def self.before_remove_for_tokens=(val); end

  def self.before_remove_for_tokens?(); end

  def self.before_remove_for_upload_jobs(); end

  def self.before_remove_for_upload_jobs=(val); end

  def self.before_remove_for_upload_jobs?(); end

  def self.before_remove_for_users_announcements(); end

  def self.before_remove_for_users_announcements=(val); end

  def self.before_remove_for_users_announcements?(); end

  def self.before_remove_for_users_groups(); end

  def self.before_remove_for_users_groups=(val); end

  def self.before_remove_for_users_groups?(); end

  def self.before_remove_for_users_roles(); end

  def self.before_remove_for_users_roles=(val); end

  def self.before_remove_for_users_roles?(); end

  def self.before_remove_for_watched_projects(); end

  def self.before_remove_for_watched_projects=(val); end

  def self.before_remove_for_watched_projects?(); end

  def self.confirmed(*args); end

  def self.in_beta(*args); end

  def self.in_rollout(*args); end

  def self.list(*args); end

  def self.lookup_strategy(); end

  def self.lookup_strategy=(obj); end

  def self.not_deleted(*args); end

  def self.not_locked(*args); end

  def self.with_login_prefix(*args); end
end

class UserConfigurationDatatable
  def user_actions(*args, &block); end

  def user_with_realname_and_icon(*args, &block); end
end

module VCR
  CassetteMutex = ::T.let(nil, ::T.untyped)
  MainThread = ::T.let(nil, ::T.untyped)
end

class VCR::Cassette
  VALID_RECORD_MODES = ::T.let(nil, ::T.untyped)
end

module VCR::Cassette::EncodingErrorHandling
  extend ::T::Sig
end

module VCR::Cassette::HTTPInteractionList::NullList
  extend ::T::Sig
end

module VCR::Cassette::Persisters::FileSystem
  extend ::T::Sig
end

module VCR::Cassette::Serializers::Compressed
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
end

module VCR::Cassette::Serializers::Compressed
  extend ::VCR::Cassette::Serializers::Compressed
  extend ::T::Sig
end

module VCR::Cassette::Serializers::Psych
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
end

module VCR::Cassette::Serializers::Psych
  extend ::VCR::Cassette::Serializers::Psych
  extend ::VCR::Cassette::EncodingErrorHandling
  extend ::T::Sig
end

module VCR::Cassette::Serializers::Syck
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
end

module VCR::Cassette::Serializers::Syck
  extend ::VCR::Cassette::Serializers::Syck
  extend ::VCR::Cassette::EncodingErrorHandling
  extend ::T::Sig
end

module VCR::Cassette::Serializers::YAML
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
end

module VCR::Cassette::Serializers::YAML
  extend ::VCR::Cassette::Serializers::YAML
  extend ::VCR::Cassette::EncodingErrorHandling
  extend ::T::Sig
end

module VCR::Configuration::DefinedHooks
  extend ::T::Sig
end

class VCR::CucumberTags
  def initialize(main_object); end

  def tag(*tag_names); end

  def tags(*tag_names); end
end

class VCR::CucumberTags::ScenarioNameBuilder
  def cassette_name(); end

  def examples_table(*_); end

  def examples_table_row(row); end

  def feature(feature); end

  def initialize(test_case); end

  def scenario(*_); end

  def scenario_outline(feature); end
end

class VCR::CucumberTags::ScenarioNameBuilder
end

class VCR::CucumberTags
  def self.add_tag(tag); end

  def self.tags(); end
end

module VCR::Deprecations::Middleware::Faraday
  extend ::T::Sig
end

module VCR::Deprecations::Middleware
  extend ::T::Sig
end

module VCR::Deprecations
  extend ::T::Sig
end

class VCR::Errors::UnhandledHTTPRequestError
  ALL_SUGGESTIONS = ::T.let(nil, ::T.untyped)
end

module VCR::Errors
  extend ::T::Sig
end

class VCR::HTTPInteraction::HookAware
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module VCR::Hooks::ClassMethods
  extend ::T::Sig
end

module VCR::Hooks
  extend ::T::Sig
end

module VCR::InternetConnection
  def available?(); end
  EXAMPLE_HOST = ::T.let(nil, ::T.untyped)
end

module VCR::InternetConnection
  extend ::VCR::InternetConnection
  extend ::T::Sig
end

module VCR::LibraryHooks::WebMock::Helpers
  extend ::T::Sig
end

module VCR::LibraryHooks::WebMock
  extend ::T::Sig
end

class VCR::LinkedCassette
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module VCR::Logger::Mixin
  extend ::T::Sig
end

module VCR::Logger::Null
  extend ::T::Sig
end

class VCR::Middleware::Rack
  include ::VCR::VariableArgsBlockCaller
  def call(env); end

  def initialize(app, &block); end
end

class VCR::Middleware::Rack
end

module VCR::Middleware
  extend ::T::Sig
end

module VCR::Normalizers::Body::ClassMethods
  extend ::T::Sig
end

module VCR::Normalizers::Body
  extend ::T::Sig
end

module VCR::Normalizers::Header
  extend ::T::Sig
end

module VCR::Normalizers
  extend ::T::Sig
end

module VCR::RSpec::Metadata
  extend ::T::Sig
end

module VCR::RSpec
  extend ::T::Sig
end

class VCR::Request::FiberAware
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class VCR::Request::Typed
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class VCR::RequestIgnorer
  LOCALHOST_ALIASES = ::T.let(nil, ::T.untyped)
end

module VCR::RequestIgnorer::DefinedHooks
  extend ::T::Sig
end

class VCR::RequestMatcherRegistry
  DEFAULT_MATCHERS = ::T.let(nil, ::T.untyped)
end

class VCR::Response
  HAVE_ZLIB = ::T.let(nil, ::T.untyped)
end

module VCR::VariableArgsBlockCaller
  extend ::T::Sig
end

module VCR
  extend ::CassetteReporter
  extend ::T::Sig
end

module ValidationHelper
  extend ::T::Sig
end

Visitor = Psych::Visitors::Visitor

module VoightKampff::Methods
  extend ::T::Sig
end

class VoightKampff::Test
  CRAWLERS_FILENAME = ::T.let(nil, ::T.untyped)
end

module VoightKampff
  extend ::T::Sig
end

class WEBrick::HTTPServlet::AbstractServlet
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class WEBrick::HTTPServlet::AbstractServlet
  extend ::T::Sig
end

module Warning
  def warn(_); end
end

module Warning
  extend ::T::Sig
  extend ::Warning
end

class WatchedProject
  include ::WatchedProject::GeneratedAssociationMethods
  def autosave_associated_records_for_project(*args); end

  def autosave_associated_records_for_user(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

module WatchedProject::GeneratedAssociationMethods
  def build_project(*args, &block); end

  def build_user(*args, &block); end

  def create_project(*args, &block); end

  def create_project!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def project(); end

  def project=(value); end

  def reload_project(); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module WatchedProject::GeneratedAssociationMethods
  extend ::T::Sig
end

module WebMock
  VERSION = ::T.let(nil, ::T.untyped)
end

module WebMock::API
  extend ::T::Sig
end

class WebMock::BodyPattern
  BODY_FORMATS = ::T.let(nil, ::T.untyped)
end

WebMock::HttpLibAdapters::NetHttpAdapter::OriginalNetBufferedIO = Net::BufferedIO

WebMock::HttpLibAdapters::NetHttpAdapter::OriginalNetHTTP = Net::HTTP

module WebMock::HttpLibAdapters
  extend ::T::Sig
end

module WebMock::Matchers
  extend ::T::Sig
end

module WebMock::NetHTTPUtility
  extend ::T::Sig
end

module WebMock::RSpecMatcherDetector
  extend ::T::Sig
end

class WebMock::Util::URI
  ADDRESSABLE_URIS = ::T.let(nil, ::T.untyped)
  NORMALIZED_URIS = ::T.let(nil, ::T.untyped)
end

module WebMock::Util::URI::CharacterClasses
  USERINFO = ::T.let(nil, ::T.untyped)
end

module WebMock::Util::URI::CharacterClasses
  extend ::T::Sig
end

module WebMock::Util
  extend ::T::Sig
end

module WebMock
  extend ::T::Sig
end

module Webui::BuildresultHelper
  extend ::T::Sig
end

module Webui::Cloud::Azure
  extend ::T::Sig
end

module Webui::Cloud::Ec2
  extend ::T::Sig
end

module Webui::Cloud::UploadJob
  extend ::T::Sig
end

module Webui::Cloud
  extend ::T::Sig
end

module Webui::FlashHelper
  extend ::T::Sig
end

module Webui::GroupHelper
  extend ::T::Sig
end

module Webui::Groups
  extend ::T::Sig
end

module Webui::HomeHelper
  extend ::T::Sig
end

module Webui::Kiwi::ImageHelper
  extend ::T::Sig
end

module Webui::Kiwi
  extend ::T::Sig
end

module Webui::MainHelper
  extend ::T::Sig
end

module Webui::MaintenanceIncidentHelper
  extend ::T::Sig
end

module Webui::ManageRelationships
  extend ::T::Sig
end

module Webui::MarkdownHelper
  extend ::T::Sig
end

module Webui::Mixins::BsRequestsControllerMixin
  extend ::T::Sig
end

module Webui::Mixins
  extend ::T::Sig
end

module Webui::MonitorHelper
  extend ::T::Sig
end

module Webui::ObsFactory::ApplicationHelper
  extend ::T::Sig
end

module Webui::ObsFactory
  extend ::T::Sig
end

module Webui::PackageHelper
  extend ::T::Sig
end

module Webui::Packages::JobHistoryHelper
  extend ::T::Sig
end

module Webui::Packages
  extend ::T::Sig
end

module Webui::PatchinfoHelper
  extend ::T::Sig
end

module Webui::ProjectHelper
  extend ::T::Sig
end

module Webui::Projects::StatusHelper
  extend ::T::Sig
end

module Webui::Projects
  extend ::T::Sig
end

module Webui::RepositoryHelper
  extend ::T::Sig
end

module Webui::RequestHelper
  extend ::T::Sig
end

module Webui::SearchHelper
  extend ::T::Sig
end

module Webui::Staging::ExcludedRequestsHelper
  extend ::T::Sig
end

module Webui::Staging::ProjectHelper
  extend ::T::Sig
end

module Webui::Staging::WorkflowHelper
  extend ::T::Sig
end

module Webui::Staging
  extend ::T::Sig
end

module Webui::UserActivityHelper
  extend ::T::Sig
end

module Webui::UserHelper
  extend ::T::Sig
end

module Webui::UserOrGroupsRolesHelper
  extend ::T::Sig
end

module Webui::Users
  extend ::T::Sig
end

class Webui::WebuiController
  def error(); end

  def success(); end
end

module Webui::WebuiHelper
  extend ::T::Sig
end

module Webui
  extend ::T::Sig
end

module Webui2::AttributeController
  extend ::T::Sig
end

module Webui2::CommentsController
  extend ::T::Sig
end

module Webui2::InterconnectsController
  extend ::T::Sig
end

module Webui2::PackageController
  extend ::T::Sig
end

module Webui2::ProjectController
  extend ::T::Sig
end

module Webui2
  extend ::T::Sig
end

module WebuiControllerService
  extend ::T::Sig
end

module Worker
  extend ::T::Sig
end

module XMLRPC
  VERSION = ::T.let(nil, ::T.untyped)
end

class XMLRPC::Client
  USER_AGENT = ::T.let(nil, ::T.untyped)
end

module XMLRPC::Config
  ENABLE_BIGINT = ::T.let(nil, ::T.untyped)
  ENABLE_INTROSPECTION = ::T.let(nil, ::T.untyped)
  ENABLE_MARSHALLING = ::T.let(nil, ::T.untyped)
  ENABLE_MULTICALL = ::T.let(nil, ::T.untyped)
  ENABLE_NIL_CREATE = ::T.let(nil, ::T.untyped)
  ENABLE_NIL_PARSER = ::T.let(nil, ::T.untyped)
end

XMLRPC::Config::DEFAULT_PARSER = XMLRPC::XMLParser::REXMLStreamParser

XMLRPC::Config::DEFAULT_WRITER = XMLRPC::XMLWriter::Simple

module XMLRPC::Config
  extend ::T::Sig
end

module XMLRPC::Convert
  extend ::T::Sig
end

module XMLRPC::Marshallable
  extend ::T::Sig
end

module XMLRPC::ParseContentType
  extend ::T::Sig
end

module XMLRPC::ParserWriterChooseMixin
  extend ::T::Sig
end

module XMLRPC::Service
  extend ::T::Sig
end

module XMLRPC::XMLParser
  Classes = ::T.let(nil, ::T.untyped)
end

module XMLRPC::XMLParser::StreamParserMixin
  extend ::T::Sig
end

module XMLRPC::XMLParser
  extend ::T::Sig
end

module XMLRPC::XMLWriter
  Classes = ::T.let(nil, ::T.untyped)
end

module XMLRPC::XMLWriter
  extend ::T::Sig
end

module XMLRPC
  extend ::T::Sig
end

module XPath::DSL
  AXES = ::T.let(nil, ::T.untyped)
  LOWERCASE_LETTERS = ::T.let(nil, ::T.untyped)
  METHODS = ::T.let(nil, ::T.untyped)
  OPERATORS = ::T.let(nil, ::T.untyped)
  UPPERCASE_LETTERS = ::T.let(nil, ::T.untyped)
end

module XPath::DSL
  extend ::T::Sig
end

module XPath
  extend ::T::Sig
  def self.generate(); end
end

module Xmlhash
  VERSION = ::T.let(nil, ::T.untyped)
end

module Xmlhash
  extend ::T::Sig
end

YAML = Psych

YAMLTree = Psych::Visitors::YAMLTree

module Yajl
  MAX_DEPTH = ::T.let(nil, ::T.untyped)
end

class Yajl::EncodeError
end

class Yajl::EncodeError
end

class Yajl::ParseError
end

class Yajl::ParseError
end

module Yajl
  extend ::T::Sig
end

class ZeroDivisionError
  extend ::T::Sig
end

module Zip
  CDIR_ENTRY_STATIC_HEADER_LENGTH = ::T.let(nil, ::T.untyped)
  CENTRAL_DIRECTORY_ENTRY_SIGNATURE = ::T.let(nil, ::T.untyped)
  FILE_TYPE_DIR = ::T.let(nil, ::T.untyped)
  FILE_TYPE_FILE = ::T.let(nil, ::T.untyped)
  FILE_TYPE_SYMLINK = ::T.let(nil, ::T.untyped)
  FSTYPES = ::T.let(nil, ::T.untyped)
  FSTYPE_ACORN = ::T.let(nil, ::T.untyped)
  FSTYPE_AMIGA = ::T.let(nil, ::T.untyped)
  FSTYPE_ATARI = ::T.let(nil, ::T.untyped)
  FSTYPE_ATHEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_BEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_CPM = ::T.let(nil, ::T.untyped)
  FSTYPE_FAT = ::T.let(nil, ::T.untyped)
  FSTYPE_HPFS = ::T.let(nil, ::T.untyped)
  FSTYPE_MAC = ::T.let(nil, ::T.untyped)
  FSTYPE_MAC_OSX = ::T.let(nil, ::T.untyped)
  FSTYPE_MVS = ::T.let(nil, ::T.untyped)
  FSTYPE_NTFS = ::T.let(nil, ::T.untyped)
  FSTYPE_QDOS = ::T.let(nil, ::T.untyped)
  FSTYPE_TANDEM = ::T.let(nil, ::T.untyped)
  FSTYPE_THEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_TOPS20 = ::T.let(nil, ::T.untyped)
  FSTYPE_UNIX = ::T.let(nil, ::T.untyped)
  FSTYPE_VFAT = ::T.let(nil, ::T.untyped)
  FSTYPE_VMS = ::T.let(nil, ::T.untyped)
  FSTYPE_VM_CMS = ::T.let(nil, ::T.untyped)
  FSTYPE_Z_SYSTEM = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_SIGNATURE = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_STATIC_HEADER_LENGTH = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_TRAILING_DESCRIPTOR_LENGTH = ::T.let(nil, ::T.untyped)
  RUNNING_ON_WINDOWS = ::T.let(nil, ::T.untyped)
  VERSION_MADE_BY = ::T.let(nil, ::T.untyped)
  VERSION_NEEDED_TO_EXTRACT = ::T.let(nil, ::T.untyped)
  VERSION_NEEDED_TO_EXTRACT_ZIP64 = ::T.let(nil, ::T.untyped)
end

class Zip::CentralDirectory
  END_OF_CDS = ::T.let(nil, ::T.untyped)
  MAX_END_OF_CDS_SIZE = ::T.let(nil, ::T.untyped)
  STATIC_EOCD_SIZE = ::T.let(nil, ::T.untyped)
  ZIP64_END_OF_CDS = ::T.let(nil, ::T.untyped)
  ZIP64_EOCD_LOCATOR = ::T.let(nil, ::T.untyped)
end

class Zip::Decompressor
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

class Zip::Entry
  DEFLATED = ::T.let(nil, ::T.untyped)
  EFS = ::T.let(nil, ::T.untyped)
  STORED = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField
  ID_MAP = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::IUnix
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::NTFS
  HEADER_ID = ::T.let(nil, ::T.untyped)
  SEC_TO_UNIX_EPOCH = ::T.let(nil, ::T.untyped)
  WINDOWS_TICK = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::OldUnix
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::UniversalTime
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::Zip64
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::Zip64Placeholder
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::File
  CREATE = ::T.let(nil, ::T.untyped)
  DATA_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  IO_METHODS = ::T.let(nil, ::T.untyped)
  MAX_SEGMENT_SIZE = ::T.let(nil, ::T.untyped)
  MIN_SEGMENT_SIZE = ::T.let(nil, ::T.untyped)
  SPLIT_SIGNATURE = ::T.let(nil, ::T.untyped)
  ZIP64_EOCD_SIGNATURE = ::T.let(nil, ::T.untyped)
end

module Zip::IOExtras
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
  RANGE_ALL = ::T.let(nil, ::T.untyped)
end

module Zip::IOExtras::AbstractInputStream
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module Zip::IOExtras::AbstractInputStream
  extend ::T::Sig
end

module Zip::IOExtras::AbstractOutputStream
  extend ::T::Sig
end

module Zip::IOExtras::FakeIO
  extend ::T::Sig
end

module Zip::IOExtras
  extend ::T::Sig
end

module Zip::NullDecompressor
  extend ::T::Sig
end

module Zip::NullEncryption
  extend ::T::Sig
end

module Zip::NullInputStream
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module Zip::NullInputStream
  extend ::T::Sig
end

class Zip::StreamableStream
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Zip::TraditionalEncryption
  extend ::T::Sig
end

Zip::ZipCompressionMethodError = Zip::CompressionMethodError

Zip::ZipDestinationFileExistsError = Zip::DestinationFileExistsError

Zip::ZipEntryExistsError = Zip::EntryExistsError

Zip::ZipEntryNameError = Zip::EntryNameError

Zip::ZipError = Zip::Error

Zip::ZipInternalError = Zip::InternalError

module Zip
  extend ::T::Sig
end

module Zlib
  ASCII = ::T.let(nil, ::T.untyped)
  BEST_COMPRESSION = ::T.let(nil, ::T.untyped)
  BEST_SPEED = ::T.let(nil, ::T.untyped)
  BINARY = ::T.let(nil, ::T.untyped)
  DEFAULT_COMPRESSION = ::T.let(nil, ::T.untyped)
  DEFAULT_STRATEGY = ::T.let(nil, ::T.untyped)
  DEF_MEM_LEVEL = ::T.let(nil, ::T.untyped)
  FILTERED = ::T.let(nil, ::T.untyped)
  FINISH = ::T.let(nil, ::T.untyped)
  FIXED = ::T.let(nil, ::T.untyped)
  FULL_FLUSH = ::T.let(nil, ::T.untyped)
  HUFFMAN_ONLY = ::T.let(nil, ::T.untyped)
  MAX_MEM_LEVEL = ::T.let(nil, ::T.untyped)
  MAX_WBITS = ::T.let(nil, ::T.untyped)
  NO_COMPRESSION = ::T.let(nil, ::T.untyped)
  NO_FLUSH = ::T.let(nil, ::T.untyped)
  OS_AMIGA = ::T.let(nil, ::T.untyped)
  OS_ATARI = ::T.let(nil, ::T.untyped)
  OS_CODE = ::T.let(nil, ::T.untyped)
  OS_CPM = ::T.let(nil, ::T.untyped)
  OS_MACOS = ::T.let(nil, ::T.untyped)
  OS_MSDOS = ::T.let(nil, ::T.untyped)
  OS_OS2 = ::T.let(nil, ::T.untyped)
  OS_QDOS = ::T.let(nil, ::T.untyped)
  OS_RISCOS = ::T.let(nil, ::T.untyped)
  OS_TOPS20 = ::T.let(nil, ::T.untyped)
  OS_UNIX = ::T.let(nil, ::T.untyped)
  OS_UNKNOWN = ::T.let(nil, ::T.untyped)
  OS_VMCMS = ::T.let(nil, ::T.untyped)
  OS_VMS = ::T.let(nil, ::T.untyped)
  OS_WIN32 = ::T.let(nil, ::T.untyped)
  OS_ZSYSTEM = ::T.let(nil, ::T.untyped)
  RLE = ::T.let(nil, ::T.untyped)
  SYNC_FLUSH = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  ZLIB_VERSION = ::T.let(nil, ::T.untyped)
end

class Zlib::BufError
end

class Zlib::BufError
end

class Zlib::DataError
end

class Zlib::DataError
end

class Zlib::Deflate
  def <<(_); end

  def deflate(*_); end

  def flush(*_); end

  def initialize(*_); end

  def params(_, _1); end

  def set_dictionary(_); end
end

class Zlib::Deflate
  def self.deflate(*_); end
end

class Zlib::Error
end

class Zlib::Error
end

class Zlib::GzipFile
  def close(); end

  def closed?(); end

  def comment(); end

  def crc(); end

  def finish(); end

  def level(); end

  def mtime(); end

  def orig_name(); end

  def os_code(); end

  def sync(); end

  def sync=(sync); end

  def to_io(); end
end

class Zlib::GzipFile::CRCError
end

class Zlib::GzipFile::CRCError
end

class Zlib::GzipFile::Error
  def input(); end
end

class Zlib::GzipFile::Error
end

class Zlib::GzipFile::LengthError
end

class Zlib::GzipFile::LengthError
end

class Zlib::GzipFile::NoFooter
end

class Zlib::GzipFile::NoFooter
end

class Zlib::GzipFile
  def self.wrap(*_); end
end

class Zlib::GzipReader
  include ::Enumerable
  def bytes(); end

  def each(*_, &blk); end

  def each_byte(); end

  def each_char(); end

  def each_line(*_); end

  def eof(); end

  def eof?(); end

  def external_encoding(); end

  def getbyte(); end

  def getc(); end

  def initialize(*_); end

  def lineno(); end

  def lineno=(lineno); end

  def lines(*_); end

  def pos(); end

  def read(*_); end

  def readbyte(); end

  def readchar(); end

  def readpartial(*_); end

  def rewind(); end

  def tell(); end

  def ungetbyte(_); end

  def ungetc(_); end

  def unused(); end
end

class Zlib::GzipReader
  def self.open(*_); end
end

class Zlib::GzipWriter
  def <<(_); end

  def comment=(comment); end

  def flush(*_); end

  def initialize(*_); end

  def mtime=(mtime); end

  def orig_name=(orig_name); end

  def pos(); end

  def tell(); end

  def write(*_); end
end

class Zlib::GzipWriter
  def self.open(*_); end
end

class Zlib::Inflate
  def <<(_); end

  def add_dictionary(_); end

  def inflate(_); end

  def initialize(*_); end

  def set_dictionary(_); end

  def sync(_); end

  def sync_point?(); end
end

class Zlib::Inflate
  def self.inflate(_); end
end

class Zlib::MemError
end

class Zlib::MemError
end

class Zlib::NeedDict
end

class Zlib::NeedDict
end

class Zlib::StreamEnd
end

class Zlib::StreamEnd
end

class Zlib::StreamError
end

class Zlib::StreamError
end

class Zlib::VersionError
end

class Zlib::VersionError
end

class Zlib::ZStream
  def adler(); end

  def avail_in(); end

  def avail_out(); end

  def avail_out=(avail_out); end

  def close(); end

  def closed?(); end

  def data_type(); end

  def end(); end

  def ended?(); end

  def finish(); end

  def finished?(); end

  def flush_next_in(); end

  def flush_next_out(); end

  def reset(); end

  def stream_end?(); end

  def total_in(); end

  def total_out(); end
end

class Zlib::ZStream
end

module Zlib
  extend ::T::Sig
  def self.adler32(*_); end

  def self.adler32_combine(_, _1, _2); end

  def self.crc32(*_); end

  def self.crc32_combine(_, _1, _2); end

  def self.crc_table(); end

  def self.deflate(*_); end

  def self.gunzip(_); end

  def self.gzip(*_); end

  def self.inflate(_); end

  def self.zlib_version(); end
end
