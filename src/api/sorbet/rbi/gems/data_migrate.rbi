# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/data_migrate/all/data_migrate.rbi
#
# data_migrate-5.3.2
module DataMigrate
  def self.config; end
  def self.configure; end
  extend ActiveSupport::Configurable::ClassMethods
  include ActiveSupport::Configurable
end
class DataMigrate::Config
  def data_migrations_path; end
  def data_migrations_path=(arg0); end
  def initialize; end
end
class DataMigrate::DataMigrator < ActiveRecord::Migrator
  def initialize(direction, migrations, target_version = nil); end
  def load_migrated; end
  def record_version_state_after_migrating(version); end
  def self.assure_data_schema_table; end
  def self.current_version; end
  def self.db_config; end
  def self.full_migrations_path; end
  def self.match(filename); end
  def self.migrations(_migrations_paths); end
  def self.migrations_status; end
  def self.rollback(migrations_path, steps); end
  def self.run(direction, migration_paths, version); end
end
module Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_30
end
class DataMigrate::DataSchemaMigration < ActiveRecord::SchemaMigration
  def self._validators; end
  def self.attribute_type_decorations; end
  def self.defined_enums; end
  def self.index_name; end
  def self.table_name; end
  include Anonymous_ActiveRecord_AttributeMethods_GeneratedAttributeMethods_30
  include DataMigrate::DataSchemaMigration::GeneratedAssociationMethods
end
module DataMigrate::DataSchemaMigration::GeneratedAssociationMethods
end
class DataMigrate::DataSchemaMigration::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include ActiveRecord::SchemaMigration::GeneratedRelationMethods
  include DataMigrate::DataSchemaMigration::GeneratedRelationMethods
end
module DataMigrate::DataSchemaMigration::GeneratedRelationMethods
end
class DataMigrate::DataSchemaMigration::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include ActiveRecord::SchemaMigration::GeneratedRelationMethods
  include DataMigrate::DataSchemaMigration::GeneratedRelationMethods
end
class DataMigrate::DataSchemaMigration::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include ActiveRecord::SchemaMigration::GeneratedRelationMethods
  include DataMigrate::DataSchemaMigration::GeneratedRelationMethods
end
class DataMigrate::Data < ActiveRecord::Schema
  def define(info); end
  def insert(version); end
  def migrated; end
  def sm_table; end
  def table_name; end
  def versions; end
end
class DataMigrate::DatabaseTasks
  def self.data_migrations_path; end
  def self.forward(step = nil); end
  def self.past_migrations(sort = nil); end
  def self.pending_data_migrations; end
  def self.pending_migrations; end
  def self.pending_schema_migrations; end
  def self.schema_file(_format = nil); end
  def self.schema_migrations_path; end
  def self.sort_migrations(set1, set2 = nil); end
  def self.sort_string(migration); end
  extend ActiveRecord::Tasks::DatabaseTasks
end
class DataMigrate::SchemaDumper
  def dump(stream); end
  def initialize(connection); end
  def self.dump(connection = nil, stream = nil); end
  def self.new(*arg0); end
end
class DataMigrate::StatusService
  def db_list; end
  def dump(stream); end
  def initialize(connection); end
  def output(stream); end
  def root_folder; end
  def self.dump(connection = nil, stream = nil); end
  def table_name; end
end
class DataMigrate::SchemaMigration
  def self.migrations_paths; end
  def self.pending_schema_migrations; end
  def self.run(direction, migration_paths, version); end
  def self.sort_migrations(set1, set2 = nil); end
  def self.sort_string(migration); end
end
class DataMigrate::MigrationContext < ActiveRecord::MigrationContext
  def current_version; end
  def down(target_version = nil); end
  def get_all_versions; end
  def initialize(migrations_paths = nil); end
  def migration_files; end
  def migrations_status; end
  def move(direction, steps); end
  def run(direction, target_version); end
  def up(target_version = nil); end
end
class DataMigrate::Railtie < Rails::Railtie
end
module DataMigrate::Tasks
end
module DataMigrate::Tasks::DataMigrateTasks
  def migrate; end
  def migrations_paths; end
  extend DataMigrate::Tasks::DataMigrateTasks
end
class DataMigrate::LegacyMigrator
  def initialize(migrations_paths = nil); end
  def migrate; end
end
