# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/riddle/all/riddle.rbi
#
# riddle-2.3.2
class Riddle::AutoVersion
  def self.configure; end
end
module Riddle
  def self.encode(data, encoding = nil); end
  def self.escape(string); end
  def self.escape_pattern; end
  def self.escape_pattern=(pattern); end
  def self.loaded_version; end
  def self.loaded_version=(version); end
  def self.mutex; end
  def self.version_warning; end
end
class Riddle::Client
  def add_override(attribute, type, values); end
  def anchor; end
  def anchor=(arg0); end
  def append_query(search, index = nil, comments = nil); end
  def attribute_from_type(type, response); end
  def close; end
  def close_socket; end
  def connect(&block); end
  def connection; end
  def connection=(arg0); end
  def cut_off; end
  def cut_off=(arg0); end
  def excerpt_flags(options); end
  def excerpts(options = nil); end
  def excerpts_message(options); end
  def field_weights; end
  def field_weights=(arg0); end
  def filters; end
  def filters=(arg0); end
  def flush_attributes; end
  def group_by; end
  def group_by=(arg0); end
  def group_clause; end
  def group_clause=(arg0); end
  def group_distinct; end
  def group_distinct=(arg0); end
  def group_function; end
  def group_function=(arg0); end
  def id_range; end
  def id_range=(arg0); end
  def index_weights; end
  def index_weights=(arg0); end
  def initialise_connection(available_server); end
  def initialise_socket(available_server); end
  def initialize(servers = nil, port = nil, key = nil); end
  def key; end
  def key=(arg0); end
  def key_message; end
  def keywords(query, index, return_hits = nil); end
  def keywords_message(query, index, return_hits); end
  def limit; end
  def limit=(arg0); end
  def match_mode; end
  def match_mode=(arg0); end
  def max_matches; end
  def max_matches=(arg0); end
  def max_query_time; end
  def max_query_time=(arg0); end
  def offset; end
  def offset=(arg0); end
  def open; end
  def open_socket; end
  def overrides; end
  def overrides=(arg0); end
  def port; end
  def port=(arg0); end
  def query(search, index = nil, comments = nil); end
  def query_message(search, index, comments = nil); end
  def queue; end
  def rank_expr; end
  def rank_expr=(arg0); end
  def rank_mode; end
  def rank_mode=(arg0); end
  def request(command, messages); end
  def request_header(command, length = nil); end
  def reset; end
  def retry_count; end
  def retry_count=(arg0); end
  def retry_delay; end
  def retry_delay=(arg0); end
  def run; end
  def select; end
  def select=(arg0); end
  def self.connection; end
  def self.connection=(value); end
  def server; end
  def server=(server); end
  def servers; end
  def servers=(arg0); end
  def set_anchor(lat_attr, lat, long_attr, long); end
  def sort_by; end
  def sort_by=(arg0); end
  def sort_mode; end
  def sort_mode=(arg0); end
  def status; end
  def timeout; end
  def timeout=(arg0); end
  def update(index, attributes, values_by_doc); end
  def update_message(index, attributes, values_by_doc); end
  def weights; end
  def weights=(arg0); end
end
class Riddle::Client::Filter
  def append_array(message, array); end
  def append_integer_range(message, range); end
  def attribute; end
  def attribute=(arg0); end
  def exclude; end
  def exclude=(arg0); end
  def exclude?; end
  def initialize(attribute, values, exclude = nil); end
  def query_message; end
  def values; end
  def values=(arg0); end
end
class Riddle::Client::Message
  def append(*args); end
  def append_64bit_int(int); end
  def append_64bit_ints(*ints); end
  def append_array(array); end
  def append_boolean(bool); end
  def append_float(float); end
  def append_floats(*floats); end
  def append_int(int); end
  def append_ints(*ints); end
  def append_string(str); end
  def initialize; end
  def to_s; end
end
class Riddle::Client::Response
  def initialize(str); end
  def length; end
  def next; end
  def next_64bit_int; end
  def next_64bit_int_array; end
  def next_array; end
  def next_float; end
  def next_float_array; end
  def next_int; end
  def next_int_array; end
end
class Riddle::VersionError < StandardError
end
class Riddle::ResponseError < StandardError
  def original; end
  def original=(arg0); end
end
class Riddle::OutOfBoundsError < StandardError
end
class Riddle::CommandFailedError < StandardError
  def command_result; end
  def command_result=(arg0); end
end
class Riddle::CommandResult
  def command; end
  def initialize(command, status, output = nil, successful = nil); end
  def output; end
  def status; end
  def successful; end
  def successful=(arg0); end
end
class Riddle::Configuration
  def common; end
  def indexer; end
  def indexer=(arg0); end
  def indices; end
  def initialize; end
  def render; end
  def searchd; end
  def self.parse!(input); end
  def sources; end
end
class Riddle::Configuration::Section
  def rendered_setting(setting); end
  def self.settings; end
  def setting_to_array(setting); end
  def settings; end
  def settings_body; end
  def valid?; end
end
module Riddle::Configuration::IndexSettings
  def bigram_freq_words; end
  def bigram_freq_words=(arg0); end
  def bigram_index; end
  def bigram_index=(arg0); end
  def blend_chars; end
  def blend_chars=(arg0); end
  def blend_mode; end
  def blend_mode=(arg0); end
  def charset_dictpath; end
  def charset_dictpath=(arg0); end
  def charset_table; end
  def charset_table=(arg0); end
  def charset_type; end
  def charset_type=(arg0); end
  def dict; end
  def dict=(arg0); end
  def docinfo; end
  def docinfo=(arg0); end
  def enable_star; end
  def enable_star=(arg0); end
  def exception_files; end
  def exception_files=(arg0); end
  def exceptions; end
  def exceptions=(exceptions); end
  def expand_keywords; end
  def expand_keywords=(arg0); end
  def global_idf; end
  def global_idf=(arg0); end
  def ha_strategy; end
  def ha_strategy=(arg0); end
  def hitless_words; end
  def hitless_words=(arg0); end
  def html_index_attrs; end
  def html_index_attrs=(arg0); end
  def html_remove_element_tags; end
  def html_remove_element_tags=(arg0); end
  def html_remove_elements; end
  def html_remove_elements=(html_remove_elements); end
  def html_strip; end
  def html_strip=(arg0); end
  def ignore_characters; end
  def ignore_characters=(arg0); end
  def ignore_chars; end
  def ignore_chars=(ignore_chars); end
  def index_exact_words; end
  def index_exact_words=(arg0); end
  def index_field_lengths; end
  def index_field_lengths=(arg0); end
  def index_sp; end
  def index_sp=(arg0); end
  def index_zones; end
  def index_zones=(arg0); end
  def infix_field_names; end
  def infix_field_names=(arg0); end
  def infix_fields; end
  def infix_fields=(fields); end
  def initialize_settings; end
  def inplace_docinfo_gap; end
  def inplace_docinfo_gap=(arg0); end
  def inplace_enable; end
  def inplace_enable=(arg0); end
  def inplace_hit_gap; end
  def inplace_hit_gap=(arg0); end
  def inplace_reloc_factor; end
  def inplace_reloc_factor=(arg0); end
  def inplace_write_factor; end
  def inplace_write_factor=(arg0); end
  def min_infix_len; end
  def min_infix_len=(arg0); end
  def min_prefix_len; end
  def min_prefix_len=(arg0); end
  def min_stemming_len; end
  def min_stemming_len=(arg0); end
  def min_word_len; end
  def min_word_len=(arg0); end
  def mlock; end
  def mlock=(arg0); end
  def morphologies; end
  def morphologies=(arg0); end
  def morphology; end
  def morphology=(morphology); end
  def name; end
  def name=(arg0); end
  def ngram_characters; end
  def ngram_characters=(arg0); end
  def ngram_chars; end
  def ngram_chars=(ngram_chars); end
  def ngram_len; end
  def ngram_len=(arg0); end
  def nil_join(array, delimiter); end
  def nil_split(string, pattern); end
  def ondisk_attrs; end
  def ondisk_attrs=(arg0); end
  def ondisk_dict; end
  def ondisk_dict=(arg0); end
  def overshort_step; end
  def overshort_step=(arg0); end
  def path; end
  def path=(arg0); end
  def phrase_boundaries; end
  def phrase_boundaries=(arg0); end
  def phrase_boundary; end
  def phrase_boundary=(phrase_boundary); end
  def phrase_boundary_step; end
  def phrase_boundary_step=(arg0); end
  def prefix_field_names; end
  def prefix_field_names=(arg0); end
  def prefix_fields; end
  def prefix_fields=(fields); end
  def preopen; end
  def preopen=(arg0); end
  def regexp_filter; end
  def regexp_filter=(arg0); end
  def rlp_context; end
  def rlp_context=(arg0); end
  def self.settings; end
  def stopword_files; end
  def stopword_files=(arg0); end
  def stopwords; end
  def stopwords=(stopwords); end
  def stopwords_step; end
  def stopwords_step=(arg0); end
  def stopwords_unstemmed; end
  def stopwords_unstemmed=(arg0); end
  def type; end
  def type=(arg0); end
  def wordform_files; end
  def wordform_files=(arg0); end
  def wordforms; end
  def wordforms=(wordforms); end
end
class Riddle::Configuration::Common < Riddle::Configuration::Section
  def common_sphinx_configuration; end
  def common_sphinx_configuration=(arg0); end
  def json_autoconv_keynames; end
  def json_autoconv_keynames=(arg0); end
  def json_autoconv_numbers; end
  def json_autoconv_numbers=(arg0); end
  def lemmatizer_base; end
  def lemmatizer_base=(arg0); end
  def on_json_attr_error; end
  def on_json_attr_error=(arg0); end
  def plugin_dir; end
  def plugin_dir=(arg0); end
  def render; end
  def rlp_environment; end
  def rlp_environment=(arg0); end
  def rlp_max_batch_docs; end
  def rlp_max_batch_docs=(arg0); end
  def rlp_max_batch_size; end
  def rlp_max_batch_size=(arg0); end
  def rlp_root; end
  def rlp_root=(arg0); end
  def self.settings; end
end
class Riddle::Configuration::DistributedIndex < Riddle::Configuration::Section
  def agent; end
  def agent_blackhole; end
  def agent_blackhole=(arg0); end
  def agent_connect_timeout; end
  def agent_connect_timeout=(arg0); end
  def agent_query_timeout; end
  def agent_query_timeout=(arg0); end
  def initialize(name); end
  def local; end
  def local_indices; end
  def local_indices=(arg0); end
  def name; end
  def name=(arg0); end
  def remote_indices; end
  def remote_indices=(arg0); end
  def render; end
  def self.settings; end
  def type; end
  def valid?; end
end
class Riddle::Configuration::Index < Riddle::Configuration::Section
  def initialize(name, *sources); end
  def parent; end
  def parent=(arg0); end
  def render; end
  def self.settings; end
  def source; end
  def sources; end
  def sources=(arg0); end
  def valid?; end
  include Riddle::Configuration::IndexSettings
end
class Riddle::Configuration::Indexer < Riddle::Configuration::Section
  def common_sphinx_configuration; end
  def common_sphinx_configuration=(arg0); end
  def json_autoconv_keynames; end
  def json_autoconv_keynames=(arg0); end
  def json_autoconv_numbers; end
  def json_autoconv_numbers=(arg0); end
  def lemmatizer_base; end
  def lemmatizer_base=(arg0); end
  def lemmatizer_cache; end
  def lemmatizer_cache=(arg0); end
  def max_file_field_buffer; end
  def max_file_field_buffer=(arg0); end
  def max_iops; end
  def max_iops=(arg0); end
  def max_iosize; end
  def max_iosize=(arg0); end
  def max_xmlpipe2_field; end
  def max_xmlpipe2_field=(arg0); end
  def mem_limit; end
  def mem_limit=(arg0); end
  def on_file_field_error; end
  def on_file_field_error=(arg0); end
  def on_json_attr_error; end
  def on_json_attr_error=(arg0); end
  def render; end
  def rlp_environment; end
  def rlp_environment=(arg0); end
  def rlp_max_batch_docs; end
  def rlp_max_batch_docs=(arg0); end
  def rlp_max_batch_size; end
  def rlp_max_batch_size=(arg0); end
  def rlp_root; end
  def rlp_root=(arg0); end
  def self.settings; end
  def self.shared_settings; end
  def settings; end
  def write_buffer; end
  def write_buffer=(arg0); end
end
class Riddle::Configuration::RealtimeIndex < Riddle::Configuration::Section
  def initialize(name); end
  def render; end
  def rt_attr_bigint; end
  def rt_attr_bigint=(arg0); end
  def rt_attr_bool; end
  def rt_attr_bool=(arg0); end
  def rt_attr_float; end
  def rt_attr_float=(arg0); end
  def rt_attr_json; end
  def rt_attr_json=(arg0); end
  def rt_attr_multi; end
  def rt_attr_multi=(arg0); end
  def rt_attr_multi_64; end
  def rt_attr_multi_64=(arg0); end
  def rt_attr_string; end
  def rt_attr_string=(arg0); end
  def rt_attr_timestamp; end
  def rt_attr_timestamp=(arg0); end
  def rt_attr_uint; end
  def rt_attr_uint=(arg0); end
  def rt_field; end
  def rt_field=(arg0); end
  def rt_mem_limit; end
  def rt_mem_limit=(arg0); end
  def self.settings; end
  def type; end
  def valid?; end
  include Riddle::Configuration::IndexSettings
end
class Riddle::Configuration::RemoteIndex
  def address; end
  def address=(arg0); end
  def initialize(address, port, name); end
  def name; end
  def name=(arg0); end
  def port; end
  def port=(arg0); end
  def remote; end
end
class Riddle::Configuration::Searchd < Riddle::Configuration::Section
  def address; end
  def address=(arg0); end
  def agent_connect_timeout; end
  def agent_connect_timeout=(arg0); end
  def agent_query_timeout; end
  def agent_query_timeout=(arg0); end
  def agent_retry_count; end
  def agent_retry_count=(arg0); end
  def agenty_retry_delay; end
  def agenty_retry_delay=(arg0); end
  def attr_flush_period; end
  def attr_flush_period=(arg0); end
  def binlog_flush; end
  def binlog_flush=(arg0); end
  def binlog_max_log_size; end
  def binlog_max_log_size=(arg0); end
  def binlog_path; end
  def binlog_path=(arg0); end
  def client_key; end
  def client_key=(arg0); end
  def client_timeout; end
  def client_timeout=(arg0); end
  def collation_libc_locale; end
  def collation_libc_locale=(arg0); end
  def collation_server; end
  def collation_server=(arg0); end
  def compat_sphinxql_magics; end
  def compat_sphinxql_magics=(arg0); end
  def crash_log_path; end
  def crash_log_path=(arg0); end
  def dist_threads; end
  def dist_threads=(arg0); end
  def expansion_limit; end
  def expansion_limit=(arg0); end
  def ha_period_karma; end
  def ha_period_karma=(arg0); end
  def ha_ping_interval; end
  def ha_ping_interval=(arg0); end
  def listen; end
  def listen=(arg0); end
  def listen_backlog; end
  def listen_backlog=(arg0); end
  def log; end
  def log=(arg0); end
  def max_batch_queries; end
  def max_batch_queries=(arg0); end
  def max_children; end
  def max_children=(arg0); end
  def max_filter_values; end
  def max_filter_values=(arg0); end
  def max_filters; end
  def max_filters=(arg0); end
  def max_matches; end
  def max_matches=(arg0); end
  def max_packet_size; end
  def max_packet_size=(arg0); end
  def mva_updates_pool; end
  def mva_updates_pool=(arg0); end
  def mysql41; end
  def mysql41=(arg0); end
  def mysql_version_string; end
  def mysql_version_string=(arg0); end
  def ondisk_attrs_default; end
  def ondisk_attrs_default=(arg0); end
  def ondisk_dict_default; end
  def ondisk_dict_default=(arg0); end
  def persistent_connections_limit; end
  def persistent_connections_limit=(arg0); end
  def pid_file; end
  def pid_file=(arg0); end
  def port; end
  def port=(arg0); end
  def predicted_time_costs; end
  def predicted_time_costs=(arg0); end
  def prefork_rotation_throttle; end
  def prefork_rotation_throttle=(arg0); end
  def preopen_indexes; end
  def preopen_indexes=(arg0); end
  def query_log; end
  def query_log=(arg0); end
  def query_log_format; end
  def query_log_format=(arg0); end
  def query_log_min_msec; end
  def query_log_min_msec=(arg0); end
  def read_buffer; end
  def read_buffer=(arg0); end
  def read_timeout; end
  def read_timeout=(arg0); end
  def read_unhinted; end
  def read_unhinted=(arg0); end
  def render; end
  def rt_flush_period; end
  def rt_flush_period=(arg0); end
  def rt_merge_iops; end
  def rt_merge_iops=(arg0); end
  def rt_merge_maxiosize; end
  def rt_merge_maxiosize=(arg0); end
  def seamless_rotate; end
  def seamless_rotate=(arg0); end
  def self.settings; end
  def set_listen; end
  def settings; end
  def shutdown_timeout; end
  def shutdown_timeout=(arg0); end
  def snippets_file_prefix; end
  def snippets_file_prefix=(arg0); end
  def socket; end
  def socket=(arg0); end
  def sphinxql_state; end
  def sphinxql_state=(arg0); end
  def subtree_docs_cache; end
  def subtree_docs_cache=(arg0); end
  def subtree_hits_cache; end
  def subtree_hits_cache=(arg0); end
  def thread_stack; end
  def thread_stack=(arg0); end
  def unlink_old; end
  def unlink_old=(arg0); end
  def valid?; end
  def watchdog; end
  def watchdog=(arg0); end
  def workers; end
  def workers=(arg0); end
end
class Riddle::Configuration::Source < Riddle::Configuration::Section
  def name; end
  def name=(arg0); end
  def parent; end
  def parent=(arg0); end
  def render; end
  def type; end
  def type=(arg0); end
  def valid?; end
end
class Riddle::Configuration::SQLSource < Riddle::Configuration::Source
  def initialize(name, type); end
  def mssql_unicode; end
  def mssql_unicode=(arg0); end
  def mssql_winauth; end
  def mssql_winauth=(arg0); end
  def mysql_connect_flags; end
  def mysql_connect_flags=(arg0); end
  def mysql_ssl_ca; end
  def mysql_ssl_ca=(arg0); end
  def mysql_ssl_cert; end
  def mysql_ssl_cert=(arg0); end
  def mysql_ssl_key; end
  def mysql_ssl_key=(arg0); end
  def odbc_dsn; end
  def odbc_dsn=(arg0); end
  def self.settings; end
  def sql_attr_bigint; end
  def sql_attr_bigint=(arg0); end
  def sql_attr_bool; end
  def sql_attr_bool=(arg0); end
  def sql_attr_float; end
  def sql_attr_float=(arg0); end
  def sql_attr_json; end
  def sql_attr_json=(arg0); end
  def sql_attr_multi; end
  def sql_attr_multi=(arg0); end
  def sql_attr_str2ordinal; end
  def sql_attr_str2ordinal=(arg0); end
  def sql_attr_str2wordcount; end
  def sql_attr_str2wordcount=(arg0); end
  def sql_attr_string; end
  def sql_attr_string=(arg0); end
  def sql_attr_timestamp; end
  def sql_attr_timestamp=(arg0); end
  def sql_attr_uint; end
  def sql_attr_uint=(arg0); end
  def sql_column_buffers; end
  def sql_column_buffers=(arg0); end
  def sql_db; end
  def sql_db=(arg0); end
  def sql_field_str2wordcount; end
  def sql_field_str2wordcount=(arg0); end
  def sql_field_string; end
  def sql_field_string=(arg0); end
  def sql_file_field; end
  def sql_file_field=(arg0); end
  def sql_host; end
  def sql_host=(arg0); end
  def sql_joined_field; end
  def sql_joined_field=(arg0); end
  def sql_pass; end
  def sql_pass=(arg0); end
  def sql_port; end
  def sql_port=(arg0); end
  def sql_query; end
  def sql_query=(arg0); end
  def sql_query_info; end
  def sql_query_info=(arg0); end
  def sql_query_killlist; end
  def sql_query_killlist=(arg0); end
  def sql_query_post; end
  def sql_query_post=(arg0); end
  def sql_query_post_index; end
  def sql_query_post_index=(arg0); end
  def sql_query_pre; end
  def sql_query_pre=(arg0); end
  def sql_query_range; end
  def sql_query_range=(arg0); end
  def sql_range_step; end
  def sql_range_step=(arg0); end
  def sql_ranged_throttle; end
  def sql_ranged_throttle=(arg0); end
  def sql_sock; end
  def sql_sock=(arg0); end
  def sql_user; end
  def sql_user=(arg0); end
  def type; end
  def type=(arg0); end
  def unpack_mysqlcompress; end
  def unpack_mysqlcompress=(arg0); end
  def unpack_mysqlcompress_maxsize; end
  def unpack_mysqlcompress_maxsize=(arg0); end
  def unpack_zlib; end
  def unpack_zlib=(arg0); end
  def valid?; end
end
class Riddle::Configuration::TemplateIndex < Riddle::Configuration::Section
  def initialize(name); end
  def parent; end
  def parent=(arg0); end
  def render; end
  def self.settings; end
  def valid?; end
  include Riddle::Configuration::IndexSettings
end
class Riddle::Configuration::TSVSource < Riddle::Configuration::Source
  def initialize(name, type = nil); end
  def self.settings; end
  def tsvpipe_attr_field; end
  def tsvpipe_attr_field=(arg0); end
  def tsvpipe_attr_multi; end
  def tsvpipe_attr_multi=(arg0); end
  def tsvpipe_command; end
  def tsvpipe_command=(arg0); end
  def type; end
  def type=(arg0); end
  def valid?; end
end
class Riddle::Configuration::XMLSource < Riddle::Configuration::Source
  def initialize(name, type); end
  def self.settings; end
  def type; end
  def type=(arg0); end
  def valid?; end
  def xmlpipe_attr_bool; end
  def xmlpipe_attr_bool=(arg0); end
  def xmlpipe_attr_float; end
  def xmlpipe_attr_float=(arg0); end
  def xmlpipe_attr_multi; end
  def xmlpipe_attr_multi=(arg0); end
  def xmlpipe_attr_str2ordinal; end
  def xmlpipe_attr_str2ordinal=(arg0); end
  def xmlpipe_attr_timestamp; end
  def xmlpipe_attr_timestamp=(arg0); end
  def xmlpipe_attr_uint; end
  def xmlpipe_attr_uint=(arg0); end
  def xmlpipe_command; end
  def xmlpipe_command=(arg0); end
  def xmlpipe_field; end
  def xmlpipe_field=(arg0); end
  def xmlpipe_fixup_utf8; end
  def xmlpipe_fixup_utf8=(arg0); end
end
class Riddle::Configuration::Parser
  def add_orphan_sources; end
  def configuration; end
  def each_with_prefix(prefix); end
  def initialize(input); end
  def inner; end
  def parse!; end
  def set_common; end
  def set_indexer; end
  def set_indices; end
  def set_searchd; end
  def set_setting(object, key, value); end
  def set_settings(object, hash); end
  def set_sources; end
  def sources; end
end
class Riddle::Configuration::Parser::InnerParser
  def initialize(input); end
  def next_line; end
  def next_settings; end
  def parse!; end
end
class Riddle::Configuration::Parser::InnerParser::EndOfFileError < StandardError
end
class Riddle::Configuration::ConfigurationError < StandardError
end
class Riddle::NoConfigurationFileError < StandardError
end
class Riddle::Controller
  def bin_path; end
  def bin_path=(arg0); end
  def check_for_configuration_file; end
  def configuration; end
  def index(*indices); end
  def indexer; end
  def indexer_binary_name; end
  def indexer_binary_name=(arg0); end
  def initialize(configuration, path); end
  def merge(destination, source, options = nil); end
  def path; end
  def path=(arg0); end
  def pid; end
  def rotate; end
  def running?; end
  def searchd; end
  def searchd_binary_name; end
  def searchd_binary_name=(arg0); end
  def sphinx_version; end
  def start(options = nil); end
  def stop(options = nil); end
end
class Riddle::ExecuteCommand
  def call; end
  def command; end
  def initialize(command, verbose); end
  def result_from_backticks; end
  def result_from_system; end
  def self.call(command, verbose = nil); end
  def verbose; end
  def verbose?; end
end
class Riddle::Query::Delete
  def initialize(index, *ids); end
  def to_sql; end
end
class Riddle::Query::Insert
  def columns; end
  def columns_to_s; end
  def command; end
  def initialize(index, columns = nil, values = nil); end
  def replace!; end
  def to_sql; end
  def translated_value(value); end
  def values; end
  def values_to_s; end
end
class Riddle::Query::Select
  def combined_wheres; end
  def escape_column(column); end
  def escape_columns(columns); end
  def exclusive_filter_comparison_and_value(attribute, value); end
  def extended_values; end
  def filter_comparison_and_value(attribute, value); end
  def filter_value(value); end
  def from(*indices); end
  def group_best(count); end
  def group_by(attribute); end
  def group_prefix; end
  def having(*conditions); end
  def initialize; end
  def limit(limit); end
  def limit_clause; end
  def matching(match); end
  def offset(offset); end
  def option_value(value); end
  def options_clause; end
  def order_by(order); end
  def order_within_group_by(order); end
  def prepend_values(*values); end
  def to_sql; end
  def values(*values); end
  def where(filters = nil); end
  def where_all(filters = nil); end
  def where_not(filters = nil); end
  def where_not_all(filters = nil); end
  def wheres?; end
  def wheres_to_s; end
  def with_options(options = nil); end
end
module Riddle::Query
  def self.begin; end
  def self.collation; end
  def self.commit; end
  def self.connection(address = nil, port = nil); end
  def self.create_function(name, type, file); end
  def self.describe(index); end
  def self.drop_function(name); end
  def self.escape(string); end
  def self.meta; end
  def self.quote(string); end
  def self.rollback; end
  def self.set(variable, values, global = nil); end
  def self.snippets(data, index, query, options = nil); end
  def self.sql_escape(string); end
  def self.status; end
  def self.tables; end
  def self.translate_value(value); end
  def self.update(index, id, values = nil); end
  def self.variables; end
  def self.warnings; end
end
class Riddle::ConnectionError < StandardError
end
