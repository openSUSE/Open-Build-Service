# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rantly/all/rantly.rbi
#
# rantly-2.0.0
class Rantly
  def array(n = nil, &block); end
  def boolean; end
  def branch(*gens); end
  def call(gen, *args); end
  def choose(*vals); end
  def classifiers; end
  def classifiers=(arg0); end
  def classify(classifier); end
  def dict(n = nil, &block); end
  def each(n, limit = nil, &block); end
  def float(distribution = nil, params = nil); end
  def freq(*pairs); end
  def generate(n, limit_arg, gen_block, &handler); end
  def guard(test); end
  def initialize; end
  def integer(limit = nil); end
  def literal(value); end
  def map(n, limit = nil, &block); end
  def positive_integer; end
  def range(lo = nil, hi = nil); end
  def reset; end
  def self.default_size; end
  def self.default_size=(arg0); end
  def self.each(n, limit = nil, &block); end
  def self.gen; end
  def self.map(n, limit = nil, &block); end
  def self.singleton; end
  def self.value(limit = nil, &block); end
  def size; end
  def sized(n, &block); end
  def string(char_class = nil); end
  def value(limit = nil, &block); end
end
class Rantly::GuardFailure < RuntimeError
end
class Rantly::TooManyTries < RuntimeError
  def initialize(limit, nfailed); end
  def limit; end
  def tries; end
end
module Rantly::Chars
  def self.of(regexp); end
end
class Object < BasicObject
  def Rantly(n = nil, &block); end
end
