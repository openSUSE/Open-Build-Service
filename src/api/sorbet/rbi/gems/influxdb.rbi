# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/influxdb/all/influxdb.rbi
#
# influxdb-0.7.0
module InfluxDB
  def self.convert_timestamp(time, precision = nil); end
  def self.now(precision = nil); end
end
class InfluxDB::Error < StandardError
end
class InfluxDB::AuthenticationError < InfluxDB::Error
end
class InfluxDB::ConnectionError < InfluxDB::Error
end
class InfluxDB::SeriesNotFound < InfluxDB::Error
end
class InfluxDB::JSONParserError < InfluxDB::Error
end
class InfluxDB::QueryError < InfluxDB::Error
end
module InfluxDB::Logging
  def log(level, message = nil, &block); end
  def self.log?(level); end
  def self.log_level; end
  def self.log_level=(arg0); end
  def self.logger; end
  def self.logger=(arg0); end
end
class InfluxDB::MaxQueue < Thread::Queue
  def initialize(max = nil); end
  def max; end
  def push(obj); end
end
class InfluxDB::PointValue
  def dump; end
  def escape(str, type); end
  def escape_tags(tags); end
  def escape_value(value); end
  def escape_values(values); end
  def initialize(data); end
  def series; end
  def tags; end
  def timestamp; end
  def values; end
end
class InfluxDB::Config
  def async; end
  def async?; end
  def auth_method; end
  def auth_method=(arg0); end
  def chunk_size; end
  def chunk_size=(arg0); end
  def coerce(name, value); end
  def configure_hosts!(hosts); end
  def database; end
  def database=(arg0); end
  def denormalize; end
  def denormalize=(arg0); end
  def discard_write_errors; end
  def discard_write_errors=(arg0); end
  def epoch; end
  def epoch=(arg0); end
  def hosts; end
  def initial_delay; end
  def initial_delay=(arg0); end
  def initialize(url: nil, **opts); end
  def max_delay; end
  def max_delay=(arg0); end
  def next_host; end
  def normalize_retry_option(value); end
  def open_timeout; end
  def open_timeout=(arg0); end
  def opts_from_non_params(url); end
  def opts_from_params(query); end
  def opts_from_url(url); end
  def password; end
  def password=(arg0); end
  def port; end
  def port=(arg0); end
  def prefix; end
  def prefix=(arg0); end
  def read_timeout; end
  def read_timeout=(arg0); end
  def retry; end
  def retry=(arg0); end
  def set_ivar!(name, value); end
  def ssl_ca_cert; end
  def ssl_ca_cert=(arg0); end
  def time_precision; end
  def time_precision=(arg0); end
  def udp; end
  def udp?; end
  def use_ssl; end
  def use_ssl=(arg0); end
  def username; end
  def username=(arg0); end
  def verify_ssl; end
  def verify_ssl=(arg0); end
end
module InfluxDB::Writer
end
class InfluxDB::Writer::Async
  def client; end
  def config; end
  def initialize(client, config); end
  def worker; end
  def write(data, precision = nil, retention_policy = nil, database = nil); end
end
class InfluxDB::Writer::Async::Worker
  def block_on_full_queue; end
  def check_background_queue(thread_num = nil); end
  def client; end
  def current_thread_count; end
  def current_threads; end
  def initialize(client, config); end
  def max_post_points; end
  def max_queue_size; end
  def num_worker_threads; end
  def push(payload, precision = nil, retention_policy = nil, database = nil); end
  def queue; end
  def sizes(data); end
  def sleep_interval; end
  def spawn_threads!; end
  def stop!; end
  def threads; end
  def write(data); end
  include InfluxDB::Logging
end
class InfluxDB::Writer::UDP
  def host; end
  def initialize(client, host: nil, port: nil); end
  def port; end
  def socket; end
  def socket=(arg0); end
  def with_socket; end
  def write(payload, _precision = nil, _retention_policy = nil, _database = nil); end
end
module InfluxDB::Query
end
class InfluxDB::Query::Batch
  def add(query, params: nil); end
  def build_denormalized_result(series); end
  def build_result(series); end
  def client; end
  def config(*args); end
  def denormalize_series(*args); end
  def denormalized_series_list(*args); end
  def execute(denormalize: nil, chunk_size: nil, **opts, &block); end
  def fetch_series(response); end
  def full_url(*args); end
  def get(*args); end
  def initialize(client); end
  def query_params(*args); end
  def raw_values(*args); end
  def statements; end
end
class InfluxDB::Query::Builder
  def build(query, params); end
  def params_from_array(params); end
  def params_from_hash(params); end
  def quote(param); end
end
module InfluxDB::Query::Cluster
  def create_cluster_admin(username, password); end
  def list_cluster_admins; end
  def revoke_cluster_admin_privileges(username); end
end
module InfluxDB::Query::ContinuousQuery
  def create_continuous_query(name, database, query, resample_every: nil, resample_for: nil); end
  def delete_continuous_query(name, database); end
  def list_continuous_queries(database); end
end
module InfluxDB::Query::Core
  def batch(&block); end
  def builder; end
  def cgi_escape_params(params); end
  def denormalize_series(series); end
  def denormalized_series_list(series); end
  def execute(query, db: nil, **options); end
  def fetch_series(response); end
  def full_url(path, params = nil); end
  def generate_payload(data); end
  def ping; end
  def query(query, params: nil, denormalize: nil, chunk_size: nil, **opts); end
  def query_params(query, precision: nil, epoch: nil, chunk_size: nil, database: nil); end
  def raw_values(series); end
  def version; end
  def write(data, precision, retention_policy = nil, database = nil); end
  def write_point(series, data, precision = nil, retention_policy = nil, database = nil); end
  def write_points(data, precision = nil, retention_policy = nil, database = nil); end
end
module InfluxDB::Query::Database
  def create_database(name = nil); end
  def delete_database(name = nil); end
  def list_databases; end
  def show_field_keys; end
end
module InfluxDB::Query::Measurement
  def delete_measurement(measurement_name, database = nil); end
  def list_measurements(database = nil); end
end
module InfluxDB::Query::RetentionPolicy
  def alter_retention_policy(name, database, duration, replication, default = nil, shard_duration: nil); end
  def create_retention_policy(name, database, duration, replication, default = nil, shard_duration: nil); end
  def delete_retention_policy(name, database); end
  def list_retention_policies(database); end
end
module InfluxDB::Query::Series
  def delete_series(name); end
  def list_series; end
end
module InfluxDB::Query::User
  def create_database_user(database, username, password, options = nil); end
  def delete_user(username); end
  def grant_user_admin_privileges(username); end
  def grant_user_privileges(username, database, permission); end
  def list_user_grants(username); end
  def list_users; end
  def revoke_user_privileges(username, database, permission); end
  def update_user_password(username, password); end
end
module InfluxDB::HTTP
  def basic_auth?; end
  def connect_with_retry; end
  def do_request(http, req, data = nil); end
  def errors_from_response(parsed_resp); end
  def generate_cert_store; end
  def get(url, options = nil); end
  def handle_successful_response(response, options); end
  def post(url, data); end
  def resolve_error(response); end
  def setup_ssl(http); end
end
class InfluxDB::Client
  def config; end
  def find_writer; end
  def initialize(database = nil, **opts); end
  def now; end
  def stop!; end
  def stopped?; end
  def writer; end
  include InfluxDB::HTTP
  include InfluxDB::Logging
  include InfluxDB::Query::Cluster
  include InfluxDB::Query::ContinuousQuery
  include InfluxDB::Query::Core
  include InfluxDB::Query::Database
  include InfluxDB::Query::Measurement
  include InfluxDB::Query::RetentionPolicy
  include InfluxDB::Query::Series
  include InfluxDB::Query::User
end
