# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/experimental-influxdb-rails/all/experimental-influxdb-rails.rbi
#
# experimental-influxdb-rails-1.0.0.beta5
module InfluxDB
end
module InfluxDB::Rails
  def self.client; end
  def self.client=(arg0); end
  def self.configuration; end
  def self.configuration=(arg0); end
  def self.configure(_silent = nil); end
  def self.current; end
  def self.current_timestamp; end
  def self.ignorable_exception?(ex); end
  def self.report_exception(ex, env = nil); end
  def self.report_exception_unless_ignorable(ex, env = nil); end
  def self.rescue; end
  def self.rescue_and_reraise; end
  def self.transmit(ex, env = nil); end
  def self.transmit_unless_ignorable(ex, env = nil); end
end
module InfluxDB::Rails::Logger
  def log(level, message); end
end
module InfluxDB::Rails::Middleware
end
class InfluxDB::Rails::Middleware::Subscriber
  def call(*arg0); end
  def configuration; end
  def enabled?; end
  def initialize(configuration); end
  def location; end
  def tags(tags); end
  include InfluxDB::Rails::Logger
end
class InfluxDB::Rails::Middleware::SimpleSubscriber < InfluxDB::Rails::Middleware::Subscriber
  def call(_name, started, finished, _unique_id, payload); end
  def enabled?; end
  def initialize(configuration, series_name); end
  def series_name; end
  def timestamp(finished); end
  def values(started, finished, _payload); end
end
class InfluxDB::Rails::Middleware::RenderSubscriber < InfluxDB::Rails::Middleware::SimpleSubscriber
  def tags(payload); end
  def values(started, finished, payload); end
end
class InfluxDB::Rails::Middleware::RequestSubscriber < InfluxDB::Rails::Middleware::Subscriber
  def call(_name, start, finish, _id, payload); end
  def series(payload, start, finish); end
  def tags(payload); end
  def values(duration, started); end
end
module InfluxDB::Rails::Sql
end
class InfluxDB::Rails::Sql::Normalizer
  def initialize(query); end
  def perform; end
  def query; end
end
class InfluxDB::Rails::Sql::Query
  def class_name; end
  def initialize(payload); end
  def name; end
  def operation; end
  def query; end
  def track?; end
end
class InfluxDB::Rails::Middleware::SqlSubscriber < InfluxDB::Rails::Middleware::SimpleSubscriber
  def call(_name, started, finished, _unique_id, payload); end
  def location; end
  def tags(payload); end
  def values(started, finished, payload); end
end
class InfluxDB::Rails::ExceptionPresenter
  def action; end
  def backtrace; end
  def configure_from_params(params); end
  def context; end
  def controller; end
  def current_user; end
  def custom_data; end
  def dimensions; end
  def exception; end
  def initialize(ex, params = nil); end
  def params; end
  def referer; end
  def remote_ip; end
  def request_data; end
  def request_url; end
  def session_data; end
  def user_agent; end
  def values; end
end
class InfluxDB::Rails::Configuration
  def add_custom_exception_data(exception_presenter); end
  def aggregated_exception_classes; end
  def aggregated_exception_classes=(arg0); end
  def application_name; end
  def application_name=(arg0); end
  def application_root; end
  def application_root=(arg0); end
  def async; end
  def async=(arg0); end
  def backtrace_filters; end
  def backtrace_filters=(arg0); end
  def debug; end
  def debug=(arg0); end
  def debug?; end
  def define_custom_exception_data(&block); end
  def environment; end
  def environment=(arg0); end
  def environment_variable_filters; end
  def environment_variable_filters=(arg0); end
  def environment_variables; end
  def environment_variables=(arg0); end
  def framework; end
  def framework=(arg0); end
  def framework_version; end
  def framework_version=(arg0); end
  def ignore_current_environment?; end
  def ignore_exception?(ex); end
  def ignore_user_agent?(incoming_user_agent); end
  def ignored_environments; end
  def ignored_environments=(arg0); end
  def ignored_exception_messages; end
  def ignored_exception_messages=(arg0); end
  def ignored_exceptions; end
  def ignored_exceptions=(arg0); end
  def ignored_reports; end
  def ignored_reports=(arg0); end
  def ignored_user_agents; end
  def ignored_user_agents=(arg0); end
  def influxdb_database; end
  def influxdb_database=(arg0); end
  def influxdb_hosts; end
  def influxdb_hosts=(arg0); end
  def influxdb_password; end
  def influxdb_password=(arg0); end
  def influxdb_port; end
  def influxdb_port=(arg0); end
  def influxdb_username; end
  def influxdb_username=(arg0); end
  def initialize; end
  def initialize_http_connection; end
  def instrumentation_enabled; end
  def instrumentation_enabled=(arg0); end
  def instrumentation_enabled?; end
  def language; end
  def language=(arg0); end
  def language_version; end
  def language_version=(arg0); end
  def load_rails_defaults; end
  def logger; end
  def logger=(arg0); end
  def max_delay; end
  def max_delay=(arg0); end
  def open_timeout; end
  def open_timeout=(arg0); end
  def rails_app_name; end
  def rails_app_name=(arg0); end
  def read_timeout; end
  def read_timeout=(arg0); end
  def retry; end
  def retry=(arg0); end
  def series_name_for_controller_runtimes; end
  def series_name_for_controller_runtimes=(arg0); end
  def series_name_for_db_runtimes; end
  def series_name_for_db_runtimes=(arg0); end
  def series_name_for_exceptions; end
  def series_name_for_exceptions=(arg0); end
  def series_name_for_instrumentation; end
  def series_name_for_instrumentation=(arg0); end
  def series_name_for_render_collection; end
  def series_name_for_render_collection=(arg0); end
  def series_name_for_render_partial; end
  def series_name_for_render_partial=(arg0); end
  def series_name_for_render_template; end
  def series_name_for_render_template=(arg0); end
  def series_name_for_sql; end
  def series_name_for_sql=(arg0); end
  def series_name_for_view_runtimes; end
  def series_name_for_view_runtimes=(arg0); end
  def tags_middleware; end
  def tags_middleware=(arg0); end
  def time_precision; end
  def time_precision=(arg0); end
  def use_ssl; end
  def use_ssl=(arg0); end
end
class InfluxDB::Rails::Backtrace
  def initialize(backtrace); end
  def inspect; end
  def lines; end
  def to_a; end
end
class InfluxDB::Rails::Backtrace::Line
  def file; end
  def initialize(line); end
  def inspect; end
  def method; end
  def number; end
  def to_s; end
end
class InfluxDB::Rails::Context
  def action; end
  def action=(value); end
  def controller; end
  def controller=(value); end
  def location; end
  def reset; end
  def tags; end
  def tags=(tags); end
  def values; end
  def values=(values); end
end
class InfluxDB::Rails::Rack
  def _call(env); end
  def call(env); end
  def initialize(app); end
end
class InfluxDB::Rails::Railtie < Rails::Railtie
end
module InfluxDB::Rails::Middleware::HijackRenderException
  def render_exception(env, ex); end
end
module InfluxDB::Rails::AirTrafficController
  def influxdb_filtered_params; end
  def influxdb_request_data; end
  def influxdb_request_url; end
  def influxdb_session_data; end
end
module InfluxDB::Rails::Instrumentation
  def benchmark_for_instrumentation; end
  def self.included(base); end
end
module InfluxDB::Rails::Instrumentation::ClassMethods
  def instrument(methods = nil); end
end
