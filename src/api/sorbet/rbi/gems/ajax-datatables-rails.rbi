# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/ajax-datatables-rails/all/ajax-datatables-rails.rbi
#
# ajax-datatables-rails-1.0.0
module AjaxDatatablesRails
  def self.config; end
  def self.configure; end
end
class AjaxDatatablesRails::Configuration
  def db_adapter; end
  def db_adapter=(value); end
  def nulls_last; end
  def nulls_last=(value); end
  def self.db_adapter; end
  def self.db_adapter=(value); end
  def self.nulls_last; end
  def self.nulls_last=(value); end
  extend ActiveSupport::Configurable::ClassMethods
  include ActiveSupport::Configurable
end
class AjaxDatatablesRails::Base
  def additional_data; end
  def as_json(*arg0); end
  def connected_columns; end
  def data; end
  def data_error_text; end
  def datatable; end
  def get_additional_data; end
  def get_raw_records; end
  def global_search_delimiter; end
  def initialize(params, options = nil); end
  def options; end
  def params; end
  def raw_records_error_text; end
  def records; end
  def records_filtered_count; end
  def records_total_count; end
  def retrieve_records; end
  def sanitize(data); end
  def search_columns; end
  def searchable_columns; end
  def view_columns; end
  def view_columns_error_text; end
end
module AjaxDatatablesRails::Datatable
end
class AjaxDatatablesRails::Datatable::Datatable
  def column_by(how, what); end
  def columns; end
  def datatable; end
  def get_param(param); end
  def initialize(datatable); end
  def offset; end
  def options; end
  def order_by(how, what); end
  def orderable?; end
  def orders; end
  def page; end
  def paginate?; end
  def per_page; end
  def search; end
  def searchable?; end
end
class AjaxDatatablesRails::Datatable::SimpleSearch
  def initialize(options = nil); end
  def regexp?; end
  def value; end
end
class AjaxDatatablesRails::Datatable::SimpleOrder
  def column; end
  def column_direction; end
  def column_index; end
  def direction; end
  def initialize(datatable, options = nil); end
  def query(sort_column); end
  def sort_nulls_last?; end
end
class AjaxDatatablesRails::Datatable::Column
  def casted_column; end
  def custom_field?; end
  def data; end
  def datatable; end
  def field; end
  def formatted_value; end
  def formatter; end
  def index; end
  def initialize(datatable, index, options); end
  def model; end
  def options; end
  def search=(arg0); end
  def source; end
  def table; end
  def type_cast; end
  include AjaxDatatablesRails::Datatable::Column::DateFilter
  include AjaxDatatablesRails::Datatable::Column::Order
  include AjaxDatatablesRails::Datatable::Column::Search
end
module AjaxDatatablesRails::Datatable::Column::Search
  def cond; end
  def empty_search; end
  def filter; end
  def integer?(string); end
  def non_regex_search; end
  def null_value_search; end
  def out_of_range?(search_value); end
  def raw_search(cond); end
  def regex_search; end
  def search; end
  def search_query; end
  def searchable?; end
  def searchable_integer?; end
  def searched?; end
  def use_regex?; end
end
module AjaxDatatablesRails::Datatable::Column::Order
  def nulls_last?; end
  def orderable?; end
  def sort_field; end
  def sort_query; end
end
module AjaxDatatablesRails::Datatable::Column::DateFilter
  def date_range_search; end
  def delimiter; end
  def empty_range_search?; end
  def parse_date(date); end
  def range_end; end
  def range_end_casted; end
  def range_start; end
  def range_start_casted; end
end
class AjaxDatatablesRails::Datatable::Column::DateFilter::DateRange
  def begin; end
  def end; end
  def exclude_end?; end
  def initialize(date_start, date_end); end
end
module AjaxDatatablesRails::ORM
end
module AjaxDatatablesRails::ORM::ActiveRecord
  def build_conditions; end
  def build_conditions_for_datatable; end
  def build_conditions_for_selected_columns; end
  def fetch_records; end
  def filter_records(records); end
  def paginate_records(records); end
  def search_for; end
  def sort_records(records); end
end
class AjaxDatatablesRails::ActiveRecord < AjaxDatatablesRails::Base
  include AjaxDatatablesRails::ORM::ActiveRecord
end
