# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/ansi/all/ansi.rbi
#
# ansi-1.5.0
module ANSI
  extend ANSI::Code
end
module ANSI::Constants
end
module ANSI::Code
  def [](*codes); end
  def ansi(*codes); end
  def back(spaces = nil); end
  def black_on_black(string = nil); end
  def black_on_blue(string = nil); end
  def black_on_cyan(string = nil); end
  def black_on_green(string = nil); end
  def black_on_magenta(string = nil); end
  def black_on_red(string = nil); end
  def black_on_white(string = nil); end
  def black_on_yellow(string = nil); end
  def blue_on_black(string = nil); end
  def blue_on_blue(string = nil); end
  def blue_on_cyan(string = nil); end
  def blue_on_green(string = nil); end
  def blue_on_magenta(string = nil); end
  def blue_on_red(string = nil); end
  def blue_on_white(string = nil); end
  def blue_on_yellow(string = nil); end
  def code(*codes); end
  def color(*codes); end
  def cyan_on_black(string = nil); end
  def cyan_on_blue(string = nil); end
  def cyan_on_cyan(string = nil); end
  def cyan_on_green(string = nil); end
  def cyan_on_magenta(string = nil); end
  def cyan_on_red(string = nil); end
  def cyan_on_white(string = nil); end
  def cyan_on_yellow(string = nil); end
  def display(line, column = nil); end
  def down(spaces = nil); end
  def forward(spaces = nil); end
  def green_on_black(string = nil); end
  def green_on_blue(string = nil); end
  def green_on_cyan(string = nil); end
  def green_on_green(string = nil); end
  def green_on_magenta(string = nil); end
  def green_on_red(string = nil); end
  def green_on_white(string = nil); end
  def green_on_yellow(string = nil); end
  def hex_code(string, background = nil); end
  def left(spaces = nil); end
  def magenta_on_black(string = nil); end
  def magenta_on_blue(string = nil); end
  def magenta_on_cyan(string = nil); end
  def magenta_on_green(string = nil); end
  def magenta_on_magenta(string = nil); end
  def magenta_on_red(string = nil); end
  def magenta_on_white(string = nil); end
  def magenta_on_yellow(string = nil); end
  def method_missing(code, *args, &blk); end
  def move(line, column = nil); end
  def random(background = nil); end
  def red_on_black(string = nil); end
  def red_on_blue(string = nil); end
  def red_on_cyan(string = nil); end
  def red_on_green(string = nil); end
  def red_on_magenta(string = nil); end
  def red_on_red(string = nil); end
  def red_on_white(string = nil); end
  def red_on_yellow(string = nil); end
  def rgb(*args); end
  def rgb_256(r, g, b); end
  def rgb_code(red, green, blue, background = nil); end
  def right(spaces = nil); end
  def self.colors; end
  def self.styles; end
  def style(*codes); end
  def unansi(string = nil); end
  def uncolor(string = nil); end
  def unstyle(string = nil); end
  def up(spaces = nil); end
  def white_on_black(string = nil); end
  def white_on_blue(string = nil); end
  def white_on_cyan(string = nil); end
  def white_on_green(string = nil); end
  def white_on_magenta(string = nil); end
  def white_on_red(string = nil); end
  def white_on_white(string = nil); end
  def white_on_yellow(string = nil); end
  def yellow_on_black(string = nil); end
  def yellow_on_blue(string = nil); end
  def yellow_on_cyan(string = nil); end
  def yellow_on_green(string = nil); end
  def yellow_on_magenta(string = nil); end
  def yellow_on_red(string = nil); end
  def yellow_on_white(string = nil); end
  def yellow_on_yellow(string = nil); end
  extend ANSI::Code
  include ANSI::Constants
end
