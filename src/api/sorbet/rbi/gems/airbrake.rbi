# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/airbrake/all/airbrake.rbi
#
# airbrake-8.0.1
module Airbrake
end
module Airbrake::Rack
end
class Airbrake::Rack::User
  def as_json; end
  def full_name; end
  def initialize(user); end
  def self.extract(rack_env); end
  def self.try_current_user(rack_env); end
  def try_to_get(key); end
end
class Airbrake::Rack::UserFilter
  def call(notice); end
  def initialize; end
  def weight; end
end
class Airbrake::Rack::ContextFilter
  def add_framework_version(context); end
  def call(notice); end
  def initialize; end
  def weight; end
end
class Airbrake::Rack::SessionFilter
  def call(notice); end
  def initialize; end
  def weight; end
end
class Airbrake::Rack::HttpParamsFilter
  def call(notice); end
  def initialize; end
  def weight; end
end
class Airbrake::Rack::HttpHeadersFilter
  def call(notice); end
  def initialize; end
  def weight; end
end
class Airbrake::Rack::RequestBodyFilter
  def call(notice); end
  def initialize(length = nil); end
  def weight; end
end
class Airbrake::Rack::RouteFilter
  def call(notice); end
  def initialize; end
  def rails_route(request); end
  def sinatra_route(request); end
  def weight; end
end
class Airbrake::Rack::Middleware
  def call(env); end
  def framework_exception(env); end
  def initialize(app, notifier_name = nil); end
  def notify_airbrake(exception, env); end
end
module Airbrake::Rails
end
module Airbrake::Rails::ActionController
  def build_notice(exception, params = nil, notifier_name = nil); end
  def notify_airbrake(exception, params = nil, notifier_name = nil); end
  def notify_airbrake_sync(exception, params = nil, notifier_name = nil); end
end
class Airbrake::Rails::Railtie < Rails::Railtie
end
module ActionController
end
class ActionController::Metal < AbstractController::Base
  include Airbrake::Rails::ActionController
end
module Delayed
end
module Delayed::Plugins
end
class Delayed::Plugins::Airbrake < Delayed::Plugin
  def self.callback_block; end
end
class Airbrake::AirbrakeLogger < SimpleDelegator
  def airbrake_level; end
  def airbrake_level=(level); end
  def airbrake_notifier; end
  def airbrake_notifier=(arg0); end
  def error(progname = nil, &block); end
  def fatal(progname = nil, &block); end
  def initialize(logger); end
  def normalize_severity(severity); end
  def notify_airbrake(severity, progname); end
  def unknown(progname = nil, &block); end
  def warn(progname = nil, &block); end
end
class Airbrake::Rails::ActionControllerSubscriber
  def call(*args); end
  def find_all_routes; end
  def find_route(params); end
  def find_status_code(payload); end
  def initialize(notifier); end
end
module Airbrake::Rails::ActiveRecord
  def run_callbacks(kind, *args, &block); end
end
module Airbrake::Rails::ActiveJob
  def self.notify_airbrake(exception, job); end
  extend ActiveSupport::Concern
end
