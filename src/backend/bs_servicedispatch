#!/usr/bin/perl

BEGIN {
  my ($wd) = $0 =~ m-(.*)/- ;
  $wd ||= '.';
  unshift @INC,  "$wd/build";
  unshift @INC,  "$wd";
}

use XML::Structured ':bytes';
use POSIX;

use BSConfiguration;
use BSRPC ':https';
use BSUtil;
use BSSrcrep;
use BSRevision;
use BSNotify;
use BSStdRunner;
use BSVerify;

use strict;

my $bsdir = $BSConfig::bsdir || "/srv/obs";

my $eventdir = "$BSConfig::bsdir/events";
my $srcrep = "$BSConfig::bsdir/sources";
my $uploaddir = "$srcrep/:upload";
my $rundir = $BSConfig::rundir || $BSConfig::rundir || "$BSConfig::bsdir/run";

my $maxchild = 4;
$maxchild = $BSConfig::servicedispatch_maxchild if defined $BSConfig::servicedispatch_maxchild;

my $myeventdir = "$eventdir/servicedispatch";

sub notify_repservers {
  my ($type, $projid, $packid) = @_;
  BSRPC::rpc({
    'uri'       => "$BSConfig::srcserver/source/$projid/$packid",
    'request'   => 'POST',
    'timeout'   => 60,
  }, undef, 'cmd=notifypackagechange');
}

sub notify_serviceresult {
  my ($rev, $error) = @_;
  if ($error) {
    $error =~ s/[\r\n]+$//s;
    $error =~ s/.*[\r\n]//s;
    $error = str2utf8xml($error) || 'unknown service error';
  }
  my $user = $rev->{'user'};
  my $comment = $rev->{'comment'};
  my $requestid = $rev->{'requestid'};
  $user = '' unless defined $user;
  $user = 'unknown' if $user eq '';
  $user = str2utf8xml($user);
  $comment = '' unless defined $comment;
  $comment = str2utf8xml($comment);
  my $p = {
    'project' => $rev->{'project'}, 'package' => $rev->{'package'}, 'rev' => $rev->{'rev'},
    'user' => $user, 'comment' => $comment, 'requestid' => $requestid,
  };
  $p->{'error'} = $error if $error;
  BSNotify::notify($error ? 'SRCSRV_SERVICE_FAIL' : 'SRCSRV_SERVICE_SUCCESS', $p);
}

sub commitobsscm {
  my ($projid, $packid, $servicemark, $rev, $files) = @_;
  my $data = BSSrcrep::readobsscmdata($projid, $packid, $servicemark);
  return if !$data || $data->{'run'} ne $rev->{'run'};
  my $srcmd5 = BSSrcrep::addmeta($projid, $packid, $files);
  my $param = {
    'uri' => "$BSConfig::srcserver/source/$projid/$packid",
    'request' => 'POST',
    'timeout'   => 300,
  };
  BSRPC::rpc($param, undef, "cmd=commitobsscm", "srcmd5=$srcmd5", "servicemark=$servicemark", "run=$rev->{'run'}");
}

sub addrev_service {
  my ($rev, $servicemark, $files, $error, $lxservicemd5) = @_;

  if ($error) {
    chomp $error;
    $error ||= 'unknown service error';
  }
  my $projid = $rev->{'project'};
  my $packid = $rev->{'package'};
  if ($files->{'_service_error'} && !$error) {
    $error = BSRevision::revreadstr($rev, '_service_error', $files->{'_service_error'});
    chomp $error;
    $error ||= 'unknown service error';
  }
  if (!$error) {
    eval {
      if ($rev->{'rev'} eq 'obsscm') {
	commitobsscm($projid, $packid, $servicemark, $rev, $files);
      } else {
	BSSrcrep::addmeta_service($projid, $packid, $files, $servicemark, $rev->{'srcmd5'}, $lxservicemd5);
      }
    };
    die($@) if $@ && $rev->{'rev'} eq 'obsscm' && $@ !~ /^4/;	# retry transient errors
    $error = $@ if $@;
  }
  BSSrcrep::addmeta_serviceerror($projid, $packid, $servicemark, $error) if $error;
  notify_serviceresult($rev, $error);
  notify_repservers('package', $projid, $packid) unless $rev->{'rev'} eq 'obsscm';
}


sub getrev {
  my ($projid, $packid, $revid) = @_;
  my $rev = BSRevision::getrev_local($projid, $packid, $revid);
  $rev = BSRevision::getrev_deleted_srcmd5($projid, $packid, $revid) if !$rev && $revid && $revid =~ /^[0-9a-f]{32}$/;
  return $rev;
}

sub doservicerpc {
  my ($projid, $packid, $files, $send, $noprefix) = @_;

  my $odir = "$uploaddir/runservice$$";
  BSUtil::cleandir($odir) if -d $odir;
  mkdir_p($odir);
  my $receive;
  eval {
    $receive = BSRPC::rpc({
      'uri'       => "$BSConfig::serviceserver/sourceupdate/$projid/$packid",
      'request'   => 'POST',
      'headers'   => [ 'Content-Type: application/x-cpio' ],
      'chunked'   => 1,
      'data'      => \&BSHTTP::cpio_sender,
      'cpiofiles' => $send,
      'directory' => $odir,
      'timeout'   => $BSConfig::service_timeout,
      'withmd5'   => 1,
      'receiver' => \&BSHTTP::cpio_receiver,
    }, undef, "timeout=$BSConfig::service_timeout");
  };
  if ($@ || !$receive) {
    BSUtil::cleandir($odir);
    rmdir($odir);
    my $error = $@ || 'error';
    die("Transient error for $projid/$packid: $error") if $error =~ /^5/;
    die("RPC error for $projid/$packid: $error") if $error !~ /^\d/;
    $error = "service daemon error:\n $error";
    return $error;
  }

  # update source repository with the result
  # drop all existing service files
  for (keys %$files) {
    delete $files->{$_} if /^_service[_:]/;
  }
  # add new service files
  eval {
    die(readstr("$odir/.errors") || "empty .errors file\n") if -e "$odir/.errors";
    for my $pfile (ls($odir)) {
      die("service returned a non-_service file: $pfile\n") if !$noprefix && $pfile !~ /^_service[_:]/;
      BSVerify::verify_filename($pfile);
      $files->{$pfile} = BSSrcrep::addfile($projid, $packid, "$odir/$pfile", $pfile);
    }
  };
  my $error = $@;
  BSUtil::cleandir($odir);
  rmdir($odir);
  return $error;
}

sub generate_obs_scm_bridge_service {
  my ($data) = @_;
  die("bad obs_scm_bridge data\n") unless $data->{'name'} eq 'obs_scm_bridge' && $data->{'url'};
  my $services = {
    'service' => [ {
      'name' => 'obs_scm_bridge',
      'param' => [ { 'name' => 'url', '_content' => $data->{'url'} } ],
    } ],
  };
  return BSUtil::toxml($services, $BSXML::services);
}

sub generate_obsscm_rev {
  my ($projid, $packid, $data) = @_;
  my $rev = { 'project' => $projid, 'package' => $packid, 'rev' => 'obsscm', 'run' => $data->{'run'}, 'user' => $data->{'user'}, 'comment' => $data->{'comment'} };
  return $rev;
}

sub runservice_obsscm {
  my ($projid, $packid, $servicemark, $run) = @_;
  my $data = BSSrcrep::readobsscmdata($projid, $packid, $servicemark);
  return undef unless $data && $data->{'run'} eq $run;	# obsolete run?
  my $rev = generate_obsscm_rev($projid, $packid, $data);
  my @send;
  push @send, { 'name' => '_service', 'data' => generate_obs_scm_bridge_service($data) };
  my $files = {};
  my $error = doservicerpc($projid, $packid, $files, \@send, 1);
  addrev_service($rev, $servicemark, $files, $error);
  return $error ? 'failed' : 'succeeded';
}

sub runservice {
  my ($projid, $packid, $servicemark, $srcmd5, $revid, $lxservicemd5, $projectservicesmd5, $oldsrcmd5) = @_;

  BSUtil::printlog("dispatching service (timeout: $BSConfig::service_timeout) $projid/$packid $servicemark $srcmd5");
  return runservice_obsscm($projid, $packid, $servicemark, $srcmd5) if $revid && $revid eq 'obsscm';
  # get revision and file list
  my $rev;
  if ($revid) {
    eval {
      $rev = getrev($projid, $packid, $revid);
    };
  }
  if (!$rev || $rev->{'srcmd5'} ne $srcmd5) {
    $rev = getrev($projid, $packid, $srcmd5);
  }
  my $linkinfo = {};
  my $files = BSRevision::lsrev($rev, $linkinfo);
  die("servicemark mismatch\n") unless ($linkinfo->{'xservicemd5'} || '') eq $servicemark;

  # check if in progress
  my $serviceerror = BSSrcrep::getserviceerror($projid, $packid, $servicemark);
  return undef if $serviceerror ne 'service in progress';
 
  # get files to send to service daemon
  my $sendfiles = $files;
  if ($lxservicemd5) {
    my $lrev = getrev($projid, $packid, $lxservicemd5);
    $sendfiles = BSRevision::lsrev($lrev);
    # drop all service files
    delete $sendfiles->{$_} for grep {/^_service:/} keys %$sendfiles;
  }

  # get old files
  my $oldfiles;
  if ($oldsrcmd5) {
    my $oldrev = getrev($projid, $packid, $oldsrcmd5);
    $oldfiles = BSRevision::lsrev($oldrev);
    delete $oldfiles->{$_} for grep {!/^_service:/} keys %$oldfiles;
  }
  $oldfiles ||= {};

  my @send = map {BSRevision::revcpiofile($rev, $_, $sendfiles->{$_})} sort(keys %$sendfiles);
  push @send, BSRevision::revcpiofile({'project' => $projid, 'package' => '_project'}, '_serviceproject', $projectservicesmd5) if $projectservicesmd5;
  push @send, map {BSRevision::revcpiofile($rev, $_, $oldfiles->{$_})} grep {!$sendfiles->{$_}} sort(keys %$oldfiles);

  my $error = doservicerpc($projid, $packid, $files, \@send);
  addrev_service($rev, $servicemark, $files, $error, $lxservicemd5);
  return $error ? 'failed' : 'succeeded';
}

sub getevent {
  my ($req, $notdue, $nofork) = BSStdRunner::getevent(@_);
  if ($req && $req->{'ev'} && $req->{'conf'}->{'limitinprogress'}) {
    my ($projid, $packid) = ($req->{'ev'}->{'project'}, $req->{'ev'}->{'package'});
    if ($projid && $packid) {
      my @inprogress = grep {/^servicedispatch:\Q$projid\E::\Q$packid\E::.*::inprogress$/} ls($req->{'conf'}->{'eventdir'});
      if (@inprogress >= $req->{'conf'}->{'limitinprogress'}) {
        return (undef, 1);
      }
    }
  }
  return ($req, $notdue, $nofork);
}

sub servicedispatchstats {
  my ($req, $job, $projid, $packid, $code, $starttime, $endtime) = @_;
  my $ev = $req->{'ev'};
  return unless $ev;
  my $createtime = $ev->{'time'} || $starttime;
  $job =~ s/\s/_/g;
  print "servicedispatch statistics: $job $projid/$packid/- $code $createtime-$starttime-$endtime\n";
}

sub servicedispatchevent {
  my ($req, $projid, $packid, $job, @args) = @_;
  my $starttime = time();
  my $code;
  eval {
    $code = runservice($projid, $packid, $job, @args);
  };
  if ($@) {
    # retry in 10 minutes
    servicedispatchstats($req, $job, $projid, $packid, 'retry', $starttime, time());
    BSStdRunner::setdue($req, time() + 10 * 60);
    die($@);
  }
  servicedispatchstats($req, $job, $projid, $packid, $code, $starttime, time()) if $code;
  return 1;
}

my $dispatches = [
  'servicedispatch $project $package $job $srcmd5 $rev? $linksrcmd5? $projectservicesmd5? $oldsrcmd5?' => \&servicedispatchevent,
];

my $conf = {
  'eventdir' => $myeventdir,
  'dispatches' => $dispatches,
  'maxchild' => $maxchild,
  'getevent' => \&getevent,
  'inprogress' => 1,
};
$conf->{'limitinprogress'} = $BSConfig::servicedispatch_limitinprogress if $BSConfig::servicedispatch_limitinprogress;

BSStdRunner::run('bs_servicedispatch', \@ARGV, $conf);
