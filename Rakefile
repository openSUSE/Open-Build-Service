CONTAINER_USERID = %x(id -u).freeze
VERSION = '42.3'.freeze

namespace :docker do
  desc 'Build our development environment'
  task :build do
    begin
      sh 'echo "# This file is generated by our Rakefile. Do not change it!" > docker-compose.override.yml'
      # rubocop:disable Metrics/LineLength
      sh "echo \"version: \'2\'\nservices:\n  frontend:\n    build:\n      args:\n        CONTAINER_USERID: #{CONTAINER_USERID}\" >> docker-compose.override.yml"
      # rubocop:enable Metrics/LineLength
      # Build the frontend container
      sh 'docker-compose build frontend'
      # Bootstrap the app
      sh 'docker-compose up -d db'
      sh 'docker-compose run --no-deps --rm frontend bundle exec rake dev:bootstrap RAILS_ENV=development'
    ensure
      sh 'docker-compose stop'
    end
  end

  namespace :test do
    desc 'Run our frontend tests in the docker container'
    task :frontend do
      begin
        sh 'docker-compose -f docker-compose.ci.yml up --abort-on-container-exit'
      ensure
        sh 'docker-compose -f docker-compose.ci.yml stop'
      end
    end

    desc 'Run our backend tests in the docker container'
    task :backend do
      begin
        sh 'docker-compose run --rm -w /obs backend make -C src/backend test'
      ensure
        sh 'docker-compose stop'
      end
    end

    desc 'Scan the code base for syntax/code problems'
    task :lint do
      begin
        cmd = '/bin/bash -c "bundle exec rake --tasks && bundle exec rake dev:bootstrap && bundle exec rake dev:lint"'
        environment = "-e TRAVIS_BRANCH=#{ENV['TRAVIS_BRANCH']} "
        environment << "-e TRAVIS_PULL_REQUEST_BRANCH=#{ENV['TRAVIS_PULL_REQUEST_BRANCH']} "
        environment << "-e TRAVIS_PULL_REQUEST_SLUG=#{ENV['TRAVIS_PULL_REQUEST_SLUG']} "
        environment << "-e TRAVIS=#{ENV['TRAVIS']} "
        sh "docker-compose -f docker-compose.ci.yml run #{environment} --rm rspec #{cmd}"
      ensure
        sh 'docker-compose -f docker-compose.ci.yml stop'
      end
    end

    desc 'Run the spider test to crawl all pages and fail for exceptions'
    task :spider do
      begin
        cmd = 'bundle exec rake dev:bootstrap[old_test_suite] RAILS_ENV=test &> /dev/null; '
        cmd << 'bundle exec rails test:spider'
        sh "docker-compose -f docker-compose.ci_old.yml run --rm old-test-suite /bin/bash -c '#{cmd}'"
      ensure
        sh 'docker-compose -f docker-compose.ci.yml stop'
      end
    end

    namespace :old do
      desc 'Run our old api test suite in the docker container'
      task :api do
        begin
          sh 'docker-compose -f docker-compose.ci_old.yml up --build --abort-on-container-exit'
        ensure
          sh 'docker-compose -f docker-compose.ci_old.yml stop'
        end
      end
    end
  end

  namespace :maintainer do
    def tags_for(container_type)
      "-t openbuildservice/#{container_type}:#{VERSION} -t openbuildservice/#{container_type}"
    end

    desc 'Rebuild all our static containers'
    multitask rebuild: ['rebuild:all'] do
    end
    namespace :rebuild do
      multitask all: [:base, :backend, 'frontend-base', :mariadb, :memcached, 'old-test-suite'] do
      end
      task :base do
        sh "docker build docker-files/base/ #{tags_for(:base)} -f docker-files/base/Dockerfile.#{VERSION}"
      end
      task mariadb: [:base] do
        sh "docker build docker-files/mariadb/ #{tags_for(:mariadb)} -f docker-files/mariadb/Dockerfile.mariadb"
      end
      task memcached: [:base] do
        sh "docker build docker-files/memcached/ #{tags_for(:memcached)} -f docker-files/memcached/Dockerfile.memcached"
      end
      task 'frontend-base' => [:base] do
        sh "docker build src/api/ #{tags_for('frontend-base')} -f src/api/docker-files/Dockerfile.frontend-base"
      end
      task backend: [:base] do
        sh "docker build src/backend/ #{tags_for(:backend)} -f src/backend/docker-files/Dockerfile.backend"
      end
      task 'old-test-suite' => [:base] do
        sh "docker build src/api/ #{tags_for('old-test-suite')} -f src/api/docker-files/Dockerfile.old-test-suite"
      end
    end

    desc 'Rebuild and publish all our static containers'
    task publish: [:rebuild, 'publish:all'] do
    end
    namespace :publish do
      multitask all: [:base, :mariadb, :memcached, :backend, 'frontend-base', 'old-test-suite'] do
      end
      task :base do
        sh "docker push openbuildservice/base:#{VERSION}"
        sh 'docker push openbuildservice/base'
      end
      task :mariadb do
        sh "docker push openbuildservice/mariadb:#{VERSION}"
        sh 'docker push openbuildservice/mariadb'
      end
      task :memcached do
        sh "docker push openbuildservice/memcached:#{VERSION}"
        sh 'docker push openbuildservice/memcached'
      end
      task :backend do
        sh "docker push openbuildservice/backend:#{VERSION}"
        sh 'docker push openbuildservice/backend'
      end
      task 'frontend-base' do
        sh "docker push openbuildservice/frontend-base:#{VERSION}"
        sh 'docker push openbuildservice/frontend-base'
      end
      task 'old-test-suite' do
        sh "docker push openbuildservice/old-test-suite:#{VERSION}"
        sh 'docker push openbuildservice/old-test-suite'
      end
    end
  end
end
